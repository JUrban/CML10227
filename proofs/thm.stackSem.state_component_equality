Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.stackSem
% (8989)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 206
% Passive clauses: 1341
% Generated clauses: 25262
% Final active clauses: 89
% Final passive clauses: 675
% Input formulas: 6
% Initial clauses: 38
% 
% Duplicate literals: 2062
% Trivial inequalities: 380
% Fw subsumption resolutions: 3030
% Fw demodulations: 2396
% Bw demodulations: 35
% 
% Simple tautologies: 450
% Equational tautologies: 108
% Forward subsumptions: 12388
% Fw demodulations to eq. taut.: 15
% Bw demodulations to eq. taut.: 12
% 
% Binary resolution: 39
% Forward superposition: 8801
% Backward superposition: 6954
% Self superposition: 302
% Equality factoring: 250
% Equality resolution: 45
% 
% Split clauses: 2190
% Split components: 4455
% SAT solver clauses: 3332
% SAT solver unit clauses: 15
% SAT solver binary clauses: 265
% SAT solver learnt clauses: 7
% SAT solver learnt literals: 27
% 
% Sat splits: 2190
% Sat splitting refutations: 46
% 
% TWLsolver clauses: 3257
% TWLsolver calls for satisfiability: 191
% 
% Memory used [KB]: 8827
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.stackSem
% (9005)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 86
% Passive clauses: 224
% Generated clauses: 9787
% Final active clauses: 38
% Final passive clauses: 70
% Input formulas: 6
% Initial clauses: 38
% 
% Duplicate literals: 1024
% Trivial inequalities: 133
% Fw subsumption resolutions: 583
% Fw demodulations: 1498
% Bw demodulations: 78
% Condensations: 1644
% 
% Simple tautologies: 149
% Equational tautologies: 79
% Forward subsumptions: 3378
% Fw demodulations to eq. taut.: 14
% Bw demodulations to eq. taut.: 12
% 
% Binary resolution: 9
% Forward superposition: 1605
% Backward superposition: 1338
% Self superposition: 170
% Equality factoring: 168
% Equality resolution: 26
% 
% Split clauses: 330
% Split components: 676
% SAT solver clauses: 1054
% SAT solver unit clauses: 24
% SAT solver binary clauses: 138
% SAT solver learnt clauses: 4
% SAT solver learnt literals: 19
% 
% Sat splits: 330
% Sat splitting refutations: 38
% 
% TWLsolver clauses: 1041
% TWLsolver calls for satisfiability: 1323
% 
% Memory used [KB]: 4989
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.stackSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.stackSem
% SZS output start Proof for thm.stackSem
fof(f52690,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f39,f94,f92,f90,f88,f86,f84,f82,f80,f78,f76,f74,f72,f70,f68,f66,f64,f62,f38,f93,f37,f91,f36,f89,f35,f87,f34,f85,f33,f83,f32,f81,f31,f79,f30,f77,f29,f75,f28,f73,f27,f71,f26,f69,f25,f67,f24,f65,f23,f63,f61,f97,f98,f99,f100,f103,f112,f110,f104,f116,f114,f105,f120,f118,f106,f124,f122,f108,f127,f132,f133,f134,f135,f141,f143,f145,f147,f149,f151,f153,f155,f157,f159,f161,f163,f2489,f2488,f2434,f2522,f2416,f2399,f2520,f3820,f3819,f3763,f3852,f3745,f3726,f3851,f5748,f5747,f5689,f5780,f5671,f5650,f5779,f5897,f8667,f8666,f8606,f8699,f8588,f8565,f8698,f9115,f9148,f13718,f13835,f13836,f13879,f14002,f14003,f15471,f15461,f15507,f15353,f15682,f15722,f16004,f16009,f16229,f16230,f16231,f16232,f20039,f20150,f20151,f4524,f20199,f20197,f2945,f20202,f20200,f2799,f121,f20203,f20218,f20231,f20235,f20236,f20237,f20238,f20239,f20240,f20241,f20242,f20243,f20244,f20245,f20246,f20247,f20248,f20249,f20250,f20251,f20252,f20253,f20254,f20255,f20256,f20257,f20258,f20259,f20260,f20281,f20282,f20283,f20284,f20285,f20286,f20287,f20288,f20289,f20290,f20291,f20293,f20294,f20295,f20296,f20297,f20298,f20299,f20300,f20301,f20302,f20303,f20304,f20305,f20306,f20309,f20310,f20313,f20316,f20319,f20320,f20321,f20322,f20325,f20326,f20329,f20332,f20335,f20336,f20337,f20338,f20339,f20340,f20341,f20342,f20343,f20346,f20352,f20356,f20361,f20364,f20368,f20371,f20381,f20391,f20401,f20411,f20412,f20413,f20075,f20078,f20423,f20135,f20132,f20094,f20093,f20046,f20045,f20419,f23888,f24321,f24322,f24323,f24324,f24325,f24326,f24327,f24328,f24329,f24330,f24331,f24332,f24333,f24334,f24335,f24336,f24337,f24338,f24339,f24340,f24341,f24342,f24343,f24344,f24345,f24346,f24348,f24350,f24352,f24354,f24356,f24358,f24359,f24361,f24363,f24365,f24367,f24369,f24371,f24372,f24373,f24375,f24377,f24379,f24381,f24383,f24385,f24386,f24388,f24390,f24392,f24394,f24396,f24398,f24399,f24401,f24403,f24405,f24407,f24409,f24411,f24412,f24414,f24416,f24418,f24420,f24422,f24424,f24425,f24427,f24429,f24431,f24433,f24435,f24437,f24438,f24440,f24442,f24444,f24446,f24448,f24450,f24451,f24453,f24455,f24457,f24459,f24461,f24463,f24464,f24466,f24468,f24470,f24472,f24474,f24476,f24477,f24479,f24481,f24483,f24485,f24487,f24489,f24490,f24492,f24494,f24496,f24498,f24500,f24502,f24503,f24505,f24507,f24509,f24511,f24513,f24515,f24516,f24518,f24520,f24522,f24524,f24526,f24528,f24529,f24531,f24533,f24535,f24537,f24539,f24541,f24542,f24544,f24546,f24548,f24550,f24552,f24554,f24555,f24557,f24559,f24561,f24563,f24565,f24567,f24568,f24570,f24572,f24574,f24576,f24578,f24580,f24581,f24583,f24585,f24587,f24589,f24591,f24593,f24594,f24596,f24598,f24600,f24602,f24604,f24606,f24607,f24609,f24611,f24613,f24615,f24617,f24619,f24620,f24622,f24624,f24626,f24628,f24630,f24632,f24633,f24635,f24637,f24639,f24641,f24642,f24643,f24644,f24645,f24646,f24647,f24648,f24649,f24651,f24653,f24655,f24657,f24659,f24661,f24663,f24665,f24667,f24669,f24671,f24673,f24675,f24677,f24679,f24681,f24683,f24685,f24687,f24689,f24691,f24693,f24695,f24697,f24699,f24701,f24703,f24705,f24707,f24709,f24711,f24713,f24715,f24717,f24719,f24721,f24723,f24725,f24727,f24729,f24731,f24733,f24735,f24737,f24739,f24741,f24743,f24745,f24746,f24748,f24750,f24752,f24754,f24756,f24758,f24759,f24761,f24763,f24765,f24767,f24769,f24771,f24772,f24774,f24776,f24778,f24780,f24782,f24784,f24785,f24787,f24789,f24791,f24793,f24795,f24797,f24798,f24800,f24802,f24804,f24806,f24808,f24810,f24811,f24813,f24815,f24817,f24819,f24821,f24823,f24824,f24826,f24828,f24830,f24832,f24834,f24836,f24837,f24839,f24841,f24843,f24845,f24847,f24849,f24850,f24852,f24854,f24856,f24858,f24860,f24862,f24863,f24865,f24867,f24869,f24871,f24873,f24875,f24876,f24878,f24880,f24882,f24884,f24886,f24888,f24889,f24891,f24893,f24895,f24897,f24899,f24901,f24915,f24929,f24943,f24957,f24958,f24959,f24960,f24961,f24962,f24963,f24964,f24965,f24966,f24967,f24968,f25673,f25632,f25691,f20420,f25721,f27036,f28553,f28556,f28555,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28564,f28562,f28475,f28476,f28477,f28478,f28558,f28565,f28479,f28563,f28566,f28480,f28567,f28568,f28569,f28570,f28571,f28572,f28573,f28559,f29007,f29792,f30233,f30234,f30235,f30236,f30237,f30238,f30239,f30240,f30241,f30242,f30243,f30244,f30245,f30246,f30247,f30248,f30249,f30250,f30328,f31605,f9116,f30612,f30609,f30595,f30592,f31608,f30524,f30521,f30508,f30505,f31610,f30435,f30432,f126,f31612,f31834,f31878,f31880,f31882,f31884,f31885,f32118,f32137,f32150,f32154,f32155,f32156,f32157,f32158,f32159,f32160,f32161,f32162,f32163,f32164,f32165,f32166,f32167,f32168,f32169,f32170,f32171,f32172,f32173,f32174,f32175,f32176,f32177,f32178,f32179,f32325,f32326,f32327,f32328,f33363,f34098,f34099,f34100,f34097,f34101,f34102,f34103,f34104,f34105,f34106,f34107,f34108,f34109,f34110,f34111,f34112,f34113,f34116,f34119,f34122,f34125,f34128,f34131,f34134,f34137,f34140,f34141,f34142,f34143,f34144,f34145,f34146,f34147,f34148,f34149,f33991,f34182,f37295,f37221,f37203,f37326,f37469,f125,f37470,f37538,f37541,f37543,f37092,f37149,f2521,f37539,f37941,f38578,f38641,f38643,f38897,f40651,f40654,f40652,f15506,f41751,f41752,f28561,f41854,f41753,f41754,f41856,f41855,f42348,f42601,f42682,f42683,f42695,f42707,f42719,f42731,f42732,f42733,f42734,f42735,f42736,f44677,f44863,f45574,f45754,f45898,f48136,f48141,f49478,f49706,f49934,f50742,f51328,f52689])).
fof(f52689,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f52688,f77])).
fof(f52688,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f52687,f62])).
fof(f52687,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f52686,f116])).
fof(f52686,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f52685,f120])).
fof(f52685,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f52684,f124])).
fof(f52684,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f52683,f50856])).
fof(f50856,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl34)),
  inference(backward_demodulation,[],[f110,f79])).
fof(f52683,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl48)),
  inference(trivial_inequality_removal,[],[f52682])).
fof(f52682,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl48)),
  inference(equality_resolution,[],[f51438])).
fof(f51438,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl48)),
  inference(backward_demodulation,[],[f116,f51337])).
fof(f51337,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl44 | $spl48)),
  inference(forward_demodulation,[],[f51336,f63])).
fof(f51336,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl44 | $spl48)),
  inference(forward_demodulation,[],[f51335,f65])).
fof(f51335,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl44 | $spl48)),
  inference(forward_demodulation,[],[f51334,f67])).
fof(f51334,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl44 | $spl48)),
  inference(forward_demodulation,[],[f51333,f69])).
fof(f51333,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl44 | $spl48)),
  inference(forward_demodulation,[],[f51332,f71])).
fof(f51332,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl44 | $spl48)),
  inference(forward_demodulation,[],[f51331,f73])).
fof(f51331,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl44 | $spl48)),
  inference(forward_demodulation,[],[f51330,f75])).
fof(f51330,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl44 | $spl48)),
  inference(forward_demodulation,[],[f51329,f110])).
fof(f51329,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl44 | $spl48)),
  inference(forward_demodulation,[],[f48153,f50854])).
fof(f50854,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl32 | $spl48)),
  inference(backward_demodulation,[],[f124,f93])).
fof(f48153,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44)),
  inference(forward_demodulation,[],[f48152,f81])).
fof(f48152,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44)),
  inference(forward_demodulation,[],[f48151,f45901])).
fof(f45901,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl22 | $spl44)),
  inference(forward_demodulation,[],[f83,f120])).
fof(f48151,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30)),
  inference(forward_demodulation,[],[f48150,f85])).
fof(f48150,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl26 | $spl28 | $spl30)),
  inference(forward_demodulation,[],[f48149,f87])).
fof(f48149,plain,(
  ( ! [X0] : (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl30)),
  inference(forward_demodulation,[],[f46899,f91])).
fof(f46899,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | $spl28),
  inference(superposition,[],[f60,f89])).
fof(f60,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0,X1,X2,X3] : ((s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))))) & (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3)))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2,X3] : ((s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))))) & ((s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3)))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3)))),
  inference(nnf_transformation,[],[f14])).
fof(f14,plain,(
  ! [X0,X1,X2,X3] : (s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) <=> (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3)))))),
  inference(flattening,[],[f13])).
fof(f13,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) <=> (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : ! [X9,X8] : (s('type.stackSem.state'(X6,X7),X8) = s('type.stackSem.state'(X6,X7),X9) <=> (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.list.list'('type.wordSem.word_loc'(X6)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.list.list'('type.wordSem.word_loc'(X6)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.list.list'('type.fcp.cart'(bool,X6)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.list.list'('type.fcp.cart'(bool,X6)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X6,X7),X9))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X6,X7),X8))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X6,X7),X9))) & s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X6,X7),X8))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X6,X7),X9))) & s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X6,X7),X8))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X6,X7),X9))) & s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X6,X7),X8))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.sptree.spt'('type.stackLang.prog'(X6)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.sptree.spt'('type.stackLang.prog'(X6)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.ffi.ffi_state'(X7),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.ffi.ffi_state'(X7),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X6,X7),X9))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X6,X7),X8))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X6,X7),X9))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X6,X7),X8))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X6,X7),X9)))))),
  file('thm.stackSem.state_component_equality','thm.stackSem.stackSem_475_prove_ltb')).
fof(f51328,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f51327,f77])).
fof(f51327,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f51326,f62])).
fof(f51326,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f51325,f50856])).
fof(f51325,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f51324,f120])).
fof(f51324,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f51323,f49815])).
fof(f49815,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl38)),
  inference(backward_demodulation,[],[f114,f81])).
fof(f51323,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f51322,f124])).
fof(f51322,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl44 | $spl48)),
  inference(trivial_inequality_removal,[],[f51321])).
fof(f51321,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl44 | $spl48)),
  inference(equality_resolution,[],[f50858])).
fof(f50858,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl44 | $spl48)),
  inference(backward_demodulation,[],[f50856,f50855])).
fof(f50855,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44 | $spl48)),
  inference(backward_demodulation,[],[f124,f50751])).
fof(f50751,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44)),
  inference(forward_demodulation,[],[f50750,f63])).
fof(f50750,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44)),
  inference(forward_demodulation,[],[f50749,f65])).
fof(f50749,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44)),
  inference(forward_demodulation,[],[f50748,f67])).
fof(f50748,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44)),
  inference(forward_demodulation,[],[f50747,f69])).
fof(f50747,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44)),
  inference(forward_demodulation,[],[f50746,f71])).
fof(f50746,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44)),
  inference(forward_demodulation,[],[f50745,f73])).
fof(f50745,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44)),
  inference(forward_demodulation,[],[f50744,f75])).
fof(f50744,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44)),
  inference(forward_demodulation,[],[f50743,f79])).
fof(f50743,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44)),
  inference(forward_demodulation,[],[f48266,f49815])).
fof(f48266,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl44)),
  inference(forward_demodulation,[],[f48265,f81])).
fof(f48265,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl44)),
  inference(forward_demodulation,[],[f42720,f45901])).
fof(f42720,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl32)),
  inference(forward_demodulation,[],[f24946,f93])).
fof(f24946,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30)),
  inference(forward_demodulation,[],[f24945,f85])).
fof(f24945,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl26 | $spl28 | $spl30)),
  inference(forward_demodulation,[],[f24944,f87])).
fof(f24944,plain,(
  ( ! [X0] : (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl30)),
  inference(forward_demodulation,[],[f4612,f91])).
fof(f4612,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | $spl28),
  inference(superposition,[],[f60,f89])).
fof(f50742,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f50741,f77])).
fof(f50741,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f50740,f62])).
fof(f50740,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f50739,f112])).
fof(f50739,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f50738,f120])).
fof(f50738,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f50737,f48277])).
fof(f48277,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl32 | $spl46)),
  inference(backward_demodulation,[],[f122,f93])).
fof(f50737,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f50736,f49815])).
fof(f50736,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl46)),
  inference(trivial_inequality_removal,[],[f50735])).
fof(f50735,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl46)),
  inference(equality_resolution,[],[f50032])).
fof(f50032,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl46)),
  inference(backward_demodulation,[],[f112,f50031])).
fof(f50031,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44 | $spl46)),
  inference(backward_demodulation,[],[f79,f49942])).
fof(f49942,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49941,f63])).
fof(f49941,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49940,f65])).
fof(f49940,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49939,f67])).
fof(f49939,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49938,f69])).
fof(f49938,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49937,f71])).
fof(f49937,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49936,f73])).
fof(f49936,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49935,f75])).
fof(f49935,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49806,f49815])).
fof(f49806,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f48266,f48277])).
fof(f49934,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49933,f77])).
fof(f49933,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49932,f62])).
fof(f49932,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49931,f49815])).
fof(f49931,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49930,f120])).
fof(f49930,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49929,f48277])).
fof(f49929,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl38 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49928,f49588])).
fof(f49588,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl34)),
  inference(backward_demodulation,[],[f110,f79])).
fof(f49928,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl38 | $spl44 | $spl46)),
  inference(trivial_inequality_removal,[],[f49927])).
fof(f49927,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl38 | $spl44 | $spl46)),
  inference(equality_resolution,[],[f49817])).
fof(f49817,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl38 | $spl44 | $spl46)),
  inference(backward_demodulation,[],[f49815,f49715])).
fof(f49715,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49714,f63])).
fof(f49714,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49713,f65])).
fof(f49713,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49712,f67])).
fof(f49712,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49711,f69])).
fof(f49711,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49710,f71])).
fof(f49710,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49709,f73])).
fof(f49709,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49708,f75])).
fof(f49708,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49707,f110])).
fof(f49707,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f48153,f122])).
fof(f49706,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49705,f77])).
fof(f49705,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49704,f62])).
fof(f49704,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49703,f49588])).
fof(f49703,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49702,f120])).
fof(f49702,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49701,f116])).
fof(f49701,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49700,f48277])).
fof(f49700,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl46)),
  inference(trivial_inequality_removal,[],[f49699])).
fof(f49699,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl46)),
  inference(equality_resolution,[],[f49589])).
fof(f49589,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl44 | $spl46)),
  inference(backward_demodulation,[],[f49588,f49587])).
fof(f49587,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl44 | $spl46)),
  inference(backward_demodulation,[],[f79,f49487])).
fof(f49487,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49486,f63])).
fof(f49486,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49485,f65])).
fof(f49485,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49484,f67])).
fof(f49484,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49483,f69])).
fof(f49483,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49482,f71])).
fof(f49482,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49481,f73])).
fof(f49481,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49480,f75])).
fof(f49480,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f49479,f48277])).
fof(f49479,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f48266,f116])).
fof(f49478,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49477,f77])).
fof(f49477,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49476,f62])).
fof(f49476,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49475,f116])).
fof(f49475,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49474,f120])).
fof(f49474,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49473,f112])).
fof(f49473,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f49472,f48277])).
fof(f49472,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl44 | $spl46)),
  inference(trivial_inequality_removal,[],[f49471])).
fof(f49471,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl44 | $spl46)),
  inference(equality_resolution,[],[f48281])).
fof(f48281,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl44 | $spl46)),
  inference(backward_demodulation,[],[f116,f48280])).
fof(f48280,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl44 | $spl46)),
  inference(backward_demodulation,[],[f48277,f48244])).
fof(f48244,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl44)),
  inference(forward_demodulation,[],[f48243,f63])).
fof(f48243,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl44)),
  inference(forward_demodulation,[],[f48242,f65])).
fof(f48242,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl44)),
  inference(forward_demodulation,[],[f48241,f67])).
fof(f48241,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl44)),
  inference(forward_demodulation,[],[f48240,f69])).
fof(f48240,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl44)),
  inference(forward_demodulation,[],[f48239,f71])).
fof(f48239,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl44)),
  inference(forward_demodulation,[],[f48238,f73])).
fof(f48238,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl44)),
  inference(forward_demodulation,[],[f48237,f75])).
fof(f48237,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl44)),
  inference(forward_demodulation,[],[f48236,f45900])).
fof(f45900,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl18 | $spl36)),
  inference(backward_demodulation,[],[f112,f79])).
fof(f48236,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl44)),
  inference(forward_demodulation,[],[f48235,f81])).
fof(f48235,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl44)),
  inference(forward_demodulation,[],[f42684,f45901])).
fof(f42684,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl32)),
  inference(forward_demodulation,[],[f24904,f93])).
fof(f24904,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30)),
  inference(forward_demodulation,[],[f24903,f85])).
fof(f24903,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl26 | $spl28 | $spl30)),
  inference(forward_demodulation,[],[f24902,f87])).
fof(f24902,plain,(
  ( ! [X0] : (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl30)),
  inference(forward_demodulation,[],[f12370,f91])).
fof(f12370,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | $spl28),
  inference(superposition,[],[f60,f89])).
fof(f48141,plain,(
  $false | ($spl83 | $spl128)),
  inference(subsumption_resolution,[],[f48140,f20199])).
fof(f48140,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl128)),
  inference(subsumption_resolution,[],[f47311,f37539])).
fof(f47311,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | $spl83),
  inference(superposition,[],[f20199,f42])).
fof(f42,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.stackSem.state_component_equality',aHL_BOOL_CASES)).
fof(f48136,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f48135,f77])).
fof(f48135,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f48134,f62])).
fof(f48134,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f48133,f120])).
fof(f48133,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f48132,f124])).
fof(f48132,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f48131,f44971])).
fof(f44971,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl38)),
  inference(backward_demodulation,[],[f114,f81])).
fof(f48131,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f48130,f112])).
fof(f48130,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl48)),
  inference(trivial_inequality_removal,[],[f48129])).
fof(f48129,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl48)),
  inference(equality_resolution,[],[f45903])).
fof(f45903,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl44 | $spl48)),
  inference(forward_demodulation,[],[f45902,f45901])).
fof(f45902,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl48)),
  inference(forward_demodulation,[],[f45785,f112])).
fof(f45785,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl48)),
  inference(forward_demodulation,[],[f45784,f63])).
fof(f45784,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl48)),
  inference(forward_demodulation,[],[f45783,f65])).
fof(f45783,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl48)),
  inference(forward_demodulation,[],[f45782,f67])).
fof(f45782,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl48)),
  inference(forward_demodulation,[],[f45781,f69])).
fof(f45781,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl48)),
  inference(forward_demodulation,[],[f45780,f71])).
fof(f45780,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl48)),
  inference(forward_demodulation,[],[f45779,f73])).
fof(f45779,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl48)),
  inference(forward_demodulation,[],[f45778,f75])).
fof(f45778,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl48)),
  inference(forward_demodulation,[],[f45777,f79])).
fof(f45777,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl48)),
  inference(forward_demodulation,[],[f45776,f114])).
fof(f45776,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f42720,f124])).
fof(f45898,plain,(
  $false | ($spl44 | $spl83 | $spl126)),
  inference(subsumption_resolution,[],[f20199,f45876])).
fof(f45876,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl44 | $spl126)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f120,f31607,f30612,f30609,f30595,f30592,f1046,f28520,f1701,f511,f490,f41,f59,f54,f53,f60,f52,f28548,f855,f835,f811,f763,f495,f493,f491,f37470])).
fof(f491,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,f(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f43,f95])).
fof(f493,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X11) != s(bool,f(s(X8,sK4(X9,X10,bool,X8)))) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK4(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f43,f95])).
fof(f495,plain,(
  ( ! [X17,X18,X16] : (s(bool,'T_0') = s(bool,g(s(X16,sK4(X17,X18,bool,X16)))) | s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'F_0') != s(bool,f(s(X16,sK4(X17,X18,bool,X16))))) )),
  inference(superposition,[],[f43,f42])).
fof(f763,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (s(bool,X100) != s(bool,f(s(X97,sK4(X98,X99,bool,X97)))) | s(fun(X97,bool),X98) = s(fun(X97,bool),X99) | s(bool,X100) = s(bool,X101) | s(bool,'T_0') = s(bool,X101) | s(bool,X102) = s(bool,g(s(X97,sK4(X98,X99,bool,X97)))) | s(bool,'T_0') = s(bool,X102)) )),
  inference(superposition,[],[f43,f236])).
fof(f811,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (s(bool,X100) != s(bool,f(s(X97,sK4(X98,X99,bool,X97)))) | s(fun(X97,bool),X98) = s(fun(X97,bool),X99) | s(bool,X101) = s(bool,g(s(X97,sK4(X98,X99,bool,X97)))) | s(bool,'T_0') = s(bool,X100) | s(bool,X101) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) )),
  inference(superposition,[],[f43,f236])).
fof(f835,plain,(
  ( ! [X94,X99,X97,X95,X98,X96] : (s(bool,X97) != s(bool,f(s(X94,sK4(X95,X96,bool,X94)))) | s(fun(X94,bool),X95) = s(fun(X94,bool),X96) | s(bool,X97) = s(bool,X98) | s(bool,'T_0') = s(bool,g(s(X94,sK4(X95,X96,bool,X94)))) | s(bool,X98) = s(bool,X99) | s(bool,'T_0') = s(bool,X99)) )),
  inference(superposition,[],[f43,f236])).
fof(f855,plain,(
  ( ! [X61,X64,X62,X60,X65,X63] : (s(bool,'T_0') != s(bool,f(s(X60,sK4(X61,X62,bool,X60)))) | s(fun(X60,bool),X61) = s(fun(X60,bool),X62) | s(bool,X63) = s(bool,X64) | s(bool,X64) = s(bool,g(s(X60,sK4(X61,X62,bool,X60)))) | s(bool,X63) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f43,f236])).
fof(f28548,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3) | s(bool,'F_0') != s(bool,f(s(X1,sK4(X2,X3,bool,X1)))) | s(bool,X4) = s(bool,g(s(X1,sK4(X2,X3,bool,X1)))) | s(bool,X0) = s(bool,X4)) )),
  inference(condensation,[],[f28547])).
fof(f28547,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s(bool,'T_0') = s(bool,X38) | s(fun(X35,bool),X36) = s(fun(X35,bool),X37) | s(bool,'F_0') != s(bool,f(s(X35,sK4(X36,X37,bool,X35)))) | s(bool,X39) = s(bool,g(s(X35,sK4(X36,X37,bool,X35)))) | s(bool,X39) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(duplicate_literal_removal,[],[f28492])).
fof(f28492,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s(bool,'T_0') = s(bool,X38) | s(fun(X35,bool),X36) = s(fun(X35,bool),X37) | s(bool,'F_0') != s(bool,f(s(X35,sK4(X36,X37,bool,X35)))) | s(bool,X39) = s(bool,g(s(X35,sK4(X36,X37,bool,X35)))) | s(bool,'T_0') = s(bool,X38) | s(bool,X39) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f495,f236])).
fof(f52,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f53,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f54,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f59,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f41,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f10])).
fof(f10,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.stackSem.state_component_equality',aHL_FALSITY)).
fof(f490,plain,(
  ( ! [X17,X18,X16] : (s(bool,'T_0') = s(bool,sK4(X16,X17,X18,bool)) | s(fun(bool,X18),X16) = s(fun(bool,X18),X17) | s(X18,f(s(bool,'F_0'))) != s(X18,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f43,f42])).
fof(f511,plain,(
  ( ! [X26,X24,X25] : (s(X26,f(s(bool,'T_0'))) != s(X26,g(s(bool,'T_0'))) | s(fun(bool,X26),X24) = s(fun(bool,X26),X25) | s(X26,f(s(bool,'F_0'))) != s(X26,g(s(bool,'F_0')))) )),
  inference(duplicate_literal_removal,[],[f510])).
fof(f510,plain,(
  ( ! [X26,X24,X25] : (s(X26,f(s(bool,'T_0'))) != s(X26,g(s(bool,'T_0'))) | s(fun(bool,X26),X24) = s(fun(bool,X26),X25) | s(fun(bool,X26),X24) = s(fun(bool,X26),X25) | s(X26,f(s(bool,'F_0'))) != s(X26,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f43,f490])).
fof(f1701,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,sK4(X2,X3,X4,bool)) | s(bool,X0) = s(bool,X1) | s(fun(bool,X4),X2) = s(fun(bool,X4),X3) | s(X4,f(s(bool,'F_0'))) != s(X4,g(s(bool,'F_0')))) )),
  inference(condensation,[],[f1700])).
fof(f1700,plain,(
  ( ! [X134,X132,X136,X135,X133,X137] : (s(bool,'T_0') = s(bool,X135) | s(bool,X136) = s(bool,sK4(X132,X133,X134,bool)) | s(bool,X136) = s(bool,X137) | s(bool,'T_0') = s(bool,X137) | s(fun(bool,X134),X132) = s(fun(bool,X134),X133) | s(X134,f(s(bool,'F_0'))) != s(X134,g(s(bool,'F_0')))) )),
  inference(duplicate_literal_removal,[],[f606])).
fof(f606,plain,(
  ( ! [X134,X132,X136,X135,X133,X137] : (s(bool,'T_0') = s(bool,X135) | s(bool,X136) = s(bool,sK4(X132,X133,X134,bool)) | s(bool,'T_0') = s(bool,X135) | s(bool,X136) = s(bool,X137) | s(bool,'T_0') = s(bool,X137) | s(fun(bool,X134),X132) = s(fun(bool,X134),X133) | s(X134,f(s(bool,'F_0'))) != s(X134,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f236,f490])).
fof(f28520,plain,(
  ( ! [X85,X86,X84] : (s(bool,'T_0') != s(bool,f(s(X84,sK4(X85,X86,bool,X84)))) | s(fun(X84,bool),X85) = s(fun(X84,bool),X86) | s(bool,'F_0') != s(bool,f(s(X84,sK4(X85,X86,bool,X84))))) )),
  inference(duplicate_literal_removal,[],[f28519])).
fof(f28519,plain,(
  ( ! [X85,X86,X84] : (s(bool,'T_0') != s(bool,f(s(X84,sK4(X85,X86,bool,X84)))) | s(fun(X84,bool),X85) = s(fun(X84,bool),X86) | s(fun(X84,bool),X85) = s(fun(X84,bool),X86) | s(bool,'F_0') != s(bool,f(s(X84,sK4(X85,X86,bool,X84))))) )),
  inference(superposition,[],[f43,f495])).
fof(f1046,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(duplicate_literal_removal,[],[f927])).
fof(f927,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(equality_factoring,[],[f236])).
fof(f31607,plain,(
  ( ! [X29] : (s(bool,X29) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X29)) ) | $spl44),
  inference(subsumption_resolution,[],[f30615,f41])).
fof(f30615,plain,(
  ( ! [X29] : (p(s(bool,'F_0')) | s(bool,X29) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X29)) ) | $spl44),
  inference(superposition,[],[f284,f120])).
fof(f962,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2)) )),
  inference(equality_factoring,[],[f236])).
fof(f1919,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f955,f95])).
fof(f955,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X2)) )),
  inference(equality_factoring,[],[f236])).
fof(f1045,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) = s(bool,X2) | s(bool,X2) != s(bool,X3) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X3)) )),
  inference(condensation,[],[f928])).
fof(f928,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) != s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(equality_factoring,[],[f236])).
fof(f854,plain,(
  ( ! [X59,X57,X54,X58,X56,X55] : (s(X56,f(s(bool,'T_0'))) != s(X56,g(s(bool,'T_0'))) | s(fun(bool,X56),X54) = s(fun(bool,X56),X55) | s(bool,X57) = s(bool,X58) | s(bool,X58) = s(bool,sK4(X54,X55,X56,bool)) | s(bool,X57) = s(bool,X59) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f43,f236])).
fof(f838,plain,(
  ( ! [X14,X15,X13,X16] : (p(s(bool,X13)) | s(bool,X14) = s(bool,X15) | s(bool,X13) = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f40,f236])).
fof(f834,plain,(
  ( ! [X92,X90,X88,X93,X91,X89] : (s(X90,f(s(bool,X91))) != s(X90,g(s(bool,X91))) | s(fun(bool,X90),X88) = s(fun(bool,X90),X89) | s(bool,X91) = s(bool,X92) | s(bool,'T_0') = s(bool,sK4(X88,X89,X90,bool)) | s(bool,X92) = s(bool,X93) | s(bool,'T_0') = s(bool,X93)) )),
  inference(superposition,[],[f43,f236])).
fof(f1229,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f1228])).
fof(f1228,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,X25)) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,X26) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(duplicate_literal_removal,[],[f817])).
fof(f817,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,X25)) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,X26) | s(bool,'T_0') = s(bool,X24) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f101,f236])).
fof(f810,plain,(
  ( ! [X94,X92,X95,X93,X91,X96] : (s(X93,f(s(bool,X94))) != s(X93,g(s(bool,X94))) | s(fun(bool,X93),X91) = s(fun(bool,X93),X92) | s(bool,X95) = s(bool,sK4(X91,X92,X93,bool)) | s(bool,'T_0') = s(bool,X94) | s(bool,X95) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(superposition,[],[f43,f236])).
fof(f762,plain,(
  ( ! [X94,X92,X95,X93,X91,X96] : (s(X93,f(s(bool,X94))) != s(X93,g(s(bool,X94))) | s(fun(bool,X93),X91) = s(fun(bool,X93),X92) | s(bool,X94) = s(bool,X95) | s(bool,'T_0') = s(bool,X95) | s(bool,X96) = s(bool,sK4(X91,X92,X93,bool)) | s(bool,'T_0') = s(bool,X96)) )),
  inference(superposition,[],[f43,f236])).
fof(f634,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X1) = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f236,f236])).
fof(f1699,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f1698])).
fof(f1698,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(duplicate_literal_removal,[],[f607])).
fof(f607,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f236,f42])).
fof(f1857,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X3) = s(bool,X4) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X1) = s(bool,X3)) )),
  inference(condensation,[],[f1856])).
fof(f1856,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X80) = s(bool,X81) | s(bool,X81) = s(bool,X82) | s(bool,'T_0') = s(bool,X82) | s(bool,'T_0') = s(bool,X83) | s(bool,X84) = s(bool,X85) | s(bool,X85) = s(bool,X86) | s(bool,'T_0') = s(bool,X86) | s(bool,X80) = s(bool,X84)) )),
  inference(duplicate_literal_removal,[],[f539])).
fof(f539,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X80) = s(bool,X81) | s(bool,X81) = s(bool,X82) | s(bool,'T_0') = s(bool,X82) | s(bool,'T_0') = s(bool,X83) | s(bool,'T_0') = s(bool,X83) | s(bool,X84) = s(bool,X85) | s(bool,X85) = s(bool,X86) | s(bool,'T_0') = s(bool,X86) | s(bool,X80) = s(bool,X84)) )),
  inference(superposition,[],[f236,f236])).
fof(f488,plain,(
  ( ! [X10,X8,X11,X9] : (s(X10,f(s(bool,X11))) != s(X10,g(s(bool,X11))) | s(fun(bool,X10),X8) = s(fun(bool,X10),X9) | s(bool,'T_0') = s(bool,sK4(X8,X9,X10,bool)) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f43,f95])).
fof(f486,plain,(
  ( ! [X2,X0,X3,X1] : (s(X2,f(s(bool,'T_0'))) != s(X2,g(s(bool,'T_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,X3) = s(bool,sK4(X0,X1,X2,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f43,f95])).
fof(f284,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f40,f95])).
fof(f236,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f95,f95])).
fof(f101,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f41,f42])).
fof(f95,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f42,f42])).
fof(f44,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f45,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f46,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f47,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f48,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f49,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f50,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f51,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f55,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f56,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f57,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f58,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f43,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK4(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK4(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK4(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK4(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f16])).
fof(f16,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f12])).
fof(f12,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f11])).
fof(f11,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.stackSem.state_component_equality',aHL_EXT)).
fof(f40,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.stackSem.state_component_equality',aHL_TRUTH)).
fof(f45754,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f45753,f77])).
fof(f45753,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f45752,f62])).
fof(f45752,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f45751,f45575])).
fof(f45575,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl34)),
  inference(backward_demodulation,[],[f110,f79])).
fof(f45751,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f45750,f32238])).
fof(f32238,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl42)),
  inference(forward_demodulation,[],[f83,f118])).
fof(f45750,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f45749,f124])).
fof(f45749,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f45748,f44971])).
fof(f45748,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl42 | $spl48)),
  inference(trivial_inequality_removal,[],[f45747])).
fof(f45747,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl42 | $spl48)),
  inference(equality_resolution,[],[f45576])).
fof(f45576,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl42 | $spl48)),
  inference(backward_demodulation,[],[f45575,f44973])).
fof(f44973,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl38 | $spl42 | $spl48)),
  inference(backward_demodulation,[],[f44971,f44970])).
fof(f44970,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl42 | $spl48)),
  inference(backward_demodulation,[],[f81,f44888])).
fof(f44888,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl42 | $spl48)),
  inference(forward_demodulation,[],[f44887,f63])).
fof(f44887,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl42 | $spl48)),
  inference(forward_demodulation,[],[f44886,f65])).
fof(f44886,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl42 | $spl48)),
  inference(forward_demodulation,[],[f44885,f67])).
fof(f44885,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl42 | $spl48)),
  inference(forward_demodulation,[],[f44884,f69])).
fof(f44884,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl42 | $spl48)),
  inference(forward_demodulation,[],[f44883,f71])).
fof(f44883,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl42 | $spl48)),
  inference(forward_demodulation,[],[f44882,f73])).
fof(f44882,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl42 | $spl48)),
  inference(forward_demodulation,[],[f44881,f75])).
fof(f44881,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl42 | $spl48)),
  inference(forward_demodulation,[],[f44880,f79])).
fof(f44880,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl42 | $spl48)),
  inference(forward_demodulation,[],[f42721,f124])).
fof(f42721,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl42)),
  inference(forward_demodulation,[],[f42720,f118])).
fof(f45574,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f45573,f77])).
fof(f45573,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f45572,f62])).
fof(f45572,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f45571,f112])).
fof(f45571,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f45570,f32238])).
fof(f45570,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f45569,f124])).
fof(f45569,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f45568,f44971])).
fof(f45568,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl42 | $spl48)),
  inference(trivial_inequality_removal,[],[f45567])).
fof(f45567,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl42 | $spl48)),
  inference(equality_resolution,[],[f44974])).
fof(f44974,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl42 | $spl48)),
  inference(backward_demodulation,[],[f112,f44973])).
fof(f44863,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f44862,f77])).
fof(f44862,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f44861,f62])).
fof(f44861,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f44860,f44682])).
fof(f44682,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl34)),
  inference(backward_demodulation,[],[f110,f79])).
fof(f44860,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f44859,f32238])).
fof(f44859,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f44858,f116])).
fof(f44858,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f44857,f124])).
fof(f44857,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl42 | $spl48)),
  inference(trivial_inequality_removal,[],[f44856])).
fof(f44856,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl42 | $spl48)),
  inference(equality_resolution,[],[f44683])).
fof(f44683,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl42 | $spl48)),
  inference(backward_demodulation,[],[f44682,f42747])).
fof(f42747,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42 | $spl48)),
  inference(forward_demodulation,[],[f42681,f124])).
fof(f42681,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(backward_demodulation,[],[f93,f42614])).
fof(f42614,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42613,f63])).
fof(f42613,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42612,f65])).
fof(f42612,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42611,f67])).
fof(f42611,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42610,f69])).
fof(f42610,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42609,f71])).
fof(f42609,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42608,f73])).
fof(f42608,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42607,f75])).
fof(f42607,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42606,f79])).
fof(f42606,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42605,f38900])).
fof(f38900,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl20 | $spl40)),
  inference(forward_demodulation,[],[f81,f116])).
fof(f42605,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl42)),
  inference(forward_demodulation,[],[f42604,f118])).
fof(f42604,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30)),
  inference(forward_demodulation,[],[f42603,f85])).
fof(f42603,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl26 | $spl28 | $spl30)),
  inference(forward_demodulation,[],[f42602,f87])).
fof(f42602,plain,(
  ( ! [X0] : (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl30)),
  inference(forward_demodulation,[],[f40677,f91])).
fof(f40677,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | $spl28),
  inference(superposition,[],[f60,f89])).
fof(f44677,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f44676,f77])).
fof(f44676,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f44675,f62])).
fof(f44675,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f44674,f124])).
fof(f44674,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f44673,f32238])).
fof(f44673,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f44672,f116])).
fof(f44672,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42 | $spl48)),
  inference(subsumption_resolution,[],[f44671,f112])).
fof(f44671,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42 | $spl48)),
  inference(trivial_inequality_removal,[],[f44670])).
fof(f44670,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42 | $spl48)),
  inference(equality_resolution,[],[f42740])).
fof(f42740,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42 | $spl48)),
  inference(forward_demodulation,[],[f42739,f124])).
fof(f42739,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42730,f112])).
fof(f42730,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42729,f63])).
fof(f42729,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42728,f65])).
fof(f42728,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42727,f67])).
fof(f42727,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42726,f69])).
fof(f42726,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42725,f71])).
fof(f42725,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42724,f73])).
fof(f42724,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42723,f75])).
fof(f42723,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42722,f79])).
fof(f42722,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42721,f38900])).
fof(f42736,plain,(
  $false | ($spl32 | $spl35 | $spl87 | $spl94)),
  inference(global_subsumption,[],[f109,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f27921,f28427,f30355,f31831,f1046,f28520,f1701,f511,f490,f41,f59,f54,f53,f60,f52,f28548,f855,f835,f811,f763,f495,f493,f491,f25691,f93,f42680,f20202])).
fof(f42680,plain,(
  p(s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) | ($spl32 | $spl94)),
  inference(backward_demodulation,[],[f93,f25691])).
fof(f31831,plain,(
  ( ! [X26,X27,X25] : (s(bool,'T_0') != s(bool,X25) | s(bool,X25) = s(bool,X26) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) ) | $spl87),
  inference(subsumption_resolution,[],[f27914,f20202])).
fof(f27914,plain,(
  ( ! [X26,X27,X25] : (s(bool,'T_0') != s(bool,X25) | s(bool,X25) = s(bool,X26) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | $spl87),
  inference(superposition,[],[f20202,f236])).
fof(f30355,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | $spl87),
  inference(unit_resulting_resolution,[],[f20202,f41,f284])).
fof(f28427,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X1)) ) | $spl87),
  inference(duplicate_literal_removal,[],[f28426])).
fof(f28426,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl87),
  inference(condensation,[],[f28425])).
fof(f28425,plain,(
  ( ! [X8,X7,X9] : (s(bool,X8) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X8) | s(bool,X7) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl87),
  inference(subsumption_resolution,[],[f27908,f95])).
fof(f27908,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') != s(bool,X7) | s(bool,X8) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X8) | s(bool,X7) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl87),
  inference(superposition,[],[f20202,f236])).
fof(f27921,plain,(
  ( ! [X21,X19,X20] : (s(bool,X19) = s(bool,X20) | s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,X21) | s(bool,X19) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | $spl87),
  inference(trivial_inequality_removal,[],[f27912])).
fof(f27912,plain,(
  ( ! [X21,X19,X20] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X19) = s(bool,X20) | s(bool,X20) = s(bool,X21) | s(bool,'T_0') = s(bool,X21) | s(bool,X19) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | $spl87),
  inference(superposition,[],[f20202,f236])).
fof(f22952,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | $spl87),
  inference(unit_resulting_resolution,[],[f41,f20202,f284])).
fof(f22663,plain,(
  ~p(s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) | $spl87),
  inference(unit_resulting_resolution,[],[f20202,f101])).
fof(f22644,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | $spl87),
  inference(unit_resulting_resolution,[],[f20202,f42])).
fof(f23306,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X1)) ) | $spl87),
  inference(trivial_inequality_removal,[],[f23286])).
fof(f23286,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X1) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X1)) ) | $spl87),
  inference(superposition,[],[f20202,f95])).
fof(f23305,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X4)) ) | $spl87),
  inference(trivial_inequality_removal,[],[f23289])).
fof(f23289,plain,(
  ( ! [X4] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X4) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X4)) ) | $spl87),
  inference(superposition,[],[f20202,f95])).
fof(f23686,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | $spl87),
  inference(condensation,[],[f23685])).
fof(f23685,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X1)) ) | $spl87),
  inference(condensation,[],[f23684])).
fof(f23684,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X6) | s(bool,X7) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X7)) ) | $spl87),
  inference(subsumption_resolution,[],[f23290,f95])).
fof(f23290,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X6) | s(bool,X7) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X7)) ) | $spl87),
  inference(superposition,[],[f20202,f236])).
fof(f23689,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X1)) ) | $spl87),
  inference(duplicate_literal_removal,[],[f23688])).
fof(f23688,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl87),
  inference(condensation,[],[f23687])).
fof(f23687,plain,(
  ( ! [X10,X8,X9] : (s(bool,X9) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X9) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | $spl87),
  inference(subsumption_resolution,[],[f23291,f95])).
fof(f23291,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') != s(bool,X8) | s(bool,X9) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X9) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | $spl87),
  inference(superposition,[],[f20202,f236])).
fof(f23304,plain,(
  ( ! [X12,X13,X11] : (s(bool,X11) = s(bool,X12) | s(bool,X12) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl87),
  inference(trivial_inequality_removal,[],[f23292])).
fof(f23292,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X11) = s(bool,X12) | s(bool,X12) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl87),
  inference(superposition,[],[f20202,f236])).
fof(f23303,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,X20) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | $spl87),
  inference(trivial_inequality_removal,[],[f23295])).
fof(f23295,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,X20) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | $spl87),
  inference(superposition,[],[f20202,f236])).
fof(f109,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl35),
  inference(cnf_transformation,[],[f109_D])).
fof(f109_D,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f42735,plain,(
  $false | ($spl32 | $spl36 | $spl87 | $spl94)),
  inference(global_subsumption,[],[f112,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f27921,f28427,f30355,f31831,f1046,f28520,f1701,f511,f490,f41,f59,f54,f53,f60,f52,f28548,f855,f835,f811,f763,f495,f493,f491,f25691,f93,f42680,f20202])).
fof(f42734,plain,(
  $false | ($spl32 | $spl47 | $spl87 | $spl94)),
  inference(global_subsumption,[],[f121,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f27921,f28427,f30355,f31831,f1046,f28520,f1701,f511,f490,f41,f59,f54,f53,f60,f52,f28548,f855,f835,f811,f763,f495,f493,f491,f25691,f93,f42680,f20202])).
fof(f42733,plain,(
  $false | ($spl32 | $spl48 | $spl87 | $spl94)),
  inference(global_subsumption,[],[f124,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f27921,f28427,f30355,f31831,f1046,f28520,f1701,f511,f490,f41,f59,f54,f53,f60,f52,f28548,f855,f835,f811,f763,f495,f493,f491,f25691,f93,f42680,f20202])).
fof(f42732,plain,(
  $false | ($spl32 | $spl87 | $spl94)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f27921,f28427,f30355,f31831,f1046,f28520,f1701,f511,f490,f41,f59,f54,f53,f60,f52,f28548,f855,f835,f811,f763,f495,f493,f491,f25691,f93,f42680,f20202])).
fof(f42731,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42 | $spl87 | $spl94)),
  inference(global_subsumption,[],[f42730,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f20202,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f27921,f28427,f30355,f31831,f1046,f28520,f1701,f511,f490,f41,f59,f54,f53,f60,f52,f28548,f855,f835,f811,f763,f495,f493,f491,f25691,f93,f42680])).
fof(f42719,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42 | $spl87 | $spl94)),
  inference(global_subsumption,[],[f42718,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f20202,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f27921,f28427,f30355,f31831,f1046,f28520,f1701,f511,f490,f41,f59,f54,f53,f60,f52,f28548,f855,f835,f811,f763,f495,f493,f491,f25691,f93,f42680])).
fof(f42718,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42717,f63])).
fof(f42717,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42716,f65])).
fof(f42716,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42715,f67])).
fof(f42715,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42714,f69])).
fof(f42714,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42713,f71])).
fof(f42713,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42712,f73])).
fof(f42712,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42711,f75])).
fof(f42711,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42710,f79])).
fof(f42710,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42709,f38900])).
fof(f42709,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl42)),
  inference(forward_demodulation,[],[f42708,f118])).
fof(f42708,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl32)),
  inference(forward_demodulation,[],[f24932,f93])).
fof(f24932,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30)),
  inference(forward_demodulation,[],[f24931,f85])).
fof(f24931,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl26 | $spl28 | $spl30)),
  inference(forward_demodulation,[],[f24930,f87])).
fof(f24930,plain,(
  ( ! [X0] : (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl30)),
  inference(forward_demodulation,[],[f4613,f91])).
fof(f4613,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | $spl28),
  inference(superposition,[],[f60,f89])).
fof(f42707,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42 | $spl87 | $spl94)),
  inference(global_subsumption,[],[f42706,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f20202,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f27921,f28427,f30355,f31831,f1046,f28520,f1701,f511,f490,f41,f59,f54,f53,f60,f52,f28548,f855,f835,f811,f763,f495,f493,f491,f25691,f93,f42680])).
fof(f42706,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42705,f63])).
fof(f42705,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42704,f65])).
fof(f42704,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42703,f67])).
fof(f42703,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42702,f69])).
fof(f42702,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42701,f71])).
fof(f42701,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42700,f73])).
fof(f42700,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42699,f75])).
fof(f42699,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42698,f79])).
fof(f42698,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42697,f38900])).
fof(f42697,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl42)),
  inference(forward_demodulation,[],[f42696,f118])).
fof(f42696,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl32)),
  inference(forward_demodulation,[],[f24918,f93])).
fof(f24918,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30)),
  inference(forward_demodulation,[],[f24917,f85])).
fof(f24917,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl26 | $spl28 | $spl30)),
  inference(forward_demodulation,[],[f24916,f87])).
fof(f24916,plain,(
  ( ! [X0] : (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl30)),
  inference(forward_demodulation,[],[f12369,f91])).
fof(f12369,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | $spl28),
  inference(superposition,[],[f60,f89])).
fof(f42695,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42 | $spl87 | $spl94)),
  inference(global_subsumption,[],[f42694,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f20202,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f27921,f28427,f30355,f31831,f1046,f28520,f1701,f511,f490,f41,f59,f54,f53,f60,f52,f28548,f855,f835,f811,f763,f495,f493,f491,f25691,f93,f42680])).
fof(f42694,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42693,f63])).
fof(f42693,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42692,f65])).
fof(f42692,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42691,f67])).
fof(f42691,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42690,f69])).
fof(f42690,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42689,f71])).
fof(f42689,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42688,f73])).
fof(f42688,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42687,f75])).
fof(f42687,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42686,f79])).
fof(f42686,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42)),
  inference(forward_demodulation,[],[f42685,f38900])).
fof(f42685,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl42)),
  inference(forward_demodulation,[],[f42684,f118])).
fof(f42683,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl42 | $spl87 | $spl94)),
  inference(global_subsumption,[],[f42681,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f20202,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f27921,f28427,f30355,f31831,f1046,f28520,f1701,f511,f490,f41,f59,f54,f53,f60,f52,f28548,f855,f835,f811,f763,f495,f493,f491,f25691,f93,f42680])).
fof(f42682,plain,(
  $false | ($spl32 | $spl87 | $spl94)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f20202,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f27921,f28427,f30355,f31831,f1046,f28520,f1701,f511,f490,f41,f59,f54,f53,f60,f52,f28548,f855,f835,f811,f763,f495,f493,f491,f25691,f93,f42680])).
fof(f42601,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f42600,f77])).
fof(f42600,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f42599,f62])).
fof(f42599,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f42598,f42420])).
fof(f42420,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl34)),
  inference(backward_demodulation,[],[f110,f79])).
fof(f42598,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl40 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f42597,f32372])).
fof(f32372,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl32 | $spl46)),
  inference(forward_demodulation,[],[f93,f122])).
fof(f42597,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl40 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f42596,f32238])).
fof(f42596,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl40 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f42595,f116])).
fof(f42595,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl40 | $spl42 | $spl46)),
  inference(trivial_inequality_removal,[],[f42594])).
fof(f42594,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl40 | $spl42 | $spl46)),
  inference(equality_resolution,[],[f42421])).
fof(f42421,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl40 | $spl42 | $spl46)),
  inference(backward_demodulation,[],[f42420,f42419])).
fof(f42419,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42 | $spl46)),
  inference(backward_demodulation,[],[f79,f42355])).
fof(f42355,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f42354,f63])).
fof(f42354,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f42353,f65])).
fof(f42353,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f42352,f67])).
fof(f42352,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f42351,f69])).
fof(f42351,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f42350,f71])).
fof(f42350,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f42349,f73])).
fof(f42349,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f40698,f75])).
fof(f40698,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f40697,f38900])).
fof(f40697,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f40696,f118])).
fof(f40696,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl46)),
  inference(forward_demodulation,[],[f40695,f85])).
fof(f40695,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl26 | $spl28 | $spl30 | $spl46)),
  inference(forward_demodulation,[],[f40694,f87])).
fof(f40694,plain,(
  ( ! [X0] : (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl30 | $spl46)),
  inference(forward_demodulation,[],[f40693,f91])).
fof(f40693,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl46)),
  inference(forward_demodulation,[],[f40677,f122])).
fof(f42348,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f42347,f77])).
fof(f42347,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f42346,f62])).
fof(f42346,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f42345,f32372])).
fof(f42345,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f42344,f32238])).
fof(f42344,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f42343,f116])).
fof(f42343,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f42342,f112])).
fof(f42342,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl42 | $spl46)),
  inference(trivial_inequality_removal,[],[f42341])).
fof(f42341,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl42 | $spl46)),
  inference(equality_resolution,[],[f38909])).
fof(f38909,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f38908,f63])).
fof(f38908,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f38907,f65])).
fof(f38907,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f38906,f67])).
fof(f38906,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f38905,f69])).
fof(f38905,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f38904,f71])).
fof(f38904,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f38903,f73])).
fof(f38903,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f38902,f75])).
fof(f38902,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f38901,f37957])).
fof(f37957,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl18 | $spl36)),
  inference(backward_demodulation,[],[f112,f79])).
fof(f38901,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f32333,f38900])).
fof(f32333,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f32332,f118])).
fof(f32332,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl46)),
  inference(forward_demodulation,[],[f24946,f122])).
fof(f41855,plain,(
  ( ! [X80,X81] : (s(fun(bool,bool),X80) = s(fun(bool,bool),X81) | s(bool,'F_0') = s(bool,sK4(X80,X81,bool,bool)) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X80,X81,bool,bool))))) ) | $spl134),
  inference(cnf_transformation,[],[f41855_D])).
fof(f41855_D,plain,(
  ( ! [X80,X81] : (s(fun(bool,bool),X80) = s(fun(bool,bool),X81) | s(bool,'F_0') = s(bool,sK4(X80,X81,bool,bool)) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X80,X81,bool,bool))))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f41856,plain,(
  ( ! [X82] : (s(bool,'T_0') = s(bool,g(s(bool,X82))) | s(bool,'F_0') = s(bool,X82)) ) | $spl136),
  inference(cnf_transformation,[],[f41856_D])).
fof(f41856_D,plain,(
  ( ! [X82] : (s(bool,'T_0') = s(bool,g(s(bool,X82))) | s(bool,'F_0') = s(bool,X82)) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f41754,plain,(
  ( ! [X85,X83,X84] : (s(bool,'T_0') = s(bool,g(s(bool,X85))) | s(fun(bool,bool),X83) = s(fun(bool,bool),X84) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X83,X84,bool,bool)))) | s(bool,'F_0') = s(bool,sK4(X83,X84,bool,bool)) | s(bool,'F_0') = s(bool,X85)) ) | ($spl22 | $spl42 | $spl45)),
  inference(superposition,[],[f495,f37804])).
fof(f37804,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | ($spl22 | $spl42 | $spl45)),
  inference(superposition,[],[f37150,f37150])).
fof(f37150,plain,(
  ( ! [X115] : (s(bool,X115) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') = s(bool,X115)) ) | ($spl22 | $spl42 | $spl45)),
  inference(trivial_inequality_removal,[],[f36784])).
fof(f36784,plain,(
  ( ! [X115] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X115) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') = s(bool,X115)) ) | ($spl22 | $spl42 | $spl45)),
  inference(superposition,[],[f32329,f32525])).
fof(f32525,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X0) = s(bool,X1)) ) | ($spl22 | $spl42)),
  inference(condensation,[],[f32524])).
fof(f32524,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,X8) | s(bool,X9) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X9) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | ($spl22 | $spl42)),
  inference(duplicate_literal_removal,[],[f32482])).
fof(f32482,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,X8) | s(bool,X9) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X8) | s(bool,X9) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | ($spl22 | $spl42)),
  inference(superposition,[],[f32238,f236])).
fof(f32329,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl22 | $spl42 | $spl45)),
  inference(forward_demodulation,[],[f119,f32238])).
fof(f119,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | $spl45),
  inference(cnf_transformation,[],[f119_D])).
fof(f119_D,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f41753,plain,(
  ( ! [X80,X81,X82] : (s(bool,'T_0') = s(bool,g(s(bool,X82))) | s(fun(bool,bool),X80) = s(fun(bool,bool),X81) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X80,X81,bool,bool)))) | s(bool,'F_0') = s(bool,X82) | s(bool,'F_0') = s(bool,sK4(X80,X81,bool,bool))) ) | ($spl22 | $spl42 | $spl45)),
  inference(superposition,[],[f495,f37804])).
fof(f41854,plain,(
  ( ! [X76,X74,X75] : (s(fun(bool,bool),X74) = s(fun(bool,bool),X75) | s(bool,'F_0') = s(bool,X76) | s(bool,X76) = s(bool,sK4(X74,X75,bool,bool)) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X74,X75,bool,bool))))) ) | $spl132),
  inference(cnf_transformation,[],[f41854_D])).
fof(f41854_D,plain,(
  ( ! [X76,X74,X75] : (s(fun(bool,bool),X74) = s(fun(bool,bool),X75) | s(bool,'F_0') = s(bool,X76) | s(bool,X76) = s(bool,sK4(X74,X75,bool,bool)) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X74,X75,bool,bool))))) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f28561,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl104),
  inference(cnf_transformation,[],[f28561_D])).
fof(f28561_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f41752,plain,(
  ( ! [X78,X79,X77] : (s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X77) = s(fun(bool,bool),X78) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X77,X78,bool,bool)))) | s(bool,X79) = s(bool,sK4(X77,X78,bool,bool)) | s(bool,'F_0') = s(bool,X79)) ) | ($spl22 | $spl42 | $spl45)),
  inference(superposition,[],[f495,f37804])).
fof(f41751,plain,(
  ( ! [X76,X74,X75] : (s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X74,X75,bool,bool)))) | s(bool,X76) = s(bool,sK4(X74,X75,bool,bool)) | s(bool,'F_0') = s(bool,X76)) ) | ($spl22 | $spl42 | $spl45)),
  inference(superposition,[],[f495,f37804])).
fof(f15506,plain,(
  ( ! [X102] : (s(bool,X102) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl74),
  inference(cnf_transformation,[],[f15506_D])).
fof(f15506_D,plain,(
  ( ! [X102] : (s(bool,X102) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f40652,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') != s(bool,X1)) ) | $spl130),
  inference(cnf_transformation,[],[f40652_D])).
fof(f40652_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') != s(bool,X1)) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f40654,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') != s(bool,X1) | s(bool,X2) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,X1)) ) | $spl78),
  inference(condensation,[],[f40653])).
fof(f40653,plain,(
  ( ! [X14,X15,X13,X16] : (s(bool,'F_0') != s(bool,X14) | s(bool,X13) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | $spl78),
  inference(subsumption_resolution,[],[f40590,f40567])).
fof(f40567,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl78),
  inference(superposition,[],[f15682,f42])).
fof(f40590,plain,(
  ( ! [X14,X15,X13,X16] : (s(bool,'F_0') != s(bool,X14) | s(bool,X13) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X13) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | $spl78),
  inference(superposition,[],[f15682,f236])).
fof(f40651,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') != s(bool,X1) | s(bool,X2) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,X1)) ) | $spl78),
  inference(condensation,[],[f40650])).
fof(f40650,plain,(
  ( ! [X12,X10,X11,X9] : (s(bool,'F_0') != s(bool,X10) | s(bool,X9) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) ) | $spl78),
  inference(subsumption_resolution,[],[f40589,f40567])).
fof(f40589,plain,(
  ( ! [X12,X10,X11,X9] : (s(bool,'F_0') != s(bool,X10) | s(bool,X9) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,X9) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl78),
  inference(superposition,[],[f15682,f236])).
fof(f38897,plain,(
  $false | ($spl20 | $spl22 | $spl36 | $spl40 | $spl42 | $spl45 | $spl66)),
  inference(subsumption_resolution,[],[f38699,f38644])).
fof(f38644,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | ($spl20 | $spl22 | $spl36 | $spl40 | $spl42 | $spl45 | $spl66)),
  inference(superposition,[],[f38581,f38581])).
fof(f38581,plain,(
  ( ! [X63] : (s(bool,'F_0') = s(bool,X63)) ) | ($spl20 | $spl22 | $spl36 | $spl40 | $spl42 | $spl45 | $spl66)),
  inference(global_subsumption,[],[f38580,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f98,f101,f104,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f5927,f116,f13747,f13834,f13855,f13860,f13874,f13875,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f31527,f81,f1046,f59,f54,f53,f60,f52,f855,f835,f811,f763,f493,f491,f28548,f28520,f5780,f1701,f511,f495,f490,f41])).
fof(f31527,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl66),
  inference(superposition,[],[f5780,f5780])).
fof(f13875,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl20 | $spl40 | $spl66)),
  inference(subsumption_resolution,[],[f13828,f5927])).
fof(f13828,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl66),
  inference(equality_factoring,[],[f5780])).
fof(f13874,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl20 | $spl40 | $spl66)),
  inference(subsumption_resolution,[],[f13873,f13834])).
fof(f13873,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl20 | $spl40 | $spl66)),
  inference(forward_demodulation,[],[f13872,f13834])).
fof(f13872,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl20 | $spl40 | $spl66)),
  inference(subsumption_resolution,[],[f13871,f13834])).
fof(f13871,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl20 | $spl40 | $spl66)),
  inference(forward_demodulation,[],[f13870,f13834])).
fof(f13870,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl20 | $spl40 | $spl66)),
  inference(subsumption_resolution,[],[f13869,f13834])).
fof(f13869,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl20 | $spl40 | $spl66)),
  inference(forward_demodulation,[],[f13868,f13834])).
fof(f13868,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl20 | $spl40 | $spl66)),
  inference(subsumption_resolution,[],[f13847,f13834])).
fof(f13847,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl20 | $spl40 | $spl66)),
  inference(backward_demodulation,[],[f13834,f60])).
fof(f13860,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3) | s(bool,X4) = s(bool,g(s(X1,sK4(X2,X3,bool,X1)))) | s(bool,X0) = s(bool,X4)) ) | ($spl20 | $spl40 | $spl66)),
  inference(condensation,[],[f13859])).
fof(f13859,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (s(fun(X97,bool),X98) = s(fun(X97,bool),X99) | s(bool,X101) = s(bool,g(s(X97,sK4(X98,X99,bool,X97)))) | s(bool,'T_0') = s(bool,X100) | s(bool,X101) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) ) | ($spl20 | $spl40 | $spl66)),
  inference(subsumption_resolution,[],[f13843,f42])).
fof(f13843,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (s(bool,'F_0') != s(bool,X100) | s(fun(X97,bool),X98) = s(fun(X97,bool),X99) | s(bool,X101) = s(bool,g(s(X97,sK4(X98,X99,bool,X97)))) | s(bool,'T_0') = s(bool,X100) | s(bool,X101) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) ) | ($spl20 | $spl40 | $spl66)),
  inference(backward_demodulation,[],[f13834,f811])).
fof(f13855,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl20 | $spl40 | $spl66)),
  inference(condensation,[],[f13854])).
fof(f13854,plain,(
  ( ! [X10,X8,X11,X9] : (s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK4(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl20 | $spl40 | $spl66)),
  inference(subsumption_resolution,[],[f13840,f42])).
fof(f13840,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'F_0') != s(bool,X11) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK4(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl20 | $spl40 | $spl66)),
  inference(backward_demodulation,[],[f13834,f493])).
fof(f13834,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,X2)) ) | ($spl20 | $spl40 | $spl66)),
  inference(duplicate_literal_removal,[],[f13748])).
fof(f13748,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | ($spl20 | $spl40 | $spl66)),
  inference(superposition,[],[f5780,f5927])).
fof(f13747,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl66),
  inference(superposition,[],[f5780,f5780])).
fof(f5927,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl20 | $spl40)),
  inference(backward_demodulation,[],[f116,f81])).
fof(f38580,plain,(
  ( ! [X63] : (s(bool,'F_0') = s(bool,X63) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl22 | $spl36 | $spl42 | $spl45 | $spl66)),
  inference(duplicate_literal_removal,[],[f38579])).
fof(f38579,plain,(
  ( ! [X63] : (s(bool,'F_0') = s(bool,X63) | s(bool,'F_0') = s(bool,X63) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl22 | $spl36 | $spl42 | $spl45 | $spl66)),
  inference(forward_demodulation,[],[f38445,f112])).
fof(f38445,plain,(
  ( ! [X63] : (s(bool,X63) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') = s(bool,X63) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl22 | $spl36 | $spl42 | $spl45 | $spl66)),
  inference(superposition,[],[f5780,f38139])).
fof(f38139,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl22 | $spl36 | $spl42 | $spl45)),
  inference(subsumption_resolution,[],[f38106,f32329])).
fof(f38106,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl36),
  inference(superposition,[],[f112,f95])).
fof(f38699,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1)) ) | ($spl20 | $spl22 | $spl36 | $spl40 | $spl42 | $spl45 | $spl66)),
  inference(superposition,[],[f32329,f38581])).
fof(f38643,plain,(
  $false | ($spl20 | $spl22 | $spl36 | $spl40 | $spl42 | $spl45 | $spl66)),
  inference(unit_resulting_resolution,[],[f32329,f38581,f37028])).
fof(f37028,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl22 | $spl42)),
  inference(duplicate_literal_removal,[],[f36997])).
fof(f36997,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl22 | $spl42)),
  inference(equality_factoring,[],[f32525])).
fof(f38641,plain,(
  $false | ($spl20 | $spl22 | $spl36 | $spl40 | $spl42 | $spl45 | $spl66)),
  inference(unit_resulting_resolution,[],[f32329,f38581])).
fof(f38578,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f38577,f77])).
fof(f38577,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f38576,f62])).
fof(f38576,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f38575,f112])).
fof(f38575,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl38 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f38574,f32372])).
fof(f38574,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl38 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f38573,f32238])).
fof(f38573,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl38 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f38572,f32330])).
fof(f32330,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl38)),
  inference(forward_demodulation,[],[f81,f114])).
fof(f38572,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl38 | $spl42 | $spl46)),
  inference(trivial_inequality_removal,[],[f38571])).
fof(f38571,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl38 | $spl42 | $spl46)),
  inference(equality_resolution,[],[f37958])).
fof(f37958,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl38 | $spl42 | $spl46)),
  inference(backward_demodulation,[],[f112,f32400])).
fof(f32400,plain,(
  ( ! [X0] : (s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl38 | $spl42 | $spl46)),
  inference(backward_demodulation,[],[f79,f32341])).
fof(f32341,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl24 | $spl26 | $spl28 | $spl30 | $spl38 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f32340,f63])).
fof(f32340,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl24 | $spl26 | $spl28 | $spl30 | $spl38 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f32339,f65])).
fof(f32339,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl24 | $spl26 | $spl28 | $spl30 | $spl38 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f32338,f67])).
fof(f32338,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl24 | $spl26 | $spl28 | $spl30 | $spl38 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f32337,f69])).
fof(f32337,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl24 | $spl26 | $spl28 | $spl30 | $spl38 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f32336,f71])).
fof(f32336,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl24 | $spl26 | $spl28 | $spl30 | $spl38 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f32335,f73])).
fof(f32335,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl24 | $spl26 | $spl28 | $spl30 | $spl38 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f32334,f75])).
fof(f32334,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl38 | $spl42 | $spl46)),
  inference(forward_demodulation,[],[f32333,f114])).
fof(f37941,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f37940,f77])).
fof(f37940,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f37939,f62])).
fof(f37939,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f37938,f32401])).
fof(f32401,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl34)),
  inference(backward_demodulation,[],[f110,f79])).
fof(f37938,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl34 | $spl38 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f37937,f32372])).
fof(f37937,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl38 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f37936,f32238])).
fof(f37936,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl38 | $spl42 | $spl46)),
  inference(subsumption_resolution,[],[f37935,f32330])).
fof(f37935,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl38 | $spl42 | $spl46)),
  inference(trivial_inequality_removal,[],[f37934])).
fof(f37934,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl38 | $spl42 | $spl46)),
  inference(equality_resolution,[],[f32402])).
fof(f32402,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl24 | $spl26 | $spl28 | $spl30 | $spl34 | $spl38 | $spl42 | $spl46)),
  inference(backward_demodulation,[],[f32401,f32400])).
fof(f37539,plain,(
  ( ! [X67] : (s(bool,'F_0') = s(bool,X67) | s(bool,X67) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | $spl128),
  inference(cnf_transformation,[],[f37539_D])).
fof(f37539_D,plain,(
  ( ! [X67] : (s(bool,'F_0') = s(bool,X67) | s(bool,X67) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f2521,plain,(
  ( ! [X50] : (s(bool,'T_0') = s(bool,X50)) ) | $spl56),
  inference(cnf_transformation,[],[f2521_D])).
fof(f2521_D,plain,(
  ( ! [X50] : (s(bool,'T_0') = s(bool,X50)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f37149,plain,(
  ( ! [X116,X117] : (s(bool,'T_0') = s(bool,X116) | s(bool,X117) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') = s(bool,X117)) ) | ($spl22 | $spl42)),
  inference(duplicate_literal_removal,[],[f36785])).
fof(f36785,plain,(
  ( ! [X116,X117] : (s(bool,'T_0') = s(bool,X116) | s(bool,'T_0') = s(bool,X116) | s(bool,X117) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') = s(bool,X117)) ) | ($spl22 | $spl42)),
  inference(superposition,[],[f42,f32525])).
fof(f37092,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl42)),
  inference(duplicate_literal_removal,[],[f36867])).
fof(f36867,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl42)),
  inference(superposition,[],[f42,f32525])).
fof(f37543,plain,(
  ( ! [X64,X63] : (s(bool,'T_0') = s(bool,X64) | s(bool,'F_0') = s(bool,X63) | s(bool,X63) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl38 | $spl42 | $spl66)),
  inference(duplicate_literal_removal,[],[f37542])).
fof(f37542,plain,(
  ( ! [X64,X63] : (s(bool,'T_0') = s(bool,X64) | s(bool,'F_0') = s(bool,X63) | s(bool,'T_0') = s(bool,X64) | s(bool,X63) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl38 | $spl42 | $spl66)),
  inference(forward_demodulation,[],[f36949,f114])).
fof(f36949,plain,(
  ( ! [X64,X63] : (s(bool,X64) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X63) | s(bool,'T_0') = s(bool,X64) | s(bool,X63) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl42 | $spl66)),
  inference(superposition,[],[f5780,f32525])).
fof(f37541,plain,(
  ( ! [X66,X65] : (s(bool,'T_0') = s(bool,X66) | s(bool,'F_0') = s(bool,X65) | s(bool,X65) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl34 | $spl42 | $spl70)),
  inference(duplicate_literal_removal,[],[f37540])).
fof(f37540,plain,(
  ( ! [X66,X65] : (s(bool,'T_0') = s(bool,X66) | s(bool,'F_0') = s(bool,X65) | s(bool,'T_0') = s(bool,X66) | s(bool,X65) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl34 | $spl42 | $spl70)),
  inference(forward_demodulation,[],[f36950,f110])).
fof(f36950,plain,(
  ( ! [X66,X65] : (s(bool,X66) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X65) | s(bool,'T_0') = s(bool,X66) | s(bool,X65) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl42 | $spl70)),
  inference(superposition,[],[f8699,f32525])).
fof(f37538,plain,(
  ( ! [X68,X67] : (s(bool,'F_0') = s(bool,X67) | s(bool,'T_0') = s(bool,X68) | s(bool,X67) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl42 | $spl72)),
  inference(subsumption_resolution,[],[f36951,f101])).
fof(f36951,plain,(
  ( ! [X68,X67] : (p(s(bool,X68)) | s(bool,'F_0') = s(bool,X67) | s(bool,'T_0') = s(bool,X68) | s(bool,X67) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl42 | $spl72)),
  inference(superposition,[],[f9116,f32525])).
fof(f37470,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | $spl126),
  inference(cnf_transformation,[],[f37470_D])).
fof(f37470_D,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f125,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl50),
  inference(cnf_transformation,[],[f125_D])).
fof(f125_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f37469,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl42 | $spl45 | $spl76)),
  inference(condensation,[],[f37468])).
fof(f37468,plain,(
  ( ! [X85,X86,X84] : (s(bool,'T_0') != s(bool,X85) | s(bool,X84) = s(bool,X86) | s(bool,'F_0') = s(bool,X86) | s(bool,X85) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl42 | $spl45 | $spl76)),
  inference(subsumption_resolution,[],[f36892,f34823])).
fof(f34823,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | ($spl22 | $spl42 | $spl45 | $spl76)),
  inference(superposition,[],[f32329,f15507])).
fof(f36892,plain,(
  ( ! [X85,X86,X84] : (s(bool,'T_0') != s(bool,X85) | s(bool,X84) = s(bool,X86) | s(bool,'F_0') = s(bool,X86) | s(bool,'T_0') = s(bool,X84) | s(bool,X85) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl42 | $spl45 | $spl76)),
  inference(superposition,[],[f34823,f32525])).
fof(f37326,plain,(
  ( ! [X71,X69] : (s(bool,X71) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X69) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X69) = s(bool,X71)) ) | $spl124),
  inference(cnf_transformation,[],[f37326_D])).
fof(f37326_D,plain,(
  ( ! [X71,X69] : (s(bool,X71) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X69) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X69) = s(bool,X71)) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f37203,plain,(
  ( ! [X78,X79,X77] : (s(bool,'T_0') = s(bool,X78) | s(bool,X77) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X79) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X77) = s(bool,X79)) ) | ($spl22 | $spl42)),
  inference(duplicate_literal_removal,[],[f36686])).
fof(f36686,plain,(
  ( ! [X78,X79,X77] : (s(bool,'T_0') = s(bool,X78) | s(bool,'T_0') = s(bool,X78) | s(bool,X77) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X79) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X77) = s(bool,X79)) ) | ($spl22 | $spl42)),
  inference(superposition,[],[f32525,f32525])).
fof(f37221,plain,(
  ( ! [X80,X81,X82] : (s(bool,X81) = s(bool,X82) | s(bool,'T_0') = s(bool,X80) | s(bool,X82) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X81) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl42)),
  inference(duplicate_literal_removal,[],[f36629])).
fof(f36629,plain,(
  ( ! [X80,X81,X82] : (s(bool,X81) = s(bool,X82) | s(bool,'T_0') = s(bool,X80) | s(bool,X82) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X80) | s(bool,X81) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl42)),
  inference(superposition,[],[f32525,f32525])).
fof(f37295,plain,(
  ( ! [X70,X71,X69] : (s(bool,'T_0') = s(bool,X70) | s(bool,X71) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X69) = s(bool,X71) | s(bool,X69) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl42)),
  inference(duplicate_literal_removal,[],[f36522])).
fof(f36522,plain,(
  ( ! [X70,X71,X69] : (s(bool,'T_0') = s(bool,X70) | s(bool,X71) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X69) = s(bool,X71) | s(bool,'T_0') = s(bool,X70) | s(bool,X69) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl42)),
  inference(superposition,[],[f32525,f32525])).
fof(f34182,plain,(
  $false | $spl92),
  inference(subsumption_resolution,[],[f34150,f40])).
fof(f34150,plain,(
  ~p(s(bool,'T_0')) | $spl92),
  inference(backward_demodulation,[],[f33990,f41])).
fof(f33990,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl92),
  inference(condensation,[],[f33989])).
fof(f33989,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X1)) ) | $spl92),
  inference(duplicate_literal_removal,[],[f33988])).
fof(f33988,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl92),
  inference(condensation,[],[f33489])).
fof(f33489,plain,(
  ( ! [X6,X4,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X4)) ) | $spl92),
  inference(superposition,[],[f20420,f42])).
fof(f33991,plain,(
  ( ! [X68,X69] : (s(bool,'T_0') = s(bool,X68) | s(bool,'F_0') = s(bool,X69)) ) | $spl92),
  inference(duplicate_literal_removal,[],[f33483])).
fof(f33483,plain,(
  ( ! [X68,X69] : (s(bool,'T_0') = s(bool,X68) | s(bool,'F_0') = s(bool,X69) | s(bool,'F_0') = s(bool,X69) | s(bool,'T_0') = s(bool,X68)) ) | $spl92),
  inference(superposition,[],[f20420,f42])).
fof(f34149,plain,(
  ( ! [X2,X0] : (s(bool,'F_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) ) | $spl92),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f1701,f511,f490,f41,f1046,f491,f493,f495,f763,f811,f835,f855,f28548,f60,f52,f53,f54,f59,f20420,f34097,f34088,f34101,f34082,f34102,f34062,f34104,f34060,f34105,f33446,f33447,f34141,f33448,f34142,f33449,f34143,f33450,f34144,f34021,f34145,f34019,f34146,f34005,f34148,f33999])).
fof(f33999,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X3)) ) | $spl92),
  inference(condensation,[],[f33998])).
fof(f33998,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s(bool,'T_0') = s(bool,X33) | s(bool,X32) = s(bool,X34) | s(bool,'F_0') = s(bool,X34) | s(bool,X32) = s(bool,X35) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) ) | $spl92),
  inference(duplicate_literal_removal,[],[f33473])).
fof(f33473,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s(bool,'T_0') = s(bool,X33) | s(bool,X32) = s(bool,X34) | s(bool,'F_0') = s(bool,X34) | s(bool,X32) = s(bool,X35) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X36) | s(bool,'T_0') = s(bool,X33)) ) | $spl92),
  inference(superposition,[],[f20420,f236])).
fof(f34005,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X3)) ) | $spl92),
  inference(condensation,[],[f34004])).
fof(f34004,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s(bool,'T_0') = s(bool,X22) | s(bool,X21) = s(bool,X23) | s(bool,'F_0') = s(bool,X23) | s(bool,X21) = s(bool,X24) | s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) ) | $spl92),
  inference(duplicate_literal_removal,[],[f33471])).
fof(f33471,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s(bool,'T_0') = s(bool,X22) | s(bool,X21) = s(bool,X23) | s(bool,'F_0') = s(bool,X23) | s(bool,X21) = s(bool,X24) | s(bool,'T_0') = s(bool,X22) | s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) ) | $spl92),
  inference(superposition,[],[f20420,f236])).
fof(f34019,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3) | s(bool,X0) = s(bool,X1)) ) | $spl92),
  inference(condensation,[],[f34018])).
fof(f34018,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s(bool,X41) = s(bool,X42) | s(bool,X42) = s(bool,X43) | s(bool,'F_0') = s(bool,X43) | s(bool,'T_0') = s(bool,X44) | s(bool,X41) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl92),
  inference(duplicate_literal_removal,[],[f33456])).
fof(f33456,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s(bool,X41) = s(bool,X42) | s(bool,X42) = s(bool,X43) | s(bool,'F_0') = s(bool,X43) | s(bool,'T_0') = s(bool,X44) | s(bool,'T_0') = s(bool,X44) | s(bool,X41) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl92),
  inference(superposition,[],[f20420,f236])).
fof(f34021,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3) | s(bool,X0) = s(bool,X1)) ) | $spl92),
  inference(condensation,[],[f34020])).
fof(f34020,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s(bool,X36) = s(bool,X37) | s(bool,X37) = s(bool,X38) | s(bool,'F_0') = s(bool,X38) | s(bool,X36) = s(bool,X39) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,X40)) ) | $spl92),
  inference(duplicate_literal_removal,[],[f33455])).
fof(f33455,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s(bool,X36) = s(bool,X37) | s(bool,X37) = s(bool,X38) | s(bool,'F_0') = s(bool,X38) | s(bool,X36) = s(bool,X39) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) ) | $spl92),
  inference(superposition,[],[f20420,f236])).
fof(f33450,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,X22) | s(bool,'F_0') = s(bool,X22) | s(bool,X20) = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) ) | $spl92),
  inference(superposition,[],[f20420,f95])).
fof(f33449,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,X16) = s(bool,X17) | s(bool,X17) = s(bool,X18) | s(bool,'F_0') = s(bool,X18) | s(bool,X16) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) ) | $spl92),
  inference(superposition,[],[f20420,f95])).
fof(f33448,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (s(bool,X10) = s(bool,X11) | s(bool,X11) = s(bool,X12) | s(bool,'F_0') = s(bool,X12) | s(bool,X13) = s(bool,X14) | s(bool,X10) = s(bool,X14) | s(bool,X13) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | $spl92),
  inference(superposition,[],[f20420,f236])).
fof(f33447,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s(bool,X4) = s(bool,X5) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,X6) | s(bool,X7) = s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9) | s(bool,X4) = s(bool,X7)) ) | $spl92),
  inference(superposition,[],[f20420,f236])).
fof(f33446,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | $spl92),
  inference(superposition,[],[f20420,f20420])).
fof(f34060,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3) | s(bool,X1) = s(bool,X2)) ) | $spl92),
  inference(condensation,[],[f34059])).
fof(f34059,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s(bool,'T_0') = s(bool,X40) | s(bool,'F_0') = s(bool,X39) | s(bool,X41) = s(bool,X42) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,X39) = s(bool,X41)) ) | $spl92),
  inference(duplicate_literal_removal,[],[f33415])).
fof(f33415,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s(bool,'T_0') = s(bool,X40) | s(bool,'T_0') = s(bool,X40) | s(bool,'F_0') = s(bool,X39) | s(bool,X41) = s(bool,X42) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,X39) = s(bool,X41)) ) | $spl92),
  inference(superposition,[],[f20420,f236])).
fof(f34062,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X2)) ) | $spl92),
  inference(condensation,[],[f34061])).
fof(f34061,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,'T_0') = s(bool,X25) | s(bool,'F_0') = s(bool,X24) | s(bool,X26) = s(bool,X27) | s(bool,X24) = s(bool,X27) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | $spl92),
  inference(duplicate_literal_removal,[],[f33412])).
fof(f33412,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,'F_0') = s(bool,X24) | s(bool,X26) = s(bool,X27) | s(bool,X24) = s(bool,X27) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | $spl92),
  inference(superposition,[],[f20420,f236])).
fof(f34082,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X3)) ) | $spl92),
  inference(condensation,[],[f34081])).
fof(f34081,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X49) | s(bool,'F_0') = s(bool,X51) | s(bool,X50) = s(bool,X52) | s(bool,X52) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) ) | $spl92),
  inference(duplicate_literal_removal,[],[f33376])).
fof(f33376,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X49) | s(bool,'F_0') = s(bool,X51) | s(bool,X50) = s(bool,X52) | s(bool,X52) = s(bool,X53) | s(bool,'T_0') = s(bool,X53) | s(bool,'T_0') = s(bool,X49)) ) | $spl92),
  inference(superposition,[],[f20420,f236])).
fof(f34088,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X3)) ) | $spl92),
  inference(condensation,[],[f34087])).
fof(f34087,plain,(
  ( ! [X37,X35,X38,X36,X34] : (s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X34) | s(bool,'F_0') = s(bool,X36) | s(bool,X35) = s(bool,X37) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) ) | $spl92),
  inference(duplicate_literal_removal,[],[f33373])).
fof(f33373,plain,(
  ( ! [X37,X35,X38,X36,X34] : (s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X34) | s(bool,'F_0') = s(bool,X36) | s(bool,X35) = s(bool,X37) | s(bool,'T_0') = s(bool,X34) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) ) | $spl92),
  inference(superposition,[],[f20420,f236])).
fof(f34148,plain,(
  ( ! [X2,X0] : (s(bool,'F_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) ) | $spl92),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f1701,f511,f490,f41,f1046,f491,f493,f495,f763,f811,f835,f855,f28548,f60,f52,f53,f54,f59,f20420,f34097,f34088,f34101,f34082,f34102,f34062,f34104,f34060,f34105,f33446,f33447,f34141,f33448,f34142,f33449,f34143,f33450,f34144,f34021,f34145,f34019,f34146,f34005])).
fof(f34147,plain,(
  $false | ($spl22 | $spl42 | $spl45 | $spl92)),
  inference(subsumption_resolution,[],[f34011,f32329])).
fof(f34011,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl92),
  inference(duplicate_literal_removal,[],[f34010])).
fof(f34010,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'F_0') | $spl92),
  inference(condensation,[],[f33466])).
fof(f33466,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl92),
  inference(superposition,[],[f20420,f42])).
fof(f34146,plain,(
  ( ! [X0,X3] : (s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0)) ) | $spl92),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f1701,f511,f490,f41,f1046,f491,f493,f495,f763,f811,f835,f855,f28548,f60,f52,f53,f54,f59,f20420,f34097,f34088,f34101,f34082,f34102,f34062,f34104,f34060,f34105,f33446,f33447,f34141,f33448,f34142,f33449,f34143,f33450,f34144,f34021,f34145,f34019])).
fof(f34145,plain,(
  ( ! [X0,X3] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X3)) ) | $spl92),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f1701,f511,f490,f41,f1046,f491,f493,f495,f763,f811,f835,f855,f28548,f60,f52,f53,f54,f59,f20420,f34097,f34088,f34101,f34082,f34102,f34062,f34104,f34060,f34105,f33446,f33447,f34141,f33448,f34142,f33449,f34143,f33450,f34144,f34021])).
fof(f34144,plain,(
  ( ! [X23,X22] : (s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,X22)) ) | $spl92),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f1701,f511,f490,f41,f1046,f491,f493,f495,f763,f811,f835,f855,f28548,f60,f52,f53,f54,f59,f20420,f34097,f34088,f34101,f34082,f34102,f34062,f34104,f34060,f34105,f33446,f33447,f34141,f33448,f34142,f33449,f34143,f33450])).
fof(f34143,plain,(
  ( ! [X19,X18] : (s(bool,'F_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X19)) ) | $spl92),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f1701,f511,f490,f41,f1046,f491,f493,f495,f763,f811,f835,f855,f28548,f60,f52,f53,f54,f59,f20420,f34097,f34088,f34101,f34082,f34102,f34062,f34104,f34060,f34105,f33446,f33447,f34141,f33448,f34142,f33449])).
fof(f34142,plain,(
  ( ! [X12,X15] : (s(bool,'F_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X15)) ) | $spl92),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f1701,f511,f490,f41,f1046,f491,f493,f495,f763,f811,f835,f855,f28548,f60,f52,f53,f54,f59,f20420,f34097,f34088,f34101,f34082,f34102,f34062,f34104,f34060,f34105,f33446,f33447,f34141,f33448])).
fof(f34141,plain,(
  ( ! [X6,X9] : (s(bool,'F_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X9)) ) | $spl92),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f1701,f511,f490,f41,f1046,f491,f493,f495,f763,f811,f835,f855,f28548,f60,f52,f53,f54,f59,f20420,f34097,f34088,f34101,f34082,f34102,f34062,f34104,f34060,f34105,f33446,f33447])).
fof(f34140,plain,(
  $false | ($spl22 | $spl42 | $spl45 | $spl46 | $spl92)),
  inference(subsumption_resolution,[],[f34139,f32329])).
fof(f34139,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl46 | $spl92)),
  inference(condensation,[],[f34138])).
fof(f34138,plain,(
  ( ! [X113] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X113)) ) | ($spl46 | $spl92)),
  inference(forward_demodulation,[],[f34026,f122])).
fof(f34026,plain,(
  ( ! [X113] : (s(bool,'T_0') = s(bool,X113) | s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl46 | $spl92)),
  inference(duplicate_literal_removal,[],[f33445])).
fof(f33445,plain,(
  ( ! [X113] : (s(bool,'T_0') = s(bool,X113) | s(bool,'T_0') = s(bool,X113) | s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl46 | $spl92)),
  inference(superposition,[],[f20420,f122])).
fof(f34137,plain,(
  $false | ($spl22 | $spl32 | $spl42 | $spl45 | $spl46 | $spl92)),
  inference(subsumption_resolution,[],[f34136,f32329])).
fof(f34136,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl32 | $spl46 | $spl92)),
  inference(condensation,[],[f34135])).
fof(f34135,plain,(
  ( ! [X110] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X110)) ) | ($spl32 | $spl46 | $spl92)),
  inference(forward_demodulation,[],[f34027,f32372])).
fof(f34027,plain,(
  ( ! [X110] : (s(bool,'T_0') = s(bool,X110) | s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl32 | $spl46 | $spl92)),
  inference(duplicate_literal_removal,[],[f33443])).
fof(f33443,plain,(
  ( ! [X110] : (s(bool,'T_0') = s(bool,X110) | s(bool,'T_0') = s(bool,X110) | s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl32 | $spl46 | $spl92)),
  inference(superposition,[],[f20420,f32372])).
fof(f34134,plain,(
  $false | ($spl22 | $spl42 | $spl45 | $spl92)),
  inference(subsumption_resolution,[],[f34133,f32329])).
fof(f34133,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl42 | $spl92)),
  inference(condensation,[],[f34132])).
fof(f34132,plain,(
  ( ! [X109] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X109)) ) | ($spl42 | $spl92)),
  inference(forward_demodulation,[],[f34028,f118])).
fof(f34028,plain,(
  ( ! [X109] : (s(bool,'T_0') = s(bool,X109) | s(bool,'F_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl42 | $spl92)),
  inference(duplicate_literal_removal,[],[f33442])).
fof(f33442,plain,(
  ( ! [X109] : (s(bool,'T_0') = s(bool,X109) | s(bool,'T_0') = s(bool,X109) | s(bool,'F_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl42 | $spl92)),
  inference(superposition,[],[f20420,f118])).
fof(f34131,plain,(
  $false | ($spl22 | $spl42 | $spl45 | $spl92)),
  inference(subsumption_resolution,[],[f34130,f32329])).
fof(f34130,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl22 | $spl42 | $spl92)),
  inference(condensation,[],[f34129])).
fof(f34129,plain,(
  ( ! [X106] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X106)) ) | ($spl22 | $spl42 | $spl92)),
  inference(forward_demodulation,[],[f34029,f32238])).
fof(f34029,plain,(
  ( ! [X106] : (s(bool,'T_0') = s(bool,X106) | s(bool,'F_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl42 | $spl92)),
  inference(duplicate_literal_removal,[],[f33440])).
fof(f33440,plain,(
  ( ! [X106] : (s(bool,'T_0') = s(bool,X106) | s(bool,'T_0') = s(bool,X106) | s(bool,'F_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl22 | $spl42 | $spl92)),
  inference(superposition,[],[f20420,f32238])).
fof(f34128,plain,(
  $false | ($spl22 | $spl38 | $spl42 | $spl45 | $spl92)),
  inference(subsumption_resolution,[],[f34127,f32329])).
fof(f34127,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl38 | $spl92)),
  inference(condensation,[],[f34126])).
fof(f34126,plain,(
  ( ! [X105] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X105)) ) | ($spl38 | $spl92)),
  inference(forward_demodulation,[],[f34030,f114])).
fof(f34030,plain,(
  ( ! [X105] : (s(bool,'T_0') = s(bool,X105) | s(bool,'F_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl38 | $spl92)),
  inference(duplicate_literal_removal,[],[f33439])).
fof(f33439,plain,(
  ( ! [X105] : (s(bool,'T_0') = s(bool,X105) | s(bool,'T_0') = s(bool,X105) | s(bool,'F_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl38 | $spl92)),
  inference(superposition,[],[f20420,f114])).
fof(f34125,plain,(
  $false | ($spl20 | $spl22 | $spl38 | $spl42 | $spl45 | $spl92)),
  inference(subsumption_resolution,[],[f34124,f32329])).
fof(f34124,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl20 | $spl38 | $spl92)),
  inference(condensation,[],[f34123])).
fof(f34123,plain,(
  ( ! [X102] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X102)) ) | ($spl20 | $spl38 | $spl92)),
  inference(forward_demodulation,[],[f34031,f32330])).
fof(f34031,plain,(
  ( ! [X102] : (s(bool,'T_0') = s(bool,X102) | s(bool,'F_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl20 | $spl38 | $spl92)),
  inference(duplicate_literal_removal,[],[f33437])).
fof(f33437,plain,(
  ( ! [X102] : (s(bool,'T_0') = s(bool,X102) | s(bool,'T_0') = s(bool,X102) | s(bool,'F_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl20 | $spl38 | $spl92)),
  inference(superposition,[],[f20420,f32330])).
fof(f34122,plain,(
  $false | ($spl22 | $spl34 | $spl42 | $spl45 | $spl92)),
  inference(subsumption_resolution,[],[f34121,f32329])).
fof(f34121,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl34 | $spl92)),
  inference(condensation,[],[f34120])).
fof(f34120,plain,(
  ( ! [X101] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X101)) ) | ($spl34 | $spl92)),
  inference(forward_demodulation,[],[f34032,f110])).
fof(f34032,plain,(
  ( ! [X101] : (s(bool,'T_0') = s(bool,X101) | s(bool,'F_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl34 | $spl92)),
  inference(duplicate_literal_removal,[],[f33436])).
fof(f33436,plain,(
  ( ! [X101] : (s(bool,'T_0') = s(bool,X101) | s(bool,'T_0') = s(bool,X101) | s(bool,'F_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl34 | $spl92)),
  inference(superposition,[],[f20420,f110])).
fof(f34119,plain,(
  $false | ($spl18 | $spl22 | $spl34 | $spl42 | $spl45 | $spl92)),
  inference(subsumption_resolution,[],[f34118,f32329])).
fof(f34118,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl18 | $spl34 | $spl92)),
  inference(condensation,[],[f34117])).
fof(f34117,plain,(
  ( ! [X98] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X98)) ) | ($spl18 | $spl34 | $spl92)),
  inference(forward_demodulation,[],[f34033,f32401])).
fof(f34033,plain,(
  ( ! [X98] : (s(bool,'T_0') = s(bool,X98) | s(bool,'F_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl18 | $spl34 | $spl92)),
  inference(duplicate_literal_removal,[],[f33434])).
fof(f33434,plain,(
  ( ! [X98] : (s(bool,'T_0') = s(bool,X98) | s(bool,'T_0') = s(bool,X98) | s(bool,'F_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl18 | $spl34 | $spl92)),
  inference(superposition,[],[f20420,f32401])).
fof(f34116,plain,(
  $false | ($spl22 | $spl42 | $spl45 | $spl92 | $spl100)),
  inference(subsumption_resolution,[],[f34115,f32329])).
fof(f34115,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl92 | $spl100)),
  inference(condensation,[],[f34114])).
fof(f34114,plain,(
  ( ! [X97] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X97)) ) | ($spl92 | $spl100)),
  inference(forward_demodulation,[],[f34034,f28558])).
fof(f34034,plain,(
  ( ! [X97] : (s(bool,'T_0') = s(bool,X97) | s(bool,'F_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl92 | $spl100)),
  inference(duplicate_literal_removal,[],[f33433])).
fof(f33433,plain,(
  ( ! [X97] : (s(bool,'T_0') = s(bool,X97) | s(bool,'T_0') = s(bool,X97) | s(bool,'F_0') = s(bool,g(s(bool,'T_0')))) ) | ($spl92 | $spl100)),
  inference(superposition,[],[f20420,f28558])).
fof(f34113,plain,(
  $false | ($spl22 | $spl42 | $spl45 | $spl92)),
  inference(subsumption_resolution,[],[f34038,f32329])).
fof(f34038,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl92),
  inference(condensation,[],[f34037])).
fof(f34037,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl92),
  inference(condensation,[],[f34036])).
fof(f34036,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X1)) ) | $spl92),
  inference(duplicate_literal_removal,[],[f34035])).
fof(f34035,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl92),
  inference(condensation,[],[f33430])).
fof(f33430,plain,(
  ( ! [X92,X90,X91] : (s(bool,X90) = s(bool,X91) | s(bool,'T_0') = s(bool,X91) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X90) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) ) | $spl92),
  inference(superposition,[],[f20420,f95])).
fof(f34112,plain,(
  $false | ($spl22 | $spl42 | $spl45 | $spl92)),
  inference(subsumption_resolution,[],[f34042,f32329])).
fof(f34042,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl92),
  inference(condensation,[],[f34041])).
fof(f34041,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl92),
  inference(condensation,[],[f34040])).
fof(f34040,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X1)) ) | $spl92),
  inference(duplicate_literal_removal,[],[f34039])).
fof(f34039,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl92),
  inference(condensation,[],[f33429])).
fof(f33429,plain,(
  ( ! [X88,X87,X89] : (s(bool,X87) = s(bool,X88) | s(bool,'T_0') = s(bool,X88) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X87) = s(bool,X89) | s(bool,'T_0') = s(bool,X89)) ) | $spl92),
  inference(superposition,[],[f20420,f95])).
fof(f34111,plain,(
  $false | ($spl22 | $spl42 | $spl45 | $spl92)),
  inference(subsumption_resolution,[],[f34047,f32329])).
fof(f34047,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl92),
  inference(condensation,[],[f34046])).
fof(f34046,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl92),
  inference(duplicate_literal_removal,[],[f34045])).
fof(f34045,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl92),
  inference(condensation,[],[f34044])).
fof(f34044,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl92),
  inference(condensation,[],[f34043])).
fof(f34043,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl92),
  inference(condensation,[],[f33428])).
fof(f33428,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s(bool,X82) = s(bool,X83) | s(bool,'T_0') = s(bool,X83) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X84) = s(bool,X85) | s(bool,X82) = s(bool,X85) | s(bool,X84) = s(bool,X86) | s(bool,'T_0') = s(bool,X86)) ) | $spl92),
  inference(superposition,[],[f20420,f236])).
fof(f34110,plain,(
  $false | ($spl22 | $spl42 | $spl45 | $spl92)),
  inference(subsumption_resolution,[],[f34052,f32329])).
fof(f34052,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl92),
  inference(condensation,[],[f34051])).
fof(f34051,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X1)) ) | $spl92),
  inference(duplicate_literal_removal,[],[f34050])).
fof(f34050,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl92),
  inference(condensation,[],[f34049])).
fof(f34049,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) ) | $spl92),
  inference(condensation,[],[f34048])).
fof(f34048,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X1)) ) | $spl92),
  inference(condensation,[],[f33427])).
fof(f33427,plain,(
  ( ! [X80,X78,X81,X79,X77] : (s(bool,X77) = s(bool,X78) | s(bool,'T_0') = s(bool,X78) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X79) = s(bool,X80) | s(bool,X80) = s(bool,X81) | s(bool,'T_0') = s(bool,X81) | s(bool,X77) = s(bool,X79)) ) | $spl92),
  inference(superposition,[],[f20420,f236])).
fof(f34109,plain,(
  ( ! [X61,X60] : (s(bool,'T_0') = s(bool,X61) | s(bool,'F_0') = s(bool,X60)) ) | ($spl70 | $spl92)),
  inference(global_subsumption,[],[f34055,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f1701,f511,f490,f41,f1046,f491,f493,f495,f763,f811,f835,f855,f28548,f60,f52,f53,f54,f59,f20420,f34097,f34088,f34101,f34082,f34102,f34062,f34104,f34060,f34105])).
fof(f34055,plain,(
  ( ! [X61,X60] : (s(bool,X61) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X61) | s(bool,'F_0') = s(bool,X60)) ) | ($spl70 | $spl92)),
  inference(duplicate_literal_removal,[],[f33421])).
fof(f33421,plain,(
  ( ! [X61,X60] : (s(bool,X61) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X61) | s(bool,'F_0') = s(bool,X60) | s(bool,'F_0') = s(bool,X60)) ) | ($spl70 | $spl92)),
  inference(superposition,[],[f20420,f8699])).
fof(f34108,plain,(
  ( ! [X59,X58] : (s(bool,'T_0') = s(bool,X59) | s(bool,'F_0') = s(bool,X58)) ) | ($spl66 | $spl92)),
  inference(global_subsumption,[],[f34056,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f1701,f511,f490,f41,f1046,f491,f493,f495,f763,f811,f835,f855,f28548,f60,f52,f53,f54,f59,f20420,f34097,f34088,f34101,f34082,f34102,f34062,f34104,f34060,f34105])).
fof(f34056,plain,(
  ( ! [X59,X58] : (s(bool,X59) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X59) | s(bool,'F_0') = s(bool,X58)) ) | ($spl66 | $spl92)),
  inference(duplicate_literal_removal,[],[f33420])).
fof(f33420,plain,(
  ( ! [X59,X58] : (s(bool,X59) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X59) | s(bool,'F_0') = s(bool,X58) | s(bool,'F_0') = s(bool,X58)) ) | ($spl66 | $spl92)),
  inference(superposition,[],[f20420,f5780])).
fof(f34107,plain,(
  ( ! [X57,X56] : (s(bool,'T_0') = s(bool,X57) | s(bool,'F_0') = s(bool,X56)) ) | ($spl62 | $spl92)),
  inference(global_subsumption,[],[f34057,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f1701,f511,f490,f41,f1046,f491,f493,f495,f763,f811,f835,f855,f28548,f60,f52,f53,f54,f59,f20420,f34097,f34088,f34101,f34082,f34102,f34062,f34104,f34060,f34105])).
fof(f34057,plain,(
  ( ! [X57,X56] : (s(bool,X57) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X57) | s(bool,'F_0') = s(bool,X56)) ) | ($spl62 | $spl92)),
  inference(duplicate_literal_removal,[],[f33419])).
fof(f33419,plain,(
  ( ! [X57,X56] : (s(bool,X57) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X57) | s(bool,'F_0') = s(bool,X56) | s(bool,'F_0') = s(bool,X56)) ) | ($spl62 | $spl92)),
  inference(superposition,[],[f20420,f3852])).
fof(f34106,plain,(
  ( ! [X54,X55] : (s(bool,'T_0') = s(bool,X55) | s(bool,'F_0') = s(bool,X54)) ) | ($spl58 | $spl92)),
  inference(global_subsumption,[],[f34058,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f1701,f511,f490,f41,f1046,f491,f493,f495,f763,f811,f835,f855,f28548,f60,f52,f53,f54,f59,f20420,f34097,f34088,f34101,f34082,f34102,f34062,f34104,f34060,f34105])).
fof(f34058,plain,(
  ( ! [X54,X55] : (s(bool,X55) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X55) | s(bool,'F_0') = s(bool,X54)) ) | ($spl58 | $spl92)),
  inference(duplicate_literal_removal,[],[f33418])).
fof(f33418,plain,(
  ( ! [X54,X55] : (s(bool,X55) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X55) | s(bool,'F_0') = s(bool,X54) | s(bool,'F_0') = s(bool,X54)) ) | ($spl58 | $spl92)),
  inference(superposition,[],[f20420,f2522])).
fof(f34105,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl92),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f1701,f511,f490,f41,f1046,f491,f493,f495,f763,f811,f835,f855,f28548,f60,f52,f53,f54,f59,f20420,f34097,f34088,f34101,f34082,f34102,f34062,f34104,f34060])).
fof(f34104,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1)) ) | $spl92),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f1701,f511,f490,f41,f1046,f491,f493,f495,f763,f811,f835,f855,f28548,f60,f52,f53,f54,f59,f20420,f34097,f34088,f34101,f34082,f34102,f34062])).
fof(f34103,plain,(
  $false | ($spl22 | $spl42 | $spl45 | $spl92)),
  inference(subsumption_resolution,[],[f34078,f32329])).
fof(f34078,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl92),
  inference(duplicate_literal_removal,[],[f34077])).
fof(f34077,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'F_0') | $spl92),
  inference(condensation,[],[f33391])).
fof(f33391,plain,(
  ( ! [X88,X87] : (s(bool,X87) = s(bool,X88) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,X88) | s(bool,'T_0') = s(bool,X87)) ) | $spl92),
  inference(superposition,[],[f20420,f42])).
fof(f34102,plain,(
  ( ! [X2,X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X2)) ) | $spl92),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f1701,f511,f490,f41,f1046,f491,f493,f495,f763,f811,f835,f855,f28548,f60,f52,f53,f54,f59,f20420,f34097,f34088,f34101,f34082])).
fof(f34101,plain,(
  ( ! [X2,X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X2)) ) | $spl92),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f1701,f511,f490,f41,f1046,f491,f493,f495,f763,f811,f835,f855,f28548,f60,f52,f53,f54,f59,f20420,f34097,f34088])).
fof(f34097,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl92),
  inference(duplicate_literal_removal,[],[f33364])).
fof(f33364,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl92),
  inference(superposition,[],[f20420,f42])).
fof(f34100,plain,(
  $false | ($spl22 | $spl42 | $spl45 | $spl92)),
  inference(subsumption_resolution,[],[f33360,f32329])).
fof(f33360,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl22 | $spl42 | $spl45 | $spl92)),
  inference(unit_resulting_resolution,[],[f32329,f32329,f20420])).
fof(f34099,plain,(
  $false | ($spl22 | $spl42 | $spl45 | $spl92)),
  inference(subsumption_resolution,[],[f33361,f32329])).
fof(f33361,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl22 | $spl42 | $spl45 | $spl92)),
  inference(unit_resulting_resolution,[],[f32329,f32329,f20420])).
fof(f34098,plain,(
  $false | ($spl22 | $spl42 | $spl45 | $spl92)),
  inference(subsumption_resolution,[],[f33362,f32329])).
fof(f33362,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl22 | $spl42 | $spl45 | $spl92)),
  inference(unit_resulting_resolution,[],[f32329,f32329,f20420])).
fof(f33363,plain,(
  $false | ($spl22 | $spl42 | $spl45 | $spl92)),
  inference(unit_resulting_resolution,[],[f32329,f32329,f32329,f20420])).
fof(f32328,plain,(
  $false | ($spl18 | $spl36 | $spl41 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f115,f32200])).
fof(f32200,plain,(
  ( ! [X66] : (s(bool,'F_0') = s(bool,X66)) ) | ($spl18 | $spl36 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f5780,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f97,f101,f103,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f79,f8699,f13912,f14001,f14022,f14027,f14041,f14042,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f491,f493,f495,f763,f811,f835,f59,f54,f53,f52,f60,f28548,f28520,f9179,f1701,f511,f490,f112,f41,f855,f31609,f30524,f30521,f30508,f30505,f31614,f1046])).
fof(f31614,plain,(
  ( ! [X29] : (s(bool,X29) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X29)) ) | ($spl18 | $spl36)),
  inference(subsumption_resolution,[],[f30404,f41])).
fof(f30404,plain,(
  ( ! [X29] : (p(s(bool,'F_0')) | s(bool,X29) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X29)) ) | ($spl18 | $spl36)),
  inference(superposition,[],[f284,f9179])).
fof(f31609,plain,(
  ( ! [X29] : (s(bool,X29) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X29)) ) | $spl36),
  inference(subsumption_resolution,[],[f30527,f41])).
fof(f30527,plain,(
  ( ! [X29] : (p(s(bool,'F_0')) | s(bool,X29) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X29)) ) | $spl36),
  inference(superposition,[],[f284,f112])).
fof(f9179,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl18 | $spl36)),
  inference(backward_demodulation,[],[f112,f79])).
fof(f14042,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl18 | $spl36 | $spl70)),
  inference(subsumption_resolution,[],[f13995,f9179])).
fof(f13995,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl70),
  inference(equality_factoring,[],[f8699])).
fof(f14041,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl18 | $spl36 | $spl70)),
  inference(subsumption_resolution,[],[f14040,f14001])).
fof(f14040,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl18 | $spl36 | $spl70)),
  inference(forward_demodulation,[],[f14039,f14001])).
fof(f14039,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl18 | $spl36 | $spl70)),
  inference(subsumption_resolution,[],[f14038,f14001])).
fof(f14038,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl18 | $spl36 | $spl70)),
  inference(forward_demodulation,[],[f14037,f14001])).
fof(f14037,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl18 | $spl36 | $spl70)),
  inference(subsumption_resolution,[],[f14036,f14001])).
fof(f14036,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl18 | $spl36 | $spl70)),
  inference(forward_demodulation,[],[f14035,f14001])).
fof(f14035,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl18 | $spl36 | $spl70)),
  inference(subsumption_resolution,[],[f14014,f14001])).
fof(f14014,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl18 | $spl36 | $spl70)),
  inference(backward_demodulation,[],[f14001,f60])).
fof(f14027,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3) | s(bool,X4) = s(bool,g(s(X1,sK4(X2,X3,bool,X1)))) | s(bool,X0) = s(bool,X4)) ) | ($spl18 | $spl36 | $spl70)),
  inference(condensation,[],[f14026])).
fof(f14026,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (s(fun(X97,bool),X98) = s(fun(X97,bool),X99) | s(bool,X101) = s(bool,g(s(X97,sK4(X98,X99,bool,X97)))) | s(bool,'T_0') = s(bool,X100) | s(bool,X101) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) ) | ($spl18 | $spl36 | $spl70)),
  inference(subsumption_resolution,[],[f14010,f42])).
fof(f14010,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (s(bool,'F_0') != s(bool,X100) | s(fun(X97,bool),X98) = s(fun(X97,bool),X99) | s(bool,X101) = s(bool,g(s(X97,sK4(X98,X99,bool,X97)))) | s(bool,'T_0') = s(bool,X100) | s(bool,X101) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) ) | ($spl18 | $spl36 | $spl70)),
  inference(backward_demodulation,[],[f14001,f811])).
fof(f14022,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl18 | $spl36 | $spl70)),
  inference(condensation,[],[f14021])).
fof(f14021,plain,(
  ( ! [X10,X8,X11,X9] : (s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK4(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl18 | $spl36 | $spl70)),
  inference(subsumption_resolution,[],[f14007,f42])).
fof(f14007,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'F_0') != s(bool,X11) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK4(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl18 | $spl36 | $spl70)),
  inference(backward_demodulation,[],[f14001,f493])).
fof(f14001,plain,(
  ( ! [X4] : (s(bool,'F_0') = s(bool,X4)) ) | ($spl18 | $spl36 | $spl70)),
  inference(duplicate_literal_removal,[],[f13914])).
fof(f13914,plain,(
  ( ! [X4] : (s(bool,'F_0') = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | ($spl18 | $spl36 | $spl70)),
  inference(superposition,[],[f8699,f9179])).
fof(f13912,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl70),
  inference(superposition,[],[f8699,f8699])).
fof(f115,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | $spl41),
  inference(cnf_transformation,[],[f115_D])).
fof(f115_D,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f32327,plain,(
  $false | ($spl18 | $spl36 | $spl45 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f119,f32200])).
fof(f32326,plain,(
  $false | ($spl18 | $spl36 | $spl49 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f123,f32200])).
fof(f123,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | $spl49),
  inference(cnf_transformation,[],[f123_D])).
fof(f123_D,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) <=> ~$spl49),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl49])])).
fof(f32325,plain,(
  $false | ($spl18 | $spl36 | $spl53 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f127,f32200])).
fof(f32179,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32123,f77])).
fof(f32123,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f75,f73,f71,f31875])).
fof(f31875,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | $spl50),
  inference(subsumption_resolution,[],[f31874,f125])).
fof(f31874,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | $spl50),
  inference(forward_demodulation,[],[f31873,f125])).
fof(f31873,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | $spl50),
  inference(subsumption_resolution,[],[f31872,f125])).
fof(f31872,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | $spl50),
  inference(forward_demodulation,[],[f31871,f125])).
fof(f31871,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | $spl50),
  inference(subsumption_resolution,[],[f31870,f125])).
fof(f31870,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | $spl50),
  inference(forward_demodulation,[],[f31869,f125])).
fof(f31869,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | $spl50),
  inference(subsumption_resolution,[],[f31844,f125])).
fof(f31844,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | $spl50),
  inference(backward_demodulation,[],[f125,f60])).
fof(f32178,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32124,f77])).
fof(f32124,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f75,f73,f71,f31875])).
fof(f32177,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32125,f71])).
fof(f32125,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f75,f73,f77,f31875])).
fof(f32176,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32126,f73])).
fof(f32126,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f75,f71,f77,f31875])).
fof(f32175,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32127,f75])).
fof(f32127,plain,(
  s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f73,f71,f77,f31875])).
fof(f32174,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32128,f65])).
fof(f32128,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f75,f73,f71,f77,f31875])).
fof(f32173,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32129,f63])).
fof(f32129,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f65,f75,f73,f71,f77,f31875])).
fof(f32172,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32130,f87])).
fof(f32130,plain,(
  s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f63,f65,f75,f73,f71,f77,f31875])).
fof(f32171,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32131,f91])).
fof(f32131,plain,(
  s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f87,f63,f65,f75,f73,f71,f77,f31875])).
fof(f32170,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32132,f67])).
fof(f32132,plain,(
  s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f91,f87,f63,f65,f75,f73,f71,f77,f31875])).
fof(f32169,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32133,f89])).
fof(f32133,plain,(
  s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f67,f91,f87,f63,f65,f75,f73,f71,f77,f31875])).
fof(f32168,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32134,f85])).
fof(f32134,plain,(
  s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f89,f67,f91,f87,f63,f65,f75,f73,f71,f77,f31875])).
fof(f32167,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32135,f69])).
fof(f32135,plain,(
  s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f85,f89,f67,f91,f87,f63,f65,f75,f73,f71,f77,f31875])).
fof(f32166,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32136,f62])).
fof(f32136,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f69,f85,f89,f67,f91,f87,f63,f65,f75,f73,f71,f77,f31875])).
fof(f32165,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32138,f71])).
fof(f32138,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f75,f73,f77,f31875])).
fof(f32164,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32139,f73])).
fof(f32139,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f75,f71,f77,f31875])).
fof(f32163,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32140,f75])).
fof(f32140,plain,(
  s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f73,f71,f77,f31875])).
fof(f32162,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32141,f65])).
fof(f32141,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f75,f73,f71,f77,f31875])).
fof(f32161,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32142,f63])).
fof(f32142,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f65,f75,f73,f71,f77,f31875])).
fof(f32160,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32143,f87])).
fof(f32143,plain,(
  s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f63,f65,f75,f73,f71,f77,f31875])).
fof(f32159,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32144,f91])).
fof(f32144,plain,(
  s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f87,f63,f65,f75,f73,f71,f77,f31875])).
fof(f32158,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32145,f67])).
fof(f32145,plain,(
  s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f91,f87,f63,f65,f75,f73,f71,f77,f31875])).
fof(f32157,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32146,f89])).
fof(f32146,plain,(
  s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f67,f91,f87,f63,f65,f75,f73,f71,f77,f31875])).
fof(f32156,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32147,f85])).
fof(f32147,plain,(
  s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f89,f67,f91,f87,f63,f65,f75,f73,f71,f77,f31875])).
fof(f32155,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32148,f69])).
fof(f32148,plain,(
  s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f85,f89,f67,f91,f87,f63,f65,f75,f73,f71,f77,f31875])).
fof(f32154,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(subsumption_resolution,[],[f32149,f62])).
fof(f32149,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f69,f85,f89,f67,f91,f87,f63,f65,f75,f73,f71,f77,f31875])).
fof(f32150,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f75,f73,f71,f77,f31875])).
fof(f32137,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl24 | $spl26 | $spl28 | $spl30 | $spl50)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f75,f73,f71,f77,f31875])).
fof(f32118,plain,(
  $false | ($spl39 | $spl50)),
  inference(subsumption_resolution,[],[f32117,f113])).
fof(f113,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl39),
  inference(cnf_transformation,[],[f113_D])).
fof(f113_D,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl39),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl39])])).
fof(f32117,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl39 | $spl50)),
  inference(subsumption_resolution,[],[f32099,f125])).
fof(f32099,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl39),
  inference(superposition,[],[f113,f42])).
fof(f31885,plain,(
  $false | ($spl18 | $spl35 | $spl36 | $spl50)),
  inference(subsumption_resolution,[],[f30390,f125])).
fof(f30390,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl18 | $spl35 | $spl36)),
  inference(superposition,[],[f109,f9179])).
fof(f31884,plain,(
  $false | ($spl50 | $spl87)),
  inference(subsumption_resolution,[],[f31883,f20202])).
fof(f31883,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl50 | $spl87)),
  inference(subsumption_resolution,[],[f27902,f125])).
fof(f27902,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | $spl87),
  inference(superposition,[],[f20202,f42])).
fof(f31882,plain,(
  $false | ($spl47 | $spl50)),
  inference(subsumption_resolution,[],[f31881,f121])).
fof(f31881,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl47 | $spl50)),
  inference(subsumption_resolution,[],[f26407,f125])).
fof(f26407,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl47),
  inference(superposition,[],[f121,f42])).
fof(f31880,plain,(
  $false | ($spl35 | $spl50)),
  inference(subsumption_resolution,[],[f31879,f109])).
fof(f31879,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl35 | $spl50)),
  inference(subsumption_resolution,[],[f9726,f125])).
fof(f9726,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl35),
  inference(superposition,[],[f109,f42])).
fof(f31878,plain,(
  $false | ($spl18 | $spl35 | $spl36 | $spl50)),
  inference(subsumption_resolution,[],[f9725,f125])).
fof(f9725,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl18 | $spl35 | $spl36)),
  inference(superposition,[],[f109,f9179])).
fof(f31834,plain,(
  $false | ($spl22 | $spl43 | $spl44 | $spl52)),
  inference(subsumption_resolution,[],[f126,f30424])).
fof(f30424,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl22 | $spl43 | $spl44)),
  inference(superposition,[],[f117,f20429])).
fof(f20429,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl22 | $spl44)),
  inference(backward_demodulation,[],[f120,f83])).
fof(f117,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl43),
  inference(cnf_transformation,[],[f117_D])).
fof(f117_D,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl43),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl43])])).
fof(f31612,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) = s(bool,X21) | s(bool,X20) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X22) | s(bool,X21) = s(bool,X22)) ) | $spl122),
  inference(cnf_transformation,[],[f31612_D])).
fof(f31612_D,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) = s(bool,X21) | s(bool,X20) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X22) | s(bool,X21) = s(bool,X22)) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f126,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl52),
  inference(cnf_transformation,[],[f126_D])).
fof(f126_D,plain,(
  s(bool,'T_0') = s(bool,'F_0') <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f30432,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X11) = s(bool,X12) | s(bool,X12) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | ($spl22 | $spl44)),
  inference(superposition,[],[f236,f20429])).
fof(f30435,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,X20) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl22 | $spl44)),
  inference(superposition,[],[f236,f20429])).
fof(f31610,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) = s(bool,X21) | s(bool,X20) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X22) | s(bool,X21) = s(bool,X22)) ) | $spl120),
  inference(cnf_transformation,[],[f31610_D])).
fof(f31610_D,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) = s(bool,X21) | s(bool,X20) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X22) | s(bool,X21) = s(bool,X22)) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f30505,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X11) = s(bool,X12) | s(bool,X12) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl36),
  inference(superposition,[],[f112,f236])).
fof(f30508,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,X20) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | $spl36),
  inference(superposition,[],[f112,f236])).
fof(f30521,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X11) = s(bool,X12) | s(bool,X12) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl36),
  inference(superposition,[],[f236,f112])).
fof(f30524,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,X20) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | $spl36),
  inference(superposition,[],[f236,f112])).
fof(f31608,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) = s(bool,X21) | s(bool,X20) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X22) | s(bool,X21) = s(bool,X22)) ) | $spl118),
  inference(cnf_transformation,[],[f31608_D])).
fof(f31608_D,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) = s(bool,X21) | s(bool,X20) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X22) | s(bool,X21) = s(bool,X22)) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f30592,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X11) = s(bool,X12) | s(bool,X12) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl44),
  inference(superposition,[],[f120,f236])).
fof(f30595,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,X20) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | $spl44),
  inference(superposition,[],[f120,f236])).
fof(f30609,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X11) = s(bool,X12) | s(bool,X12) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl44),
  inference(superposition,[],[f236,f120])).
fof(f30612,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,X20) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | $spl44),
  inference(superposition,[],[f236,f120])).
fof(f9116,plain,(
  ( ! [X48] : (p(s(bool,X48)) | s(bool,'F_0') = s(bool,X48)) ) | $spl72),
  inference(cnf_transformation,[],[f9116_D])).
fof(f9116_D,plain,(
  ( ! [X48] : (p(s(bool,X48)) | s(bool,'F_0') = s(bool,X48)) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f31605,plain,(
  ( ! [X43,X44] : (s(bool,'T_0') = s(bool,X44) | p(s(bool,X43)) | s(bool,'F_0') = s(bool,X43)) ) | ($spl38 | $spl66)),
  inference(duplicate_literal_removal,[],[f31604])).
fof(f31604,plain,(
  ( ! [X43,X44] : (s(bool,'T_0') = s(bool,X44) | p(s(bool,X43)) | s(bool,'T_0') = s(bool,X44) | s(bool,'F_0') = s(bool,X43)) ) | ($spl38 | $spl66)),
  inference(forward_demodulation,[],[f31594,f114])).
fof(f31594,plain,(
  ( ! [X43,X44] : (p(s(bool,X43)) | s(bool,X44) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X44) | s(bool,'F_0') = s(bool,X43)) ) | $spl66),
  inference(superposition,[],[f284,f5780])).
fof(f30328,plain,(
  $false | ($spl38 | $spl78)),
  inference(subsumption_resolution,[],[f30305,f40])).
fof(f30305,plain,(
  ~p(s(bool,'T_0')) | ($spl38 | $spl78)),
  inference(backward_demodulation,[],[f30304,f41])).
fof(f30304,plain,(
  ( ! [X65] : (s(bool,'T_0') = s(bool,X65)) ) | ($spl38 | $spl78)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f114,f236,f284,f486,f488,f1857,f1711,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f5076,f5077,f5079,f5748,f5747,f5689,f5671,f5650,f5302,f5399,f5478,f1701,f511,f490,f41,f15682,f52,f53,f54,f491,f493,f495,f763,f811,f835,f28553,f28468,f28469,f28470,f28471,f28472,f28473,f28474,f28475,f28476,f28477,f28478,f28479,f28480,f28520,f60,f59,f28548,f855])).
fof(f5478,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl38),
  inference(duplicate_literal_removal,[],[f5447])).
fof(f5447,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl38),
  inference(equality_factoring,[],[f1711])).
fof(f5399,plain,(
  ( ! [X123,X121,X124,X122] : (s(X123,f(s(bool,X124))) != s(X123,g(s(bool,X124))) | s(fun(bool,X123),X121) = s(fun(bool,X123),X122) | s(bool,'T_0') = s(bool,sK4(X121,X122,X123,bool)) | s(bool,X124) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl38),
  inference(superposition,[],[f43,f1711])).
fof(f5302,plain,(
  ( ! [X101,X99,X100,X98] : (s(X100,f(s(bool,'T_0'))) != s(X100,g(s(bool,'T_0'))) | s(fun(bool,X100),X98) = s(fun(bool,X100),X99) | s(bool,X101) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X101) = s(bool,sK4(X98,X99,X100,bool))) ) | $spl38),
  inference(superposition,[],[f43,f1711])).
fof(f5079,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,X16) = s(bool,X17) | s(bool,X18) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X17) = s(bool,X18) | s(bool,X16) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) ) | $spl38),
  inference(superposition,[],[f1711,f95])).
fof(f5077,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X5) = s(bool,X6) | s(bool,X7) = s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9) | s(bool,X4) = s(bool,X7)) ) | $spl38),
  inference(superposition,[],[f1711,f236])).
fof(f5076,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,X3)) ) | $spl38),
  inference(superposition,[],[f1711,f1711])).
fof(f1711,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,X1)) ) | $spl38),
  inference(condensation,[],[f1710])).
fof(f1710,plain,(
  ( ! [X118,X119,X117] : (s(bool,'T_0') = s(bool,X117) | s(bool,X118) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X118) = s(bool,X119) | s(bool,'T_0') = s(bool,X119)) ) | $spl38),
  inference(duplicate_literal_removal,[],[f601])).
fof(f601,plain,(
  ( ! [X118,X119,X117] : (s(bool,'T_0') = s(bool,X117) | s(bool,X118) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X117) | s(bool,X118) = s(bool,X119) | s(bool,'T_0') = s(bool,X119)) ) | $spl38),
  inference(superposition,[],[f236,f114])).
fof(f30250,plain,(
  $false | ($spl80 | $spl87)),
  inference(subsumption_resolution,[],[f29987,f29607])).
fof(f29607,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl80),
  inference(superposition,[],[f20197,f20197])).
fof(f29987,plain,(
  ( ! [X132] : (s(bool,'T_0') != s(bool,X132)) ) | ($spl80 | $spl87)),
  inference(superposition,[],[f20202,f29607])).
fof(f30249,plain,(
  $false | ($spl47 | $spl80)),
  inference(subsumption_resolution,[],[f29986,f29607])).
fof(f29986,plain,(
  ( ! [X131] : (s(bool,'T_0') != s(bool,X131)) ) | ($spl47 | $spl80)),
  inference(superposition,[],[f121,f29607])).
fof(f30248,plain,(
  $false | ($spl43 | $spl80)),
  inference(subsumption_resolution,[],[f29980,f29607])).
fof(f29980,plain,(
  ( ! [X122] : (s(bool,'T_0') != s(bool,X122)) ) | ($spl43 | $spl80)),
  inference(superposition,[],[f117,f29607])).
fof(f30247,plain,(
  $false | ($spl39 | $spl40 | $spl53 | $spl80)),
  inference(subsumption_resolution,[],[f29976,f29607])).
fof(f29976,plain,(
  ( ! [X116] : (s(bool,'T_0') != s(bool,X116)) ) | ($spl39 | $spl40 | $spl53 | $spl80)),
  inference(superposition,[],[f20196,f29607])).
fof(f20196,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f127,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f1916,f834,f838,f854,f1045,f1919,f962,f6671,f6672,f7130,f1701,f511,f490,f116,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f113,f7035])).
fof(f7035,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X0) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl40 | $spl53)),
  inference(equality_factoring,[],[f6671])).
fof(f7130,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53)),
  inference(subsumption_resolution,[],[f7002,f113])).
fof(f7002,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl39 | $spl40 | $spl53)),
  inference(superposition,[],[f113,f6671])).
fof(f6672,plain,(
  ( ! [X12,X10,X11] : (s(bool,X10) = s(bool,X11) | s(bool,X11) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | ($spl40 | $spl53)),
  inference(subsumption_resolution,[],[f6651,f127])).
fof(f6651,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X10) = s(bool,X11) | s(bool,X11) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl40),
  inference(superposition,[],[f116,f236])).
fof(f6671,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl40 | $spl53)),
  inference(subsumption_resolution,[],[f6645,f127])).
fof(f6645,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl40),
  inference(superposition,[],[f116,f95])).
fof(f1916,plain,(
  ( ! [X45,X46,X44] : (s(bool,'T_0') != s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | $spl53),
  inference(subsumption_resolution,[],[f822,f127])).
fof(f822,plain,(
  ( ! [X45,X46,X44] : (s(bool,'T_0') != s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | $spl53),
  inference(superposition,[],[f127,f236])).
fof(f30246,plain,(
  $false | ($spl39 | $spl80)),
  inference(subsumption_resolution,[],[f29973,f29607])).
fof(f29973,plain,(
  ( ! [X112] : (s(bool,'T_0') != s(bool,X112)) ) | ($spl39 | $spl80)),
  inference(superposition,[],[f113,f29607])).
fof(f30245,plain,(
  $false | ($spl35 | $spl36 | $spl53 | $spl80)),
  inference(subsumption_resolution,[],[f29970,f29607])).
fof(f29970,plain,(
  ( ! [X108] : (s(bool,'T_0') != s(bool,X108)) ) | ($spl35 | $spl36 | $spl53 | $spl80)),
  inference(superposition,[],[f12366,f29607])).
fof(f12366,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53)),
  inference(subsumption_resolution,[],[f12222,f109])).
fof(f12222,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl35 | $spl36 | $spl53)),
  inference(superposition,[],[f109,f9964])).
fof(f9964,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl36 | $spl53)),
  inference(subsumption_resolution,[],[f9938,f127])).
fof(f9938,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl36),
  inference(superposition,[],[f112,f95])).
fof(f30244,plain,(
  $false | ($spl35 | $spl80)),
  inference(subsumption_resolution,[],[f29968,f29607])).
fof(f29968,plain,(
  ( ! [X106] : (s(bool,'T_0') != s(bool,X106)) ) | ($spl35 | $spl80)),
  inference(superposition,[],[f109,f29607])).
fof(f30243,plain,(
  $false | ($spl53 | $spl80)),
  inference(subsumption_resolution,[],[f29965,f29607])).
fof(f29965,plain,(
  ( ! [X101] : (s(bool,'T_0') != s(bool,X101)) ) | ($spl53 | $spl80)),
  inference(superposition,[],[f127,f29607])).
fof(f30242,plain,(
  $false | $spl80),
  inference(subsumption_resolution,[],[f29964,f29904])).
fof(f29904,plain,(
  ( ! [X75] : (p(s(bool,X75))) ) | $spl80),
  inference(superposition,[],[f40,f29607])).
fof(f29964,plain,(
  ( ! [X100] : (~p(s(bool,X100))) ) | $spl80),
  inference(superposition,[],[f41,f29607])).
fof(f30241,plain,(
  $false | ($spl80 | $spl87)),
  inference(subsumption_resolution,[],[f29932,f29607])).
fof(f29932,plain,(
  ( ! [X132] : (s(bool,'T_0') != s(bool,X132)) ) | ($spl80 | $spl87)),
  inference(superposition,[],[f20202,f29607])).
fof(f30240,plain,(
  $false | ($spl47 | $spl80)),
  inference(subsumption_resolution,[],[f29931,f29607])).
fof(f29931,plain,(
  ( ! [X131] : (s(bool,'T_0') != s(bool,X131)) ) | ($spl47 | $spl80)),
  inference(superposition,[],[f121,f29607])).
fof(f30239,plain,(
  $false | ($spl43 | $spl80)),
  inference(subsumption_resolution,[],[f29925,f29607])).
fof(f29925,plain,(
  ( ! [X122] : (s(bool,'T_0') != s(bool,X122)) ) | ($spl43 | $spl80)),
  inference(superposition,[],[f117,f29607])).
fof(f30238,plain,(
  $false | ($spl39 | $spl40 | $spl53 | $spl80)),
  inference(subsumption_resolution,[],[f29921,f29607])).
fof(f29921,plain,(
  ( ! [X116] : (s(bool,'T_0') != s(bool,X116)) ) | ($spl39 | $spl40 | $spl53 | $spl80)),
  inference(superposition,[],[f20196,f29607])).
fof(f30237,plain,(
  $false | ($spl39 | $spl80)),
  inference(subsumption_resolution,[],[f29918,f29607])).
fof(f29918,plain,(
  ( ! [X112] : (s(bool,'T_0') != s(bool,X112)) ) | ($spl39 | $spl80)),
  inference(superposition,[],[f113,f29607])).
fof(f30236,plain,(
  $false | ($spl35 | $spl36 | $spl53 | $spl80)),
  inference(subsumption_resolution,[],[f29915,f29607])).
fof(f29915,plain,(
  ( ! [X108] : (s(bool,'T_0') != s(bool,X108)) ) | ($spl35 | $spl36 | $spl53 | $spl80)),
  inference(superposition,[],[f12366,f29607])).
fof(f30235,plain,(
  $false | ($spl35 | $spl80)),
  inference(subsumption_resolution,[],[f29913,f29607])).
fof(f29913,plain,(
  ( ! [X106] : (s(bool,'T_0') != s(bool,X106)) ) | ($spl35 | $spl80)),
  inference(superposition,[],[f109,f29607])).
fof(f30234,plain,(
  $false | ($spl53 | $spl80)),
  inference(subsumption_resolution,[],[f29910,f29607])).
fof(f29910,plain,(
  ( ! [X101] : (s(bool,'T_0') != s(bool,X101)) ) | ($spl53 | $spl80)),
  inference(superposition,[],[f127,f29607])).
fof(f30233,plain,(
  $false | $spl80),
  inference(subsumption_resolution,[],[f29909,f29904])).
fof(f29909,plain,(
  ( ! [X100] : (~p(s(bool,X100))) ) | $spl80),
  inference(superposition,[],[f41,f29607])).
fof(f29792,plain,(
  $false | ($spl53 | $spl80)),
  inference(unit_resulting_resolution,[],[f127,f29607])).
fof(f29007,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(subsumption_resolution,[],[f29006,f77])).
fof(f29006,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(subsumption_resolution,[],[f29005,f62])).
fof(f29005,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(subsumption_resolution,[],[f29004,f27071])).
fof(f27071,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl32 | $spl44 | $spl47 | $spl83)),
  inference(forward_demodulation,[],[f93,f26430])).
fof(f26430,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl44 | $spl47 | $spl83)),
  inference(forward_demodulation,[],[f26381,f120])).
fof(f26381,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl47 | $spl83)),
  inference(unit_resulting_resolution,[],[f20199,f121,f121,f121,f236])).
fof(f29004,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(subsumption_resolution,[],[f29003,f120])).
fof(f29003,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(subsumption_resolution,[],[f29002,f116])).
fof(f29002,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(subsumption_resolution,[],[f29001,f112])).
fof(f29001,plain,(
  s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(trivial_inequality_removal,[],[f29000])).
fof(f29000,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(equality_resolution,[],[f27052])).
fof(f27052,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(forward_demodulation,[],[f27051,f63])).
fof(f27051,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(forward_demodulation,[],[f27050,f65])).
fof(f27050,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(forward_demodulation,[],[f27049,f67])).
fof(f27049,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(forward_demodulation,[],[f27048,f69])).
fof(f27048,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(forward_demodulation,[],[f27047,f71])).
fof(f27047,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(forward_demodulation,[],[f27046,f73])).
fof(f27046,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(forward_demodulation,[],[f27045,f75])).
fof(f27045,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(forward_demodulation,[],[f27044,f9179])).
fof(f27044,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl44 | $spl47 | $spl83)),
  inference(forward_demodulation,[],[f27043,f5927])).
fof(f27043,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl47 | $spl83)),
  inference(forward_demodulation,[],[f27042,f20429])).
fof(f27042,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl47 | $spl83)),
  inference(forward_demodulation,[],[f27041,f85])).
fof(f27041,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl26 | $spl28 | $spl30 | $spl44 | $spl47 | $spl83)),
  inference(forward_demodulation,[],[f27040,f87])).
fof(f27040,plain,(
  ( ! [X0] : (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl30 | $spl44 | $spl47 | $spl83)),
  inference(forward_demodulation,[],[f27039,f91])).
fof(f27039,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl44 | $spl47 | $spl83)),
  inference(forward_demodulation,[],[f25036,f26430])).
fof(f25036,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | $spl28),
  inference(superposition,[],[f60,f89])).
fof(f28559,plain,(
  ( ! [X2,X3] : (s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,sK4(X2,X3,bool,bool)) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X2,X3,bool,bool))))) ) | $spl102),
  inference(cnf_transformation,[],[f28559_D])).
fof(f28559_D,plain,(
  ( ! [X2,X3] : (s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,sK4(X2,X3,bool,bool)) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X2,X3,bool,bool))))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f28573,plain,(
  ( ! [X66,X67] : (s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X66) = s(fun(bool,bool),X67) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X66,X67,bool,bool)))) | s(bool,'T_0') = s(bool,sK4(X66,X67,bool,bool))) ) | ($spl44 | $spl53)),
  inference(forward_demodulation,[],[f28486,f120])).
fof(f28486,plain,(
  ( ! [X66,X67] : (s(bool,'T_0') = s(bool,g(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))))) | s(fun(bool,bool),X66) = s(fun(bool,bool),X67) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X66,X67,bool,bool)))) | s(bool,'T_0') = s(bool,sK4(X66,X67,bool,bool))) ) | ($spl44 | $spl53)),
  inference(superposition,[],[f495,f21225])).
fof(f21225,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl44 | $spl53)),
  inference(subsumption_resolution,[],[f21191,f127])).
fof(f21191,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl44),
  inference(superposition,[],[f120,f95])).
fof(f28572,plain,(
  ( ! [X64,X65] : (s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X64) = s(fun(bool,bool),X65) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X64,X65,bool,bool)))) | s(bool,'T_0') = s(bool,sK4(X64,X65,bool,bool))) ) | ($spl22 | $spl44 | $spl53)),
  inference(forward_demodulation,[],[f28485,f20429])).
fof(f28485,plain,(
  ( ! [X64,X65] : (s(bool,'T_0') = s(bool,g(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))))) | s(fun(bool,bool),X64) = s(fun(bool,bool),X65) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X64,X65,bool,bool)))) | s(bool,'T_0') = s(bool,sK4(X64,X65,bool,bool))) ) | ($spl22 | $spl44 | $spl53)),
  inference(superposition,[],[f495,f20464])).
fof(f20464,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl22 | $spl44 | $spl53)),
  inference(subsumption_resolution,[],[f20430,f127])).
fof(f20430,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl22 | $spl44)),
  inference(superposition,[],[f20429,f95])).
fof(f28571,plain,(
  ( ! [X62,X63] : (s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X62) = s(fun(bool,bool),X63) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X62,X63,bool,bool)))) | s(bool,'T_0') = s(bool,sK4(X62,X63,bool,bool))) ) | ($spl36 | $spl53)),
  inference(forward_demodulation,[],[f28484,f112])).
fof(f28484,plain,(
  ( ! [X62,X63] : (s(bool,'T_0') = s(bool,g(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))))) | s(fun(bool,bool),X62) = s(fun(bool,bool),X63) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X62,X63,bool,bool)))) | s(bool,'T_0') = s(bool,sK4(X62,X63,bool,bool))) ) | ($spl36 | $spl53)),
  inference(superposition,[],[f495,f9964])).
fof(f28570,plain,(
  ( ! [X61,X60] : (s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X60) = s(fun(bool,bool),X61) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X60,X61,bool,bool)))) | s(bool,'T_0') = s(bool,sK4(X60,X61,bool,bool))) ) | ($spl18 | $spl36 | $spl53)),
  inference(forward_demodulation,[],[f28483,f9179])).
fof(f28483,plain,(
  ( ! [X61,X60] : (s(bool,'T_0') = s(bool,g(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))))) | s(fun(bool,bool),X60) = s(fun(bool,bool),X61) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X60,X61,bool,bool)))) | s(bool,'T_0') = s(bool,sK4(X60,X61,bool,bool))) ) | ($spl18 | $spl36 | $spl53)),
  inference(superposition,[],[f495,f9336])).
fof(f9336,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl18 | $spl36 | $spl53)),
  inference(subsumption_resolution,[],[f9310,f127])).
fof(f9310,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl18 | $spl36)),
  inference(superposition,[],[f9179,f95])).
fof(f28569,plain,(
  ( ! [X59,X58] : (s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X58) = s(fun(bool,bool),X59) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X58,X59,bool,bool)))) | s(bool,'T_0') = s(bool,sK4(X58,X59,bool,bool))) ) | ($spl40 | $spl53)),
  inference(forward_demodulation,[],[f28482,f116])).
fof(f28482,plain,(
  ( ! [X59,X58] : (s(bool,'T_0') = s(bool,g(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))))) | s(fun(bool,bool),X58) = s(fun(bool,bool),X59) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X58,X59,bool,bool)))) | s(bool,'T_0') = s(bool,sK4(X58,X59,bool,bool))) ) | ($spl40 | $spl53)),
  inference(superposition,[],[f495,f6671])).
fof(f28568,plain,(
  ( ! [X57,X56] : (s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X56) = s(fun(bool,bool),X57) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X56,X57,bool,bool)))) | s(bool,'T_0') = s(bool,sK4(X56,X57,bool,bool))) ) | ($spl20 | $spl40 | $spl53)),
  inference(forward_demodulation,[],[f28481,f5927])).
fof(f28481,plain,(
  ( ! [X57,X56] : (s(bool,'T_0') = s(bool,g(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))))) | s(fun(bool,bool),X56) = s(fun(bool,bool),X57) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X56,X57,bool,bool)))) | s(bool,'T_0') = s(bool,sK4(X56,X57,bool,bool))) ) | ($spl20 | $spl40 | $spl53)),
  inference(superposition,[],[f495,f6045])).
fof(f6045,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl20 | $spl40 | $spl53)),
  inference(subsumption_resolution,[],[f6019,f127])).
fof(f6019,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl20 | $spl40)),
  inference(superposition,[],[f5927,f95])).
fof(f28567,plain,(
  ( ! [X39,X38,X40] : (s(bool,'T_0') = s(bool,g(s(bool,X38))) | s(bool,'T_0') = s(bool,X40) | s(bool,X39) = s(bool,X40) | s(bool,X38) = s(bool,X39)) ) | $spl116),
  inference(cnf_transformation,[],[f28567_D])).
fof(f28567_D,plain,(
  ( ! [X39,X38,X40] : (s(bool,'T_0') = s(bool,g(s(bool,X38))) | s(bool,'T_0') = s(bool,X40) | s(bool,X39) = s(bool,X40) | s(bool,X38) = s(bool,X39)) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f28480,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s(bool,'T_0') = s(bool,g(s(bool,X53))) | s(fun(bool,bool),X51) = s(fun(bool,bool),X52) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X51,X52,bool,bool)))) | s(bool,X53) = s(bool,X54) | s(bool,X54) = s(bool,X55) | s(bool,'T_0') = s(bool,X55) | s(bool,'T_0') = s(bool,sK4(X51,X52,bool,bool))) )),
  inference(superposition,[],[f495,f236])).
fof(f28566,plain,(
  ( ! [X35,X31,X34,X32] : (s(fun(bool,bool),X31) = s(fun(bool,bool),X32) | s(bool,'T_0') = s(bool,X35) | s(bool,X34) = s(bool,X35) | s(bool,X34) = s(bool,sK4(X31,X32,bool,bool)) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X31,X32,bool,bool))))) ) | $spl114),
  inference(cnf_transformation,[],[f28566_D])).
fof(f28566_D,plain,(
  ( ! [X35,X31,X34,X32] : (s(fun(bool,bool),X31) = s(fun(bool,bool),X32) | s(bool,'T_0') = s(bool,X35) | s(bool,X34) = s(bool,X35) | s(bool,X34) = s(bool,sK4(X31,X32,bool,bool)) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X31,X32,bool,bool))))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f28563,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,g(s(bool,X9))) | s(bool,'T_0') = s(bool,X9)) ) | $spl108),
  inference(cnf_transformation,[],[f28563_D])).
fof(f28563_D,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,g(s(bool,X9))) | s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f28479,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s(bool,'T_0') = s(bool,g(s(bool,X48))) | s(fun(bool,bool),X46) = s(fun(bool,bool),X47) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X46,X47,bool,bool)))) | s(bool,X49) = s(bool,sK4(X46,X47,bool,bool)) | s(bool,X49) = s(bool,X50) | s(bool,'T_0') = s(bool,X50) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f495,f236])).
fof(f28565,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(fun(bool,bool),X26) = s(fun(bool,bool),X27) | s(bool,'T_0') = s(bool,X30) | s(bool,X28) = s(bool,X30) | s(bool,X29) = s(bool,sK4(X26,X27,bool,bool)) | s(bool,X28) = s(bool,X29) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X26,X27,bool,bool))))) ) | $spl112),
  inference(cnf_transformation,[],[f28565_D])).
fof(f28565_D,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(fun(bool,bool),X26) = s(fun(bool,bool),X27) | s(bool,'T_0') = s(bool,X30) | s(bool,X28) = s(bool,X30) | s(bool,X29) = s(bool,sK4(X26,X27,bool,bool)) | s(bool,X28) = s(bool,X29) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X26,X27,bool,bool))))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f28558,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl100),
  inference(cnf_transformation,[],[f28558_D])).
fof(f28558_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f28478,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X41) = s(fun(bool,bool),X42) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X41,X42,bool,bool)))) | s(bool,X43) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,X43) = s(bool,sK4(X41,X42,bool,bool))) )),
  inference(superposition,[],[f495,f236])).
fof(f28477,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s(bool,'T_0') = s(bool,g(s(bool,X38))) | s(fun(bool,bool),X36) = s(fun(bool,bool),X37) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X36,X37,bool,bool)))) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,sK4(X36,X37,bool,bool)) | s(bool,X39) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f495,f236])).
fof(f28476,plain,(
  ( ! [X35,X33,X31,X34,X32] : (s(bool,'T_0') = s(bool,g(s(bool,X33))) | s(fun(bool,bool),X31) = s(fun(bool,bool),X32) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X31,X32,bool,bool)))) | s(bool,X34) = s(bool,sK4(X31,X32,bool,bool)) | s(bool,'T_0') = s(bool,X33) | s(bool,X34) = s(bool,X35) | s(bool,'T_0') = s(bool,X35)) )),
  inference(superposition,[],[f495,f236])).
fof(f28475,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X26) = s(fun(bool,bool),X27) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X26,X27,bool,bool)))) | s(bool,X28) = s(bool,X29) | s(bool,X29) = s(bool,sK4(X26,X27,bool,bool)) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f495,f236])).
fof(f28562,plain,(
  ( ! [X6,X4,X5] : (s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'T_0') = s(bool,X6) | s(bool,X6) = s(bool,sK4(X4,X5,bool,bool)) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X4,X5,bool,bool))))) ) | $spl106),
  inference(cnf_transformation,[],[f28562_D])).
fof(f28562_D,plain,(
  ( ! [X6,X4,X5] : (s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'T_0') = s(bool,X6) | s(bool,X6) = s(bool,sK4(X4,X5,bool,bool)) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X4,X5,bool,bool))))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f28564,plain,(
  ( ! [X19,X18] : (s(bool,'T_0') = s(bool,g(s(bool,X18))) | s(bool,'T_0') = s(bool,X19) | s(bool,X18) = s(bool,X19)) ) | $spl110),
  inference(cnf_transformation,[],[f28564_D])).
fof(f28564_D,plain,(
  ( ! [X19,X18] : (s(bool,'T_0') = s(bool,g(s(bool,X18))) | s(bool,'T_0') = s(bool,X19) | s(bool,X18) = s(bool,X19)) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f28474,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s(bool,'T_0') = s(bool,g(s(bool,X23))) | s(fun(bool,bool),X21) = s(fun(bool,bool),X22) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X21,X22,bool,bool)))) | s(bool,X24) = s(bool,sK4(X21,X22,bool,bool)) | s(bool,'T_0') = s(bool,X24) | s(bool,X23) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f495,f236])).
fof(f28473,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,'T_0') = s(bool,g(s(bool,X18))) | s(fun(bool,bool),X16) = s(fun(bool,bool),X17) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X16,X17,bool,bool)))) | s(bool,X18) = s(bool,X19) | s(bool,'T_0') = s(bool,X19) | s(bool,X20) = s(bool,sK4(X16,X17,bool,bool)) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f495,f236])).
fof(f28472,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X13) = s(fun(bool,bool),X14) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X13,X14,bool,bool)))) | s(bool,X15) = s(bool,sK4(X13,X14,bool,bool)) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f495,f95])).
fof(f28471,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,g(s(bool,X12))) | s(fun(bool,bool),X10) = s(fun(bool,bool),X11) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X10,X11,bool,bool)))) | s(bool,'T_0') = s(bool,sK4(X10,X11,bool,bool)) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f495,f95])).
fof(f28470,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') = s(bool,g(s(bool,X9))) | s(fun(bool,bool),X7) = s(fun(bool,bool),X8) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X7,X8,bool,bool)))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,sK4(X7,X8,bool,bool))) )),
  inference(superposition,[],[f495,f95])).
fof(f28469,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X4,X5,bool,bool)))) | s(bool,X6) = s(bool,sK4(X4,X5,bool,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f495,f95])).
fof(f28468,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X2,X3,bool,bool)))) | s(bool,'T_0') = s(bool,sK4(X2,X3,bool,bool))) )),
  inference(superposition,[],[f495,f42])).
fof(f28555,plain,(
  s(bool,f(s(bool,'F_0'))) != s(bool,g(s(bool,'F_0'))) | $spl97),
  inference(cnf_transformation,[],[f28555_D])).
fof(f28555_D,plain,(
  s(bool,f(s(bool,'F_0'))) != s(bool,g(s(bool,'F_0'))) <=> ~$spl97),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl97])])).
fof(f28556,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X0,X1,bool,bool))))) ) | $spl98),
  inference(cnf_transformation,[],[f28556_D])).
fof(f28556_D,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X0,X1,bool,bool))))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f28553,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X0,X1,bool,bool)))) | s(bool,f(s(bool,'F_0'))) != s(bool,g(s(bool,'F_0')))) )),
  inference(duplicate_literal_removal,[],[f28467])).
fof(f28467,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'F_0') != s(bool,f(s(bool,sK4(X0,X1,bool,bool)))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,f(s(bool,'F_0'))) != s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f495,f490])).
fof(f27036,plain,(
  $false | ($spl47 | $spl84)),
  inference(subsumption_resolution,[],[f26904,f20200])).
fof(f26904,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl47 | $spl84)),
  inference(superposition,[],[f121,f20200])).
fof(f25721,plain,(
  $false | ($spl32 | $spl47 | $spl48 | $spl58)),
  inference(subsumption_resolution,[],[f121,f25675])).
fof(f25675,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl32 | $spl48 | $spl58)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f2577,f1701,f511,f490,f124,f41,f60,f52,f53,f54,f59,f93,f2522,f855,f835,f811,f763,f495,f493,f491,f25596,f25665])).
fof(f25665,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl58),
  inference(equality_factoring,[],[f2522])).
fof(f25596,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl58),
  inference(superposition,[],[f2522,f2522])).
fof(f2577,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl32 | $spl48)),
  inference(backward_demodulation,[],[f124,f93])).
fof(f20420,plain,(
  ( ! [X26,X27] : (s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,X27)) ) | $spl92),
  inference(cnf_transformation,[],[f20420_D])).
fof(f20420_D,plain,(
  ( ! [X26,X27] : (s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,X27)) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f25691,plain,(
  p(s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) | $spl94),
  inference(cnf_transformation,[],[f25691_D])).
fof(f25691_D,plain,(
  p(s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f25632,plain,(
  ( ! [X43,X42] : (p(s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,'F_0') = s(bool,X42)) ) | $spl58),
  inference(superposition,[],[f284,f2522])).
fof(f25673,plain,(
  ( ! [X43,X44] : (s(bool,'T_0') = s(bool,X44) | p(s(bool,X43)) | s(bool,'F_0') = s(bool,X43)) ) | ($spl46 | $spl58)),
  inference(duplicate_literal_removal,[],[f25672])).
fof(f25672,plain,(
  ( ! [X43,X44] : (s(bool,'T_0') = s(bool,X44) | p(s(bool,X43)) | s(bool,'T_0') = s(bool,X44) | s(bool,'F_0') = s(bool,X43)) ) | ($spl46 | $spl58)),
  inference(forward_demodulation,[],[f25658,f122])).
fof(f25658,plain,(
  ( ! [X43,X44] : (p(s(bool,X43)) | s(bool,X44) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X44) | s(bool,'F_0') = s(bool,X43)) ) | $spl58),
  inference(superposition,[],[f284,f2522])).
fof(f24968,plain,(
  $false | ($spl46 | $spl49 | $spl87)),
  inference(global_subsumption,[],[f122,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1701,f511,f490,f41,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f491,f493,f495,f763,f811,f835,f855,f123])).
fof(f24967,plain,(
  $false | ($spl49 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f101,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1701,f511,f490,f41,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f491,f493,f495,f763,f811,f835,f855,f123])).
fof(f24966,plain,(
  $false | ($spl32 | $spl46 | $spl58 | $spl87)),
  inference(global_subsumption,[],[f2522,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f1701,f511,f490,f41,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f93,f491,f493,f495,f763,f811,f835,f855])).
fof(f2231,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl46),
  inference(duplicate_literal_removal,[],[f2200])).
fof(f2200,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl46),
  inference(equality_factoring,[],[f1703])).
fof(f2164,plain,(
  ( ! [X99,X97,X100,X98] : (s(X99,f(s(bool,X100))) != s(X99,g(s(bool,X100))) | s(fun(bool,X99),X97) = s(fun(bool,X99),X98) | s(bool,'T_0') = s(bool,sK4(X97,X98,X99,bool)) | s(bool,X100) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl46),
  inference(superposition,[],[f43,f1703])).
fof(f2095,plain,(
  ( ! [X76,X74,X77,X75] : (s(X76,f(s(bool,'T_0'))) != s(X76,g(s(bool,'T_0'))) | s(fun(bool,X76),X74) = s(fun(bool,X76),X75) | s(bool,X77) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X77) = s(bool,sK4(X74,X75,X76,bool))) ) | $spl46),
  inference(superposition,[],[f43,f1703])).
fof(f1928,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,X16) = s(bool,X17) | s(bool,X18) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X17) = s(bool,X18) | s(bool,X16) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) ) | $spl46),
  inference(superposition,[],[f1703,f95])).
fof(f1926,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X5) = s(bool,X6) | s(bool,X7) = s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9) | s(bool,X4) = s(bool,X7)) ) | $spl46),
  inference(superposition,[],[f1703,f236])).
fof(f1925,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,X3)) ) | $spl46),
  inference(superposition,[],[f1703,f1703])).
fof(f1703,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,X1)) ) | $spl46),
  inference(condensation,[],[f1702])).
fof(f1702,plain,(
  ( ! [X130,X131,X129] : (s(bool,'T_0') = s(bool,X129) | s(bool,X130) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X130) = s(bool,X131) | s(bool,'T_0') = s(bool,X131)) ) | $spl46),
  inference(duplicate_literal_removal,[],[f605])).
fof(f605,plain,(
  ( ! [X130,X131,X129] : (s(bool,'T_0') = s(bool,X129) | s(bool,X130) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X129) | s(bool,X130) = s(bool,X131) | s(bool,'T_0') = s(bool,X131)) ) | $spl46),
  inference(superposition,[],[f236,f122])).
fof(f1705,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X0) = s(bool,X1)) ) | ($spl32 | $spl46)),
  inference(condensation,[],[f1704])).
fof(f1704,plain,(
  ( ! [X127,X128,X126] : (s(bool,'T_0') = s(bool,X126) | s(bool,X127) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X127) = s(bool,X128) | s(bool,'T_0') = s(bool,X128)) ) | ($spl32 | $spl46)),
  inference(duplicate_literal_removal,[],[f604])).
fof(f604,plain,(
  ( ! [X127,X128,X126] : (s(bool,'T_0') = s(bool,X126) | s(bool,X127) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X126) | s(bool,X127) = s(bool,X128) | s(bool,'T_0') = s(bool,X128)) ) | ($spl32 | $spl46)),
  inference(superposition,[],[f236,f164])).
fof(f164,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl32 | $spl46)),
  inference(backward_demodulation,[],[f122,f93])).
fof(f24965,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f1701,f511,f490,f41,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f93,f491,f493,f495,f763,f811,f835,f855])).
fof(f24964,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f1701,f511,f490,f41,f855,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f93,f491,f493,f495,f763,f811,f835])).
fof(f24963,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f1701,f511,f490,f41,f855,f835,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f93,f491,f493,f495,f763,f811])).
fof(f24962,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f1701,f511,f490,f41,f855,f835,f811,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f93,f491,f493,f495,f763])).
fof(f24961,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f1701,f511,f490,f41,f855,f835,f811,f763,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f93,f491,f493,f495])).
fof(f24960,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f93,f491,f493])).
fof(f24959,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f93,f491])).
fof(f24958,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952,f93])).
fof(f24957,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24956,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24956,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24955,f63])).
fof(f24955,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24954,f65])).
fof(f24954,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24953,f67])).
fof(f24953,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24952,f69])).
fof(f24952,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24951,f71])).
fof(f24951,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24950,f73])).
fof(f24950,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24949,f75])).
fof(f24949,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24948,f9179])).
fof(f24948,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24947,f5927])).
fof(f24947,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44)),
  inference(forward_demodulation,[],[f24946,f20429])).
fof(f24943,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24942,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24942,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24941,f63])).
fof(f24941,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24940,f65])).
fof(f24940,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24939,f67])).
fof(f24939,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24938,f69])).
fof(f24938,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24937,f71])).
fof(f24937,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24936,f73])).
fof(f24936,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24935,f75])).
fof(f24935,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24934,f9179])).
fof(f24934,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24933,f5927])).
fof(f24933,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44)),
  inference(forward_demodulation,[],[f24932,f20429])).
fof(f24929,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24928,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24928,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24927,f63])).
fof(f24927,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24926,f65])).
fof(f24926,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24925,f67])).
fof(f24925,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24924,f69])).
fof(f24924,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24923,f71])).
fof(f24923,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24922,f73])).
fof(f24922,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24921,f75])).
fof(f24921,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24920,f9179])).
fof(f24920,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24919,f5927])).
fof(f24919,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44)),
  inference(forward_demodulation,[],[f24918,f20429])).
fof(f24915,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24914,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24914,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24913,f63])).
fof(f24913,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24912,f65])).
fof(f24912,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24911,f67])).
fof(f24911,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24910,f69])).
fof(f24910,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24909,f71])).
fof(f24909,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24908,f73])).
fof(f24908,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24907,f75])).
fof(f24907,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl36 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24906,f9179])).
fof(f24906,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl40 | $spl44)),
  inference(forward_demodulation,[],[f24905,f5927])).
fof(f24905,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44)),
  inference(forward_demodulation,[],[f24904,f20429])).
fof(f24901,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24900,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24900,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23257,f120])).
fof(f23257,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20202,f20202,f20202,f236])).
fof(f24899,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24898,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24898,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f23256,f20429])).
fof(f23256,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f20202,f20202,f20202,f236])).
fof(f24897,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24896,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24896,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23255,f116])).
fof(f23255,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20202,f20202,f20202,f236])).
fof(f24895,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24894,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24894,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f23254,f5927])).
fof(f23254,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f20202,f20202,f20202,f236])).
fof(f24893,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24892,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24892,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23253,f112])).
fof(f23253,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f20202,f20202,f20202,f236])).
fof(f24891,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24890,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24890,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f23252,f9179])).
fof(f23252,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f20202,f20202,f20202,f236])).
fof(f24889,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f23251,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f23251,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f20202,f20202,f20202,f236])).
fof(f24888,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24887,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24887,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23249,f120])).
fof(f23249,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20199,f20199,f20202,f236])).
fof(f24886,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24885,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24885,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23248,f20429])).
fof(f23248,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f20199,f20199,f20202,f236])).
fof(f24884,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24883,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24883,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23247,f116])).
fof(f23247,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20199,f20199,f20202,f236])).
fof(f24882,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24881,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24881,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23246,f5927])).
fof(f23246,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f20199,f20199,f20202,f236])).
fof(f24880,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24879,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24879,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23245,f112])).
fof(f23245,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f20199,f20199,f20202,f236])).
fof(f24878,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24877,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24877,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23244,f9179])).
fof(f23244,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f20199,f20199,f20202,f236])).
fof(f24876,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f23243,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f23243,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f20199,f20199,f20202,f236])).
fof(f24875,plain,(
  $false | ($spl32 | $spl43 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24874,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24874,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23241,f120])).
fof(f23241,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f117,f117,f20202,f236])).
fof(f24873,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24872,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24872,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f23240,f20429])).
fof(f23240,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f117,f117,f20202,f236])).
fof(f24871,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl43 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24870,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24870,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl43 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23239,f116])).
fof(f23239,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f117,f117,f20202,f236])).
fof(f24869,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl43 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24868,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24868,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl43 | $spl87)),
  inference(forward_demodulation,[],[f23238,f5927])).
fof(f23238,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f117,f117,f20202,f236])).
fof(f24867,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl43 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24866,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24866,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl43 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23237,f112])).
fof(f23237,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f117,f117,f20202,f236])).
fof(f24865,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl43 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24864,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24864,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl43 | $spl87)),
  inference(forward_demodulation,[],[f23236,f9179])).
fof(f23236,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f117,f117,f20202,f236])).
fof(f24863,plain,(
  $false | ($spl32 | $spl43 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f23235,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f23235,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f117,f117,f20202,f236])).
fof(f24862,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl44 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24861,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24861,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl44 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23233,f120])).
fof(f23233,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20196,f20196,f20202,f236])).
fof(f24860,plain,(
  $false | ($spl22 | $spl32 | $spl39 | $spl40 | $spl43 | $spl44 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24859,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24859,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl39 | $spl40 | $spl43 | $spl44 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23232,f20429])).
fof(f23232,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f20196,f20196,f20202,f236])).
fof(f24858,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24857,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24857,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23231,f116])).
fof(f23231,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20196,f20196,f20202,f236])).
fof(f24856,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24855,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24855,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23230,f5927])).
fof(f23230,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f20196,f20196,f20202,f236])).
fof(f24854,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24853,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24853,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23229,f112])).
fof(f23229,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f20196,f20196,f20202,f236])).
fof(f24852,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24851,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24851,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23228,f9179])).
fof(f23228,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f20196,f20196,f20202,f236])).
fof(f24850,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f23227,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f23227,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f20196,f20196,f20202,f236])).
fof(f24849,plain,(
  $false | ($spl32 | $spl39 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24848,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24848,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23225,f120])).
fof(f23225,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f113,f113,f20202,f236])).
fof(f24847,plain,(
  $false | ($spl22 | $spl32 | $spl39 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24846,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24846,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl39 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f23224,f20429])).
fof(f23224,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f113,f113,f20202,f236])).
fof(f24845,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24844,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24844,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23223,f116])).
fof(f23223,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f113,f113,f20202,f236])).
fof(f24843,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24842,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24842,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f23222,f5927])).
fof(f23222,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f113,f113,f20202,f236])).
fof(f24841,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl39 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24840,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24840,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23221,f112])).
fof(f23221,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f113,f113,f20202,f236])).
fof(f24839,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl39 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24838,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24838,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl39 | $spl87)),
  inference(forward_demodulation,[],[f23220,f9179])).
fof(f23220,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f113,f113,f20202,f236])).
fof(f24837,plain,(
  $false | ($spl32 | $spl39 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f23219,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f23219,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f113,f113,f20202,f236])).
fof(f24836,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl44 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24835,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24835,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl44 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23217,f120])).
fof(f23217,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f12366,f12366,f20202,f236])).
fof(f24834,plain,(
  $false | ($spl22 | $spl32 | $spl35 | $spl36 | $spl43 | $spl44 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24833,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24833,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl35 | $spl36 | $spl43 | $spl44 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23216,f20429])).
fof(f23216,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f12366,f12366,f20202,f236])).
fof(f24832,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24831,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24831,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23215,f116])).
fof(f23215,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f12366,f12366,f20202,f236])).
fof(f24830,plain,(
  $false | ($spl20 | $spl32 | $spl35 | $spl36 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24829,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24829,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23214,f5927])).
fof(f23214,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f12366,f12366,f20202,f236])).
fof(f24828,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24827,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24827,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23213,f112])).
fof(f23213,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f12366,f12366,f20202,f236])).
fof(f24826,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24825,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24825,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23212,f9179])).
fof(f23212,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f12366,f12366,f20202,f236])).
fof(f24824,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f23211,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f23211,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f12366,f12366,f20202,f236])).
fof(f24823,plain,(
  $false | ($spl32 | $spl35 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24822,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24822,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23209,f120])).
fof(f23209,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f109,f109,f20202,f236])).
fof(f24821,plain,(
  $false | ($spl22 | $spl32 | $spl35 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24820,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24820,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl35 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f23208,f20429])).
fof(f23208,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f109,f109,f20202,f236])).
fof(f24819,plain,(
  $false | ($spl32 | $spl35 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24818,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24818,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23207,f116])).
fof(f23207,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f109,f109,f20202,f236])).
fof(f24817,plain,(
  $false | ($spl20 | $spl32 | $spl35 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24816,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24816,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl35 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f23206,f5927])).
fof(f23206,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f109,f109,f20202,f236])).
fof(f24815,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24814,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24814,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23205,f112])).
fof(f23205,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f109,f109,f20202,f236])).
fof(f24813,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24812,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24812,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f23204,f9179])).
fof(f23204,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f109,f109,f20202,f236])).
fof(f24811,plain,(
  $false | ($spl32 | $spl35 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f23203,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f23203,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f109,f109,f20202,f236])).
fof(f24810,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24809,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24809,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23201,f120])).
fof(f23201,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f127,f127,f20202,f236])).
fof(f24808,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24807,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24807,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23200,f20429])).
fof(f23200,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f127,f127,f20202,f236])).
fof(f24806,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24805,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24805,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23199,f116])).
fof(f23199,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f127,f127,f20202,f236])).
fof(f24804,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24803,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24803,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23198,f5927])).
fof(f23198,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f127,f127,f20202,f236])).
fof(f24802,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24801,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24801,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23197,f112])).
fof(f23197,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f127,f127,f20202,f236])).
fof(f24800,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24799,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24799,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23196,f9179])).
fof(f23196,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f127,f127,f20202,f236])).
fof(f24798,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f23195,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f23195,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f127,f127,f20202,f236])).
fof(f24797,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24796,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24796,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23190,f120])).
fof(f23190,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20202,f20202,f20202,f236])).
fof(f24795,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24794,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24794,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f23189,f20429])).
fof(f23189,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f20202,f20202,f20202,f236])).
fof(f24793,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24792,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24792,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23188,f116])).
fof(f23188,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20202,f20202,f20202,f236])).
fof(f24791,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24790,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24790,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f23187,f5927])).
fof(f23187,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f20202,f20202,f20202,f236])).
fof(f24789,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24788,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24788,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23186,f112])).
fof(f23186,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f20202,f20202,f20202,f236])).
fof(f24787,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24786,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24786,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f23185,f9179])).
fof(f23185,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f20202,f20202,f20202,f236])).
fof(f24785,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f23184,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f23184,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f20202,f20202,f20202,f236])).
fof(f24784,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24783,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24783,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23182,f120])).
fof(f23182,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f20199,f20202,f20202,f236])).
fof(f24782,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24781,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24781,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f23173,f20429])).
fof(f23173,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f117,f20202,f20202,f236])).
fof(f24780,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24779,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24779,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23164,f116])).
fof(f23164,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f20196,f20202,f20202,f236])).
fof(f24778,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24777,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24777,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f23155,f5927])).
fof(f23155,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f113,f20202,f20202,f236])).
fof(f24776,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24775,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24775,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23146,f112])).
fof(f23146,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f12366,f20202,f20202,f236])).
fof(f24774,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24773,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24773,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f23137,f9179])).
fof(f23137,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f109,f20202,f20202,f236])).
fof(f24772,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f23129,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f23129,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f127,f20202,f20202,f236])).
fof(f24771,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24770,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24770,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23110,f120])).
fof(f23110,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20202,f20202,f20202,f236])).
fof(f24769,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24768,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24768,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f23109,f20429])).
fof(f23109,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f20202,f20202,f20202,f236])).
fof(f24767,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24766,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24766,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23108,f116])).
fof(f23108,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20202,f20202,f20202,f236])).
fof(f24765,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24764,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24764,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f23107,f5927])).
fof(f23107,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f20202,f20202,f20202,f236])).
fof(f24763,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24762,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24762,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23106,f112])).
fof(f23106,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f20202,f20202,f20202,f236])).
fof(f24761,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24760,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24760,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f23105,f9179])).
fof(f23105,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f20202,f20202,f20202,f236])).
fof(f24759,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f23104,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f23104,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f20202,f20202,f20202,f236])).
fof(f24758,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24757,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24757,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23102,f120])).
fof(f23102,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f20199,f20202,f20202,f236])).
fof(f24756,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24755,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24755,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f23093,f20429])).
fof(f23093,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f117,f20202,f20202,f236])).
fof(f24754,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24753,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24753,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23084,f116])).
fof(f23084,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f20196,f20202,f20202,f236])).
fof(f24752,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24751,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24751,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f23075,f5927])).
fof(f23075,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f113,f20202,f20202,f236])).
fof(f24750,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24749,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24749,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23066,f112])).
fof(f23066,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f12366,f20202,f20202,f236])).
fof(f24748,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24747,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24747,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f23057,f9179])).
fof(f23057,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f109,f20202,f20202,f236])).
fof(f24746,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f23048,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f23048,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f127,f20202,f20202,f236])).
fof(f24745,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24744,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24744,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23016,f120])).
fof(f23016,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f20202,f20199,f20202,f236])).
fof(f24743,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24742,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24742,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23015,f120])).
fof(f23015,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20199,f20199,f20202,f236])).
fof(f24741,plain,(
  $false | ($spl32 | $spl43 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24740,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24740,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23014,f120])).
fof(f23014,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f117,f20199,f20202,f236])).
fof(f24739,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl44 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24738,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24738,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl44 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23013,f120])).
fof(f23013,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20196,f20199,f20202,f236])).
fof(f24737,plain,(
  $false | ($spl32 | $spl39 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24736,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24736,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23012,f120])).
fof(f23012,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f113,f20199,f20202,f236])).
fof(f24735,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl44 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24734,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24734,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl44 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23011,f120])).
fof(f23011,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f12366,f20199,f20202,f236])).
fof(f24733,plain,(
  $false | ($spl32 | $spl35 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24732,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24732,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23010,f120])).
fof(f23010,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f109,f20199,f20202,f236])).
fof(f24731,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24730,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24730,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23009,f120])).
fof(f23009,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f127,f20199,f20202,f236])).
fof(f24729,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24728,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24728,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f23008,f20429])).
fof(f23008,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f20202,f117,f20202,f236])).
fof(f24727,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24726,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24726,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f23007,f20429])).
fof(f23007,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20199,f117,f20202,f236])).
fof(f24725,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24724,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24724,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f23006,f20429])).
fof(f23006,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f117,f117,f20202,f236])).
fof(f24723,plain,(
  $false | ($spl22 | $spl32 | $spl39 | $spl40 | $spl43 | $spl44 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24722,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24722,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl39 | $spl40 | $spl43 | $spl44 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23005,f20429])).
fof(f23005,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20196,f117,f20202,f236])).
fof(f24721,plain,(
  $false | ($spl22 | $spl32 | $spl39 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24720,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24720,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl39 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f23004,f20429])).
fof(f23004,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f113,f117,f20202,f236])).
fof(f24719,plain,(
  $false | ($spl22 | $spl32 | $spl35 | $spl36 | $spl43 | $spl44 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24718,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24718,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl35 | $spl36 | $spl43 | $spl44 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23003,f20429])).
fof(f23003,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f12366,f117,f20202,f236])).
fof(f24717,plain,(
  $false | ($spl22 | $spl32 | $spl35 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24716,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24716,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl35 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f23002,f20429])).
fof(f23002,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f109,f117,f20202,f236])).
fof(f24715,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24714,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24714,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23001,f20429])).
fof(f23001,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f127,f117,f20202,f236])).
fof(f24713,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24712,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24712,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f23000,f116])).
fof(f23000,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f20202,f20196,f20202,f236])).
fof(f24711,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24710,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24710,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22999,f116])).
fof(f22999,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20199,f20196,f20202,f236])).
fof(f24709,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl43 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24708,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24708,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl43 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22998,f116])).
fof(f22998,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f117,f20196,f20202,f236])).
fof(f24707,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24706,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24706,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22997,f116])).
fof(f22997,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20196,f20196,f20202,f236])).
fof(f24705,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24704,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24704,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22996,f116])).
fof(f22996,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f113,f20196,f20202,f236])).
fof(f24703,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24702,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24702,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22995,f116])).
fof(f22995,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f12366,f20196,f20202,f236])).
fof(f24701,plain,(
  $false | ($spl32 | $spl35 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24700,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24700,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22994,f116])).
fof(f22994,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f109,f20196,f20202,f236])).
fof(f24699,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24698,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24698,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22993,f116])).
fof(f22993,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f127,f20196,f20202,f236])).
fof(f24697,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24696,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24696,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f22992,f5927])).
fof(f22992,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f20202,f113,f20202,f236])).
fof(f24695,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24694,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24694,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22991,f5927])).
fof(f22991,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20199,f113,f20202,f236])).
fof(f24693,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl43 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24692,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24692,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl43 | $spl87)),
  inference(forward_demodulation,[],[f22990,f5927])).
fof(f22990,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f117,f113,f20202,f236])).
fof(f24691,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24690,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24690,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22989,f5927])).
fof(f22989,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20196,f113,f20202,f236])).
fof(f24689,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24688,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24688,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f22988,f5927])).
fof(f22988,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f113,f113,f20202,f236])).
fof(f24687,plain,(
  $false | ($spl20 | $spl32 | $spl35 | $spl36 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24686,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24686,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22987,f5927])).
fof(f22987,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f12366,f113,f20202,f236])).
fof(f24685,plain,(
  $false | ($spl20 | $spl32 | $spl35 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24684,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24684,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl35 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f22986,f5927])).
fof(f22986,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f109,f113,f20202,f236])).
fof(f24683,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24682,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24682,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22985,f5927])).
fof(f22985,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f127,f113,f20202,f236])).
fof(f24681,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24680,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24680,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22984,f112])).
fof(f22984,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f20202,f12366,f20202,f236])).
fof(f24679,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24678,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24678,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22983,f112])).
fof(f22983,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20199,f12366,f20202,f236])).
fof(f24677,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl43 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24676,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24676,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl43 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22982,f112])).
fof(f22982,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f117,f12366,f20202,f236])).
fof(f24675,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24674,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24674,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22981,f112])).
fof(f22981,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20196,f12366,f20202,f236])).
fof(f24673,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl39 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24672,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24672,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22980,f112])).
fof(f22980,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f113,f12366,f20202,f236])).
fof(f24671,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24670,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24670,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22979,f112])).
fof(f22979,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f12366,f12366,f20202,f236])).
fof(f24669,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24668,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24668,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22978,f112])).
fof(f22978,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f109,f12366,f20202,f236])).
fof(f24667,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24666,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24666,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22977,f112])).
fof(f22977,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f127,f12366,f20202,f236])).
fof(f24665,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24664,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24664,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f22976,f9179])).
fof(f22976,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f20202,f109,f20202,f236])).
fof(f24663,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24662,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24662,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22975,f9179])).
fof(f22975,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20199,f109,f20202,f236])).
fof(f24661,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl43 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24660,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24660,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl43 | $spl87)),
  inference(forward_demodulation,[],[f22974,f9179])).
fof(f22974,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f117,f109,f20202,f236])).
fof(f24659,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24658,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24658,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22973,f9179])).
fof(f22973,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20196,f109,f20202,f236])).
fof(f24657,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl39 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24656,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24656,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl39 | $spl87)),
  inference(forward_demodulation,[],[f22972,f9179])).
fof(f22972,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f113,f109,f20202,f236])).
fof(f24655,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24654,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24654,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22971,f9179])).
fof(f22971,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f12366,f109,f20202,f236])).
fof(f24653,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24652,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24652,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f22970,f9179])).
fof(f22970,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f109,f109,f20202,f236])).
fof(f24651,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24650,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24650,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22969,f9179])).
fof(f22969,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f127,f109,f20202,f236])).
fof(f24649,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22968,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f22968,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f20202,f127,f20202,f236])).
fof(f24648,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f22967,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f22967,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20199,f127,f20202,f236])).
fof(f24647,plain,(
  $false | ($spl32 | $spl43 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22966,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f22966,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f117,f127,f20202,f236])).
fof(f24646,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22965,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f22965,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20196,f127,f20202,f236])).
fof(f24645,plain,(
  $false | ($spl32 | $spl39 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22964,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f22964,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f113,f127,f20202,f236])).
fof(f24644,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22963,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f22963,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f12366,f127,f20202,f236])).
fof(f24643,plain,(
  $false | ($spl32 | $spl35 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22962,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f22962,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f109,f127,f20202,f236])).
fof(f24642,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22961,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f22961,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f127,f127,f20202,f236])).
fof(f24641,plain,(
  $false | ($spl32 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24640,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24640,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22959,f112])).
fof(f22959,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f9964])).
fof(f24639,plain,(
  $false | ($spl18 | $spl32 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24638,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24638,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22958,f9179])).
fof(f22958,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f9336])).
fof(f24637,plain,(
  $false | ($spl32 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24636,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24636,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22957,f116])).
fof(f22957,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f6671])).
fof(f24635,plain,(
  $false | ($spl20 | $spl32 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24634,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24634,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22956,f5927])).
fof(f22956,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f6045])).
fof(f24633,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663,f22952])).
fof(f24632,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24631,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24631,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22949,f120])).
fof(f22949,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20202,f20202,f20202,f236])).
fof(f24630,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24629,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24629,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f22948,f20429])).
fof(f22948,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f20202,f20202,f20202,f236])).
fof(f24628,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24627,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24627,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22947,f116])).
fof(f22947,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20202,f20202,f20202,f236])).
fof(f24626,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24625,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24625,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f22946,f5927])).
fof(f22946,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f20202,f20202,f20202,f236])).
fof(f24624,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24623,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24623,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22945,f112])).
fof(f22945,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f20202,f20202,f20202,f236])).
fof(f24622,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24621,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24621,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f22944,f9179])).
fof(f22944,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f20202,f20202,f20202,f236])).
fof(f24620,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22943,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22943,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f20202,f20202,f20202,f236])).
fof(f24619,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24618,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24618,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22941,f120])).
fof(f22941,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f20199,f20202,f20202,f236])).
fof(f24617,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24616,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24616,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f22932,f20429])).
fof(f22932,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f117,f20202,f20202,f236])).
fof(f24615,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24614,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24614,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22923,f116])).
fof(f22923,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f20196,f20202,f20202,f236])).
fof(f24613,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24612,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24612,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f22914,f5927])).
fof(f22914,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f113,f20202,f20202,f236])).
fof(f24611,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24610,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24610,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22905,f112])).
fof(f22905,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f12366,f20202,f20202,f236])).
fof(f24609,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24608,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24608,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f22896,f9179])).
fof(f22896,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f109,f20202,f20202,f236])).
fof(f24607,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22887,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22887,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f127,f20202,f20202,f236])).
fof(f24606,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24605,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24605,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22870,f120])).
fof(f22870,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20202,f20202,f20202,f236])).
fof(f24604,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24603,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24603,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f22869,f20429])).
fof(f22869,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f20202,f20202,f20202,f236])).
fof(f24602,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24601,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24601,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22868,f116])).
fof(f22868,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20202,f20202,f20202,f236])).
fof(f24600,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24599,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24599,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f22867,f5927])).
fof(f22867,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f20202,f20202,f20202,f236])).
fof(f24598,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24597,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24597,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22866,f112])).
fof(f22866,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f20202,f20202,f20202,f236])).
fof(f24596,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24595,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24595,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f22865,f9179])).
fof(f22865,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f20202,f20202,f20202,f236])).
fof(f24594,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22864,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22864,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f20202,f20202,f20202,f236])).
fof(f24593,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24592,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24592,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22862,f120])).
fof(f22862,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20199,f20199,f20202,f236])).
fof(f24591,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24590,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24590,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22861,f20429])).
fof(f22861,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f20199,f20199,f20202,f236])).
fof(f24589,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24588,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24588,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22860,f116])).
fof(f22860,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20199,f20199,f20202,f236])).
fof(f24587,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24586,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24586,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22859,f5927])).
fof(f22859,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f20199,f20199,f20202,f236])).
fof(f24585,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24584,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24584,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22858,f112])).
fof(f22858,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f20199,f20199,f20202,f236])).
fof(f24583,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24582,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24582,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22857,f9179])).
fof(f22857,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f20199,f20199,f20202,f236])).
fof(f24581,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f22856,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22856,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f20199,f20199,f20202,f236])).
fof(f24580,plain,(
  $false | ($spl32 | $spl43 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24579,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24579,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22854,f120])).
fof(f22854,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f117,f117,f20202,f236])).
fof(f24578,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24577,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24577,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f22853,f20429])).
fof(f22853,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f117,f117,f20202,f236])).
fof(f24576,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl43 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24575,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24575,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl43 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22852,f116])).
fof(f22852,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f117,f117,f20202,f236])).
fof(f24574,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl43 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24573,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24573,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl43 | $spl87)),
  inference(forward_demodulation,[],[f22851,f5927])).
fof(f22851,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f117,f117,f20202,f236])).
fof(f24572,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl43 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24571,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24571,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl43 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22850,f112])).
fof(f22850,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f117,f117,f20202,f236])).
fof(f24570,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl43 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24569,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24569,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl43 | $spl87)),
  inference(forward_demodulation,[],[f22849,f9179])).
fof(f22849,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f117,f117,f20202,f236])).
fof(f24568,plain,(
  $false | ($spl32 | $spl43 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22848,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22848,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f117,f117,f20202,f236])).
fof(f24567,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl44 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24566,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24566,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl44 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22846,f120])).
fof(f22846,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20196,f20196,f20202,f236])).
fof(f24565,plain,(
  $false | ($spl22 | $spl32 | $spl39 | $spl40 | $spl43 | $spl44 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24564,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24564,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl39 | $spl40 | $spl43 | $spl44 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22845,f20429])).
fof(f22845,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f20196,f20196,f20202,f236])).
fof(f24563,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24562,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24562,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22844,f116])).
fof(f22844,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20196,f20196,f20202,f236])).
fof(f24561,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24560,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24560,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22843,f5927])).
fof(f22843,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f20196,f20196,f20202,f236])).
fof(f24559,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24558,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24558,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22842,f112])).
fof(f22842,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f20196,f20196,f20202,f236])).
fof(f24557,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24556,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24556,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22841,f9179])).
fof(f22841,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f20196,f20196,f20202,f236])).
fof(f24555,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22840,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22840,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f20196,f20196,f20202,f236])).
fof(f24554,plain,(
  $false | ($spl32 | $spl39 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24553,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24553,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22838,f120])).
fof(f22838,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f113,f113,f20202,f236])).
fof(f24552,plain,(
  $false | ($spl22 | $spl32 | $spl39 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24551,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24551,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl39 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f22837,f20429])).
fof(f22837,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f113,f113,f20202,f236])).
fof(f24550,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24549,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24549,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22836,f116])).
fof(f22836,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f113,f113,f20202,f236])).
fof(f24548,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24547,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24547,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f22835,f5927])).
fof(f22835,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f113,f113,f20202,f236])).
fof(f24546,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl39 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24545,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24545,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22834,f112])).
fof(f22834,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f113,f113,f20202,f236])).
fof(f24544,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl39 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24543,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24543,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl39 | $spl87)),
  inference(forward_demodulation,[],[f22833,f9179])).
fof(f22833,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f113,f113,f20202,f236])).
fof(f24542,plain,(
  $false | ($spl32 | $spl39 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22832,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22832,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f113,f113,f20202,f236])).
fof(f24541,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl44 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24540,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24540,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl44 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22830,f120])).
fof(f22830,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f12366,f12366,f20202,f236])).
fof(f24539,plain,(
  $false | ($spl22 | $spl32 | $spl35 | $spl36 | $spl43 | $spl44 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24538,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24538,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl35 | $spl36 | $spl43 | $spl44 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22829,f20429])).
fof(f22829,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f12366,f12366,f20202,f236])).
fof(f24537,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24536,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24536,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22828,f116])).
fof(f22828,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f12366,f12366,f20202,f236])).
fof(f24535,plain,(
  $false | ($spl20 | $spl32 | $spl35 | $spl36 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24534,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24534,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22827,f5927])).
fof(f22827,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f12366,f12366,f20202,f236])).
fof(f24533,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24532,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24532,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22826,f112])).
fof(f22826,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f12366,f12366,f20202,f236])).
fof(f24531,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24530,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24530,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22825,f9179])).
fof(f22825,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f12366,f12366,f20202,f236])).
fof(f24529,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22824,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22824,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f12366,f12366,f20202,f236])).
fof(f24528,plain,(
  $false | ($spl32 | $spl35 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24527,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24527,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22822,f120])).
fof(f22822,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f109,f109,f20202,f236])).
fof(f24526,plain,(
  $false | ($spl22 | $spl32 | $spl35 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24525,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24525,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl35 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f22821,f20429])).
fof(f22821,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f109,f109,f20202,f236])).
fof(f24524,plain,(
  $false | ($spl32 | $spl35 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24523,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24523,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22820,f116])).
fof(f22820,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f109,f109,f20202,f236])).
fof(f24522,plain,(
  $false | ($spl20 | $spl32 | $spl35 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24521,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24521,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl35 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f22819,f5927])).
fof(f22819,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f109,f109,f20202,f236])).
fof(f24520,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24519,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24519,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22818,f112])).
fof(f22818,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f109,f109,f20202,f236])).
fof(f24518,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24517,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24517,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f22817,f9179])).
fof(f22817,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f109,f109,f20202,f236])).
fof(f24516,plain,(
  $false | ($spl32 | $spl35 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22816,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22816,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f109,f109,f20202,f236])).
fof(f24515,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24514,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24514,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22814,f120])).
fof(f22814,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f127,f127,f20202,f236])).
fof(f24513,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24512,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24512,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22813,f20429])).
fof(f22813,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f127,f127,f20202,f236])).
fof(f24511,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24510,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24510,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22812,f116])).
fof(f22812,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f127,f127,f20202,f236])).
fof(f24509,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24508,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24508,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22811,f5927])).
fof(f22811,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f127,f127,f20202,f236])).
fof(f24507,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24506,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24506,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22810,f112])).
fof(f22810,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f127,f127,f20202,f236])).
fof(f24505,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24504,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24504,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22809,f9179])).
fof(f22809,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f127,f127,f20202,f236])).
fof(f24503,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22808,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22808,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f127,f127,f20202,f236])).
fof(f24502,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24501,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24501,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22805,f120])).
fof(f22805,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20202,f20202,f20202,f236])).
fof(f24500,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24499,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24499,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f22804,f20429])).
fof(f22804,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f20202,f20202,f20202,f236])).
fof(f24498,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24497,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24497,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22803,f116])).
fof(f22803,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20202,f20202,f20202,f236])).
fof(f24496,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24495,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24495,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f22802,f5927])).
fof(f22802,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f20202,f20202,f20202,f236])).
fof(f24494,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24493,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24493,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22801,f112])).
fof(f22801,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f20202,f20202,f20202,f236])).
fof(f24492,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24491,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24491,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f22800,f9179])).
fof(f22800,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f20202,f20202,f20202,f236])).
fof(f24490,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22799,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22799,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f20202,f20202,f20202,f236])).
fof(f24489,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24488,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24488,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22797,f120])).
fof(f22797,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f20199,f20202,f20202,f236])).
fof(f24487,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24486,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24486,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f22788,f20429])).
fof(f22788,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f117,f20202,f20202,f236])).
fof(f24485,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24484,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24484,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22779,f116])).
fof(f22779,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f20196,f20202,f20202,f236])).
fof(f24483,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24482,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24482,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f22770,f5927])).
fof(f22770,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f113,f20202,f20202,f236])).
fof(f24481,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24480,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24480,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22761,f112])).
fof(f22761,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f12366,f20202,f20202,f236])).
fof(f24479,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24478,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24478,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f22752,f9179])).
fof(f22752,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f109,f20202,f20202,f236])).
fof(f24477,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22743,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22743,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20202,f127,f20202,f20202,f236])).
fof(f24476,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24475,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24475,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22726,f120])).
fof(f22726,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20202,f20202,f20202,f236])).
fof(f24474,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24473,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24473,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f22725,f20429])).
fof(f22725,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f20202,f20202,f20202,f236])).
fof(f24472,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24471,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24471,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22724,f116])).
fof(f22724,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20202,f20202,f20202,f236])).
fof(f24470,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24469,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24469,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f22723,f5927])).
fof(f22723,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f20202,f20202,f20202,f236])).
fof(f24468,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24467,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24467,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22722,f112])).
fof(f22722,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f20202,f20202,f20202,f236])).
fof(f24466,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24465,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24465,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f22721,f9179])).
fof(f22721,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f20202,f20202,f20202,f236])).
fof(f24464,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22720,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22720,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f20202,f20202,f20202,f236])).
fof(f24463,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24462,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24462,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22718,f120])).
fof(f22718,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20199,f20199,f20202,f236])).
fof(f24461,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24460,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24460,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22717,f20429])).
fof(f22717,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f20199,f20199,f20202,f236])).
fof(f24459,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24458,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24458,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22716,f116])).
fof(f22716,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20199,f20199,f20202,f236])).
fof(f24457,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24456,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24456,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22715,f5927])).
fof(f22715,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f20199,f20199,f20202,f236])).
fof(f24455,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24454,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24454,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22714,f112])).
fof(f22714,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f20199,f20199,f20202,f236])).
fof(f24453,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24452,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24452,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22713,f9179])).
fof(f22713,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f20199,f20199,f20202,f236])).
fof(f24451,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f22712,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22712,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f20199,f20199,f20202,f236])).
fof(f24450,plain,(
  $false | ($spl32 | $spl43 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24449,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24449,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22710,f120])).
fof(f22710,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f117,f117,f20202,f236])).
fof(f24448,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24447,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24447,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f22709,f20429])).
fof(f22709,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f117,f117,f20202,f236])).
fof(f24446,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl43 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24445,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24445,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl43 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22708,f116])).
fof(f22708,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f117,f117,f20202,f236])).
fof(f24444,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl43 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24443,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24443,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl43 | $spl87)),
  inference(forward_demodulation,[],[f22707,f5927])).
fof(f22707,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f117,f117,f20202,f236])).
fof(f24442,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl43 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24441,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24441,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl43 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22706,f112])).
fof(f22706,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f117,f117,f20202,f236])).
fof(f24440,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl43 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24439,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24439,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl43 | $spl87)),
  inference(forward_demodulation,[],[f22705,f9179])).
fof(f22705,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f117,f117,f20202,f236])).
fof(f24438,plain,(
  $false | ($spl32 | $spl43 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22704,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22704,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f117,f117,f20202,f236])).
fof(f24437,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl44 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24436,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24436,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl44 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22702,f120])).
fof(f22702,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20196,f20196,f20202,f236])).
fof(f24435,plain,(
  $false | ($spl22 | $spl32 | $spl39 | $spl40 | $spl43 | $spl44 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24434,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24434,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl39 | $spl40 | $spl43 | $spl44 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22701,f20429])).
fof(f22701,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f20196,f20196,f20202,f236])).
fof(f24433,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24432,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24432,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22700,f116])).
fof(f22700,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20196,f20196,f20202,f236])).
fof(f24431,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24430,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24430,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22699,f5927])).
fof(f22699,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f20196,f20196,f20202,f236])).
fof(f24429,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24428,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24428,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22698,f112])).
fof(f22698,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f20196,f20196,f20202,f236])).
fof(f24427,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24426,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24426,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22697,f9179])).
fof(f22697,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f20196,f20196,f20202,f236])).
fof(f24425,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22696,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22696,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f20196,f20196,f20202,f236])).
fof(f24424,plain,(
  $false | ($spl32 | $spl39 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24423,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24423,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22694,f120])).
fof(f22694,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f113,f113,f20202,f236])).
fof(f24422,plain,(
  $false | ($spl22 | $spl32 | $spl39 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24421,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24421,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl39 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f22693,f20429])).
fof(f22693,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f113,f113,f20202,f236])).
fof(f24420,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24419,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24419,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22692,f116])).
fof(f22692,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f113,f113,f20202,f236])).
fof(f24418,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24417,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24417,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f22691,f5927])).
fof(f22691,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f113,f113,f20202,f236])).
fof(f24416,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl39 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24415,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24415,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22690,f112])).
fof(f22690,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f113,f113,f20202,f236])).
fof(f24414,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl39 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24413,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24413,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl39 | $spl87)),
  inference(forward_demodulation,[],[f22689,f9179])).
fof(f22689,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f113,f113,f20202,f236])).
fof(f24412,plain,(
  $false | ($spl32 | $spl39 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22688,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22688,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f113,f113,f20202,f236])).
fof(f24411,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl44 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24410,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24410,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl44 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22686,f120])).
fof(f22686,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f12366,f12366,f20202,f236])).
fof(f24409,plain,(
  $false | ($spl22 | $spl32 | $spl35 | $spl36 | $spl43 | $spl44 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24408,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24408,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl35 | $spl36 | $spl43 | $spl44 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22685,f20429])).
fof(f22685,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f12366,f12366,f20202,f236])).
fof(f24407,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24406,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24406,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22684,f116])).
fof(f22684,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f12366,f12366,f20202,f236])).
fof(f24405,plain,(
  $false | ($spl20 | $spl32 | $spl35 | $spl36 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24404,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24404,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl35 | $spl36 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22683,f5927])).
fof(f22683,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl39 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f12366,f12366,f20202,f236])).
fof(f24403,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24402,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24402,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22682,f112])).
fof(f22682,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f12366,f12366,f20202,f236])).
fof(f24401,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24400,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24400,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22681,f9179])).
fof(f22681,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f12366,f12366,f20202,f236])).
fof(f24399,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22680,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22680,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f12366,f12366,f20202,f236])).
fof(f24398,plain,(
  $false | ($spl32 | $spl35 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24397,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24397,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22678,f120])).
fof(f22678,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f109,f109,f20202,f236])).
fof(f24396,plain,(
  $false | ($spl22 | $spl32 | $spl35 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24395,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24395,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl35 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f22677,f20429])).
fof(f22677,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f109,f109,f20202,f236])).
fof(f24394,plain,(
  $false | ($spl32 | $spl35 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24393,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24393,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22676,f116])).
fof(f22676,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f109,f109,f20202,f236])).
fof(f24392,plain,(
  $false | ($spl20 | $spl32 | $spl35 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24391,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24391,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl35 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f22675,f5927])).
fof(f22675,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f109,f109,f20202,f236])).
fof(f24390,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24389,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24389,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22674,f112])).
fof(f22674,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f109,f109,f20202,f236])).
fof(f24388,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24387,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24387,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f22673,f9179])).
fof(f22673,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f109,f109,f20202,f236])).
fof(f24386,plain,(
  $false | ($spl32 | $spl35 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22672,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22672,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f109,f109,f20202,f236])).
fof(f24385,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl53 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24384,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24384,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl53 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22670,f120])).
fof(f22670,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f127,f127,f20202,f236])).
fof(f24383,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24382,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24382,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22669,f20429])).
fof(f22669,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f127,f127,f20202,f236])).
fof(f24381,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24380,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24380,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22668,f116])).
fof(f22668,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f127,f127,f20202,f236])).
fof(f24379,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24378,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24378,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22667,f5927])).
fof(f22667,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f127,f127,f20202,f236])).
fof(f24377,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24376,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24376,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22666,f112])).
fof(f22666,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f127,f127,f20202,f236])).
fof(f24375,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24374,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24374,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22665,f9179])).
fof(f22665,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f127,f127,f20202,f236])).
fof(f24373,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22664,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f22664,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f127,f127,f20202,f236])).
fof(f24372,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644,f22663])).
fof(f24371,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24370,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644])).
fof(f24370,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22660,f120])).
fof(f22660,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20202,f95])).
fof(f24369,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24368,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644])).
fof(f24368,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f22659,f20429])).
fof(f22659,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f20202,f95])).
fof(f24367,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24366,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644])).
fof(f24366,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22658,f116])).
fof(f22658,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20202,f95])).
fof(f24365,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24364,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644])).
fof(f24364,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f22657,f5927])).
fof(f22657,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f20202,f95])).
fof(f24363,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24362,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644])).
fof(f24362,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22656,f112])).
fof(f22656,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f20202,f95])).
fof(f24361,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24360,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644])).
fof(f24360,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f22655,f9179])).
fof(f22655,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f20202,f95])).
fof(f24359,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22654,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644])).
fof(f22654,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f20202,f95])).
fof(f24358,plain,(
  $false | ($spl32 | $spl44 | $spl46 | $spl83 | $spl87)),
  inference(global_subsumption,[],[f24357,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644])).
fof(f24357,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl44 | $spl83 | $spl87)),
  inference(forward_demodulation,[],[f22651,f120])).
fof(f22651,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl83 | $spl87)),
  inference(unit_resulting_resolution,[],[f20199,f20202,f95])).
fof(f24356,plain,(
  $false | ($spl22 | $spl32 | $spl43 | $spl44 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24355,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644])).
fof(f24355,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl43 | $spl44 | $spl87)),
  inference(forward_demodulation,[],[f22650,f20429])).
fof(f22650,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl43 | $spl87)),
  inference(unit_resulting_resolution,[],[f117,f20202,f95])).
fof(f24354,plain,(
  $false | ($spl32 | $spl39 | $spl40 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24353,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644])).
fof(f24353,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22649,f116])).
fof(f22649,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl40 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f20196,f20202,f95])).
fof(f24352,plain,(
  $false | ($spl20 | $spl32 | $spl39 | $spl40 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24351,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644])).
fof(f24351,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl39 | $spl40 | $spl87)),
  inference(forward_demodulation,[],[f22648,f5927])).
fof(f22648,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl39 | $spl87)),
  inference(unit_resulting_resolution,[],[f113,f20202,f95])).
fof(f24350,plain,(
  $false | ($spl32 | $spl35 | $spl36 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f24349,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644])).
fof(f24349,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(forward_demodulation,[],[f22647,f112])).
fof(f22647,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl36 | $spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f12366,f20202,f95])).
fof(f24348,plain,(
  $false | ($spl18 | $spl32 | $spl35 | $spl36 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f24347,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644])).
fof(f24347,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl18 | $spl35 | $spl36 | $spl87)),
  inference(forward_demodulation,[],[f22646,f9179])).
fof(f22646,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl35 | $spl87)),
  inference(unit_resulting_resolution,[],[f109,f20202,f95])).
fof(f24346,plain,(
  $false | ($spl32 | $spl46 | $spl53 | $spl87)),
  inference(global_subsumption,[],[f22645,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644])).
fof(f22645,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl53 | $spl87)),
  inference(unit_resulting_resolution,[],[f127,f20202,f95])).
fof(f24345,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306,f22644])).
fof(f24344,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305,f23306])).
fof(f24343,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686,f23305])).
fof(f24342,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689,f23686])).
fof(f24341,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304,f23689])).
fof(f24340,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303,f23304])).
fof(f24339,plain,(
  $false | ($spl32 | $spl46 | $spl87)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f100,f101,f106,f108,f122,f164,f236,f284,f486,f488,f1857,f1705,f1703,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f1925,f1926,f1928,f2489,f2488,f2434,f2416,f2399,f2095,f2164,f2231,f93,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20202,f60,f52,f53,f54,f59,f23303])).
fof(f24338,plain,(
  $false | ($spl87 | $spl88)),
  inference(subsumption_resolution,[],[f24078,f23708])).
fof(f23708,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl88),
  inference(superposition,[],[f20203,f20203])).
fof(f24078,plain,(
  ( ! [X127] : (s(bool,'T_0') != s(bool,X127)) ) | ($spl87 | $spl88)),
  inference(superposition,[],[f20202,f23708])).
fof(f24337,plain,(
  $false | ($spl83 | $spl88)),
  inference(subsumption_resolution,[],[f24073,f23708])).
fof(f24073,plain,(
  ( ! [X120] : (s(bool,'T_0') != s(bool,X120)) ) | ($spl83 | $spl88)),
  inference(superposition,[],[f20199,f23708])).
fof(f24336,plain,(
  $false | ($spl43 | $spl88)),
  inference(subsumption_resolution,[],[f24071,f23708])).
fof(f24071,plain,(
  ( ! [X118] : (s(bool,'T_0') != s(bool,X118)) ) | ($spl43 | $spl88)),
  inference(superposition,[],[f117,f23708])).
fof(f24335,plain,(
  $false | ($spl39 | $spl40 | $spl53 | $spl88)),
  inference(subsumption_resolution,[],[f24068,f23708])).
fof(f24068,plain,(
  ( ! [X114] : (s(bool,'T_0') != s(bool,X114)) ) | ($spl39 | $spl40 | $spl53 | $spl88)),
  inference(superposition,[],[f20196,f23708])).
fof(f24334,plain,(
  $false | ($spl39 | $spl88)),
  inference(subsumption_resolution,[],[f24065,f23708])).
fof(f24065,plain,(
  ( ! [X110] : (s(bool,'T_0') != s(bool,X110)) ) | ($spl39 | $spl88)),
  inference(superposition,[],[f113,f23708])).
fof(f24333,plain,(
  $false | ($spl35 | $spl36 | $spl53 | $spl88)),
  inference(subsumption_resolution,[],[f24062,f23708])).
fof(f24062,plain,(
  ( ! [X106] : (s(bool,'T_0') != s(bool,X106)) ) | ($spl35 | $spl36 | $spl53 | $spl88)),
  inference(superposition,[],[f12366,f23708])).
fof(f24332,plain,(
  $false | ($spl35 | $spl88)),
  inference(subsumption_resolution,[],[f24060,f23708])).
fof(f24060,plain,(
  ( ! [X104] : (s(bool,'T_0') != s(bool,X104)) ) | ($spl35 | $spl88)),
  inference(superposition,[],[f109,f23708])).
fof(f24331,plain,(
  $false | ($spl53 | $spl88)),
  inference(subsumption_resolution,[],[f24057,f23708])).
fof(f24057,plain,(
  ( ! [X99] : (s(bool,'T_0') != s(bool,X99)) ) | ($spl53 | $spl88)),
  inference(superposition,[],[f127,f23708])).
fof(f24330,plain,(
  $false | $spl88),
  inference(subsumption_resolution,[],[f24056,f23997])).
fof(f23997,plain,(
  ( ! [X73] : (p(s(bool,X73))) ) | $spl88),
  inference(superposition,[],[f40,f23708])).
fof(f24056,plain,(
  ( ! [X98] : (~p(s(bool,X98))) ) | $spl88),
  inference(superposition,[],[f41,f23708])).
fof(f24329,plain,(
  $false | ($spl87 | $spl88)),
  inference(subsumption_resolution,[],[f24024,f23708])).
fof(f24024,plain,(
  ( ! [X127] : (s(bool,'T_0') != s(bool,X127)) ) | ($spl87 | $spl88)),
  inference(superposition,[],[f20202,f23708])).
fof(f24328,plain,(
  $false | ($spl83 | $spl88)),
  inference(subsumption_resolution,[],[f24019,f23708])).
fof(f24019,plain,(
  ( ! [X120] : (s(bool,'T_0') != s(bool,X120)) ) | ($spl83 | $spl88)),
  inference(superposition,[],[f20199,f23708])).
fof(f24327,plain,(
  $false | ($spl43 | $spl88)),
  inference(subsumption_resolution,[],[f24017,f23708])).
fof(f24017,plain,(
  ( ! [X118] : (s(bool,'T_0') != s(bool,X118)) ) | ($spl43 | $spl88)),
  inference(superposition,[],[f117,f23708])).
fof(f24326,plain,(
  $false | ($spl39 | $spl40 | $spl53 | $spl88)),
  inference(subsumption_resolution,[],[f24014,f23708])).
fof(f24014,plain,(
  ( ! [X114] : (s(bool,'T_0') != s(bool,X114)) ) | ($spl39 | $spl40 | $spl53 | $spl88)),
  inference(superposition,[],[f20196,f23708])).
fof(f24325,plain,(
  $false | ($spl39 | $spl88)),
  inference(subsumption_resolution,[],[f24011,f23708])).
fof(f24011,plain,(
  ( ! [X110] : (s(bool,'T_0') != s(bool,X110)) ) | ($spl39 | $spl88)),
  inference(superposition,[],[f113,f23708])).
fof(f24324,plain,(
  $false | ($spl35 | $spl36 | $spl53 | $spl88)),
  inference(subsumption_resolution,[],[f24008,f23708])).
fof(f24008,plain,(
  ( ! [X106] : (s(bool,'T_0') != s(bool,X106)) ) | ($spl35 | $spl36 | $spl53 | $spl88)),
  inference(superposition,[],[f12366,f23708])).
fof(f24323,plain,(
  $false | ($spl35 | $spl88)),
  inference(subsumption_resolution,[],[f24006,f23708])).
fof(f24006,plain,(
  ( ! [X104] : (s(bool,'T_0') != s(bool,X104)) ) | ($spl35 | $spl88)),
  inference(superposition,[],[f109,f23708])).
fof(f24322,plain,(
  $false | ($spl53 | $spl88)),
  inference(subsumption_resolution,[],[f24003,f23708])).
fof(f24003,plain,(
  ( ! [X99] : (s(bool,'T_0') != s(bool,X99)) ) | ($spl53 | $spl88)),
  inference(superposition,[],[f127,f23708])).
fof(f24321,plain,(
  $false | $spl88),
  inference(subsumption_resolution,[],[f24002,f23997])).
fof(f24002,plain,(
  ( ! [X98] : (~p(s(bool,X98))) ) | $spl88),
  inference(superposition,[],[f41,f23708])).
fof(f23888,plain,(
  $false | ($spl53 | $spl88)),
  inference(unit_resulting_resolution,[],[f127,f23708])).
fof(f20419,plain,(
  ( ! [X28,X29] : (s(bool,X28) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29)) ) | $spl90),
  inference(cnf_transformation,[],[f20419_D])).
fof(f20419_D,plain,(
  ( ! [X28,X29] : (s(bool,X28) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29)) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f20045,plain,(
  ( ! [X12,X10,X11,X9] : (s(bool,X10) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X9) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,X9) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl62),
  inference(superposition,[],[f3852,f236])).
fof(f20046,plain,(
  ( ! [X14,X15,X13,X16] : (s(bool,X14) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X13) | s(bool,X13) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | $spl62),
  inference(superposition,[],[f3852,f236])).
fof(f20093,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,X11) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12) | s(bool,X10) = s(bool,X13) | s(bool,'T_0') = s(bool,X13) | s(bool,'F_0') = s(bool,X10)) ) | $spl62),
  inference(superposition,[],[f236,f3852])).
fof(f20094,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,X15) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16) | s(bool,X15) = s(bool,X17) | s(bool,'T_0') = s(bool,X17) | s(bool,'F_0') = s(bool,X14)) ) | $spl62),
  inference(superposition,[],[f236,f3852])).
fof(f20132,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,X26) = s(bool,X27) | s(bool,X28) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29) | s(bool,'F_0') = s(bool,X26)) ) | $spl62),
  inference(superposition,[],[f236,f3852])).
fof(f20135,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X38) = s(bool,X39) | s(bool,X40) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X39) | s(bool,'F_0') = s(bool,X38)) ) | $spl62),
  inference(superposition,[],[f236,f3852])).
fof(f20423,plain,(
  ( ! [X47,X46] : (s(bool,'T_0') = s(bool,X47) | p(s(bool,X46)) | s(bool,'F_0') = s(bool,X46)) ) | ($spl42 | $spl62)),
  inference(duplicate_literal_removal,[],[f20422])).
fof(f20422,plain,(
  ( ! [X47,X46] : (s(bool,'T_0') = s(bool,X47) | p(s(bool,X46)) | s(bool,'T_0') = s(bool,X47) | s(bool,'F_0') = s(bool,X46)) ) | ($spl42 | $spl62)),
  inference(forward_demodulation,[],[f20137,f118])).
fof(f20137,plain,(
  ( ! [X47,X46] : (p(s(bool,X46)) | s(bool,X47) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X47) | s(bool,'F_0') = s(bool,X46)) ) | $spl62),
  inference(superposition,[],[f284,f3852])).
fof(f20078,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X38) = s(bool,X39) | s(bool,'F_0') = s(bool,X39) | s(bool,X40) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X38)) ) | $spl62),
  inference(superposition,[],[f3852,f236])).
fof(f20075,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,X26) = s(bool,X27) | s(bool,'F_0') = s(bool,X27) | s(bool,X28) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X26) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | $spl62),
  inference(superposition,[],[f3852,f236])).
fof(f20413,plain,(
  $false | ($spl22 | $spl42 | $spl83)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54,f53,f52,f60,f83,f118])).
fof(f3556,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl42),
  inference(duplicate_literal_removal,[],[f3525])).
fof(f3525,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl42),
  inference(equality_factoring,[],[f1707])).
fof(f3483,plain,(
  ( ! [X111,X109,X112,X110] : (s(X111,f(s(bool,X112))) != s(X111,g(s(bool,X112))) | s(fun(bool,X111),X109) = s(fun(bool,X111),X110) | s(bool,'T_0') = s(bool,sK4(X109,X110,X111,bool)) | s(bool,X112) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl42),
  inference(superposition,[],[f43,f1707])).
fof(f3400,plain,(
  ( ! [X88,X87,X89,X86] : (s(X88,f(s(bool,'T_0'))) != s(X88,g(s(bool,'T_0'))) | s(fun(bool,X88),X86) = s(fun(bool,X88),X87) | s(bool,X89) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X89) = s(bool,sK4(X86,X87,X88,bool))) ) | $spl42),
  inference(superposition,[],[f43,f1707])).
fof(f3205,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,X16) = s(bool,X17) | s(bool,X18) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X17) = s(bool,X18) | s(bool,X16) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) ) | $spl42),
  inference(superposition,[],[f1707,f95])).
fof(f3203,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X5) = s(bool,X6) | s(bool,X7) = s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9) | s(bool,X4) = s(bool,X7)) ) | $spl42),
  inference(superposition,[],[f1707,f236])).
fof(f3202,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,X3)) ) | $spl42),
  inference(superposition,[],[f1707,f1707])).
fof(f1707,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,X1)) ) | $spl42),
  inference(condensation,[],[f1706])).
fof(f1706,plain,(
  ( ! [X125,X123,X124] : (s(bool,'T_0') = s(bool,X123) | s(bool,X124) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X124) = s(bool,X125) | s(bool,'T_0') = s(bool,X125)) ) | $spl42),
  inference(duplicate_literal_removal,[],[f603])).
fof(f603,plain,(
  ( ! [X125,X123,X124] : (s(bool,'T_0') = s(bool,X123) | s(bool,X124) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X123) | s(bool,X124) = s(bool,X125) | s(bool,'T_0') = s(bool,X125)) ) | $spl42),
  inference(superposition,[],[f236,f118])).
fof(f1709,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X0) = s(bool,X1)) ) | ($spl22 | $spl42)),
  inference(condensation,[],[f1708])).
fof(f1708,plain,(
  ( ! [X121,X122,X120] : (s(bool,'T_0') = s(bool,X120) | s(bool,X121) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X121) = s(bool,X122) | s(bool,'T_0') = s(bool,X122)) ) | ($spl22 | $spl42)),
  inference(duplicate_literal_removal,[],[f602])).
fof(f602,plain,(
  ( ! [X121,X122,X120] : (s(bool,'T_0') = s(bool,X120) | s(bool,X121) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X120) | s(bool,X121) = s(bool,X122) | s(bool,'T_0') = s(bool,X122)) ) | ($spl22 | $spl42)),
  inference(superposition,[],[f236,f165])).
fof(f165,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl22 | $spl42)),
  inference(forward_demodulation,[],[f83,f118])).
fof(f20412,plain,(
  $false | ($spl22 | $spl42 | $spl83)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54,f53,f52,f60,f83])).
fof(f20411,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42 | $spl48 | $spl83)),
  inference(global_subsumption,[],[f20410,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54,f53,f52,f60])).
fof(f20410,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20409,f63])).
fof(f20409,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20408,f65])).
fof(f20408,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20407,f67])).
fof(f20407,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20406,f69])).
fof(f20406,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20405,f71])).
fof(f20405,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20404,f73])).
fof(f20404,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20403,f75])).
fof(f20403,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20402,f9179])).
fof(f20402,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f4618,f5927])).
fof(f4618,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f4617,f85])).
fof(f4617,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl26 | $spl28 | $spl30 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f4616,f87])).
fof(f4616,plain,(
  ( ! [X0] : (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl30 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f4615,f91])).
fof(f4615,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f4612,f2577])).
fof(f20401,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42 | $spl48 | $spl83)),
  inference(global_subsumption,[],[f20400,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54,f53,f52,f60])).
fof(f20400,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20399,f63])).
fof(f20399,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20398,f65])).
fof(f20398,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20397,f67])).
fof(f20397,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20396,f69])).
fof(f20396,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20395,f71])).
fof(f20395,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20394,f73])).
fof(f20394,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20393,f75])).
fof(f20393,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20392,f9179])).
fof(f20392,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f4632,f5927])).
fof(f4632,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f4631,f85])).
fof(f4631,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl26 | $spl28 | $spl30 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f4630,f87])).
fof(f4630,plain,(
  ( ! [X0] : (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl30 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f4629,f91])).
fof(f4629,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f4613,f2577])).
fof(f20391,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42 | $spl48 | $spl83)),
  inference(global_subsumption,[],[f20390,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54,f53,f52,f60])).
fof(f20390,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20389,f63])).
fof(f20389,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20388,f65])).
fof(f20388,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20387,f67])).
fof(f20387,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20386,f69])).
fof(f20386,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20385,f71])).
fof(f20385,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20384,f73])).
fof(f20384,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20383,f75])).
fof(f20383,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20382,f9179])).
fof(f20382,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f12375,f5927])).
fof(f12375,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f12374,f85])).
fof(f12374,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl26 | $spl28 | $spl30 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f12373,f87])).
fof(f12373,plain,(
  ( ! [X0] : (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl30 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f12372,f91])).
fof(f12372,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f12369,f2577])).
fof(f20381,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl42 | $spl48 | $spl83)),
  inference(global_subsumption,[],[f20380,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54,f53,f52,f60])).
fof(f20380,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20379,f63])).
fof(f20379,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20378,f65])).
fof(f20378,plain,(
  ( ! [X0] : (s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20377,f67])).
fof(f20377,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20376,f69])).
fof(f20376,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl10 | $spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20375,f71])).
fof(f20375,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20374,f73])).
fof(f20374,plain,(
  ( ! [X0] : (s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl14 | $spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20373,f75])).
fof(f20373,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl18 | $spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl36 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f20372,f9179])).
fof(f20372,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl20 | $spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl40 | $spl48)),
  inference(forward_demodulation,[],[f12389,f5927])).
fof(f12389,plain,(
  ( ! [X0] : (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl24 | $spl26 | $spl28 | $spl30 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f12388,f85])).
fof(f12388,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl26 | $spl28 | $spl30 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f12387,f87])).
fof(f12387,plain,(
  ( ! [X0] : (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl30 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f12386,f91])).
fof(f12386,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.stackSem.state'(sK0,sK1),sK3) = s('type.stackSem.state'(sK0,sK1),X0) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),X0))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),X0)))) ) | ($spl28 | $spl32 | $spl48)),
  inference(forward_demodulation,[],[f12370,f2577])).
fof(f20371,plain,(
  $false | ($spl22 | $spl42 | $spl83 | $spl88)),
  inference(global_subsumption,[],[f20370,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54,f53,f52,f60])).
fof(f20370,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) ) | $spl88),
  inference(subsumption_resolution,[],[f20369,f20203])).
fof(f20369,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) ) | $spl88),
  inference(forward_demodulation,[],[f491,f20203])).
fof(f20368,plain,(
  $false | ($spl22 | $spl32 | $spl42 | $spl48 | $spl53 | $spl83 | $spl88)),
  inference(global_subsumption,[],[f20367,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54,f53,f52,f60])).
fof(f20367,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl32 | $spl48 | $spl53 | $spl88)),
  inference(condensation,[],[f20366])).
fof(f20366,plain,(
  ( ! [X10,X8,X11,X9] : (s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK4(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl32 | $spl48 | $spl53 | $spl88)),
  inference(subsumption_resolution,[],[f20365,f2604])).
fof(f2604,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl32 | $spl48 | $spl53)),
  inference(subsumption_resolution,[],[f2578,f127])).
fof(f2578,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl32 | $spl48)),
  inference(superposition,[],[f2577,f95])).
fof(f20365,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X11) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK4(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) ) | $spl88),
  inference(forward_demodulation,[],[f493,f20203])).
fof(f20364,plain,(
  $false | ($spl22 | $spl42 | $spl83 | $spl88)),
  inference(global_subsumption,[],[f20363,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54,f53,f52,f60])).
fof(f20363,plain,(
  ( ! [X17,X18,X16] : (s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'T_0') = s(bool,g(s(X16,sK4(X17,X18,bool,X16))))) ) | $spl88),
  inference(subsumption_resolution,[],[f20362,f20203])).
fof(f20362,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'T_0') = s(bool,g(s(X16,sK4(X17,X18,bool,X16))))) ) | $spl88),
  inference(forward_demodulation,[],[f495,f20203])).
fof(f20361,plain,(
  $false | ($spl22 | $spl42 | $spl83 | $spl88)),
  inference(global_subsumption,[],[f20360,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54,f53,f52,f60])).
fof(f20360,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3) | s(bool,X0) = s(bool,g(s(X1,sK4(X2,X3,bool,X1))))) ) | $spl88),
  inference(condensation,[],[f20359])).
fof(f20359,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3) | s(bool,X4) = s(bool,g(s(X1,sK4(X2,X3,bool,X1)))) | s(bool,'T_0') = s(bool,X4)) ) | $spl88),
  inference(condensation,[],[f20358])).
fof(f20358,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (s(fun(X97,bool),X98) = s(fun(X97,bool),X99) | s(bool,X100) = s(bool,X101) | s(bool,'T_0') = s(bool,X101) | s(bool,X102) = s(bool,g(s(X97,sK4(X98,X99,bool,X97)))) | s(bool,'T_0') = s(bool,X102)) ) | $spl88),
  inference(subsumption_resolution,[],[f20357,f20203])).
fof(f20357,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (s(bool,X100) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun(X97,bool),X98) = s(fun(X97,bool),X99) | s(bool,X100) = s(bool,X101) | s(bool,'T_0') = s(bool,X101) | s(bool,X102) = s(bool,g(s(X97,sK4(X98,X99,bool,X97)))) | s(bool,'T_0') = s(bool,X102)) ) | $spl88),
  inference(forward_demodulation,[],[f763,f20203])).
fof(f20356,plain,(
  $false | ($spl22 | $spl32 | $spl42 | $spl48 | $spl53 | $spl83 | $spl88)),
  inference(global_subsumption,[],[f20355,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54,f53,f52,f60])).
fof(f20355,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3) | s(bool,X4) = s(bool,g(s(X1,sK4(X2,X3,bool,X1)))) | s(bool,X0) = s(bool,X4)) ) | ($spl32 | $spl48 | $spl53 | $spl88)),
  inference(condensation,[],[f20354])).
fof(f20354,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (s(fun(X97,bool),X98) = s(fun(X97,bool),X99) | s(bool,X101) = s(bool,g(s(X97,sK4(X98,X99,bool,X97)))) | s(bool,'T_0') = s(bool,X100) | s(bool,X101) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) ) | ($spl32 | $spl48 | $spl53 | $spl88)),
  inference(subsumption_resolution,[],[f20353,f2604])).
fof(f20353,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (s(bool,X100) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun(X97,bool),X98) = s(fun(X97,bool),X99) | s(bool,X101) = s(bool,g(s(X97,sK4(X98,X99,bool,X97)))) | s(bool,'T_0') = s(bool,X100) | s(bool,X101) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) ) | $spl88),
  inference(forward_demodulation,[],[f811,f20203])).
fof(f20352,plain,(
  $false | ($spl22 | $spl32 | $spl42 | $spl48 | $spl53 | $spl83 | $spl88)),
  inference(global_subsumption,[],[f20351,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54,f53,f52,f60])).
fof(f20351,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl32 | $spl48 | $spl53 | $spl88)),
  inference(condensation,[],[f20350])).
fof(f20350,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,g(s(X4,sK4(X5,X6,bool,X4)))) | s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,'T_0') = s(bool,X7)) ) | ($spl32 | $spl48 | $spl53 | $spl88)),
  inference(duplicate_literal_removal,[],[f20349])).
fof(f20349,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,g(s(X4,sK4(X5,X6,bool,X4)))) | s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | ($spl32 | $spl48 | $spl53 | $spl88)),
  inference(condensation,[],[f20348])).
fof(f20348,plain,(
  ( ! [X94,X99,X97,X95,X98,X96] : (s(fun(X94,bool),X95) = s(fun(X94,bool),X96) | s(bool,X97) = s(bool,X98) | s(bool,'T_0') = s(bool,g(s(X94,sK4(X95,X96,bool,X94)))) | s(bool,X98) = s(bool,X99) | s(bool,'T_0') = s(bool,X99)) ) | ($spl32 | $spl48 | $spl53 | $spl88)),
  inference(subsumption_resolution,[],[f20347,f2605])).
fof(f2605,plain,(
  ( ! [X12,X10,X11] : (s(bool,X10) = s(bool,X11) | s(bool,X11) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | ($spl32 | $spl48 | $spl53)),
  inference(subsumption_resolution,[],[f2584,f127])).
fof(f2584,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X10) = s(bool,X11) | s(bool,X11) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | ($spl32 | $spl48)),
  inference(superposition,[],[f2577,f236])).
fof(f20347,plain,(
  ( ! [X94,X99,X97,X95,X98,X96] : (s(bool,X97) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun(X94,bool),X95) = s(fun(X94,bool),X96) | s(bool,X97) = s(bool,X98) | s(bool,'T_0') = s(bool,g(s(X94,sK4(X95,X96,bool,X94)))) | s(bool,X98) = s(bool,X99) | s(bool,'T_0') = s(bool,X99)) ) | $spl88),
  inference(forward_demodulation,[],[f835,f20203])).
fof(f20346,plain,(
  $false | ($spl22 | $spl42 | $spl83 | $spl88)),
  inference(global_subsumption,[],[f20345,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54,f53,f52,f60])).
fof(f20345,plain,(
  ( ! [X61,X64,X62,X60,X65,X63] : (s(fun(X60,bool),X61) = s(fun(X60,bool),X62) | s(bool,X63) = s(bool,X64) | s(bool,X64) = s(bool,g(s(X60,sK4(X61,X62,bool,X60)))) | s(bool,X63) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) ) | $spl88),
  inference(subsumption_resolution,[],[f20344,f20203])).
fof(f20344,plain,(
  ( ! [X61,X64,X62,X60,X65,X63] : (s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun(X60,bool),X61) = s(fun(X60,bool),X62) | s(bool,X63) = s(bool,X64) | s(bool,X64) = s(bool,g(s(X60,sK4(X61,X62,bool,X60)))) | s(bool,X63) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) ) | $spl88),
  inference(forward_demodulation,[],[f855,f20203])).
fof(f20343,plain,(
  $false | ($spl22 | $spl42 | $spl83)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54,f53,f52,f60])).
fof(f20342,plain,(
  $false | ($spl22 | $spl42 | $spl83)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f60,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54,f53,f52])).
fof(f20341,plain,(
  $false | ($spl22 | $spl42 | $spl83)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f52,f60,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54,f53])).
fof(f20340,plain,(
  $false | ($spl22 | $spl42 | $spl83)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f60,f855,f835,f811,f763,f495,f493,f491,f20199,f59,f54])).
fof(f20339,plain,(
  $false | ($spl22 | $spl42 | $spl83)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199,f59])).
fof(f20338,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20148,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20148,plain,(
  ( ! [X5] : (s(bool,'F_0') = s(bool,X5) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl62),
  inference(duplicate_literal_removal,[],[f20067])).
fof(f20067,plain,(
  ( ! [X5] : (s(bool,'F_0') = s(bool,X5) | s(bool,'F_0') = s(bool,X5) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl62),
  inference(superposition,[],[f3852,f42])).
fof(f20337,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20075,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20336,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20078,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20335,plain,(
  $false | ($spl22 | $spl40 | $spl42 | $spl53 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20334,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20334,plain,(
  ( ! [X50] : (s(bool,'F_0') = s(bool,X50) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl40 | $spl53 | $spl62)),
  inference(duplicate_literal_removal,[],[f20333])).
fof(f20333,plain,(
  ( ! [X50] : (s(bool,'F_0') = s(bool,X50) | s(bool,'F_0') = s(bool,X50) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl40 | $spl53 | $spl62)),
  inference(forward_demodulation,[],[f20084,f116])).
fof(f20084,plain,(
  ( ! [X50] : (s(bool,X50) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') = s(bool,X50) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl40 | $spl53 | $spl62)),
  inference(superposition,[],[f3852,f6671])).
fof(f20332,plain,(
  $false | ($spl18 | $spl22 | $spl36 | $spl42 | $spl53 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20331,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20331,plain,(
  ( ! [X51] : (s(bool,'F_0') = s(bool,X51) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl18 | $spl36 | $spl53 | $spl62)),
  inference(duplicate_literal_removal,[],[f20330])).
fof(f20330,plain,(
  ( ! [X51] : (s(bool,'F_0') = s(bool,X51) | s(bool,'F_0') = s(bool,X51) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl18 | $spl36 | $spl53 | $spl62)),
  inference(forward_demodulation,[],[f20085,f9179])).
fof(f20085,plain,(
  ( ! [X51] : (s(bool,X51) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X51) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl18 | $spl36 | $spl53 | $spl62)),
  inference(superposition,[],[f3852,f9336])).
fof(f20329,plain,(
  $false | ($spl22 | $spl36 | $spl42 | $spl53 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20328,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20328,plain,(
  ( ! [X52] : (s(bool,'F_0') = s(bool,X52) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl36 | $spl53 | $spl62)),
  inference(duplicate_literal_removal,[],[f20327])).
fof(f20327,plain,(
  ( ! [X52] : (s(bool,'F_0') = s(bool,X52) | s(bool,'F_0') = s(bool,X52) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl36 | $spl53 | $spl62)),
  inference(forward_demodulation,[],[f20086,f112])).
fof(f20086,plain,(
  ( ! [X52] : (s(bool,X52) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') = s(bool,X52) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl36 | $spl53 | $spl62)),
  inference(superposition,[],[f3852,f9964])).
fof(f20326,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20118,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20118,plain,(
  ( ! [X59,X60,X58] : (s(X60,f(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))))) != s(X60,g(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))))) | s(fun(bool,X60),X58) = s(fun(bool,X60),X59) | s(bool,'F_0') = s(bool,sK4(X58,X59,X60,bool))) ) | $spl62),
  inference(superposition,[],[f43,f3852])).
fof(f20325,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83 | $spl88)),
  inference(global_subsumption,[],[f20324,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20324,plain,(
  ( ! [X61,X62,X63] : (s(fun(X61,bool),X62) = s(fun(X61,bool),X63) | s(bool,'F_0') = s(bool,g(s(X61,sK4(X62,X63,bool,X61))))) ) | ($spl62 | $spl88)),
  inference(subsumption_resolution,[],[f20323,f20203])).
fof(f20323,plain,(
  ( ! [X61,X62,X63] : (s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun(X61,bool),X62) = s(fun(X61,bool),X63) | s(bool,'F_0') = s(bool,g(s(X61,sK4(X62,X63,bool,X61))))) ) | ($spl62 | $spl88)),
  inference(forward_demodulation,[],[f20119,f20203])).
fof(f20119,plain,(
  ( ! [X61,X62,X63] : (s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,f(s(X61,sK4(X62,X63,bool,X61)))) | s(fun(X61,bool),X62) = s(fun(X61,bool),X63) | s(bool,'F_0') = s(bool,g(s(X61,sK4(X62,X63,bool,X61))))) ) | $spl62),
  inference(superposition,[],[f43,f3852])).
fof(f20322,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20145,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20145,plain,(
  ( ! [X4] : (s(bool,'F_0') = s(bool,X4) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl62),
  inference(duplicate_literal_removal,[],[f20123])).
fof(f20123,plain,(
  ( ! [X4] : (s(bool,'F_0') = s(bool,X4) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X4)) ) | $spl62),
  inference(superposition,[],[f42,f3852])).
fof(f20321,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20128,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20128,plain,(
  ( ! [X13] : (~p(s(bool,X13)) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X13)) ) | $spl62),
  inference(superposition,[],[f101,f3852])).
fof(f20320,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20137,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20319,plain,(
  $false | ($spl22 | $spl40 | $spl42 | $spl53 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20318,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20318,plain,(
  ( ! [X53] : (s(bool,'F_0') = s(bool,X53) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl40 | $spl53 | $spl62)),
  inference(duplicate_literal_removal,[],[f20317])).
fof(f20317,plain,(
  ( ! [X53] : (s(bool,'F_0') = s(bool,X53) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X53)) ) | ($spl40 | $spl53 | $spl62)),
  inference(forward_demodulation,[],[f20140,f116])).
fof(f20140,plain,(
  ( ! [X53] : (s(bool,X53) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X53)) ) | ($spl40 | $spl53 | $spl62)),
  inference(superposition,[],[f6671,f3852])).
fof(f20316,plain,(
  $false | ($spl18 | $spl22 | $spl36 | $spl42 | $spl53 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20315,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20315,plain,(
  ( ! [X54] : (s(bool,'F_0') = s(bool,X54) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl18 | $spl36 | $spl53 | $spl62)),
  inference(duplicate_literal_removal,[],[f20314])).
fof(f20314,plain,(
  ( ! [X54] : (s(bool,'F_0') = s(bool,X54) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X54)) ) | ($spl18 | $spl36 | $spl53 | $spl62)),
  inference(forward_demodulation,[],[f20141,f9179])).
fof(f20141,plain,(
  ( ! [X54] : (s(bool,X54) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X54)) ) | ($spl18 | $spl36 | $spl53 | $spl62)),
  inference(superposition,[],[f9336,f3852])).
fof(f20313,plain,(
  $false | ($spl22 | $spl36 | $spl42 | $spl53 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20312,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20312,plain,(
  ( ! [X55] : (s(bool,'F_0') = s(bool,X55) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl36 | $spl53 | $spl62)),
  inference(duplicate_literal_removal,[],[f20311])).
fof(f20311,plain,(
  ( ! [X55] : (s(bool,'F_0') = s(bool,X55) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X55)) ) | ($spl36 | $spl53 | $spl62)),
  inference(forward_demodulation,[],[f20142,f112])).
fof(f20142,plain,(
  ( ! [X55] : (s(bool,X55) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X55)) ) | ($spl36 | $spl53 | $spl62)),
  inference(superposition,[],[f9964,f3852])).
fof(f20310,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20143,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20143,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl62),
  inference(equality_factoring,[],[f3852])).
fof(f20309,plain,(
  $false | ($spl20 | $spl22 | $spl40 | $spl42 | $spl53 | $spl62 | $spl78 | $spl83)),
  inference(global_subsumption,[],[f20308,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20308,plain,(
  ( ! [X52] : (s(bool,'F_0') = s(bool,X52) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl20 | $spl40 | $spl53 | $spl62 | $spl78)),
  inference(forward_demodulation,[],[f20307,f5927])).
fof(f20307,plain,(
  ( ! [X52] : (s(bool,X52) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl20 | $spl40 | $spl53 | $spl62 | $spl78)),
  inference(subsumption_resolution,[],[f20139,f15682])).
fof(f20139,plain,(
  ( ! [X52] : (s(bool,X52) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X52)) ) | ($spl20 | $spl40 | $spl53 | $spl62)),
  inference(superposition,[],[f6045,f3852])).
fof(f20306,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20136,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20136,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X42) = s(bool,X43) | s(bool,X43) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X42)) ) | $spl62),
  inference(superposition,[],[f236,f3852])).
fof(f20305,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20135,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20304,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20133,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20133,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X30) = s(bool,X31) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33) | s(bool,'F_0') = s(bool,X30)) ) | $spl62),
  inference(superposition,[],[f236,f3852])).
fof(f20303,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20132,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20302,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20126,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20126,plain,(
  ( ! [X10,X9] : (s(bool,X9) = s(bool,X10) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X10) | s(bool,'F_0') = s(bool,X9)) ) | $spl62),
  inference(superposition,[],[f95,f3852])).
fof(f20301,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20125,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20125,plain,(
  ( ! [X8,X7] : (s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X7)) ) | $spl62),
  inference(superposition,[],[f95,f3852])).
fof(f20300,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20101,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20101,plain,(
  ( ! [X43,X42] : (p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,'F_0') = s(bool,X42)) ) | $spl62),
  inference(superposition,[],[f284,f3852])).
fof(f20299,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20098,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20098,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X31) = s(bool,X32) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33) | s(bool,X30) = s(bool,X31) | s(bool,'F_0') = s(bool,X30)) ) | $spl62),
  inference(superposition,[],[f236,f3852])).
fof(f20298,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20095,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20095,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X19) = s(bool,X20) | s(bool,X18) = s(bool,X20) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21) | s(bool,'F_0') = s(bool,X18)) ) | $spl62),
  inference(superposition,[],[f236,f3852])).
fof(f20297,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20094,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20296,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20093,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20295,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20091,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20091,plain,(
  ( ! [X8,X7] : (s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8) | s(bool,'F_0') = s(bool,X7)) ) | $spl62),
  inference(superposition,[],[f95,f3852])).
fof(f20294,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20088,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20088,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'F_0') = s(bool,X1)) ) | $spl62),
  inference(superposition,[],[f95,f3852])).
fof(f20293,plain,(
  $false | ($spl20 | $spl22 | $spl40 | $spl42 | $spl53 | $spl62 | $spl78 | $spl83)),
  inference(global_subsumption,[],[f20292,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20292,plain,(
  ( ! [X49] : (s(bool,'F_0') = s(bool,X49) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl20 | $spl40 | $spl53 | $spl62 | $spl78)),
  inference(forward_demodulation,[],[f20190,f5927])).
fof(f20190,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl20 | $spl40 | $spl53 | $spl62 | $spl78)),
  inference(subsumption_resolution,[],[f20083,f15682])).
fof(f20083,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X49) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl20 | $spl40 | $spl53 | $spl62)),
  inference(superposition,[],[f3852,f6045])).
fof(f20291,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20079,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20079,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X42) = s(bool,X43) | s(bool,'F_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl62),
  inference(superposition,[],[f3852,f236])).
fof(f20290,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20076,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20076,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X30) = s(bool,X31) | s(bool,'F_0') = s(bool,X31) | s(bool,X30) = s(bool,X32) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl62),
  inference(superposition,[],[f3852,f236])).
fof(f20289,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20070,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20070,plain,(
  ( ! [X10,X11] : (s(bool,X10) = s(bool,X11) | s(bool,'F_0') = s(bool,X11) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X10)) ) | $spl62),
  inference(superposition,[],[f3852,f95])).
fof(f20288,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20069,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20069,plain,(
  ( ! [X8,X9] : (s(bool,X8) = s(bool,X9) | s(bool,'F_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl62),
  inference(superposition,[],[f3852,f95])).
fof(f20287,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20050,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20050,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X29) | s(bool,X30) = s(bool,X31) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X32) | s(bool,X29) = s(bool,X30)) ) | $spl62),
  inference(superposition,[],[f3852,f236])).
fof(f20286,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20047,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20047,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X17) | s(bool,X18) = s(bool,X19) | s(bool,X17) = s(bool,X19) | s(bool,X18) = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) ) | $spl62),
  inference(superposition,[],[f3852,f236])).
fof(f20285,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20046,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20284,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20045,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20283,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20044,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20044,plain,(
  ( ! [X8,X7] : (s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X7) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl62),
  inference(superposition,[],[f3852,f95])).
fof(f20282,plain,(
  $false | ($spl22 | $spl42 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20041,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20041,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl62),
  inference(superposition,[],[f3852,f95])).
fof(f20281,plain,(
  $false | ($spl22 | $spl42 | $spl53 | $spl62 | $spl83)),
  inference(global_subsumption,[],[f20037,f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f99,f101,f105,f108,f118,f165,f236,f284,f486,f488,f1857,f1709,f1707,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f3202,f3203,f3205,f3820,f3819,f3763,f3745,f3726,f3400,f3483,f3556,f83,f1701,f511,f490,f41,f53,f52,f59,f54,f60,f855,f835,f811,f763,f495,f493,f491,f20199])).
fof(f20037,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl53 | $spl62)),
  inference(unit_resulting_resolution,[],[f127,f3852])).
fof(f20260,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20204,f77])).
fof(f20204,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f75,f73,f71,f20189])).
fof(f20189,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl22 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20188,f20149])).
fof(f20149,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,X2)) ) | ($spl22 | $spl44 | $spl62)),
  inference(duplicate_literal_removal,[],[f20065])).
fof(f20065,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | ($spl22 | $spl44 | $spl62)),
  inference(superposition,[],[f3852,f3926])).
fof(f3926,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl22 | $spl44)),
  inference(backward_demodulation,[],[f120,f83])).
fof(f20188,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl22 | $spl44 | $spl62)),
  inference(forward_demodulation,[],[f20187,f20149])).
fof(f20187,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl22 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20186,f20149])).
fof(f20186,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl22 | $spl44 | $spl62)),
  inference(forward_demodulation,[],[f20185,f20149])).
fof(f20185,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl22 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20184,f20149])).
fof(f20184,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl22 | $spl44 | $spl62)),
  inference(forward_demodulation,[],[f20183,f20149])).
fof(f20183,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl22 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20162,f20149])).
fof(f20162,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3)))) ) | ($spl22 | $spl44 | $spl62)),
  inference(backward_demodulation,[],[f20149,f60])).
fof(f20259,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20205,f77])).
fof(f20205,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f75,f73,f71,f20189])).
fof(f20258,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20206,f71])).
fof(f20206,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f75,f73,f77,f20189])).
fof(f20257,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20207,f73])).
fof(f20207,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f75,f71,f77,f20189])).
fof(f20256,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20208,f75])).
fof(f20208,plain,(
  s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f73,f71,f77,f20189])).
fof(f20255,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20209,f65])).
fof(f20209,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f75,f73,f71,f77,f20189])).
fof(f20254,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20210,f63])).
fof(f20210,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f65,f75,f73,f71,f77,f20189])).
fof(f20253,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20211,f87])).
fof(f20211,plain,(
  s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f63,f65,f75,f73,f71,f77,f20189])).
fof(f20252,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20212,f91])).
fof(f20212,plain,(
  s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f87,f63,f65,f75,f73,f71,f77,f20189])).
fof(f20251,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20213,f67])).
fof(f20213,plain,(
  s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f91,f87,f63,f65,f75,f73,f71,f77,f20189])).
fof(f20250,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20214,f89])).
fof(f20214,plain,(
  s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f67,f91,f87,f63,f65,f75,f73,f71,f77,f20189])).
fof(f20249,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20215,f85])).
fof(f20215,plain,(
  s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f89,f67,f91,f87,f63,f65,f75,f73,f71,f77,f20189])).
fof(f20248,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20216,f69])).
fof(f20216,plain,(
  s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f85,f89,f67,f91,f87,f63,f65,f75,f73,f71,f77,f20189])).
fof(f20247,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20217,f62])).
fof(f20217,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f69,f85,f89,f67,f91,f87,f63,f65,f75,f73,f71,f77,f20189])).
fof(f20246,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20219,f71])).
fof(f20219,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f75,f73,f77,f20189])).
fof(f20245,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20220,f73])).
fof(f20220,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f75,f71,f77,f20189])).
fof(f20244,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20221,f75])).
fof(f20221,plain,(
  s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f73,f71,f77,f20189])).
fof(f20243,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20222,f65])).
fof(f20222,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f75,f73,f71,f77,f20189])).
fof(f20242,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20223,f63])).
fof(f20223,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f65,f75,f73,f71,f77,f20189])).
fof(f20241,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20224,f87])).
fof(f20224,plain,(
  s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f63,f65,f75,f73,f71,f77,f20189])).
fof(f20240,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20225,f91])).
fof(f20225,plain,(
  s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f87,f63,f65,f75,f73,f71,f77,f20189])).
fof(f20239,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20226,f67])).
fof(f20226,plain,(
  s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f91,f87,f63,f65,f75,f73,f71,f77,f20189])).
fof(f20238,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20227,f89])).
fof(f20227,plain,(
  s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f67,f91,f87,f63,f65,f75,f73,f71,f77,f20189])).
fof(f20237,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20228,f85])).
fof(f20228,plain,(
  s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f89,f67,f91,f87,f63,f65,f75,f73,f71,f77,f20189])).
fof(f20236,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20229,f69])).
fof(f20229,plain,(
  s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f85,f89,f67,f91,f87,f63,f65,f75,f73,f71,f77,f20189])).
fof(f20235,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(subsumption_resolution,[],[f20230,f62])).
fof(f20230,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f69,f85,f89,f67,f91,f87,f63,f65,f75,f73,f71,f77,f20189])).
fof(f20231,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f75,f73,f71,f77,f20189])).
fof(f20218,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl22 | $spl24 | $spl26 | $spl28 | $spl30 | $spl44 | $spl62)),
  inference(unit_resulting_resolution,[],[f62,f69,f85,f89,f67,f91,f87,f63,f65,f75,f73,f71,f77,f20189])).
fof(f20203,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl88),
  inference(cnf_transformation,[],[f20203_D])).
fof(f20203_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f121,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl47),
  inference(cnf_transformation,[],[f121_D])).
fof(f121_D,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f2799,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl32 | $spl48 | $spl53)),
  inference(equality_factoring,[],[f2604])).
fof(f20200,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | $spl84),
  inference(cnf_transformation,[],[f20200_D])).
fof(f20200_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f20202,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | $spl87),
  inference(cnf_transformation,[],[f20202_D])).
fof(f20202_D,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) <=> ~$spl87),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl87])])).
fof(f2945,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X0) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl48 | $spl53)),
  inference(equality_factoring,[],[f2726])).
fof(f2726,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl48 | $spl53)),
  inference(subsumption_resolution,[],[f2700,f127])).
fof(f2700,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl48),
  inference(superposition,[],[f124,f95])).
fof(f20197,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | $spl80),
  inference(cnf_transformation,[],[f20197_D])).
fof(f20197_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f20199,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | $spl83),
  inference(cnf_transformation,[],[f20199_D])).
fof(f20199_D,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) <=> ~$spl83),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl83])])).
fof(f4524,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X0) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl44 | $spl53)),
  inference(equality_factoring,[],[f4263])).
fof(f4263,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl44 | $spl53)),
  inference(subsumption_resolution,[],[f4237,f127])).
fof(f4237,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl44),
  inference(superposition,[],[f120,f95])).
fof(f20151,plain,(
  $false | ($spl22 | $spl44 | $spl47 | $spl53 | $spl62)),
  inference(subsumption_resolution,[],[f20037,f16233])).
fof(f16233,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl22 | $spl44 | $spl47 | $spl53)),
  inference(subsumption_resolution,[],[f4327,f121])).
fof(f4327,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl22 | $spl44 | $spl47 | $spl53)),
  inference(superposition,[],[f121,f3953])).
fof(f3953,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl22 | $spl44 | $spl53)),
  inference(subsumption_resolution,[],[f3927,f127])).
fof(f3927,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl22 | $spl44)),
  inference(superposition,[],[f3926,f95])).
fof(f20150,plain,(
  $false | ($spl22 | $spl44 | $spl47 | $spl53 | $spl62)),
  inference(subsumption_resolution,[],[f20038,f127])).
fof(f20038,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl22 | $spl44 | $spl47 | $spl53 | $spl62)),
  inference(unit_resulting_resolution,[],[f16233,f3852])).
fof(f20039,plain,(
  $false | ($spl22 | $spl44 | $spl47 | $spl53 | $spl62)),
  inference(unit_resulting_resolution,[],[f127,f16233,f3852])).
fof(f16232,plain,(
  $false | ($spl39 | $spl74)),
  inference(subsumption_resolution,[],[f113,f15506])).
fof(f16231,plain,(
  $false | ($spl47 | $spl74)),
  inference(subsumption_resolution,[],[f16092,f15506])).
fof(f16092,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl47 | $spl74)),
  inference(superposition,[],[f121,f15506])).
fof(f16230,plain,(
  $false | ($spl47 | $spl48 | $spl53 | $spl74)),
  inference(subsumption_resolution,[],[f16094,f15506])).
fof(f16094,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl47 | $spl48 | $spl53 | $spl74)),
  inference(superposition,[],[f3020,f15506])).
fof(f3020,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl47 | $spl48 | $spl53)),
  inference(subsumption_resolution,[],[f2923,f121])).
fof(f2923,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl47 | $spl48 | $spl53)),
  inference(superposition,[],[f121,f2726])).
fof(f16229,plain,(
  $false | ($spl20 | $spl40 | $spl43 | $spl53 | $spl74)),
  inference(subsumption_resolution,[],[f16098,f16038])).
fof(f16038,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl74),
  inference(superposition,[],[f15506,f15506])).
fof(f16098,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0)) ) | ($spl20 | $spl40 | $spl43 | $spl53 | $spl74)),
  inference(superposition,[],[f9175,f15506])).
fof(f9175,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl20 | $spl40 | $spl43 | $spl53)),
  inference(subsumption_resolution,[],[f6810,f117])).
fof(f6810,plain,(
  s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl20 | $spl40 | $spl43 | $spl53)),
  inference(superposition,[],[f117,f6045])).
fof(f16009,plain,(
  $false | ($spl20 | $spl40 | $spl43 | $spl53 | $spl74)),
  inference(unit_resulting_resolution,[],[f9175,f15506])).
fof(f16004,plain,(
  $false | ($spl20 | $spl40 | $spl53 | $spl64 | $spl74)),
  inference(subsumption_resolution,[],[f15785,f15723])).
fof(f15723,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | ($spl20 | $spl40 | $spl64 | $spl74)),
  inference(superposition,[],[f15708,f15708])).
fof(f15708,plain,(
  ( ! [X104] : (s(bool,'F_0') = s(bool,X104)) ) | ($spl20 | $spl40 | $spl64 | $spl74)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f98,f101,f104,f108,f236,f284,f486,f488,f1857,f1699,f634,f762,f810,f1229,f834,f838,f854,f1045,f1919,f962,f81,f5779,f5927,f1701,f511,f490,f116,f41,f59,f54,f53,f52,f60,f855,f835,f811,f763,f495,f493,f491,f14092,f14094,f14631,f14633,f14773,f14775,f14835,f15471,f15461,f14949,f14950,f14952,f15563,f15582,f15380,f15353,f15377,f15506,f15700,f15707])).
fof(f15707,plain,(
  ( ! [X103,X101,X102,X104] : (s(bool,'F_0') = s(bool,X104) | s(fun(X101,bool),X102) = s(fun(X101,bool),X103) | s(bool,X104) = s(bool,g(s(X101,sK4(X102,X103,bool,X101))))) ) | ($spl20 | $spl40 | $spl64 | $spl74)),
  inference(subsumption_resolution,[],[f15690,f15506])).
fof(f15690,plain,(
  ( ! [X103,X101,X102,X104] : (s(bool,'F_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X104) | s(fun(X101,bool),X102) = s(fun(X101,bool),X103) | s(bool,X104) = s(bool,g(s(X101,sK4(X102,X103,bool,X101))))) ) | ($spl20 | $spl40 | $spl64 | $spl74)),
  inference(backward_demodulation,[],[f15506,f14633])).
fof(f15700,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3) | s(bool,X0) = s(bool,g(s(X1,sK4(X2,X3,bool,X1))))) ) | $spl74),
  inference(condensation,[],[f15699])).
fof(f15699,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(X1,bool),X2) = s(fun(X1,bool),X3) | s(bool,X4) = s(bool,g(s(X1,sK4(X2,X3,bool,X1)))) | s(bool,'T_0') = s(bool,X4)) ) | $spl74),
  inference(condensation,[],[f15698])).
fof(f15698,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (s(fun(X97,bool),X98) = s(fun(X97,bool),X99) | s(bool,X100) = s(bool,X101) | s(bool,'T_0') = s(bool,X101) | s(bool,X102) = s(bool,g(s(X97,sK4(X98,X99,bool,X97)))) | s(bool,'T_0') = s(bool,X102)) ) | $spl74),
  inference(subsumption_resolution,[],[f15686,f15506])).
fof(f15686,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (s(bool,X100) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun(X97,bool),X98) = s(fun(X97,bool),X99) | s(bool,X100) = s(bool,X101) | s(bool,'T_0') = s(bool,X101) | s(bool,X102) = s(bool,g(s(X97,sK4(X98,X99,bool,X97)))) | s(bool,'T_0') = s(bool,X102)) ) | $spl74),
  inference(backward_demodulation,[],[f15506,f763])).
fof(f15377,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | s(bool,X0) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl20 | $spl40 | $spl64)),
  inference(duplicate_literal_removal,[],[f15358])).
fof(f15358,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | s(bool,X0) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl20 | $spl40 | $spl64)),
  inference(equality_factoring,[],[f14094])).
fof(f15380,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X0)) ) | ($spl20 | $spl40 | $spl64)),
  inference(duplicate_literal_removal,[],[f15349])).
fof(f15349,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0)) ) | ($spl20 | $spl40 | $spl64)),
  inference(equality_factoring,[],[f14094])).
fof(f15582,plain,(
  ( ! [X111,X114,X112,X113] : (s(X113,f(s(bool,'F_0'))) != s(X113,g(s(bool,'F_0'))) | s(fun(bool,X113),X111) = s(fun(bool,X113),X112) | s(bool,'F_0') = s(bool,X114) | s(bool,X114) = s(bool,sK4(X111,X112,X113,bool))) ) | ($spl20 | $spl40 | $spl64)),
  inference(forward_demodulation,[],[f15196,f5927])).
fof(f15196,plain,(
  ( ! [X111,X114,X112,X113] : (s(X113,f(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))))) != s(X113,g(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))))) | s(fun(bool,X113),X111) = s(fun(bool,X113),X112) | s(bool,'F_0') = s(bool,X114) | s(bool,X114) = s(bool,sK4(X111,X112,X113,bool))) ) | ($spl20 | $spl40 | $spl64)),
  inference(superposition,[],[f43,f14094])).
fof(f15563,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) ) | ($spl20 | $spl40 | $spl64)),
  inference(forward_demodulation,[],[f15087,f5927])).
fof(f15087,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | s(bool,X1) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,X1)) ) | ($spl20 | $spl40 | $spl64)),
  inference(superposition,[],[f41,f14094])).
fof(f14952,plain,(
  ( ! [X12,X13] : (s(bool,'F_0') = s(bool,X12) | s(bool,'F_0') = s(bool,X13) | s(bool,X12) = s(bool,X13)) ) | ($spl20 | $spl40 | $spl64)),
  inference(superposition,[],[f14094,f5927])).
fof(f14950,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,'F_0') = s(bool,X6) | s(bool,X5) = s(bool,X6) | s(bool,X7) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X4) = s(bool,X7)) ) | ($spl20 | $spl40 | $spl64)),
  inference(superposition,[],[f14094,f5779])).
fof(f14949,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X2) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X3) | s(bool,X0) = s(bool,X3)) ) | ($spl20 | $spl40 | $spl64)),
  inference(superposition,[],[f14094,f14094])).
fof(f14835,plain,(
  ( ! [X144,X142,X143,X141] : (s(bool,'F_0') = s(bool,sK4(X141,X142,X143,bool)) | s(X143,f(s(bool,X144))) != s(X143,g(s(bool,X144))) | s(fun(bool,X143),X141) = s(fun(bool,X143),X142) | s(bool,X144) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl20 | $spl40 | $spl64)),
  inference(forward_demodulation,[],[f14500,f5927])).
fof(f14500,plain,(
  ( ! [X144,X142,X143,X141] : (s(X143,f(s(bool,X144))) != s(X143,g(s(bool,X144))) | s(fun(bool,X143),X141) = s(fun(bool,X143),X142) | s(bool,sK4(X141,X142,X143,bool)) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X144) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl64),
  inference(superposition,[],[f43,f5779])).
fof(f14775,plain,(
  ( ! [X146,X147,X145,X148] : (s(bool,'F_0') = s(bool,g(s(X145,sK4(X146,X147,bool,X145)))) | s(bool,'F_0') = s(bool,X148) | s(bool,X148) != s(bool,f(s(X145,sK4(X146,X147,bool,X145)))) | s(fun(X145,bool),X146) = s(fun(X145,bool),X147)) ) | ($spl20 | $spl40 | $spl64)),
  inference(forward_demodulation,[],[f14774,f5927])).
fof(f14774,plain,(
  ( ! [X146,X147,X145,X148] : (s(bool,'F_0') = s(bool,X148) | s(bool,X148) != s(bool,f(s(X145,sK4(X146,X147,bool,X145)))) | s(fun(X145,bool),X146) = s(fun(X145,bool),X147) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,g(s(X145,sK4(X146,X147,bool,X145))))) ) | ($spl20 | $spl40 | $spl64)),
  inference(forward_demodulation,[],[f14444,f5927])).
fof(f14444,plain,(
  ( ! [X146,X147,X145,X148] : (s(bool,X148) != s(bool,f(s(X145,sK4(X146,X147,bool,X145)))) | s(fun(X145,bool),X146) = s(fun(X145,bool),X147) | s(bool,X148) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) = s(bool,g(s(X145,sK4(X146,X147,bool,X145))))) ) | $spl64),
  inference(superposition,[],[f43,f5779])).
fof(f14773,plain,(
  ( ! [X144,X142,X143,X141] : (s(bool,'F_0') = s(bool,sK4(X141,X142,X143,bool)) | s(bool,'F_0') = s(bool,X144) | s(X143,f(s(bool,X144))) != s(X143,g(s(bool,X144))) | s(fun(bool,X143),X141) = s(fun(bool,X143),X142)) ) | ($spl20 | $spl40 | $spl64)),
  inference(forward_demodulation,[],[f14772,f5927])).
fof(f14772,plain,(
  ( ! [X144,X142,X143,X141] : (s(bool,'F_0') = s(bool,X144) | s(X143,f(s(bool,X144))) != s(X143,g(s(bool,X144))) | s(fun(bool,X143),X141) = s(fun(bool,X143),X142) | s(bool,sK4(X141,X142,X143,bool)) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl20 | $spl40 | $spl64)),
  inference(forward_demodulation,[],[f14443,f5927])).
fof(f14443,plain,(
  ( ! [X144,X142,X143,X141] : (s(X143,f(s(bool,X144))) != s(X143,g(s(bool,X144))) | s(fun(bool,X143),X141) = s(fun(bool,X143),X142) | s(bool,X144) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,sK4(X141,X142,X143,bool)) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl64),
  inference(superposition,[],[f43,f5779])).
fof(f14633,plain,(
  ( ! [X103,X101,X102,X104] : (s(bool,'F_0') = s(bool,X104) | s(bool,'F_0') != s(bool,f(s(X101,sK4(X102,X103,bool,X101)))) | s(fun(X101,bool),X102) = s(fun(X101,bool),X103) | s(bool,X104) = s(bool,g(s(X101,sK4(X102,X103,bool,X101))))) ) | ($spl20 | $spl40 | $spl64)),
  inference(forward_demodulation,[],[f14632,f5927])).
fof(f14632,plain,(
  ( ! [X103,X101,X102,X104] : (s(bool,'F_0') != s(bool,f(s(X101,sK4(X102,X103,bool,X101)))) | s(fun(X101,bool),X102) = s(fun(X101,bool),X103) | s(bool,X104) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X104) = s(bool,g(s(X101,sK4(X102,X103,bool,X101))))) ) | ($spl20 | $spl40 | $spl64)),
  inference(forward_demodulation,[],[f14306,f5927])).
fof(f14306,plain,(
  ( ! [X103,X101,X102,X104] : (s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) != s(bool,f(s(X101,sK4(X102,X103,bool,X101)))) | s(fun(X101,bool),X102) = s(fun(X101,bool),X103) | s(bool,X104) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X104) = s(bool,g(s(X101,sK4(X102,X103,bool,X101))))) ) | $spl64),
  inference(superposition,[],[f43,f5779])).
fof(f14631,plain,(
  ( ! [X99,X97,X100,X98] : (s(X99,f(s(bool,'F_0'))) != s(X99,g(s(bool,'F_0'))) | s(fun(bool,X99),X97) = s(fun(bool,X99),X98) | s(bool,X100) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X100) = s(bool,sK4(X97,X98,X99,bool))) ) | ($spl20 | $spl40 | $spl64)),
  inference(forward_demodulation,[],[f14305,f5927])).
fof(f14305,plain,(
  ( ! [X99,X97,X100,X98] : (s(X99,f(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))))) != s(X99,g(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))))) | s(fun(bool,X99),X97) = s(fun(bool,X99),X98) | s(bool,X100) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X100) = s(bool,sK4(X97,X98,X99,bool))) ) | $spl64),
  inference(superposition,[],[f43,f5779])).
fof(f14094,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') = s(bool,X8) | s(bool,X9) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X8) = s(bool,X9)) ) | ($spl20 | $spl40 | $spl64)),
  inference(superposition,[],[f5779,f5927])).
fof(f14092,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f5779,f5779])).
fof(f15785,plain,(
  ( ! [X4] : (s(bool,'T_0') != s(bool,X4)) ) | ($spl20 | $spl40 | $spl53 | $spl64 | $spl74)),
  inference(superposition,[],[f127,f15708])).
fof(f15722,plain,(
  $false | ($spl20 | $spl40 | $spl53 | $spl64 | $spl74)),
  inference(unit_resulting_resolution,[],[f127,f15708])).
fof(f15682,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl78),
  inference(cnf_transformation,[],[f15682_D])).
fof(f15682_D,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f15353,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,'F_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl20 | $spl40 | $spl64)),
  inference(equality_factoring,[],[f14094])).
fof(f15507,plain,(
  ( ! [X103,X101] : (s(bool,'F_0') = s(bool,X101) | s(bool,X101) = s(bool,X103) | s(bool,'F_0') = s(bool,X103)) ) | $spl76),
  inference(cnf_transformation,[],[f15507_D])).
fof(f15507_D,plain,(
  ( ! [X103,X101] : (s(bool,'F_0') = s(bool,X101) | s(bool,X101) = s(bool,X103) | s(bool,'F_0') = s(bool,X103)) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f15461,plain,(
  ( ! [X80,X78,X79] : (s(bool,X79) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X80) | s(bool,X78) = s(bool,X80) | s(bool,'F_0') = s(bool,X78)) ) | ($spl20 | $spl40 | $spl64)),
  inference(duplicate_literal_removal,[],[f14938])).
fof(f14938,plain,(
  ( ! [X80,X78,X79] : (s(bool,X79) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X80) | s(bool,X78) = s(bool,X80) | s(bool,'F_0') = s(bool,X78) | s(bool,X79) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl20 | $spl40 | $spl64)),
  inference(superposition,[],[f14094,f14094])).
fof(f15471,plain,(
  ( ! [X103,X101,X102] : (s(bool,'F_0') = s(bool,X101) | s(bool,X102) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X103) | s(bool,X101) = s(bool,X103)) ) | ($spl20 | $spl40 | $spl64)),
  inference(duplicate_literal_removal,[],[f14907])).
fof(f14907,plain,(
  ( ! [X103,X101,X102] : (s(bool,'F_0') = s(bool,X101) | s(bool,X102) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X102) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X103) | s(bool,X101) = s(bool,X103)) ) | ($spl20 | $spl40 | $spl64)),
  inference(superposition,[],[f14094,f14094])).
fof(f14003,plain,(
  $false | ($spl35 | $spl53 | $spl70)),
  inference(subsumption_resolution,[],[f13877,f109])).
fof(f13877,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl53 | $spl70)),
  inference(unit_resulting_resolution,[],[f127,f8699])).
fof(f14002,plain,(
  $false | ($spl35 | $spl53 | $spl70)),
  inference(subsumption_resolution,[],[f13878,f127])).
fof(f13878,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl35 | $spl70)),
  inference(unit_resulting_resolution,[],[f109,f8699])).
fof(f13879,plain,(
  $false | ($spl35 | $spl53 | $spl70)),
  inference(unit_resulting_resolution,[],[f127,f109,f8699])).
fof(f13836,plain,(
  $false | ($spl20 | $spl40 | $spl43 | $spl53 | $spl66)),
  inference(subsumption_resolution,[],[f13716,f9175])).
fof(f13716,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | ($spl53 | $spl66)),
  inference(unit_resulting_resolution,[],[f127,f5780])).
fof(f13835,plain,(
  $false | ($spl20 | $spl40 | $spl43 | $spl53 | $spl66)),
  inference(subsumption_resolution,[],[f13717,f127])).
fof(f13717,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl20 | $spl40 | $spl43 | $spl53 | $spl66)),
  inference(unit_resulting_resolution,[],[f9175,f5780])).
fof(f13718,plain,(
  $false | ($spl20 | $spl40 | $spl43 | $spl53 | $spl66)),
  inference(unit_resulting_resolution,[],[f127,f9175,f5780])).
fof(f9148,plain,(
  $false | ($spl20 | $spl38 | $spl40 | $spl53)),
  inference(subsumption_resolution,[],[f9134,f40])).
fof(f9134,plain,(
  ~p(s(bool,'T_0')) | ($spl20 | $spl38 | $spl40 | $spl53)),
  inference(backward_demodulation,[],[f9133,f41])).
fof(f9133,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,X3)) ) | ($spl20 | $spl38 | $spl40 | $spl53)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f98,f101,f104,f108,f127,f114,f166,f236,f284,f486,f488,f1857,f1713,f1711,f1699,f634,f762,f810,f1229,f1916,f834,f838,f854,f1045,f1919,f962,f5076,f5077,f5079,f5748,f5747,f5689,f5671,f5650,f5302,f5854,f5399,f5478,f81,f59,f54,f53,f60,f52,f855,f835,f811,f763,f493,f491,f1701,f511,f495,f490,f41,f116,f5927,f6045,f6046,f6671,f6672,f7035,f9120,f9132])).
fof(f9132,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl20 | $spl38 | $spl40 | $spl53)),
  inference(subsumption_resolution,[],[f9121,f9120])).
fof(f9121,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl20 | $spl38 | $spl40 | $spl53)),
  inference(backward_demodulation,[],[f9120,f491])).
fof(f9120,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2)))) ) | ($spl20 | $spl38 | $spl40 | $spl53)),
  inference(global_subsumption,[],[f39,f38,f37,f36,f35,f34,f33,f32,f31,f30,f29,f28,f27,f26,f25,f24,f23,f40,f42,f43,f58,f57,f56,f55,f51,f50,f49,f48,f47,f46,f45,f44,f95,f98,f101,f104,f108,f127,f114,f166,f236,f284,f486,f488,f1857,f1713,f1711,f1699,f634,f762,f810,f1229,f1916,f834,f838,f854,f1045,f1919,f962,f5076,f5077,f5079,f5748,f5747,f5689,f5671,f5650,f5302,f5854,f5399,f5478,f81,f59,f54,f53,f60,f52,f855,f835,f811,f763,f493,f491,f1701,f511,f495,f490,f41,f116,f5927,f6045,f6046,f6671,f6672,f7035])).
fof(f6046,plain,(
  ( ! [X12,X10,X11] : (s(bool,X10) = s(bool,X11) | s(bool,X11) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | ($spl20 | $spl40 | $spl53)),
  inference(subsumption_resolution,[],[f6025,f127])).
fof(f6025,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X10) = s(bool,X11) | s(bool,X11) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | ($spl20 | $spl40)),
  inference(superposition,[],[f5927,f236])).
fof(f5854,plain,(
  ( ! [X89] : (s(bool,'T_0') != s(bool,X89) | s(bool,X89) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl38 | $spl53)),
  inference(subsumption_resolution,[],[f5379,f127])).
fof(f5379,plain,(
  ( ! [X89] : (s(bool,'T_0') != s(bool,X89) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X89) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl38 | $spl53)),
  inference(superposition,[],[f127,f1711])).
fof(f1713,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X0) = s(bool,X1)) ) | ($spl20 | $spl38)),
  inference(condensation,[],[f1712])).
fof(f1712,plain,(
  ( ! [X116,X114,X115] : (s(bool,'T_0') = s(bool,X114) | s(bool,X115) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,X115) = s(bool,X116) | s(bool,'T_0') = s(bool,X116)) ) | ($spl20 | $spl38)),
  inference(duplicate_literal_removal,[],[f600])).
fof(f600,plain,(
  ( ! [X116,X114,X115] : (s(bool,'T_0') = s(bool,X114) | s(bool,X115) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X114) | s(bool,X115) = s(bool,X116) | s(bool,'T_0') = s(bool,X116)) ) | ($spl20 | $spl38)),
  inference(superposition,[],[f236,f166])).
fof(f166,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl38)),
  inference(forward_demodulation,[],[f81,f114])).
fof(f9115,plain,(
  ( ! [X48,X49] : (s(bool,'T_0') = s(bool,X49) | p(s(bool,X48)) | s(bool,'F_0') = s(bool,X48)) ) | ($spl20 | $spl34 | $spl39 | $spl40 | $spl53)),
  inference(forward_demodulation,[],[f9114,f110])).
fof(f9114,plain,(
  ( ! [X48,X49] : (p(s(bool,X48)) | s(bool,X49) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X48)) ) | ($spl20 | $spl34 | $spl39 | $spl40 | $spl53)),
  inference(subsumption_resolution,[],[f9086,f8795])).
fof(f8795,plain,(
  ( ! [X96] : (s(bool,'T_0') != s(bool,X96) | s(bool,X96) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl34 | $spl53)),
  inference(subsumption_resolution,[],[f8287,f127])).
fof(f8287,plain,(
  ( ! [X96] : (s(bool,'T_0') != s(bool,X96) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X96) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl34 | $spl53)),
  inference(superposition,[],[f127,f1715])).
fof(f1715,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X0) = s(bool,X1)) ) | $spl34),
  inference(condensation,[],[f1714])).
fof(f1714,plain,(
  ( ! [X111,X112,X113] : (s(bool,'T_0') = s(bool,X111) | s(bool,X112) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X112) = s(bool,X113) | s(bool,'T_0') = s(bool,X113)) ) | $spl34),
  inference(duplicate_literal_removal,[],[f599])).
fof(f599,plain,(
  ( ! [X111,X112,X113] : (s(bool,'T_0') = s(bool,X111) | s(bool,X112) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X111) | s(bool,X112) = s(bool,X113) | s(bool,'T_0') = s(bool,X113)) ) | $spl34),
  inference(superposition,[],[f236,f110])).
fof(f9086,plain,(
  ( ! [X48,X49] : (p(s(bool,X48)) | s(bool,X49) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X49) | s(bool,'F_0') = s(bool,X48)) ) | ($spl20 | $spl34 | $spl39 | $spl40)),
  inference(superposition,[],[f284,f8736])).
fof(f8736,plain,(
  ( ! [X97] : (s(bool,X97) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X97)) ) | ($spl20 | $spl34 | $spl39 | $spl40)),
  inference(subsumption_resolution,[],[f8087,f113])).
fof(f8087,plain,(
  ( ! [X97] : (s(bool,'F_0') = s(bool,X97) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X97) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | ($spl20 | $spl34 | $spl40)),
  inference(superposition,[],[f1715,f5927])).
fof(f8698,plain,(
  ( ! [X51,X49] : (s(bool,X51) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51)) ) | $spl68),
  inference(cnf_transformation,[],[f8698_D])).
fof(f8698_D,plain,(
  ( ! [X51,X49] : (s(bool,X51) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51)) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f8565,plain,(
  ( ! [X59,X57,X58] : (s(bool,'T_0') = s(bool,X58) | s(bool,X57) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X59) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X57) = s(bool,X59)) ) | $spl34),
  inference(duplicate_literal_removal,[],[f8112])).
fof(f8112,plain,(
  ( ! [X59,X57,X58] : (s(bool,'T_0') = s(bool,X58) | s(bool,'T_0') = s(bool,X58) | s(bool,X57) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X59) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X57) = s(bool,X59)) ) | $spl34),
  inference(superposition,[],[f1715,f1715])).
fof(f8588,plain,(
  ( ! [X61,X62,X60] : (s(bool,X61) = s(bool,X62) | s(bool,'T_0') = s(bool,X60) | s(bool,X62) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X61) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl34),
  inference(duplicate_literal_removal,[],[f8069])).
fof(f8069,plain,(
  ( ! [X61,X62,X60] : (s(bool,X61) = s(bool,X62) | s(bool,'T_0') = s(bool,X60) | s(bool,X62) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl34),
  inference(superposition,[],[f1715,f1715])).
fof(f8699,plain,(
  ( ! [X70] : (s(bool,X70) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X70)) ) | $spl70),
  inference(cnf_transformation,[],[f8699_D])).
fof(f8699_D,plain,(
  ( ! [X70] : (s(bool,X70) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X70)) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f8606,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl34),
  inference(duplicate_literal_removal,[],[f8054])).
fof(f8054,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl34),
  inference(superposition,[],[f1715,f42])).
fof(f8666,plain,(
  ( ! [X70,X69] : (s(bool,'T_0') = s(bool,X69) | s(bool,X70) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X70)) ) | $spl34),
  inference(duplicate_literal_removal,[],[f7987])).
fof(f7987,plain,(
  ( ! [X70,X69] : (s(bool,'T_0') = s(bool,X69) | s(bool,X70) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X70) | s(bool,'T_0') = s(bool,X69)) ) | $spl34),
  inference(superposition,[],[f1715,f42])).
fof(f8667,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,X50) | s(bool,X51) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51) | s(bool,X49) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl34),
  inference(duplicate_literal_removal,[],[f7980])).
fof(f7980,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,X50) | s(bool,X51) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51) | s(bool,'T_0') = s(bool,X50) | s(bool,X49) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl34),
  inference(superposition,[],[f1715,f1715])).
fof(f5897,plain,(
  $false | $spl56),
  inference(subsumption_resolution,[],[f5872,f40])).
fof(f5872,plain,(
  ~p(s(bool,'T_0')) | $spl56),
  inference(backward_demodulation,[],[f2521,f41])).
fof(f5779,plain,(
  ( ! [X51,X49] : (s(bool,X51) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51)) ) | $spl64),
  inference(cnf_transformation,[],[f5779_D])).
fof(f5779_D,plain,(
  ( ! [X51,X49] : (s(bool,X51) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51)) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f5650,plain,(
  ( ! [X59,X57,X58] : (s(bool,'T_0') = s(bool,X58) | s(bool,X57) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X59) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X57) = s(bool,X59)) ) | $spl38),
  inference(duplicate_literal_removal,[],[f5225])).
fof(f5225,plain,(
  ( ! [X59,X57,X58] : (s(bool,'T_0') = s(bool,X58) | s(bool,'T_0') = s(bool,X58) | s(bool,X57) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X59) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X57) = s(bool,X59)) ) | $spl38),
  inference(superposition,[],[f1711,f1711])).
fof(f5671,plain,(
  ( ! [X61,X62,X60] : (s(bool,X61) = s(bool,X62) | s(bool,'T_0') = s(bool,X60) | s(bool,X62) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X61) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl38),
  inference(duplicate_literal_removal,[],[f5185])).
fof(f5185,plain,(
  ( ! [X61,X62,X60] : (s(bool,X61) = s(bool,X62) | s(bool,'T_0') = s(bool,X60) | s(bool,X62) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl38),
  inference(superposition,[],[f1711,f1711])).
fof(f5780,plain,(
  ( ! [X66] : (s(bool,X66) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X66)) ) | $spl66),
  inference(cnf_transformation,[],[f5780_D])).
fof(f5780_D,plain,(
  ( ! [X66] : (s(bool,X66) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X66)) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f5689,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl38),
  inference(duplicate_literal_removal,[],[f5170])).
fof(f5170,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl38),
  inference(superposition,[],[f1711,f42])).
fof(f5747,plain,(
  ( ! [X66,X65] : (s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X66)) ) | $spl38),
  inference(duplicate_literal_removal,[],[f5112])).
fof(f5112,plain,(
  ( ! [X66,X65] : (s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X65)) ) | $spl38),
  inference(superposition,[],[f1711,f42])).
fof(f5748,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,X50) | s(bool,X51) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51) | s(bool,X49) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl38),
  inference(duplicate_literal_removal,[],[f5107])).
fof(f5107,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,X50) | s(bool,X51) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51) | s(bool,'T_0') = s(bool,X50) | s(bool,X49) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl38),
  inference(superposition,[],[f1711,f1711])).
fof(f3851,plain,(
  ( ! [X51,X49] : (s(bool,X51) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51)) ) | $spl60),
  inference(cnf_transformation,[],[f3851_D])).
fof(f3851_D,plain,(
  ( ! [X51,X49] : (s(bool,X51) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51)) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f3726,plain,(
  ( ! [X59,X57,X58] : (s(bool,'T_0') = s(bool,X58) | s(bool,X57) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X59) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X57) = s(bool,X59)) ) | $spl42),
  inference(duplicate_literal_removal,[],[f3335])).
fof(f3335,plain,(
  ( ! [X59,X57,X58] : (s(bool,'T_0') = s(bool,X58) | s(bool,'T_0') = s(bool,X58) | s(bool,X57) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X59) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X57) = s(bool,X59)) ) | $spl42),
  inference(superposition,[],[f1707,f1707])).
fof(f3745,plain,(
  ( ! [X61,X62,X60] : (s(bool,X61) = s(bool,X62) | s(bool,'T_0') = s(bool,X60) | s(bool,X62) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X61) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl42),
  inference(duplicate_literal_removal,[],[f3299])).
fof(f3299,plain,(
  ( ! [X61,X62,X60] : (s(bool,X61) = s(bool,X62) | s(bool,'T_0') = s(bool,X60) | s(bool,X62) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl42),
  inference(superposition,[],[f1707,f1707])).
fof(f3852,plain,(
  ( ! [X62] : (s(bool,X62) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X62)) ) | $spl62),
  inference(cnf_transformation,[],[f3852_D])).
fof(f3852_D,plain,(
  ( ! [X62] : (s(bool,X62) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X62)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f3763,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl42),
  inference(duplicate_literal_removal,[],[f3284])).
fof(f3284,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl42),
  inference(superposition,[],[f1707,f42])).
fof(f3819,plain,(
  ( ! [X61,X62] : (s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X62)) ) | $spl42),
  inference(duplicate_literal_removal,[],[f3236])).
fof(f3236,plain,(
  ( ! [X61,X62] : (s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X62) | s(bool,'T_0') = s(bool,X61)) ) | $spl42),
  inference(superposition,[],[f1707,f42])).
fof(f3820,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,X50) | s(bool,X51) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51) | s(bool,X49) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl42),
  inference(duplicate_literal_removal,[],[f3233])).
fof(f3233,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,X50) | s(bool,X51) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51) | s(bool,'T_0') = s(bool,X50) | s(bool,X49) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl42),
  inference(superposition,[],[f1707,f1707])).
fof(f2520,plain,(
  ( ! [X51,X49] : (s(bool,X51) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51)) ) | $spl54),
  inference(cnf_transformation,[],[f2520_D])).
fof(f2520_D,plain,(
  ( ! [X51,X49] : (s(bool,X51) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51)) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f2399,plain,(
  ( ! [X59,X57,X58] : (s(bool,'T_0') = s(bool,X58) | s(bool,X57) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X59) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X57) = s(bool,X59)) ) | $spl46),
  inference(duplicate_literal_removal,[],[f2042])).
fof(f2042,plain,(
  ( ! [X59,X57,X58] : (s(bool,'T_0') = s(bool,X58) | s(bool,'T_0') = s(bool,X58) | s(bool,X57) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X59) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X57) = s(bool,X59)) ) | $spl46),
  inference(superposition,[],[f1703,f1703])).
fof(f2416,plain,(
  ( ! [X61,X62,X60] : (s(bool,X61) = s(bool,X62) | s(bool,'T_0') = s(bool,X60) | s(bool,X62) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X61) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl46),
  inference(duplicate_literal_removal,[],[f2010])).
fof(f2010,plain,(
  ( ! [X61,X62,X60] : (s(bool,X61) = s(bool,X62) | s(bool,'T_0') = s(bool,X60) | s(bool,X62) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl46),
  inference(superposition,[],[f1703,f1703])).
fof(f2522,plain,(
  ( ! [X58] : (s(bool,X58) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X58)) ) | $spl58),
  inference(cnf_transformation,[],[f2522_D])).
fof(f2522_D,plain,(
  ( ! [X58] : (s(bool,X58) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X58)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f2434,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl46),
  inference(duplicate_literal_removal,[],[f1995])).
fof(f1995,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl46),
  inference(superposition,[],[f1703,f42])).
fof(f2488,plain,(
  ( ! [X57,X58] : (s(bool,'T_0') = s(bool,X57) | s(bool,X58) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X58)) ) | $spl46),
  inference(duplicate_literal_removal,[],[f1957])).
fof(f1957,plain,(
  ( ! [X57,X58] : (s(bool,'T_0') = s(bool,X57) | s(bool,X58) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X58) | s(bool,'T_0') = s(bool,X57)) ) | $spl46),
  inference(superposition,[],[f1703,f42])).
fof(f2489,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,X50) | s(bool,X51) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51) | s(bool,X49) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl46),
  inference(duplicate_literal_removal,[],[f1956])).
fof(f1956,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,X50) | s(bool,X51) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,X49) = s(bool,X51) | s(bool,'T_0') = s(bool,X50) | s(bool,X49) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3)))) ) | $spl46),
  inference(superposition,[],[f1703,f1703])).
fof(f163,plain,(
  $false | ($spl0 | $spl31)),
  inference(trivial_inequality_removal,[],[f162])).
fof(f162,plain,(
  s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl31)),
  inference(forward_demodulation,[],[f92,f61])).
fof(f161,plain,(
  $false | ($spl0 | $spl27)),
  inference(trivial_inequality_removal,[],[f160])).
fof(f160,plain,(
  s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl27)),
  inference(forward_demodulation,[],[f88,f61])).
fof(f159,plain,(
  $false | ($spl0 | $spl17)),
  inference(trivial_inequality_removal,[],[f158])).
fof(f158,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl17)),
  inference(forward_demodulation,[],[f78,f61])).
fof(f157,plain,(
  $false | ($spl0 | $spl13)),
  inference(trivial_inequality_removal,[],[f156])).
fof(f156,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl13)),
  inference(forward_demodulation,[],[f74,f61])).
fof(f155,plain,(
  $false | ($spl0 | $spl29)),
  inference(trivial_inequality_removal,[],[f154])).
fof(f154,plain,(
  s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl29)),
  inference(forward_demodulation,[],[f90,f61])).
fof(f153,plain,(
  $false | ($spl0 | $spl25)),
  inference(trivial_inequality_removal,[],[f152])).
fof(f152,plain,(
  s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl25)),
  inference(forward_demodulation,[],[f86,f61])).
fof(f151,plain,(
  $false | ($spl0 | $spl15)),
  inference(trivial_inequality_removal,[],[f150])).
fof(f150,plain,(
  s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl15)),
  inference(forward_demodulation,[],[f76,f61])).
fof(f149,plain,(
  $false | ($spl0 | $spl11)),
  inference(trivial_inequality_removal,[],[f148])).
fof(f148,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl11)),
  inference(forward_demodulation,[],[f72,f61])).
fof(f147,plain,(
  $false | ($spl0 | $spl7)),
  inference(trivial_inequality_removal,[],[f146])).
fof(f146,plain,(
  s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl7)),
  inference(forward_demodulation,[],[f68,f61])).
fof(f145,plain,(
  $false | ($spl0 | $spl9)),
  inference(trivial_inequality_removal,[],[f144])).
fof(f144,plain,(
  s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl9)),
  inference(forward_demodulation,[],[f70,f61])).
fof(f143,plain,(
  $false | ($spl0 | $spl5)),
  inference(trivial_inequality_removal,[],[f142])).
fof(f142,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f66,f61])).
fof(f141,plain,(
  $false | ($spl0 | $spl3)),
  inference(trivial_inequality_removal,[],[f140])).
fof(f140,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl3)),
  inference(forward_demodulation,[],[f64,f61])).
fof(f135,plain,(
  $false | ($spl0 | $spl19)),
  inference(trivial_inequality_removal,[],[f128])).
fof(f128,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl19)),
  inference(backward_demodulation,[],[f61,f80])).
fof(f134,plain,(
  $false | ($spl0 | $spl21)),
  inference(trivial_inequality_removal,[],[f129])).
fof(f129,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl21)),
  inference(backward_demodulation,[],[f61,f82])).
fof(f133,plain,(
  $false | ($spl0 | $spl23)),
  inference(trivial_inequality_removal,[],[f130])).
fof(f130,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl23)),
  inference(backward_demodulation,[],[f61,f84])).
fof(f132,plain,(
  $false | ($spl0 | $spl33)),
  inference(trivial_inequality_removal,[],[f131])).
fof(f131,plain,(
  s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl33)),
  inference(backward_demodulation,[],[f61,f94])).
fof(f127,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl53),
  inference(cnf_transformation,[],[f127_D])).
fof(f127_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl53),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl53])])).
fof(f108,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f42])).
fof(f122,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl46),
  inference(cnf_transformation,[],[f122_D])).
fof(f122_D,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f124,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | $spl48),
  inference(cnf_transformation,[],[f124_D])).
fof(f124_D,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f106,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl32),
  inference(superposition,[],[f93,f42])).
fof(f118,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl42),
  inference(cnf_transformation,[],[f118_D])).
fof(f118_D,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f120,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | $spl44),
  inference(cnf_transformation,[],[f120_D])).
fof(f120_D,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f105,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl22),
  inference(superposition,[],[f83,f42])).
fof(f114,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl38),
  inference(cnf_transformation,[],[f114_D])).
fof(f114_D,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f116,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | $spl40),
  inference(cnf_transformation,[],[f116_D])).
fof(f116_D,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f104,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl20),
  inference(superposition,[],[f81,f42])).
fof(f110,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl34),
  inference(cnf_transformation,[],[f110_D])).
fof(f110_D,plain,(
  s(bool,'T_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f112,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | $spl36),
  inference(cnf_transformation,[],[f112_D])).
fof(f112_D,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f103,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl18),
  inference(superposition,[],[f79,f42])).
fof(f100,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl32),
  inference(superposition,[],[f42,f93])).
fof(f99,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl22),
  inference(superposition,[],[f42,f83])).
fof(f98,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl20),
  inference(superposition,[],[f42,f81])).
fof(f97,plain,(
  s(bool,'F_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl18),
  inference(superposition,[],[f42,f79])).
fof(f61,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | $spl0),
  inference(cnf_transformation,[],[f61_D])).
fof(f61_D,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f63,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl2),
  inference(cnf_transformation,[],[f63_D])).
fof(f63_D,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f23,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  (s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3) | (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) & s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) & s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) & s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) & s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) & s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) & s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) & s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) & s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) & s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) & s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK3))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))))) & (s('type.stackSem.state'(sK0,sK1),sK2) != s('type.stackSem.state'(sK0,sK1),sK3) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f18])).
fof(f18,plain,(
  ? [X0,X1,X2,X3] : ((s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))))) & (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3)))))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ? [X0,X1,X2,X3] : ((s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) | (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))))) & (s('type.stackSem.state'(X0,X1),X2) != s('type.stackSem.state'(X0,X1),X3) | (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) | s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3))))))),
  inference(nnf_transformation,[],[f15])).
fof(f15,plain,(
  ? [X0,X1,X2,X3] : (s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) <~> (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3)))))),
  inference(ennf_transformation,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1,X2,X3] : (s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) <=> (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3)))))),
  inference(flattening,[],[f8])).
fof(f8,plain,(
  ~! [X0,X1] : ! [X2,X3] : (s('type.stackSem.state'(X0,X1),X2) = s('type.stackSem.state'(X0,X1),X3) <=> (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.wordSem.word_loc'(X0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.list.list'('type.fcp.cart'(bool,X0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X0)),'type.pair.prod'(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.sptree.spt'('type.stackLang.prog'(X0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X0,X1),X3))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X0,X1),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (s('type.stackSem.state'(X6,X7),X8) = s('type.stackSem.state'(X6,X7),X9) <=> (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.list.list'('type.wordSem.word_loc'(X6)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.list.list'('type.wordSem.word_loc'(X6)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.list.list'('type.fcp.cart'(bool,X6)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.list.list'('type.fcp.cart'(bool,X6)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X6,X7),X9))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X6,X7),X8))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X6,X7),X9))) & s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X6,X7),X8))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X6,X7),X9))) & s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X6,X7),X8))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X6,X7),X9))) & s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X6,X7),X8))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.sptree.spt'('type.stackLang.prog'(X6)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.sptree.spt'('type.stackLang.prog'(X6)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.ffi.ffi_state'(X7),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.ffi.ffi_state'(X7),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X6,X7),X9))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X6,X7),X8))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X6,X7),X9))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X6,X7),X8))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X6,X7),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (s('type.stackSem.state'(X6,X7),X8) = s('type.stackSem.state'(X6,X7),X9) <=> (s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X6)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.list.list'('type.wordSem.word_loc'(X6)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.list.list'('type.wordSem.word_loc'(X6)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.list.list'('type.fcp.cart'(bool,X6)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.list.list'('type.fcp.cart'(bool,X6)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X6,X7),X9))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X6,X7),X8))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X6)),'type.pair.prod'(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X6)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X6,X7),X9))) & s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X6,X7),X8))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X6,X7),X9))) & s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X6,X7),X8))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X6,X7),X9))) & s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X6,X7),X8))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.sptree.spt'('type.stackLang.prog'(X6)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.sptree.spt'('type.stackLang.prog'(X6)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X6,X7),X9))) & s('type.ffi.ffi_state'(X7),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X6,X7),X8))) = s('type.ffi.ffi_state'(X7),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X6,X7),X9))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X6,X7),X8))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X6,X7),X9))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X6,X7),X8))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X6,X7),X9)))))),
  file('thm.stackSem.state_component_equality','thm.stackSem.state_component_equality')).
fof(f65,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl4),
  inference(cnf_transformation,[],[f65_D])).
fof(f65_D,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f24,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f67,plain,(
  s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl6),
  inference(cnf_transformation,[],[f67_D])).
fof(f67_D,plain,(
  s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f25,plain,(
  s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f69,plain,(
  s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl8),
  inference(cnf_transformation,[],[f69_D])).
fof(f69_D,plain,(
  s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f26,plain,(
  s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f71,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl10),
  inference(cnf_transformation,[],[f71_D])).
fof(f71_D,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f27,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f73,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl12),
  inference(cnf_transformation,[],[f73_D])).
fof(f73_D,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f28,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f75,plain,(
  s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl14),
  inference(cnf_transformation,[],[f75_D])).
fof(f75_D,plain,(
  s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f29,plain,(
  s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f77,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl16),
  inference(cnf_transformation,[],[f77_D])).
fof(f77_D,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f30,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f79,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl18),
  inference(cnf_transformation,[],[f79_D])).
fof(f79_D,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f31,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f81,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl20),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f32,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f83,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl22),
  inference(cnf_transformation,[],[f83_D])).
fof(f83_D,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f33,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f85,plain,(
  s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl24),
  inference(cnf_transformation,[],[f85_D])).
fof(f85_D,plain,(
  s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f34,plain,(
  s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f87,plain,(
  s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl26),
  inference(cnf_transformation,[],[f87_D])).
fof(f87_D,plain,(
  s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f35,plain,(
  s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f89,plain,(
  s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl28),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f36,plain,(
  s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f91,plain,(
  s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl30),
  inference(cnf_transformation,[],[f91_D])).
fof(f91_D,plain,(
  s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f37,plain,(
  s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f93,plain,(
  s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl32),
  inference(cnf_transformation,[],[f93_D])).
fof(f93_D,plain,(
  s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f38,plain,(
  s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) = s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f62,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) != s('type.stackSem.state'(sK0,sK1),sK3) | $spl1),
  inference(cnf_transformation,[],[f62_D])).
fof(f62_D,plain,(
  s('type.stackSem.state'(sK0,sK1),sK2) != s('type.stackSem.state'(sK0,sK1),sK3) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f64,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl3),
  inference(cnf_transformation,[],[f64_D])).
fof(f64_D,plain,(
  s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f66,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl5),
  inference(cnf_transformation,[],[f66_D])).
fof(f66_D,plain,(
  s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f68,plain,(
  s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl7),
  inference(cnf_transformation,[],[f68_D])).
fof(f68_D,plain,(
  s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f70,plain,(
  s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl9),
  inference(cnf_transformation,[],[f70_D])).
fof(f70_D,plain,(
  s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f72,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl11),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f74,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl13),
  inference(cnf_transformation,[],[f74_D])).
fof(f74_D,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f76,plain,(
  s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl15),
  inference(cnf_transformation,[],[f76_D])).
fof(f76_D,plain,(
  s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f78,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl17),
  inference(cnf_transformation,[],[f78_D])).
fof(f78_D,plain,(
  s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f80,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl19),
  inference(cnf_transformation,[],[f80_D])).
fof(f80_D,plain,(
  s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f82,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl21),
  inference(cnf_transformation,[],[f82_D])).
fof(f82_D,plain,(
  s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f84,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl23),
  inference(cnf_transformation,[],[f84_D])).
fof(f84_D,plain,(
  s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f86,plain,(
  s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl25),
  inference(cnf_transformation,[],[f86_D])).
fof(f86_D,plain,(
  s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f88,plain,(
  s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl27),
  inference(cnf_transformation,[],[f88_D])).
fof(f88_D,plain,(
  s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f90,plain,(
  s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl29),
  inference(cnf_transformation,[],[f90_D])).
fof(f90_D,plain,(
  s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f92,plain,(
  s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl31),
  inference(cnf_transformation,[],[f92_D])).
fof(f92_D,plain,(
  s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f94,plain,(
  s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | $spl33),
  inference(cnf_transformation,[],[f94_D])).
fof(f94_D,plain,(
  s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f39,plain,(
  s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.sptree.spt'('type.stackLang.prog'(sK0)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK0)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.fcp.cart'(bool,sK0)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.wordSem.word_loc'(sK0)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK0)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK2))) != s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK0)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK0,sK1),sK3))) | s('type.stackSem.state'(sK0,sK1),sK2) != s('type.stackSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
% SZS output end Proof for thm.stackSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 326
% Passive clauses: 954
% Generated clauses: 54879
% Final active clauses: 59
% Final passive clauses: 58
% Input formulas: 6
% Initial clauses: 38
% 
% Duplicate literals: 3686
% Trivial inequalities: 496
% Fw subsumption resolutions: 1243
% Fw demodulations: 11270
% Bw demodulations: 283
% Condensations: 5561
% Global subsumptions: 421
% 
% Simple tautologies: 409
% Equational tautologies: 5018
% Forward subsumptions: 25392
% Fw demodulations to eq. taut.: 1
% Bw demodulations to eq. taut.: 12
% 
% Unit resulting resolution: 14925
% Forward superposition: 6773
% Backward superposition: 6883
% Self superposition: 447
% Equality factoring: 410
% Equality resolution: 78
% 
% Split clauses: 128
% Split components: 272
% SAT solver clauses: 2208
% SAT solver unit clauses: 12
% SAT solver binary clauses: 337
% 
% Sat splits: 128
% Sat splitting refutations: 575
% 
% Memory used [KB]: 15351
% Time elapsed: 2.457 s
% ------------------------------
% ------------------------------
% Success in time 3.82 s
