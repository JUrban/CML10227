Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.funBigStepProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.funBigStepProps
% SZS output start Proof for thm.funBigStepProps
fof(f15501,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f15494,f240,f413,f5027,f410,f239,f415,f411])).
fof(f411,plain,(
  ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK18)))))))) | $spl1),
  inference(cnf_transformation,[],[f411_D])).
fof(f411_D,plain,(
  ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK18)))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f415,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13)))))))) | $spl4),
  inference(cnf_transformation,[],[f415_D])).
fof(f415_D,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13)))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f239,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13)))))))) | ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK18))))))))),
  inference(cnf_transformation,[],[f160])).
fof(f160,plain,(
  s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK12),sK18),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),sK19))) = s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(sK12),sK13),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK14),s('type.semanticPrimitives.v',sK15),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK16),s('type.semanticPrimitives.v',sK17))) & (~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK18)))))))) | (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13)))))))) & s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))) != s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK18)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19])],[f115])).
fof(f115,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X6),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X7))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5))) & (~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X6)))))))) | (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1)))))))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X6))))))),
  inference(ennf_transformation,[],[f46])).
fof(f46,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X6),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X7))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5))) => (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X6)))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1)))))))) => s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X6))))))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6,X7] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X6),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X7))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5))) => (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X6)))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1)))))))) => s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X6))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12,X13] : (s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X6),X12),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X13))) = s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(X6),X7),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11))) => (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X7))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X12)))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X7)))))))) => s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X12))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12,X13] : (s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X6),X12),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X13))) = s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(X6),X7),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11))) => (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X7))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X12)))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X7)))))))) => s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X12))))))),
  file('thm.funBigStepProps.evaluate_io_events_mono_imp|split|1','thm.funBigStepProps.evaluate_io_events_mono_imp|split|1')).
fof(f410,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK18)))))))) | $spl0),
  inference(cnf_transformation,[],[f410_D])).
fof(f410_D,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK18)))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f5027,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK18))))))))),
  inference(forward_demodulation,[],[f5025,f330])).
fof(f330,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))) )),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(flattening,[],[f103])).
fof(f103,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6,X15] : ! [X16,X17] : s(X15,X16) = s(X15,'const.pair.FST_1'(s('type.pair.prod'(X15,X6),'const.pair.,_2'(s(X15,X16),s(X6,X17)))))),
  file('thm.funBigStepProps.evaluate_io_events_mono_imp|split|1','thm.pair.FST')).
fof(f5025,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK12),sK18),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),sK19))))))))))))),
  inference(superposition,[],[f298,f238])).
fof(f238,plain,(
  s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK12),sK18),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),sK19))) = s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(sK12),sK13),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK14),s('type.semanticPrimitives.v',sK15),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK16),s('type.semanticPrimitives.v',sK17)))),
  inference(cnf_transformation,[],[f160])).
fof(f298,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5))))))))))))) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0,X1,X2,X3,X4,X5] : p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5))))))))))))),
  inference(flattening,[],[f84])).
fof(f84,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5] : p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5))))))))))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X20] : ! [X7,X8,X9,X10,X11] : p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X20),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X20),X7))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X20),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X20),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X20),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(X20),X7),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11))))))))))))),
  file('thm.funBigStepProps.evaluate_io_events_mono_imp|split|1','thm.funBigStepProps.evaluate_io_events_mono|split|2')).
fof(f413,plain,(
  s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))) != s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK18))) | $spl3),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))) != s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK18))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f240,plain,(
  s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))) != s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK18))) | ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK18))))))))),
  inference(cnf_transformation,[],[f160])).
fof(f15494,plain,(
  $false | ($spl3 | $spl4)),
  inference(subsumption_resolution,[],[f15493,f413])).
fof(f15493,plain,(
  s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))) = s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK18))) | $spl4),
  inference(forward_demodulation,[],[f15478,f330])).
fof(f15478,plain,(
  s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))) = s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK12),sK18),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),sK19))))))) | $spl4),
  inference(superposition,[],[f5120,f238])).
fof(f5120,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))) = s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(sK12),sK13),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X1),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X2),s('type.semanticPrimitives.v',X3)))))))) ) | $spl4),
  inference(resolution,[],[f299,f415])).
fof(f299,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1)))))))) | s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5)))))))) )),
  inference(cnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1)))))))) | s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5))))))))),
  inference(ennf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1)))))))) => s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5))))))))),
  inference(flattening,[],[f86])).
fof(f86,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1)))))))) => s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5))))))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X20] : ! [X7,X8,X9,X10,X11] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X20),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X20),X7)))))))) => s('type.ffi.ffi_state'(X20),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X20),X7))) = s('type.ffi.ffi_state'(X20),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X20),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X20),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_match_5'(s('type.semanticPrimitives.state'(X20),X7),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11))))))))),
  file('thm.funBigStepProps.evaluate_io_events_mono_imp|split|1','thm.funBigStepProps.evaluate_io_events_mono|split|3')).
% SZS output end Proof for thm.funBigStepProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 608
% Passive clauses: 7262
% Generated clauses: 15114
% Final active clauses: 605
% Final passive clauses: 6340
% Input formulas: 43
% Initial clauses: 168
% 
% Duplicate literals: 352
% Trivial inequalities: 44
% Fw subsumption resolutions: 1486
% Fw demodulations: 275
% Bw demodulations: 3
% 
% Simple tautologies: 201
% Equational tautologies: 54
% Forward subsumptions: 5144
% 
% Binary resolution: 8092
% Factoring: 993
% Forward superposition: 1884
% Backward superposition: 1629
% Self superposition: 27
% Equality factoring: 26
% Equality resolution: 16
% 
% Split clauses: 364
% Split components: 734
% SAT solver clauses: 620
% SAT solver unit clauses: 10
% SAT solver binary clauses: 112
% SAT solver learnt clauses: 1
% 
% Sat splits: 364
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 619
% TWLsolver calls for satisfiability: 338
% 
% Memory used [KB]: 7547
% Time elapsed: 0.478 s
% ------------------------------
% ------------------------------
% Success in time 0.49 s
