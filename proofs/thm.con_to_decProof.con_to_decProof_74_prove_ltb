Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.con_to_decProof
% (136307)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 102
% Passive clauses: 2362
% Generated clauses: 9295
% Final active clauses: 94
% Final passive clauses: 2199
% Input formulas: 37
% Initial clauses: 67
% 
% Duplicate literals: 351
% Trivial inequalities: 204
% Fw subsumption resolutions: 716
% Fw demodulations: 701
% Bw demodulations: 1
% 
% Simple tautologies: 244
% Equational tautologies: 36
% Forward subsumptions: 4552
% 
% Binary resolution: 152
% Factoring: 1
% Forward superposition: 4064
% Backward superposition: 2917
% Self superposition: 146
% Equality factoring: 56
% Equality resolution: 28
% 
% Split clauses: 108
% Split components: 225
% SAT solver clauses: 181
% SAT solver unit clauses: 5
% SAT solver binary clauses: 38
% 
% Sat splits: 108
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 181
% TWLsolver calls for satisfiability: 61
% 
% Memory used [KB]: 10234
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.con_to_decProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.con_to_decProof
% SZS output start Proof for thm.con_to_decProof
fof(f530,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f529,f522,f523,f164,f228,f502,f512,f129,f210])).
fof(f210,plain,(
  ( ! [X6,X4,X5] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_decs_3'(s('type.conSem.environment',sK3),s('type.conSem.state'(sK0),sK1),s('type.list.list'('type.conLang.dec'),sK2))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(sK0),X4),s('type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),X5),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X6)))))) ) | $spl0),
  inference(cnf_transformation,[],[f210_D])).
fof(f210_D,plain,(
  ( ! [X6,X4,X5] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_decs_3'(s('type.conSem.environment',sK3),s('type.conSem.state'(sK0),sK1),s('type.list.list'('type.conLang.dec'),sK2))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(sK0),X4),s('type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),X5),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X6)))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f129,plain,(
  ( ! [X6,X4,X5] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_decs_3'(s('type.conSem.environment',sK3),s('type.conSem.state'(sK0),sK1),s('type.list.list'('type.conLang.dec'),sK2))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(sK0),X4),s('type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),X5),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X6)))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X4,X5,X6] : s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_decs_3'(s('type.conSem.environment',sK3),s('type.conSem.state'(sK0),sK1),s('type.list.list'('type.conLang.dec'),sK2))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(sK0),X4),s('type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),X5),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X6)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f96])).
fof(f96,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5,X6] : s('type.pair.prod'('type.conSem.state'(X0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_decs_3'(s('type.conSem.environment',X3),s('type.conSem.state'(X0),X1),s('type.list.list'('type.conLang.dec'),X2))) != s('type.pair.prod'('type.conSem.state'(X0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(X0),X4),s('type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),X5),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X6)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5,X6] : s('type.pair.prod'('type.conSem.state'(X0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_decs_3'(s('type.conSem.environment',X3),s('type.conSem.state'(X0),X1),s('type.list.list'('type.conLang.dec'),X2))) = s('type.pair.prod'('type.conSem.state'(X0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(X0),X4),s('type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),X5),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X6)))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1,X2,X3] : ? [X4,X5,X6] : s('type.pair.prod'('type.conSem.state'(X0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_decs_3'(s('type.conSem.environment',X3),s('type.conSem.state'(X0),X1),s('type.list.list'('type.conLang.dec'),X2))) = s('type.pair.prod'('type.conSem.state'(X0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(X0),X4),s('type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),X5),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X6)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : ? [X10,X11,X12] : s('type.pair.prod'('type.conSem.state'(X6),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_decs_3'(s('type.conSem.environment',X9),s('type.conSem.state'(X6),X7),s('type.list.list'('type.conLang.dec'),X8))) = s('type.pair.prod'('type.conSem.state'(X6),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(X6),X10),s('type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),X11),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X12)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : ? [X10,X11,X12] : s('type.pair.prod'('type.conSem.state'(X6),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_decs_3'(s('type.conSem.environment',X9),s('type.conSem.state'(X6),X7),s('type.list.list'('type.conLang.dec'),X8))) = s('type.pair.prod'('type.conSem.state'(X6),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(X6),X10),s('type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),X11),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X12)))))),
  file('thm.con_to_decProof.con_to_decProof_74_prove_ltb','thm.con_to_decProof.con_to_decProof_74_prove_ltb')).
fof(f512,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_decs_3'(s('type.conSem.environment',sK3),s('type.conSem.state'(sK0),sK1),s('type.list.list'('type.conLang.dec'),sK2))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(sK0),X1),s('type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),X0)))) ) | $spl124),
  inference(cnf_transformation,[],[f512_D])).
fof(f512_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_decs_3'(s('type.conSem.environment',sK3),s('type.conSem.state'(sK0),sK1),s('type.list.list'('type.conLang.dec'),sK2))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(sK0),X1),s('type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),X0)))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f502,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_decs_3'(s('type.conSem.environment',sK3),s('type.conSem.state'(sK0),sK1),s('type.list.list'('type.conLang.dec'),sK2))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.pair.,_2'(s('type.conSem.state'(sK0),X1),s('type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v'))),X0)))) ) | ($spl0 | $spl22)),
  inference(superposition,[],[f210,f228])).
fof(f228,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK4(X2,X1,X0)),s(X1,sK5(X2,X1,X0))))) ) | $spl22),
  inference(cnf_transformation,[],[f228_D])).
fof(f228_D,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK4(X2,X1,X0)),s(X1,sK5(X2,X1,X0))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f164,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK4(X2,X1,X0)),s(X1,sK5(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK4(X2,X1,X0)),s(X1,sK5(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5])],[f66])).
fof(f66,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f65])).
fof(f65,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6,X29] : ! [X33] : ? [X40,X41] : s('type.pair.prod'(X6,X29),X33) = s('type.pair.prod'(X6,X29),'const.pair.,_2'(s(X6,X40),s(X29,X41)))),
  file('thm.con_to_decProof.con_to_decProof_74_prove_ltb','thm.pair.ABS_PAIR_THM')).
fof(f523,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),X0) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_decs_3'(s('type.conSem.environment',sK3),s('type.conSem.state'(sK0),sK1),s('type.list.list'('type.conLang.dec'),sK2)))) ) | $spl126),
  inference(cnf_transformation,[],[f523_D])).
fof(f523_D,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),X0) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_decs_3'(s('type.conSem.environment',sK3),s('type.conSem.state'(sK0),sK1),s('type.list.list'('type.conLang.dec'),sK2)))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f522,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),X0) != s('type.pair.prod'('type.conSem.state'(sK0),'type.pair.prod'('type.list.list'('type.conSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')))),'const.conSem.evaluate_decs_3'(s('type.conSem.environment',sK3),s('type.conSem.state'(sK0),sK1),s('type.list.list'('type.conLang.dec'),sK2)))) ) | ($spl22 | $spl124)),
  inference(superposition,[],[f512,f228])).
fof(f529,plain,(
  $false | $spl126),
  inference(equality_resolution,[],[f523])).
% SZS output end Proof for thm.con_to_decProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 22
% Passive clauses: 65
% Generated clauses: 398
% Final active clauses: 21
% Final passive clauses: 40
% Input formulas: 37
% Initial clauses: 67
% 
% Duplicate literals: 4
% Trivial inequalities: 2
% Fw subsumption resolutions: 5
% Fw demodulations: 40
% Bw demodulations: 2
% Condensations: 11
% Global subsumptions: 5
% 
% Simple tautologies: 28
% Equational tautologies: 7
% Forward subsumptions: 143
% 
% Binary resolution: 34
% Factoring: 1
% Forward superposition: 105
% Backward superposition: 44
% Self superposition: 9
% Equality factoring: 2
% Equality resolution: 2
% 
% Split clauses: 3
% Split components: 6
% SAT solver clauses: 154
% SAT solver unit clauses: 76
% SAT solver binary clauses: 13
% SAT solver learnt clauses: 11
% 
% Sat splits: 3
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 133
% TWLsolver calls for satisfiability: 217
% 
% Memory used [KB]: 1279
% Time elapsed: 0.016 s
% ------------------------------
% ------------------------------
% Success in time 0.663 s
