Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvlSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvlSem
% SZS output start Proof for thm.bvlSem
fof(f7827,plain,(
  $false),
  inference(subsumption_resolution,[],[f7776,f195])).
fof(f195,plain,(
  s('type.bvlSem.state'(sK10),sK15) != s('type.bvlSem.state'(sK10),'const.bvlSem.check_clock_2'(s('type.bvlSem.state'(sK10),sK15),s('type.bvlSem.state'(sK10),sK13)))),
  inference(cnf_transformation,[],[f136])).
fof(f136,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK10)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK14),s('type.bvlSem.state'(sK10),sK15))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK10)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK10))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),sK11),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK10)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK12),s('type.bvlSem.state'(sK10),sK13))))))) & s('type.bvlSem.state'(sK10),sK15) != s('type.bvlSem.state'(sK10),'const.bvlSem.check_clock_2'(s('type.bvlSem.state'(sK10),sK15),s('type.bvlSem.state'(sK10),sK13)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13,sK14,sK15])],[f94])).
fof(f94,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bvlSem.state'(X0),X3))))))) & s('type.bvlSem.state'(X0),X5) != s('type.bvlSem.state'(X0),'const.bvlSem.check_clock_2'(s('type.bvlSem.state'(X0),X5),s('type.bvlSem.state'(X0),X3))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bvlSem.state'(X0),X3))))))) => s('type.bvlSem.state'(X0),X5) = s('type.bvlSem.state'(X0),'const.bvlSem.check_clock_2'(s('type.bvlSem.state'(X0),X5),s('type.bvlSem.state'(X0),X3))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bvlSem.state'(X0),X3))))))) => s('type.bvlSem.state'(X0),X5) = s('type.bvlSem.state'(X0),'const.bvlSem.check_clock_2'(s('type.bvlSem.state'(X0),X5),s('type.bvlSem.state'(X0),X3))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bvlSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X8),s('type.bvlSem.state'(X6),X9))))))) => s('type.bvlSem.state'(X6),X11) = s('type.bvlSem.state'(X6),'const.bvlSem.check_clock_2'(s('type.bvlSem.state'(X6),X11),s('type.bvlSem.state'(X6),X9))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bvlSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X8),s('type.bvlSem.state'(X6),X9))))))) => s('type.bvlSem.state'(X6),X11) = s('type.bvlSem.state'(X6),'const.bvlSem.check_clock_2'(s('type.bvlSem.state'(X6),X11),s('type.bvlSem.state'(X6),X9))))),
  file('thm.bvlSem.bvlSem_|49|34_prove_ltb','thm.bvlSem.bvlSem_|49|34_prove_ltb')).
fof(f7776,plain,(
  s('type.bvlSem.state'(sK10),sK15) = s('type.bvlSem.state'(sK10),'const.bvlSem.check_clock_2'(s('type.bvlSem.state'(sK10),sK15),s('type.bvlSem.state'(sK10),sK13)))),
  inference(resolution,[],[f6594,f239])).
fof(f239,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1)))))) | s('type.bvlSem.state'(X0),X2) = s('type.bvlSem.state'(X0),'const.bvlSem.check_clock_2'(s('type.bvlSem.state'(X0),X2),s('type.bvlSem.state'(X0),X1)))) )),
  inference(cnf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1)))))) | s('type.bvlSem.state'(X0),X2) = s('type.bvlSem.state'(X0),'const.bvlSem.check_clock_2'(s('type.bvlSem.state'(X0),X2),s('type.bvlSem.state'(X0),X1))))),
  inference(ennf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1)))))) => s('type.bvlSem.state'(X0),X2) = s('type.bvlSem.state'(X0),'const.bvlSem.check_clock_2'(s('type.bvlSem.state'(X0),X2),s('type.bvlSem.state'(X0),X1))))),
  inference(flattening,[],[f69])).
fof(f69,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1)))))) => s('type.bvlSem.state'(X0),X2) = s('type.bvlSem.state'(X0),'const.bvlSem.check_clock_2'(s('type.bvlSem.state'(X0),X2),s('type.bvlSem.state'(X0),X1))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6] : ! [X11,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X9))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X11)))))) => s('type.bvlSem.state'(X6),X9) = s('type.bvlSem.state'(X6),'const.bvlSem.check_clock_2'(s('type.bvlSem.state'(X6),X9),s('type.bvlSem.state'(X6),X11))))),
  file('thm.bvlSem.bvlSem_|49|34_prove_ltb','thm.bvlSem.bvlSem_|49||49|6_prove_ltb|split|1')).
fof(f6594,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK10),sK15))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK10),sK13))))))),
  inference(equality_resolution,[],[f3710])).
fof(f3710,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK10)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK14),s('type.bvlSem.state'(sK10),sK15))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK10)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X0),s('type.bvlSem.state'(sK10),X1))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK10),X1))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(sK10),sK13))))))) )),
  inference(superposition,[],[f240,f194])).
fof(f194,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK10)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK14),s('type.bvlSem.state'(sK10),sK15))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK10)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK10))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),sK11),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK10)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK12),s('type.bvlSem.state'(sK10),sK13)))))))),
  inference(cnf_transformation,[],[f136])).
fof(f240,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bvlSem.state'(X0),X3))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X5))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bvlSem.state'(X0),X3))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X5))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X3)))))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bvlSem.state'(X0),X3))))))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X5))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X3)))))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bvlSem.state'(X0),X3))))))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X5))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X3)))))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bvlSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X8),s('type.bvlSem.state'(X6),X9))))))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X11))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X9)))))))),
  file('thm.bvlSem.bvlSem_|49|34_prove_ltb','thm.bvlSem.evaluate_clock')).
% SZS output end Proof for thm.bvlSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 440
% Passive clauses: 2042
% Generated clauses: 7563
% Final active clauses: 410
% Final passive clauses: 1339
% Input formulas: 36
% Initial clauses: 134
% 
% Duplicate literals: 237
% Trivial inequalities: 89
% Fw subsumption resolutions: 893
% Fw demodulations: 82
% Bw demodulations: 29
% 
% Simple tautologies: 156
% Equational tautologies: 45
% Forward subsumptions: 3594
% 
% Binary resolution: 3058
% Factoring: 800
% Forward superposition: 834
% Backward superposition: 1190
% Self superposition: 33
% Equality factoring: 28
% Equality resolution: 24
% 
% Split clauses: 383
% Split components: 772
% SAT solver clauses: 601
% SAT solver unit clauses: 13
% SAT solver binary clauses: 96
% 
% Sat splits: 383
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 599
% TWLsolver calls for satisfiability: 251
% 
% Memory used [KB]: 3709
% Time elapsed: 0.113 s
% ------------------------------
% ------------------------------
% Success in time 0.12 s
