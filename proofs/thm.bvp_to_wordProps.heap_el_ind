Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% (83192)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 147
% Passive clauses: 1849
% Generated clauses: 17787
% Final active clauses: 138
% Final passive clauses: 1535
% Input formulas: 18
% Initial clauses: 26
% 
% Duplicate literals: 1141
% Trivial inequalities: 102
% Fw subsumption resolutions: 2263
% Fw demodulations: 3024
% Bw demodulations: 8
% 
% Simple tautologies: 294
% Equational tautologies: 19
% Forward subsumptions: 8115
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 313
% Forward superposition: 6643
% Backward superposition: 3985
% Self superposition: 104
% Equality factoring: 32
% Equality resolution: 22
% 
% Split clauses: 485
% Split components: 975
% SAT solver clauses: 1063
% SAT solver unit clauses: 9
% SAT solver binary clauses: 109
% 
% Sat splits: 485
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1063
% TWLsolver calls for satisfiability: 177
% 
% Memory used [KB]: 13048
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f383,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f381,f146,f155,f156,f72,f101,f167,f70,f99,f118,f119,f66,f94,f90,f115,f175,f178,f78,f104,f120,f122,f67,f93,f371,f375,f188,f190,f74,f102,f338,f340,f303,f305,f82,f107,f193,f195,f116,f117,f65,f95])).
fof(f95,plain,(
  ( ! [X12,X10,X13,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool)),happ(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Pointer_2'(s('type.num.num',X10),s(sK0,X11))))),s('type.num.num',X12))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X13))))) ) | $spl4),
  inference(cnf_transformation,[],[f95_D])).
fof(f95_D,plain,(
  ( ! [X12,X10,X13,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool)),happ(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Pointer_2'(s('type.num.num',X10),s(sK0,X11))))),s('type.num.num',X12))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X13))))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f65,plain,(
  ( ! [X12,X10,X13,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool)),happ(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Pointer_2'(s('type.num.num',X10),s(sK0,X11))))),s('type.num.num',X12))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X13))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X10,X11,X12,X13] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool)),happ(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Pointer_2'(s('type.num.num',X10),s(sK0,X11))))),s('type.num.num',X12))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X13)))) & ! [X7,X8,X9] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool)),happ(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,X7))))),s('type.num.num',X8))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X9)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool)),happ(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.copying_gc.heap_address'(sK0),sK4))),s('type.num.num',sK5))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),sK6))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6])],[f52])).
fof(f52,plain,(
  ? [X0,X1,X2,X3] : (! [X10,X11,X12,X13] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool)),happ(s(fun('type.copying_gc.heap_address'(X0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool))),X3),s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X10),s(X0,X11))))),s('type.num.num',X12))),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X13)))) & ! [X7,X8,X9] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool)),happ(s(fun('type.copying_gc.heap_address'(X0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool))),X3),s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X7))))),s('type.num.num',X8))),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X9)))) & ? [X4,X5,X6] : ~p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool)),happ(s(fun('type.copying_gc.heap_address'(X0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool))),X3),s('type.copying_gc.heap_address'(X0),X4))),s('type.num.num',X5))),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X6)))))),
  inference(rectify,[],[f47])).
fof(f47,plain,(
  ? [X0,X1,X2,X3] : (! [X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool)),happ(s(fun('type.copying_gc.heap_address'(X0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool))),X3),s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X7),s(X0,X8))))),s('type.num.num',X9))),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X10)))) & ! [X4,X5,X6] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool)),happ(s(fun('type.copying_gc.heap_address'(X0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool))),X3),s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X4))))),s('type.num.num',X5))),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X6)))) & ? [X11,X12,X13] : ~p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool)),happ(s(fun('type.copying_gc.heap_address'(X0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool))),X3),s('type.copying_gc.heap_address'(X0),X11))),s('type.num.num',X12))),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X13)))))),
  inference(flattening,[],[f46])).
fof(f46,plain,(
  ? [X0,X1,X2,X3] : ((! [X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool)),happ(s(fun('type.copying_gc.heap_address'(X0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool))),X3),s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X7),s(X0,X8))))),s('type.num.num',X9))),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X10)))) & ! [X4,X5,X6] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool)),happ(s(fun('type.copying_gc.heap_address'(X0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool))),X3),s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X4))))),s('type.num.num',X5))),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X6))))) & ? [X11,X12,X13] : ~p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool)),happ(s(fun('type.copying_gc.heap_address'(X0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool))),X3),s('type.copying_gc.heap_address'(X0),X11))),s('type.num.num',X12))),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X13)))))),
  inference(ennf_transformation,[],[f21])).
fof(f21,plain,(
  ~! [X0,X1,X2,X3] : ((! [X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool)),happ(s(fun('type.copying_gc.heap_address'(X0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool))),X3),s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X7),s(X0,X8))))),s('type.num.num',X9))),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X10)))) & ! [X4,X5,X6] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool)),happ(s(fun('type.copying_gc.heap_address'(X0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool))),X3),s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X4))))),s('type.num.num',X5))),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X6))))) => ! [X11,X12,X13] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool)),happ(s(fun('type.copying_gc.heap_address'(X0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool))),X3),s('type.copying_gc.heap_address'(X0),X11))),s('type.num.num',X12))),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X13)))))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ~! [X0,X1,X2] : ! [X3] : ((! [X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool)),happ(s(fun('type.copying_gc.heap_address'(X0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool))),X3),s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X7),s(X0,X8))))),s('type.num.num',X9))),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X10)))) & ! [X4,X5,X6] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool)),happ(s(fun('type.copying_gc.heap_address'(X0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool))),X3),s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X4))))),s('type.num.num',X5))),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X6))))) => ! [X11,X12,X13] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool)),happ(s(fun('type.copying_gc.heap_address'(X0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X1,X2)),bool))),X3),s('type.copying_gc.heap_address'(X0),X11))),s('type.num.num',X12))),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X13)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ! [X9] : ((! [X10,X11,X12,X13] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool)),happ(s(fun('type.copying_gc.heap_address'(X6),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool))),X9),s('type.copying_gc.heap_address'(X6),'const.copying_gc.Pointer_2'(s('type.num.num',X10),s(X6,X11))))),s('type.num.num',X12))),s('type.list.list'('type.copying_gc.heap_element'(X7,X8)),X13)))) & ! [X14,X15,X16] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool)),happ(s(fun('type.copying_gc.heap_address'(X6),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool))),X9),s('type.copying_gc.heap_address'(X6),'const.copying_gc.Data_1'(s(X6,X14))))),s('type.num.num',X15))),s('type.list.list'('type.copying_gc.heap_element'(X7,X8)),X16))))) => ! [X17,X15,X16] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool)),happ(s(fun('type.copying_gc.heap_address'(X6),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool))),X9),s('type.copying_gc.heap_address'(X6),X17))),s('type.num.num',X15))),s('type.list.list'('type.copying_gc.heap_element'(X7,X8)),X16)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ! [X9] : ((! [X10,X11,X12,X13] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool)),happ(s(fun('type.copying_gc.heap_address'(X6),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool))),X9),s('type.copying_gc.heap_address'(X6),'const.copying_gc.Pointer_2'(s('type.num.num',X10),s(X6,X11))))),s('type.num.num',X12))),s('type.list.list'('type.copying_gc.heap_element'(X7,X8)),X13)))) & ! [X14,X15,X16] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool)),happ(s(fun('type.copying_gc.heap_address'(X6),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool))),X9),s('type.copying_gc.heap_address'(X6),'const.copying_gc.Data_1'(s(X6,X14))))),s('type.num.num',X15))),s('type.list.list'('type.copying_gc.heap_element'(X7,X8)),X16))))) => ! [X17,X15,X16] : p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool)),happ(s(fun('type.copying_gc.heap_address'(X6),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(X7,X8)),bool))),X9),s('type.copying_gc.heap_address'(X6),X17))),s('type.num.num',X15))),s('type.list.list'('type.copying_gc.heap_element'(X7,X8)),X16)))))),
  file('thm.bvp_to_wordProps.heap_el_ind','thm.bvp_to_wordProps.heap_el_ind')).
fof(f117,plain,(
  ( ! [X12,X10,X13,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Pointer_2'(s('type.num.num',X10),s(sK0,X11))),s('type.num.num',X12))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X13))))) ) | $spl42),
  inference(cnf_transformation,[],[f117_D])).
fof(f117_D,plain,(
  ( ! [X12,X10,X13,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Pointer_2'(s('type.num.num',X10),s(sK0,X11))),s('type.num.num',X12))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X13))))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f116,plain,(
  ( ! [X12,X10,X13,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Pointer_2'(s('type.num.num',X10),s(sK0,X11))),s('type.num.num',X12))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X13))))) ) | ($spl4 | $spl40)),
  inference(forward_demodulation,[],[f95,f115])).
fof(f195,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Pointer_2'(s('type.num.num',X0),s(sK0,X1))),s('type.num.num',X2))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X3)))) ) | $spl64),
  inference(cnf_transformation,[],[f195_D])).
fof(f195_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Pointer_2'(s('type.num.num',X0),s(sK0,X1))),s('type.num.num',X2))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X3)))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f193,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Pointer_2'(s('type.num.num',X0),s(sK0,X1))),s('type.num.num',X2))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X3)))) ) | ($spl14 | $spl42)),
  inference(resolution,[],[f117,f102])).
fof(f107,plain,(
  ( ! [X0,X1] : (s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',sK7(X1,X0)),s(X0,sK8(X1,X0)))) | s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,sK9(X1,X0))))) ) | $spl24),
  inference(cnf_transformation,[],[f107_D])).
fof(f107_D,plain,(
  ( ! [X0,X1] : (s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',sK7(X1,X0)),s(X0,sK8(X1,X0)))) | s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,sK9(X1,X0))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f82,plain,(
  ( ! [X0,X1] : (s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,sK9(X1,X0)))) | s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',sK7(X1,X0)),s(X0,sK8(X1,X0))))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1] : (s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',sK7(X1,X0)),s(X0,sK8(X1,X0)))) | s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,sK9(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7,sK8,sK9])],[f33])).
fof(f33,plain,(
  ! [X0,X1] : (? [X3,X4] : s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X3),s(X0,X4))) | ? [X2] : s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X2))))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ! [X0] : ! [X1] : (? [X3,X4] : s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X3),s(X0,X4))) | ? [X2] : s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X2))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X7] : ! [X20] : (? [X12,X10] : s('type.copying_gc.heap_address'(X7),X20) = s('type.copying_gc.heap_address'(X7),'const.copying_gc.Pointer_2'(s('type.num.num',X12),s(X7,X10))) | ? [X10] : s('type.copying_gc.heap_address'(X7),X20) = s('type.copying_gc.heap_address'(X7),'const.copying_gc.Data_1'(s(X7,X10))))),
  file('thm.bvp_to_wordProps.heap_el_ind','thm.copying_gc.heap_address_nchotomy')).
fof(f305,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),X0),s('type.num.num',X1))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X2))) | s('type.copying_gc.heap_address'(sK0),X0) = s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,sK9(X0,sK0))))) ) | $spl92),
  inference(cnf_transformation,[],[f305_D])).
fof(f305_D,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),X0),s('type.num.num',X1))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X2))) | s('type.copying_gc.heap_address'(sK0),X0) = s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,sK9(X0,sK0))))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f303,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),X0),s('type.num.num',X1))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X2))) | s('type.copying_gc.heap_address'(sK0),X0) = s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,sK9(X0,sK0))))) ) | ($spl24 | $spl64)),
  inference(superposition,[],[f195,f107])).
fof(f340,plain,(
  s('type.copying_gc.heap_address'(sK0),sK4) = s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,sK9(sK4,sK0)))) | $spl98),
  inference(cnf_transformation,[],[f340_D])).
fof(f340_D,plain,(
  s('type.copying_gc.heap_address'(sK0),sK4) = s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,sK9(sK4,sK0)))) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f338,plain,(
  s('type.copying_gc.heap_address'(sK0),sK4) = s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,sK9(sK4,sK0)))) | ($spl57 | $spl60 | $spl92)),
  inference(subsumption_resolution,[],[f322,f155])).
fof(f322,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s('type.copying_gc.heap_address'(sK0),sK4) = s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,sK9(sK4,sK0)))) | ($spl60 | $spl92)),
  inference(superposition,[],[f305,f178])).
fof(f102,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(cnf_transformation,[],[f102_D])).
fof(f102_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f74,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X18] : (s(bool,'T_0') = s(bool,X18) <=> p(s(bool,X18)))),
  file('thm.bvp_to_wordProps.heap_el_ind','thm.bool.EQ_CLAUSES|split|0')).
fof(f190,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,X0))),s('type.num.num',X1))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X2)))) ) | $spl62),
  inference(cnf_transformation,[],[f190_D])).
fof(f190_D,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,X0))),s('type.num.num',X1))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X2)))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f188,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,X0))),s('type.num.num',X1))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X2)))) ) | ($spl14 | $spl44)),
  inference(resolution,[],[f119,f102])).
fof(f375,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),sK4),s('type.num.num',X3))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X4)))) ) | $spl112),
  inference(cnf_transformation,[],[f375_D])).
fof(f375_D,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),sK4),s('type.num.num',X3))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X4)))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f371,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),sK4),s('type.num.num',X3))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X4)))) ) | ($spl62 | $spl98)),
  inference(superposition,[],[f190,f340])).
fof(f93,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool)),happ(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.copying_gc.heap_address'(sK0),sK4))),s('type.num.num',sK5))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),sK6)))) | $spl1),
  inference(cnf_transformation,[],[f93_D])).
fof(f93_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool)),happ(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.copying_gc.heap_address'(sK0),sK4))),s('type.num.num',sK5))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),sK6)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f67,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool)),happ(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.copying_gc.heap_address'(sK0),sK4))),s('type.num.num',sK5))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),sK6))))),
  inference(cnf_transformation,[],[f53])).
fof(f122,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),sK4),s('type.num.num',sK5))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),sK6)))) | $spl47),
  inference(cnf_transformation,[],[f122_D])).
fof(f122_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),sK4),s('type.num.num',sK5))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),sK6)))) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f120,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),sK4),s('type.num.num',sK5))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),sK6)))) | ($spl1 | $spl40)),
  inference(forward_demodulation,[],[f93,f115])).
fof(f104,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(cnf_transformation,[],[f104_D])).
fof(f104_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f78,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f26])).
fof(f26,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X18] : (s(bool,'F_0') = s(bool,X18) <=> ~p(s(bool,X18)))),
  file('thm.bvp_to_wordProps.heap_el_ind','thm.bool.EQ_CLAUSES|split|2')).
fof(f178,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),sK4),s('type.num.num',sK5))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),sK6))) | $spl60),
  inference(cnf_transformation,[],[f178_D])).
fof(f178_D,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),sK4),s('type.num.num',sK5))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),sK6))) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f175,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),sK4),s('type.num.num',sK5))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),sK6))) | ($spl18 | $spl47)),
  inference(resolution,[],[f122,f104])).
fof(f115,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X4))),s(X2,X5))) = s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),'const.pair.,_2'(s(X1,X4),s(X2,X5)))))) ) | $spl40),
  inference(cnf_transformation,[],[f115_D])).
fof(f115_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X4))),s(X2,X5))) = s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),'const.pair.,_2'(s(X1,X4),s(X2,X5)))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f90,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X4))),s(X2,X5))) = s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),'const.pair.,_2'(s(X1,X4),s(X2,X5)))))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X4))),s(X2,X5))) = s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),'const.pair.,_2'(s(X1,X4),s(X2,X5)))))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X4))),s(X2,X5))) = s(X0,'const.pair.UNCURRY_2'(s(fun(X1,fun(X2,X0)),X3),s('type.pair.prod'(X1,X2),'const.pair.,_2'(s(X1,X4),s(X2,X5)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X8,X7,X6] : ! [X24,X21,X25] : s(X8,happ(s(fun(X6,X8),happ(s(fun(X7,fun(X6,X8)),X24),s(X7,X21))),s(X6,X25))) = s(X8,'const.pair.UNCURRY_2'(s(fun(X7,fun(X6,X8)),X24),s('type.pair.prod'(X7,X6),'const.pair.,_2'(s(X7,X21),s(X6,X25)))))),
  file('thm.bvp_to_wordProps.heap_el_ind','thm.pair.UNCURRY_DEF')).
fof(f94,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool)),happ(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,X7))))),s('type.num.num',X8))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X9))))) ) | $spl2),
  inference(cnf_transformation,[],[f94_D])).
fof(f94_D,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool)),happ(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,X7))))),s('type.num.num',X8))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X9))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f66,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool)),happ(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,X7))))),s('type.num.num',X8))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X9))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f119,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,X7))),s('type.num.num',X8))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X9))))) ) | $spl44),
  inference(cnf_transformation,[],[f119_D])).
fof(f119_D,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,X7))),s('type.num.num',X8))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X9))))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f118,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool),'const.pair.UNCURRY_2'(s(fun('type.copying_gc.heap_address'(sK0),fun('type.num.num',fun('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),bool))),sK3),s('type.pair.prod'('type.copying_gc.heap_address'(sK0),'type.num.num'),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK0),'const.copying_gc.Data_1'(s(sK0,X7))),s('type.num.num',X8))))),s('type.list.list'('type.copying_gc.heap_element'(sK1,sK2)),X9))))) ) | ($spl2 | $spl40)),
  inference(forward_demodulation,[],[f94,f115])).
fof(f99,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f99_D])).
fof(f99_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f70,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bvp_to_wordProps.heap_el_ind',aHL_FALSITY)).
fof(f167,plain,(
  $false | ($spl9 | $spl44 | $spl58)),
  inference(subsumption_resolution,[],[f161,f99])).
fof(f161,plain,(
  p(s(bool,'F_0')) | ($spl44 | $spl58)),
  inference(backward_demodulation,[],[f156,f119])).
fof(f101,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f101_D])).
fof(f101_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f72,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.bvp_to_wordProps.heap_el_ind',aHL_BOOL_CASES)).
fof(f156,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl58),
  inference(cnf_transformation,[],[f156_D])).
fof(f156_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f155,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl57),
  inference(cnf_transformation,[],[f155_D])).
fof(f155_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl57),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl57])])).
fof(f146,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) ) | $spl12),
  inference(equality_factoring,[],[f101])).
fof(f381,plain,(
  $false | ($spl57 | $spl60 | $spl112)),
  inference(subsumption_resolution,[],[f379,f155])).
fof(f379,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl60 | $spl112)),
  inference(backward_demodulation,[],[f375,f178])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 30
% Passive clauses: 59
% Generated clauses: 317
% Final active clauses: 24
% Final passive clauses: 21
% Input formulas: 18
% Initial clauses: 26
% 
% Duplicate literals: 4
% Trivial inequalities: 9
% Fw subsumption resolutions: 17
% Fw demodulations: 25
% Bw demodulations: 12
% Condensations: 1
% 
% Simple tautologies: 9
% Equational tautologies: 3
% Forward subsumptions: 113
% 
% Binary resolution: 13
% Forward superposition: 74
% Backward superposition: 61
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 5
% 
% Split clauses: 3
% Split components: 6
% SAT solver clauses: 98
% SAT solver unit clauses: 37
% SAT solver binary clauses: 13
% SAT solver learnt clauses: 1
% 
% Sat splits: 3
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 97
% TWLsolver calls for satisfiability: 139
% 
% Memory used [KB]: 1407
% Time elapsed: 0.041 s
% ------------------------------
% ------------------------------
% Success in time 0.652 s
