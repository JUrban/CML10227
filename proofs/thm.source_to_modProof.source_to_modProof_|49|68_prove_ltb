Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (131620)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 177
% Passive clauses: 3377
% Generated clauses: 29775
% Final active clauses: 175
% Final passive clauses: 3031
% Input formulas: 21
% Initial clauses: 28
% 
% Duplicate literals: 986
% Trivial inequalities: 886
% Fw subsumption resolutions: 2937
% Fw demodulations: 7951
% Bw demodulations: 2
% 
% Simple tautologies: 318
% Equational tautologies: 25
% Forward subsumptions: 12069
% Fw demodulations to eq. taut.: 6
% 
% Binary resolution: 176
% Forward superposition: 9722
% Backward superposition: 6743
% Self superposition: 154
% Equality factoring: 58
% Equality resolution: 22
% 
% Split clauses: 391
% Split components: 793
% SAT solver clauses: 1067
% SAT solver unit clauses: 18
% SAT solver binary clauses: 239
% 
% Sat splits: 391
% 
% TWLsolver clauses: 1067
% TWLsolver calls for satisfiability: 163
% 
% Memory used [KB]: 21108
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f2206,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2205,f1772,f1777,f70,f99,f94,f116])).
fof(f116,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X0),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.ast.dec',X3))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',sK10(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),sK11(X3,X2,X1,X0)),s('type.modLang.dec',sK12(X3,X2,X1,X0))))))) ) | $spl30),
  inference(cnf_transformation,[],[f116_D])).
fof(f116_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X0),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.ast.dec',X3))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',sK10(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),sK11(X3,X2,X1,X0)),s('type.modLang.dec',sK12(X3,X2,X1,X0))))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f94,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X0),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.ast.dec',X3))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',sK10(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),sK11(X3,X2,X1,X0)),s('type.modLang.dec',sK12(X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X0),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.ast.dec',X3))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',sK10(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),sK11(X3,X2,X1,X0)),s('type.modLang.dec',sK12(X3,X2,X1,X0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12])],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2,X3] : ? [X4,X5,X6] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X5),s('type.modLang.dec',X6))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X0),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2),s('type.ast.dec',X3)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X14,X9,X15,X10] : ? [X16,X17,X13] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X16),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X17),s('type.modLang.dec',X13))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X14),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X15),s('type.ast.dec',X10)))),
  file('thm.source_to_modProof.source_to_modProof_|49|68_prove_ltb','thm.source_to_modProof.source_to_modProof_|49|5|49|_prove_ltb')).
fof(f99,plain,(
  ( ! [X6,X7,X5] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.modLang.dec',X7))))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK1),s('type.ast.dec',sK4)))) ) | $spl0),
  inference(cnf_transformation,[],[f99_D])).
fof(f99_D,plain,(
  ( ! [X6,X7,X5] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.modLang.dec',X7))))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK1),s('type.ast.dec',sK4)))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f70,plain,(
  ( ! [X6,X7,X5] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.modLang.dec',X7))))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK1),s('type.ast.dec',sK4)))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X5,X6,X7] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.modLang.dec',X7))))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK1),s('type.ast.dec',sK4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f53])).
fof(f53,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6,X7] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.modLang.dec',X7))))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X1),s('type.ast.dec',X4)))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6,X7] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.modLang.dec',X7))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X1),s('type.ast.dec',X4)))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : ? [X5,X6,X7] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.modLang.dec',X7))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X1),s('type.ast.dec',X4)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12,X13] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X12),s('type.modLang.dec',X13))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X8))))),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.ast.dec',X10)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12,X13] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec'),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X12),s('type.modLang.dec',X13))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X8))))),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.ast.dec',X10)))),
  file('thm.source_to_modProof.source_to_modProof_|49|68_prove_ltb','thm.source_to_modProof.source_to_modProof_|49|68_prove_ltb')).
fof(f1777,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X3),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X1),s('type.ast.dec',X0))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK1),s('type.ast.dec',sK4)))) ) | $spl334),
  inference(cnf_transformation,[],[f1777_D])).
fof(f1777_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X3),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X1),s('type.ast.dec',X0))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK1),s('type.ast.dec',sK4)))) ) <=> ~$spl334),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl334])])).
fof(f1772,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num',X3),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X1),s('type.ast.dec',X0))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.modLang.dec')),'const.source_to_mod.compile_dec_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK1),s('type.ast.dec',sK4)))) ) | ($spl0 | $spl30)),
  inference(superposition,[],[f99,f116])).
fof(f2205,plain,(
  $false | $spl334),
  inference(equality_resolution,[],[f1777])).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 47
% Passive clauses: 210
% Generated clauses: 2113
% Final active clauses: 42
% Final passive clauses: 145
% Input formulas: 21
% Initial clauses: 28
% 
% Duplicate literals: 168
% Trivial inequalities: 35
% Fw subsumption resolutions: 112
% Fw demodulations: 79
% Bw demodulations: 21
% Condensations: 229
% 
% Simple tautologies: 92
% Equational tautologies: 19
% Forward subsumptions: 846
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 20
% Forward superposition: 559
% Backward superposition: 541
% Self superposition: 61
% Equality factoring: 40
% Equality resolution: 10
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 348
% SAT solver unit clauses: 38
% SAT solver binary clauses: 34
% SAT solver learnt clauses: 1
% 
% Sat splits: 8
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 347
% TWLsolver calls for satisfiability: 111
% 
% Memory used [KB]: 3454
% Time elapsed: 0.087 s
% ------------------------------
% ------------------------------
% Success in time 0.72 s
