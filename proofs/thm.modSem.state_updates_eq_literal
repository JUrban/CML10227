Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.modSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modSem
% SZS output start Proof for thm.modSem
fof(f2489,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f2488])).
fof(f2488,plain,(
  s('type.modSem.state'(sK0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK3))),s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK1),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),sK5))),s('type.modSem.state'(sK1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK6))),s('type.modSem.state'(sK1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK7))),s('type.modSem.state'(sK1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK8))),s('type.modSem.state'(sK1),'const.bool.ARB_0'))))))))))))) != s('type.modSem.state'(sK0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK3))),s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK1),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),sK5))),s('type.modSem.state'(sK1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK6))),s('type.modSem.state'(sK1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK7))),s('type.modSem.state'(sK1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK8))),s('type.modSem.state'(sK1),'const.bool.ARB_0')))))))))))))),
  inference(superposition,[],[f19,f24])).
fof(f24,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X4))),s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X6))),s('type.modSem.state'(X1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X7))),s('type.modSem.state'(X1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X8))),s('type.modSem.state'(X1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.modSem.state'(X1),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X4))),s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X6))),s('type.modSem.state'(X1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X7))),s('type.modSem.state'(X1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X8))),s('type.modSem.state'(X1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.modSem.state'(X1),X2)))))))))))))) )),
  inference(cnf_transformation,[],[f14])).
fof(f14,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8] : s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X4))),s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X6))),s('type.modSem.state'(X1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X7))),s('type.modSem.state'(X1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X8))),s('type.modSem.state'(X1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.modSem.state'(X1),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X4))),s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X6))),s('type.modSem.state'(X1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X7))),s('type.modSem.state'(X1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X8))),s('type.modSem.state'(X1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.modSem.state'(X1),X2)))))))))))))),
  inference(flattening,[],[f13])).
fof(f13,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8] : s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X4))),s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X6))),s('type.modSem.state'(X1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X7))),s('type.modSem.state'(X1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X8))),s('type.modSem.state'(X1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.modSem.state'(X1),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X4))),s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X6))),s('type.modSem.state'(X1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X7))),s('type.modSem.state'(X1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X8))),s('type.modSem.state'(X1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.modSem.state'(X1),X2)))))))))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : ! [X8,X9,X10,X14,X11,X12,X13] : s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.modSem.state'(X6),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X10))),s('type.modSem.state'(X6),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X7),'type.ffi.ffi_state'(X6)),'const.combin.K_1'(s('type.ffi.ffi_state'(X6),X11))),s('type.modSem.state'(X7),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X12))),s('type.modSem.state'(X7),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X13))),s('type.modSem.state'(X7),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.modSem.state'(X7),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.modSem.state'(X6),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X10))),s('type.modSem.state'(X6),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X7),'type.ffi.ffi_state'(X6)),'const.combin.K_1'(s('type.ffi.ffi_state'(X6),X11))),s('type.modSem.state'(X7),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X12))),s('type.modSem.state'(X7),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X13))),s('type.modSem.state'(X7),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.modSem.state'(X7),X8)))))))))))))),
  file('thm.modSem.state_updates_eq_literal','thm.modSem.modSem_|49|27_prove_ltb')).
fof(f19,plain,(
  s('type.modSem.state'(sK0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK3))),s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK1),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),sK5))),s('type.modSem.state'(sK1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK6))),s('type.modSem.state'(sK1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK7))),s('type.modSem.state'(sK1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK8))),s('type.modSem.state'(sK1),'const.bool.ARB_0'))))))))))))) != s('type.modSem.state'(sK0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK3))),s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK1),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),sK5))),s('type.modSem.state'(sK1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK6))),s('type.modSem.state'(sK1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK7))),s('type.modSem.state'(sK1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK8))),s('type.modSem.state'(sK1),sK2)))))))))))))),
  inference(cnf_transformation,[],[f17])).
fof(f17,plain,(
  s('type.modSem.state'(sK0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK3))),s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK1),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),sK5))),s('type.modSem.state'(sK1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK6))),s('type.modSem.state'(sK1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK7))),s('type.modSem.state'(sK1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK8))),s('type.modSem.state'(sK1),'const.bool.ARB_0'))))))))))))) != s('type.modSem.state'(sK0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK3))),s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK1),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),sK5))),s('type.modSem.state'(sK1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK6))),s('type.modSem.state'(sK1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK7))),s('type.modSem.state'(sK1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK8))),s('type.modSem.state'(sK1),sK2)))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8])],[f15])).
fof(f15,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8] : s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X4))),s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X5))),s('type.modSem.state'(X1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X6))),s('type.modSem.state'(X1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X7))),s('type.modSem.state'(X1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.modSem.state'(X1),'const.bool.ARB_0'))))))))))))) != s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X4))),s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X5))),s('type.modSem.state'(X1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X6))),s('type.modSem.state'(X1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X7))),s('type.modSem.state'(X1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.modSem.state'(X1),X2)))))))))))))),
  inference(ennf_transformation,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7,X8] : s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X4))),s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X5))),s('type.modSem.state'(X1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X6))),s('type.modSem.state'(X1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X7))),s('type.modSem.state'(X1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.modSem.state'(X1),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X4))),s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X5))),s('type.modSem.state'(X1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X6))),s('type.modSem.state'(X1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X7))),s('type.modSem.state'(X1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.modSem.state'(X1),X2)))))))))))))),
  inference(flattening,[],[f8])).
fof(f8,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8] : s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X4))),s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X5))),s('type.modSem.state'(X1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X6))),s('type.modSem.state'(X1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X7))),s('type.modSem.state'(X1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.modSem.state'(X1),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X3))),s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X4))),s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X5))),s('type.modSem.state'(X1),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X6))),s('type.modSem.state'(X1),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X7))),s('type.modSem.state'(X1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.modSem.state'(X1),X2)))))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14] : s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.modSem.state'(X6),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X10))),s('type.modSem.state'(X6),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X7),'type.ffi.ffi_state'(X6)),'const.combin.K_1'(s('type.ffi.ffi_state'(X6),X11))),s('type.modSem.state'(X7),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X12))),s('type.modSem.state'(X7),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X13))),s('type.modSem.state'(X7),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.modSem.state'(X7),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.modSem.state'(X6),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X10))),s('type.modSem.state'(X6),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X7),'type.ffi.ffi_state'(X6)),'const.combin.K_1'(s('type.ffi.ffi_state'(X6),X11))),s('type.modSem.state'(X7),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X12))),s('type.modSem.state'(X7),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X13))),s('type.modSem.state'(X7),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.modSem.state'(X7),X8)))))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14] : s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.modSem.state'(X6),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X10))),s('type.modSem.state'(X6),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X7),'type.ffi.ffi_state'(X6)),'const.combin.K_1'(s('type.ffi.ffi_state'(X6),X11))),s('type.modSem.state'(X7),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X12))),s('type.modSem.state'(X7),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X13))),s('type.modSem.state'(X7),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.modSem.state'(X7),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X9))),s('type.modSem.state'(X6),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X10))),s('type.modSem.state'(X6),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X7),'type.ffi.ffi_state'(X6)),'const.combin.K_1'(s('type.ffi.ffi_state'(X6),X11))),s('type.modSem.state'(X7),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X12))),s('type.modSem.state'(X7),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X13))),s('type.modSem.state'(X7),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.modSem.state'(X7),X8)))))))))))))),
  file('thm.modSem.state_updates_eq_literal','thm.modSem.state_updates_eq_literal')).
% SZS output end Proof for thm.modSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 21
% Passive clauses: 456
% Generated clauses: 2365
% Final active clauses: 19
% Final passive clauses: 427
% Input formulas: 6
% Initial clauses: 6
% 
% Duplicate literals: 291
% Trivial inequalities: 31
% Fw subsumption resolutions: 100
% 
% Simple tautologies: 91
% Equational tautologies: 79
% Forward subsumptions: 954
% 
% Binary resolution: 12
% Forward superposition: 700
% Backward superposition: 786
% Self superposition: 226
% Equality factoring: 202
% Equality resolution: 1
% 
% Split clauses: 114
% Split components: 228
% SAT solver clauses: 367
% SAT solver unit clauses: 217
% SAT solver binary clauses: 82
% 
% Sat splits: 114
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 367
% TWLsolver calls for satisfiability: 11
% 
% Memory used [KB]: 1535
% Time elapsed: 0.098 s
% ------------------------------
% ------------------------------
% Success in time 0.111 s
