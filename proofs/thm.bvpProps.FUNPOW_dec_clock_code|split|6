Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvpProps
% (49041)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 867
% Passive clauses: 6204
% Generated clauses: 34285
% Final active clauses: 840
% Final passive clauses: 5089
% Input formulas: 515
% Initial clauses: 755
% 
% Duplicate literals: 183
% Trivial inequalities: 42
% Fw subsumption resolutions: 1333
% Fw demodulations: 3925
% Bw demodulations: 10
% 
% Simple tautologies: 248
% Equational tautologies: 28
% Forward subsumptions: 22115
% 
% Binary resolution: 5096
% Factoring: 799
% Forward superposition: 13556
% Backward superposition: 8349
% Self superposition: 52
% Equality factoring: 2
% Equality resolution: 14
% 
% Split clauses: 313
% Split components: 628
% SAT solver clauses: 424
% SAT solver unit clauses: 13
% SAT solver binary clauses: 71
% 
% Sat splits: 313
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 424
% TWLsolver calls for satisfiability: 331
% 
% Memory used [KB]: 17014
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvpProps
% (49058)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 560
% Passive clauses: 3047
% Generated clauses: 24706
% Final active clauses: 535
% Final passive clauses: 2408
% Input formulas: 515
% Initial clauses: 755
% 
% Duplicate literals: 91
% Trivial inequalities: 14
% Fw subsumption resolutions: 753
% Fw demodulations: 2710
% Bw demodulations: 92
% Condensations: 118
% Global subsumptions: 36
% 
% Simple tautologies: 219
% Equational tautologies: 20
% Forward subsumptions: 13749
% Fw demodulations to eq. taut.: 2
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 2209
% Factoring: 303
% Forward superposition: 8273
% Backward superposition: 6156
% Self superposition: 100
% Equality factoring: 2
% Equality resolution: 16
% 
% Split clauses: 12
% Split components: 24
% SAT solver clauses: 4715
% SAT solver unit clauses: 1206
% SAT solver binary clauses: 196
% SAT solver learnt clauses: 76
% SAT solver learnt literals: 19
% 
% Sat splits: 12
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 4567
% TWLsolver calls for satisfiability: 3173
% 
% Memory used [KB]: 35180
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvpProps
% (49086)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1169
% Passive clauses: 10081
% Generated clauses: 329256
% Final active clauses: 974
% Final passive clauses: 2636
% Input formulas: 515
% Initial clauses: 755
% Discarded non-redundant clauses: 230060
% 
% Duplicate literals: 7
% Trivial inequalities: 36
% Fw subsumption resolutions: 375
% Fw demodulations: 15733
% Bw demodulations: 803
% Condensations: 17
% 
% Simple tautologies: 105
% Equational tautologies: 61
% Forward subsumptions: 79102
% Fw demodulations to eq. taut.: 3197
% Bw demodulations to eq. taut.: 14
% 
% Unit resulting resolution: 232342
% Factoring: 2
% Forward superposition: 42920
% Backward superposition: 37502
% Self superposition: 157
% Equality factoring: 2
% Equality resolution: 30
% 
% Split clauses: 4
% Split components: 8
% SAT solver clauses: 10093
% SAT solver unit clauses: 4449
% SAT solver binary clauses: 5097
% 
% Sat splits: 4
% Sat splitting refutations: 2
% 
% Memory used [KB]: 242554
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.bvpProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvpProps
% SZS output start Proof for thm.bvpProps
fof(f7815,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f7814])).
fof(f7814,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1)))))),
  inference(equality_resolution,[],[f4209])).
fof(f4209,plain,(
  ( ! [X0] : (s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X0),s('type.bvpSem.state'(sK0),sK1))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X0),s('type.bvpSem.state'(sK0),sK1))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X0),s('type.bvpSem.state'(sK0),sK1)))))) )),
  inference(trivial_inequality_removal,[],[f4208])).
fof(f4208,plain,(
  ( ! [X0] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X0),s('type.bvpSem.state'(sK0),sK1))))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X0),s('type.bvpSem.state'(sK0),sK1))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X0),s('type.bvpSem.state'(sK0),sK1)))))) )),
  inference(equality_resolution,[],[f999])).
fof(f999,plain,(
  ( ! [X14,X13] : (s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(forward_demodulation,[],[f998,f590])).
fof(f590,plain,(
  ( ! [X2,X0,X1] : (s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X1),s('type.bvpSem.state'(X0),X2))) = s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f528])).
fof(f528,plain,(
  ! [X0,X1,X2] : s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X1),s('type.bvpSem.state'(X0),X2))) = s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvpSem.state'(X0),X2)))),
  inference(flattening,[],[f527])).
fof(f527,plain,(
  ! [X0] : ! [X1,X2] : s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X1),s('type.bvpSem.state'(X0),X2))) = s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvpSem.state'(X0),X2)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X8,X13] : s('type.bvpSem.state'(X6),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X6),'type.bvpSem.state'(X6)),'const.bvpSem.dec_clock_0'),s('type.num.num',X8),s('type.bvpSem.state'(X6),X13))) = s('type.bvpSem.state'(X6),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X13))),s('type.num.num',X8))))),s('type.bvpSem.state'(X6),X13)))),
  file('thm.bvpProps.FUNPOW_dec_clock_code|split|6','thm.bvpProps.funpow_dec_clock_clock')).
fof(f998,plain,(
  ( ! [X14,X13] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(forward_demodulation,[],[f997,f591])).
fof(f591,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f530])).
fof(f530,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f529])).
fof(f529,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X7,X8] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X7))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X6),'type.bvpSem.state'(X6)),'const.bvpSem.dec_clock_0'),s('type.num.num',X8),s('type.bvpSem.state'(X6),X7)))))),
  file('thm.bvpProps.FUNPOW_dec_clock_code|split|6','thm.bvpProps.FUNPOW_dec_clock_code|split|3')).
fof(f997,plain,(
  ( ! [X14,X13] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X13))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(forward_demodulation,[],[f996,f591])).
fof(f996,plain,(
  ( ! [X14,X13] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(forward_demodulation,[],[f995,f590])).
fof(f995,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(forward_demodulation,[],[f994,f590])).
fof(f994,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(forward_demodulation,[],[f993,f590])).
fof(f993,plain,(
  ( ! [X14,X13] : (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(forward_demodulation,[],[f992,f630])).
fof(f630,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f572])).
fof(f572,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f571])).
fof(f571,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f103])).
fof(f103,axiom,(
  ! [X9] : ! [X13,X19] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X9),X13))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X9),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X19),s('type.bvpSem.state'(X9),X13)))))),
  file('thm.bvpProps.FUNPOW_dec_clock_code|split|6','thm.bvpSem.bvpSem_45_prove_ltb')).
fof(f992,plain,(
  ( ! [X14,X13] : (s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(forward_demodulation,[],[f991,f594])).
fof(f594,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f536])).
fof(f536,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f535])).
fof(f535,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X7,X8] : s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X7))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X6),'type.bvpSem.state'(X6)),'const.bvpSem.dec_clock_0'),s('type.num.num',X8),s('type.bvpSem.state'(X6),X7)))))),
  file('thm.bvpProps.FUNPOW_dec_clock_code|split|6','thm.bvpProps.FUNPOW_dec_clock_code|split|1')).
fof(f991,plain,(
  ( ! [X14,X13] : (s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(forward_demodulation,[],[f990,f590])).
fof(f990,plain,(
  ( ! [X14,X13] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(forward_demodulation,[],[f989,f592])).
fof(f592,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f532])).
fof(f532,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f531])).
fof(f531,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X7,X8] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X7))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X6),'type.bvpSem.state'(X6)),'const.bvpSem.dec_clock_0'),s('type.num.num',X8),s('type.bvpSem.state'(X6),X7)))))),
  file('thm.bvpProps.FUNPOW_dec_clock_code|split|6','thm.bvpProps.FUNPOW_dec_clock_code|split|0')).
fof(f989,plain,(
  ( ! [X14,X13] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(forward_demodulation,[],[f988,f590])).
fof(f988,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(forward_demodulation,[],[f987,f596])).
fof(f596,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f540])).
fof(f540,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f539])).
fof(f539,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X7,X8] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X7))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X6),'type.bvpSem.state'(X6)),'const.bvpSem.dec_clock_0'),s('type.num.num',X8),s('type.bvpSem.state'(X6),X7)))))),
  file('thm.bvpProps.FUNPOW_dec_clock_code|split|6','thm.bvpProps.FUNPOW_dec_clock_code|split|2')).
fof(f987,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(forward_demodulation,[],[f986,f590])).
fof(f986,plain,(
  ( ! [X14,X13] : (s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(forward_demodulation,[],[f985,f593])).
fof(f593,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f534])).
fof(f534,plain,(
  ! [X0,X1,X2] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f533])).
fof(f533,plain,(
  ! [X0] : ! [X1,X2] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6] : ! [X7,X8] : s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X7))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X6),'type.bvpSem.state'(X6)),'const.bvpSem.dec_clock_0'),s('type.num.num',X8),s('type.bvpSem.state'(X6),X7)))))),
  file('thm.bvpProps.FUNPOW_dec_clock_code|split|6','thm.bvpProps.FUNPOW_dec_clock_code|split|5')).
fof(f985,plain,(
  ( ! [X14,X13] : (s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(forward_demodulation,[],[f984,f590])).
fof(f984,plain,(
  ( ! [X14,X13] : (s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X13))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(forward_demodulation,[],[f958,f595])).
fof(f595,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f538])).
fof(f538,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f537])).
fof(f537,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X7,X8] : s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X6),'type.bvpSem.state'(X6)),'const.bvpSem.dec_clock_0'),s('type.num.num',X8),s('type.bvpSem.state'(X6),X7)))))),
  file('thm.bvpProps.FUNPOW_dec_clock_code|split|6','thm.bvpProps.FUNPOW_dec_clock_code|split|4')).
fof(f958,plain,(
  ( ! [X14,X13] : (s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X14),s('type.bvpSem.state'(sK0),X13))))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X13))),s('type.num.num',X14))))),s('type.bvpSem.state'(sK0),X13)))))) )),
  inference(superposition,[],[f649,f590])).
fof(f649,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f648,f594])).
fof(f648,plain,(
  ( ! [X0] : (s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f647,f593])).
fof(f647,plain,(
  ( ! [X0] : (s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f646,f596])).
fof(f646,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f645,f592])).
fof(f645,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f637,f595])).
fof(f637,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1))))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1)))))) )),
  inference(superposition,[],[f584,f622])).
fof(f622,plain,(
  ( ! [X2,X0,X1] : (s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f583])).
fof(f583,plain,(
  ! [X0,X1,X2] : ((s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))))) & (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) | s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2)))),
  inference(flattening,[],[f582])).
fof(f582,plain,(
  ! [X0,X1,X2] : ((s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))))) & ((s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))) | s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2)))),
  inference(nnf_transformation,[],[f556])).
fof(f556,plain,(
  ! [X0,X1,X2] : (s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))))),
  inference(flattening,[],[f555])).
fof(f555,plain,(
  ! [X0] : ! [X1,X2] : (s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9] : ! [X10,X11] : (s('type.bvpSem.state'(X9),X10) = s('type.bvpSem.state'(X9),X11) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X9),X10))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X9),X11))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X9),X10))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X9),X11))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X9),X10))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X9),X11))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X9),X10))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X9),X11))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X9),X10))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X9),X11))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X9),X10))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X9),X11))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X9),X10))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X9),X11))) & s('type.ffi.ffi_state'(X9),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X9),X10))) = s('type.ffi.ffi_state'(X9),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X9),X11))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X9),X10))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X9),X11)))))),
  file('thm.bvpProps.FUNPOW_dec_clock_code|split|6','thm.bvpSem.bvpSem_|49|72_prove_ltb')).
fof(f584,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1)))))),
  inference(cnf_transformation,[],[f578])).
fof(f578,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK0),'type.bvpSem.state'(sK0)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK2),s('type.bvpSem.state'(sK0),sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f577])).
fof(f577,plain,(
  ? [X0,X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(ennf_transformation,[],[f518])).
fof(f518,plain,(
  ~! [X0,X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f517])).
fof(f517,plain,(
  ~! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X7))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X6),'type.bvpSem.state'(X6)),'const.bvpSem.dec_clock_0'),s('type.num.num',X8),s('type.bvpSem.state'(X6),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X7))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X6),'type.bvpSem.state'(X6)),'const.bvpSem.dec_clock_0'),s('type.num.num',X8),s('type.bvpSem.state'(X6),X7)))))),
  file('thm.bvpProps.FUNPOW_dec_clock_code|split|6','thm.bvpProps.FUNPOW_dec_clock_code|split|6')).
% SZS output end Proof for thm.bvpProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 158
% Passive clauses: 1932
% Generated clauses: 7147
% Final active clauses: 158
% Final passive clauses: 1662
% Input formulas: 515
% Initial clauses: 49
% 
% Selected by SInE selection: 30
% SInE iterations: 1
% 
% Duplicate literals: 13
% Trivial inequalities: 73
% Fw subsumption resolutions: 61
% Fw demodulations: 4159
% 
% Simple tautologies: 2
% Equational tautologies: 1
% Forward subsumptions: 1137
% 
% Forward superposition: 2891
% Equality resolution: 58
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 8443
% Time elapsed: 0.954 s
% ------------------------------
% ------------------------------
% Success in time 12.74 s
