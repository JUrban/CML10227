Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.labSem
% (136387)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 49
% Passive clauses: 1971
% Generated clauses: 9348
% Final active clauses: 47
% Final passive clauses: 1843
% Input formulas: 21
% Initial clauses: 22
% 
% Duplicate literals: 619
% Trivial inequalities: 108
% Fw subsumption resolutions: 974
% Fw demodulations: 26
% 
% Simple tautologies: 208
% Equational tautologies: 129
% Forward subsumptions: 3449
% 
% Binary resolution: 25
% Forward superposition: 3422
% Backward superposition: 3160
% Self superposition: 543
% Equality factoring: 406
% Equality resolution: 11
% 
% Split clauses: 379
% Split components: 762
% SAT solver clauses: 1405
% SAT solver unit clauses: 355
% SAT solver binary clauses: 508
% 
% Sat splits: 379
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1401
% TWLsolver calls for satisfiability: 39
% 
% Memory used [KB]: 6268
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.labSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.labSem
% SZS output start Proof for thm.labSem
fof(f112,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f111,f65,f88,f71,f94,f85,f108])).
fof(f108,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))) ) | $spl36),
  inference(cnf_transformation,[],[f108_D])).
fof(f108_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f85,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))),
  inference(flattening,[],[f56])).
fof(f56,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6] : s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6,X7,X15,X16] : ! [X11,X10,X9] : s(fun(X15,X6),'const.combin.o_2'(s(fun(X7,X6),X11),s(fun(X15,X7),'const.combin.o_2'(s(fun(X16,X7),X10),s(fun(X15,X16),X9))))) = s(fun(X15,X6),'const.combin.o_2'(s(fun(X16,X6),'const.combin.o_2'(s(fun(X7,X6),X11),s(fun(X16,X7),X10))),s(fun(X15,X16),X9)))),
  file('thm.labSem.state_fupdfupds_comp|split|13','thm.combin.o_ASSOC')).
fof(f94,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X3))),s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X2))))) = s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.o_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X3),s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X2)))))) ) | $spl8),
  inference(cnf_transformation,[],[f94_D])).
fof(f94_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X3))),s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X2))))) = s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.o_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X3),s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X2)))))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f71,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X3))),s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X2))))) = s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.o_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X3),s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X2)))))) )),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2,X3] : s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X3))),s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X2))))) = s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.o_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X3),s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X2)))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0,X1] : ! [X2,X3] : s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X3))),s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X2))))) = s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.o_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X3),s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X2)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8,X7] : ! [X10,X11] : s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),X11))),s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),X10))))) = s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),'const.combin.o_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),X11),s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),X10)))))),
  file('thm.labSem.state_fupdfupds_comp|split|13','thm.labSem.state_fupdfupds_comp|split|12')).
fof(f88,plain,(
  s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK5))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK4))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3))))) != s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),'const.combin.o_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK5),s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK4))))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3))) | $spl1),
  inference(cnf_transformation,[],[f88_D])).
fof(f88_D,plain,(
  s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK5))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK4))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3))))) != s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),'const.combin.o_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK5),s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK4))))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f65,plain,(
  s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK5))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK4))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3))))) != s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),'const.combin.o_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK5),s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK4))))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3)))),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK5))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK4))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3))))) != s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),'const.combin.o_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK5),s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK4))))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f60])).
fof(f60,plain,(
  ? [X0,X1,X2,X3,X4,X5] : s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X5))),s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X4))),s(fun(X0,'type.labSem.state'(X1,X2)),X3))))) != s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.o_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X5),s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X4))))),s(fun(X0,'type.labSem.state'(X1,X2)),X3)))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X5))),s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X4))),s(fun(X0,'type.labSem.state'(X1,X2)),X3))))) = s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.o_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X5),s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X4))))),s(fun(X0,'type.labSem.state'(X1,X2)),X3)))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1,X2] : ! [X3,X4,X5] : s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X5))),s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X4))),s(fun(X0,'type.labSem.state'(X1,X2)),X3))))) = s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),'const.combin.o_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X5),s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X1))))),X4))))),s(fun(X0,'type.labSem.state'(X1,X2)),X3)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ! [X9,X10,X11] : s(fun(X6,'type.labSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),X11))),s(fun(X6,'type.labSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),X10))),s(fun(X6,'type.labSem.state'(X7,X8)),X9))))) = s(fun(X6,'type.labSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),'const.combin.o_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),X11),s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),X10))))),s(fun(X6,'type.labSem.state'(X7,X8)),X9)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ! [X9,X10,X11] : s(fun(X6,'type.labSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),X11))),s(fun(X6,'type.labSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),X10))),s(fun(X6,'type.labSem.state'(X7,X8)),X9))))) = s(fun(X6,'type.labSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),'const.combin.o_2'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),X11),s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X7))))),X10))))),s(fun(X6,'type.labSem.state'(X7,X8)),X9)))),
  file('thm.labSem.state_fupdfupds_comp|split|13','thm.labSem.state_fupdfupds_comp|split|13')).
fof(f111,plain,(
  $false | ($spl1 | $spl8 | $spl36)),
  inference(subsumption_resolution,[],[f110,f108])).
fof(f110,plain,(
  s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK5))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK4))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3))))) != s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK5))),s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_io_regs_fupd_1'(s(fun(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1)))),fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK1))))),sK4))))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3))) | ($spl1 | $spl8)),
  inference(forward_demodulation,[],[f88,f94])).
% SZS output end Proof for thm.labSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Passive clauses: 19
% Generated clauses: 44
% Final passive clauses: 19
% Input formulas: 21
% Initial clauses: 22
% 
% Fw subsumption resolutions: 1
% Fw demodulations: 1
% 
% Simple tautologies: 2
% 
% SAT solver clauses: 42
% SAT solver unit clauses: 38
% SAT solver binary clauses: 2
% SAT solver learnt clauses: 1
% 
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 41
% TWLsolver calls for satisfiability: 29
% 
% Memory used [KB]: 1023
% Time elapsed: 0.004 s
% ------------------------------
% ------------------------------
% Success in time 0.626 s
