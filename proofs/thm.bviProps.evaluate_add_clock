Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bviProps
% (50346)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 96
% Passive clauses: 4403
% Generated clauses: 20300
% Final active clauses: 92
% Final passive clauses: 4196
% Input formulas: 21
% Initial clauses: 33
% 
% Duplicate literals: 1169
% Trivial inequalities: 145
% Fw subsumption resolutions: 1337
% Fw demodulations: 1884
% Bw demodulations: 2
% 
% Simple tautologies: 262
% Equational tautologies: 26
% Forward subsumptions: 9500
% 
% Binary resolution: 26
% Forward superposition: 8515
% Backward superposition: 6484
% Self superposition: 322
% Equality factoring: 80
% Equality resolution: 7
% 
% Split clauses: 693
% Split components: 1403
% SAT solver clauses: 1162
% SAT solver unit clauses: 59
% SAT solver binary clauses: 328
% 
% Sat splits: 693
% Sat splitting refutations: 34
% 
% TWLsolver clauses: 1159
% TWLsolver calls for satisfiability: 125
% 
% Memory used [KB]: 21875
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bviProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bviProps
% SZS output start Proof for thm.bviProps
fof(f6421,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f6412,f73,f105,f4299,f4300,f72,f107,f3459,f3497,f71,f109,f98,f122])).
fof(f122,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X5))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X3)))))))))) ) | $spl16),
  inference(cnf_transformation,[],[f122_D])).
fof(f122_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X5))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X3)))))))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f98,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X5))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X3))))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3)))))))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X5))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X3))))))))))),
  inference(flattening,[],[f55])).
fof(f55,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) | s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0')))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X5))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X3))))))))))),
  inference(ennf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) & s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) != s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X5))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X3))))))))))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X5))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X3))))))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X13,X8,X14,X10,X15,X16] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bviSem.state'(X6),X15))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X13),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X8),s('type.bviSem.state'(X6),X14))))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0')))))) => s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bviSem.state'(X6),'const.bviProps.inc_clock_2'(s('type.num.num',X16),s('type.bviSem.state'(X6),X15))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X13),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X8),s('type.bviSem.state'(X6),'const.bviProps.inc_clock_2'(s('type.num.num',X16),s('type.bviSem.state'(X6),X14))))))))))),
  file('thm.bviProps.evaluate_add_clock','thm.bviProps.evaluate_inv_clock')).
fof(f109,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),sK3))))))) | $spl4),
  inference(cnf_transformation,[],[f109_D])).
fof(f109_D,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),sK3))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f71,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),sK3)))))))),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),sK3))))))) & s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK6),s('type.bviSem.state'(sK0),sK5))))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK6),s('type.bviSem.state'(sK0),sK3)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6])],[f53])).
fof(f53,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) & s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) != s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) & ? [X6] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X5))))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X3))))))))))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) & s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) != s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0')))))) & ? [X6] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X5))))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X3))))))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) & s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) != s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0')))))) => ! [X6] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X5))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X3))))))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X3))))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0')))))) => ! [X6] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X5))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X6),s('type.bviSem.state'(X0),X3))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bviSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X8),s('type.bviSem.state'(X6),X9))))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0')))))) => ! [X12] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bviSem.state'(X6),'const.bviProps.inc_clock_2'(s('type.num.num',X12),s('type.bviSem.state'(X6),X11))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X8),s('type.bviSem.state'(X6),'const.bviProps.inc_clock_2'(s('type.num.num',X12),s('type.bviSem.state'(X6),X9))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bviSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X8),s('type.bviSem.state'(X6),X9))))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0')))))) => ! [X12] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bviSem.state'(X6),'const.bviProps.inc_clock_2'(s('type.num.num',X12),s('type.bviSem.state'(X6),X11))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(X6)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X8),s('type.bviSem.state'(X6),'const.bviProps.inc_clock_2'(s('type.num.num',X12),s('type.bviSem.state'(X6),X9))))))))))),
  file('thm.bviProps.evaluate_add_clock','thm.bviProps.evaluate_add_clock')).
fof(f3497,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X0),s('type.bviSem.state'(sK0),X1))) | s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X0),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',X2),s('type.bviSem.state'(sK0),X1))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',X2),s('type.bviSem.state'(sK0),sK3)))))))))) ) | $spl646),
  inference(cnf_transformation,[],[f3497_D])).
fof(f3497_D,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X0),s('type.bviSem.state'(sK0),X1))) | s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X0),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',X2),s('type.bviSem.state'(sK0),X1))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',X2),s('type.bviSem.state'(sK0),sK3)))))))))) ) <=> ~$spl646),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl646])])).
fof(f3459,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X0),s('type.bviSem.state'(sK0),X1))) | s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X0) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X0),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',X2),s('type.bviSem.state'(sK0),X1))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',X2),s('type.bviSem.state'(sK0),sK3)))))))))) ) | ($spl4 | $spl16)),
  inference(superposition,[],[f122,f109])).
fof(f107,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) | $spl3),
  inference(cnf_transformation,[],[f107_D])).
fof(f107_D,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f72,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4) != s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0')))))),
  inference(cnf_transformation,[],[f58])).
fof(f4300,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',X0),s('type.bviSem.state'(sK0),sK5))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',X0),s('type.bviSem.state'(sK0),sK3)))))))))) ) | $spl832),
  inference(cnf_transformation,[],[f4300_D])).
fof(f4300_D,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',X0),s('type.bviSem.state'(sK0),sK5))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',X0),s('type.bviSem.state'(sK0),sK3)))))))))) ) <=> ~$spl832),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl832])])).
fof(f4299,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',X0),s('type.bviSem.state'(sK0),sK5))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',X0),s('type.bviSem.state'(sK0),sK3)))))))))) ) | ($spl3 | $spl646)),
  inference(subsumption_resolution,[],[f4282,f107])).
fof(f4282,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4) = s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.bvlSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtimeout_error_0'))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',X0),s('type.bviSem.state'(sK0),sK5))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',X0),s('type.bviSem.state'(sK0),sK3)))))))))) ) | $spl646),
  inference(equality_resolution,[],[f3497])).
fof(f105,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK6),s('type.bviSem.state'(sK0),sK5))))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK6),s('type.bviSem.state'(sK0),sK3))))))))) | $spl1),
  inference(cnf_transformation,[],[f105_D])).
fof(f105_D,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK6),s('type.bviSem.state'(sK0),sK5))))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK6),s('type.bviSem.state'(sK0),sK3))))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f73,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK6),s('type.bviSem.state'(sK0),sK5))))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.bviSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvi.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK6),s('type.bviSem.state'(sK0),sK3)))))))))),
  inference(cnf_transformation,[],[f58])).
fof(f6412,plain,(
  $false | ($spl1 | $spl832)),
  inference(trivial_inequality_removal,[],[f6391])).
fof(f6391,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK6),s('type.bviSem.state'(sK0),sK5))))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK6),s('type.bviSem.state'(sK0),sK5))))) | ($spl1 | $spl832)),
  inference(superposition,[],[f105,f4300])).
% SZS output end Proof for thm.bviProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 57
% Passive clauses: 694
% Generated clauses: 6194
% Final active clauses: 47
% Final passive clauses: 617
% Input formulas: 21
% Initial clauses: 33
% 
% Duplicate literals: 387
% Trivial inequalities: 58
% Fw subsumption resolutions: 170
% Fw demodulations: 279
% Bw demodulations: 21
% Condensations: 632
% Global subsumptions: 5
% 
% Simple tautologies: 104
% Equational tautologies: 19
% Forward subsumptions: 2641
% 
% Binary resolution: 6
% Forward superposition: 2121
% Backward superposition: 1489
% Self superposition: 178
% Equality factoring: 56
% Equality resolution: 6
% 
% Split clauses: 61
% Split components: 133
% SAT solver clauses: 1250
% SAT solver unit clauses: 47
% SAT solver binary clauses: 77
% SAT solver learnt clauses: 11
% 
% Sat splits: 61
% Sat splitting refutations: 13
% 
% TWLsolver clauses: 1229
% TWLsolver calls for satisfiability: 116
% 
% Memory used [KB]: 9850
% Time elapsed: 0.397 s
% ------------------------------
% ------------------------------
% Success in time 1.03 s
