Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% (86162)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 147
% Passive clauses: 609
% Generated clauses: 14229
% Final active clauses: 136
% Final passive clauses: 394
% Input formulas: 36
% Initial clauses: 62
% 
% Duplicate literals: 1164
% Trivial inequalities: 77
% Fw subsumption resolutions: 1975
% Fw demodulations: 2927
% Bw demodulations: 6
% 
% Simple tautologies: 175
% Equational tautologies: 19
% Forward subsumptions: 6447
% 
% Binary resolution: 125
% Forward superposition: 5140
% Backward superposition: 2565
% Self superposition: 87
% Equality factoring: 34
% Equality resolution: 15
% 
% Split clauses: 427
% Split components: 861
% SAT solver clauses: 900
% SAT solver unit clauses: 2
% SAT solver binary clauses: 41
% 
% Sat splits: 427
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 900
% TWLsolver calls for satisfiability: 111
% 
% Memory used [KB]: 6268
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_knownProof
% (86185)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 165
% Passive clauses: 393
% Generated clauses: 10827
% Final active clauses: 161
% Final passive clauses: 210
% Input formulas: 36
% Initial clauses: 62
% 
% Duplicate literals: 768
% Trivial inequalities: 229
% Fw subsumption resolutions: 1153
% Fw demodulations: 1583
% Bw demodulations: 21
% Condensations: 715
% 
% Simple tautologies: 219
% Equational tautologies: 18
% Forward subsumptions: 5070
% Fw demodulations to eq. taut.: 16
% 
% Binary resolution: 95
% Forward superposition: 3574
% Backward superposition: 2095
% Self superposition: 67
% Equality factoring: 32
% Equality resolution: 38
% 
% Split clauses: 67
% Split components: 144
% SAT solver clauses: 628
% SAT solver unit clauses: 81
% SAT solver binary clauses: 16
% 
% Sat splits: 67
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 628
% TWLsolver calls for satisfiability: 465
% 
% Memory used [KB]: 6524
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.clos_knownProof
% (86205)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 358
% Passive clauses: 1344
% Generated clauses: 120784
% Final active clauses: 225
% Final passive clauses: 468
% Input formulas: 36
% Initial clauses: 62
% 
% Duplicate literals: 6650
% Trivial inequalities: 955
% Fw subsumption resolutions: 14860
% Fw demodulations: 8312
% Bw demodulations: 455
% Condensations: 18287
% Global subsumptions: 229
% 
% Simple tautologies: 1271
% Equational tautologies: 541
% Forward subsumptions: 68056
% Fw demodulations to eq. taut.: 88
% Bw demodulations to eq. taut.: 21
% 
% Unit resulting resolution: 1682
% Forward superposition: 32483
% Backward superposition: 35120
% Self superposition: 847
% Equality factoring: 470
% Equality resolution: 81
% 
% Split clauses: 188
% Split components: 390
% SAT solver clauses: 2212
% SAT solver unit clauses: 120
% SAT solver binary clauses: 102
% 
% Sat splits: 188
% Sat splitting refutations: 261
% 
% Memory used [KB]: 60894
% Time elapsed: 10.510 s
% ------------------------------
% ------------------------------
% remaining time: 31 next slice time: 31
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f7113,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f170,f171,f190,f244,f248,f250,f253,f258,f260,f264,f267,f273,f276,f277,f282,f284,f288,f292,f293,f346,f348,f350,f354,f356,f360,f365,f367,f368,f371,f374,f378,f379,f380,f381,f382,f383,f384,f385,f386,f410,f440,f455,f456,f470,f471,f486,f487,f488,f489,f490,f491,f492,f515,f494,f495,f513,f496,f518,f519,f520,f521,f522,f523,f525,f526,f574,f573,f572,f638,f640,f641,f642,f647,f649,f652,f656,f662,f663,f664,f669,f671,f676,f685,f686,f554,f555,f557,f246,f697,f698,f815,f817,f820,f830,f891,f892,f893,f894,f895,f896,f898,f899,f907,f908,f909,f910,f911,f921,f912,f922,f914,f915,f920,f916,f927,f928,f929,f930,f931,f933,f942,f934,f935,f941,f945,f946,f947,f948,f949,f958,f950,f952,f953,f957,f1010,f1011,f1012,f1016,f1018,f1022,f1027,f1029,f1030,f1033,f245,f1036,f1040,f1067,f1068,f1069,f1070,f1071,f1073,f1087,f1074,f1075,f1088,f1118,f1090,f1091,f1092,f1121,f1120,f1119,f1095,f1096,f1117,f1098,f1100,f1101,f1103,f1105,f1106,f1122,f1136,f1137,f1138,f1139,f1140,f1142,f1162,f1143,f1144,f1161,f1169,f1170,f1171,f1172,f1173,f531,f1174,f1176,f1177,f1198,f1197,f1207,f1237,f1209,f1210,f1239,f1238,f1212,f1241,f1214,f1215,f1236,f1243,f1219,f1245,f1221,f1222,f1247,f1246,f1224,f1249,f1226,f1227,f1244,f1250,f1242,f251,f1279,f1281,f1283,f1284,f1285,f1288,f1289,f1312,f1292,f1294,f1295,f1297,f1299,f1300,f1316,f1328,f1330,f1331,f1333,f1335,f1336,f1349,f1357,f1450,f1452,f1453,f1455,f1457,f1458,f1485,f1462,f1464,f1465,f1467,f1469,f1470,f1491,f1509,f1511,f1552,f1554,f1555,f1557,f1559,f1560,f1577,f1586,f1588,f1590,f1591,f1592,f1595,f1596,f1612,f1625,f1627,f1629,f1630,f1631,f1634,f1635,f1663,f1639,f1641,f1642,f1644,f1646,f1647,f1667,f1715,f1717,f1718,f1720,f1722,f1723,f1742,f1771,f1772,f1805,f1807,f1809,f1810,f1811,f1814,f1815,f1835,f1867,f1869,f1870,f1871,f1874,f1875,f1880,f1900,f1901,f1902,f1897,f1895,f1713,f1448,f1326,f1205,f1939,f1940,f1941,f1942,f1926,f1928,f1929,f1930,f1933,f1934,f2014,f2016,f2103,f2095,f2094,f2093,f2125,f2127,f2128,f2130,f2132,f2133,f2140,f2299,f2301,f2284,f2286,f2287,f2289,f2291,f2292,f2335,f2337,f2338,f2340,f2342,f2343,f2356,f2358,f2359,f2360,f2363,f2364,f2428,f2434,f2440,f2455,f2457,f2458,f2460,f2462,f2463,f2468,f2575,f2576,f2589,f2591,f2628,f2635,f2637,f2666,f2643,f2678,f2659,f2658,f2655,f2654,f2653,f2651,f1943,f2712,f2629,f2632,f2683,f2681,f395,f2726,f2728,f2729,f2731,f2733,f2734,f530,f2744,f2746,f2747,f2749,f2751,f2752,f2759,f2833,f2639,f397,f2642,f1908,f2879,f2881,f2899,f2900,f2886,f2888,f2889,f2890,f2893,f2894,f2901,f2902,f2904,f2974,f3086,f393,f3133,f3150,f3149,f3148,f3088,f399,f3288,f3302,f3303,f3304,f3324,f3323,f3322,f3384,f3371,f3373,f3374,f3376,f3378,f3379,f3465,f389,f3505,f3554,f3555,f3556,f3557,f3600,f3602,f3603,f3605,f3607,f3608,f3615,f3633,f3635,f3663,f3665,f3666,f3668,f3670,f3671,f3773,f3775,f3778,f3780,f3783,f3785,f3790,f3858,f3861,f391,f3864,f3866,f3867,f3869,f3871,f3872,f3879,f3889,f3792,f3762,f1904,f3760,f3893,f3789,f3890,f3894,f3700,f3896,f3897,f3455,f3901,f3363,f3245,f3905,f2066,f1864,f3911,f3912,f3913,f3915,f3916,f3918,f3892,f3862,f3921,f3920,f3926,f2429,f3919,f3950,f178,f4047,f4052,f4053,f4095,f4097,f4098,f4100,f4102,f4103,f347,f4112,f175,f173,f4113,f179,f177,f4119,f4121,f4122,f4123,f4126,f4127,f4132,f4260,f4262,f4263,f4264,f4267,f4268,f1086,f4418,f4419,f4436,f4435,f4434,f4464,f4472,f4476,f4479,f4466,f4481,f4484,f4485,f4458,f4483,f4585,f1903,f4657,f4659,f4660,f4662,f4664,f4665,f4670,f4692,f4694,f4696,f4697,f4478,f4474,f4677,f4679,f4680,f4681,f4684,f4685,f4698,f4701,f4703,f4704,f4706,f4708,f4709,f4714,f4805,f4470,f4468,f4950,f4951,f4988,f4990,f4991,f4993,f4995,f4996,f3388,f5129,f3506,f5162,f5164,f5172,f5174,f5175,f5176,f5179,f5180,f5187,f5194,f5196,f5197,f5199,f5201,f5202,f2302,f5226,f5228,f5229,f5231,f5233,f5234,f5380,f5382,f5383,f5385,f5387,f5388,f5403,f5405,f5406,f5407,f5410,f5411,f2370,f5507,f5509,f5512,f5514,f5517,f5519,f3680,f5523,f3791,f5531,f5533,f5534,f5536,f5538,f5539,f5549,f5551,f5641,f5643,f5646,f5648,f5651,f5653,f2349,f5656,f5657,f5686,f5687,f5707,f5709,f5710,f5712,f5714,f5715,f5724,f5773,f5774,f5810,f5811,f5860,f5862,f5863,f5865,f5867,f5868,f5875,f5898,f5900,f5901,f5903,f5905,f5906,f5913,f5941,f5942,f5973,f5985,f5986,f5974,f6007,f6009,f6010,f6012,f6014,f6015,f6022,f6029,f6031,f6032,f6034,f6036,f6037,f6052,f6054,f6055,f6057,f6059,f6060,f6067,f6077,f6079,f6080,f6082,f6084,f6085,f6098,f6104,f6106,f6107,f6109,f6111,f6112,f6119,f6127,f6129,f6130,f6132,f6134,f6135,f6142,f6154,f6156,f6157,f6159,f6161,f6162,f6208,f6209,f6257,f6259,f6260,f6262,f6264,f6265,f6169,f6299,f6301,f6302,f6304,f6306,f6307,f6316,f6386,f6388,f6389,f6391,f6393,f6394,f6401,f6614,f6616,f6619,f6621,f6624,f6626,f6048,f6629,f6630,f6638,f6641,f6643,f6644,f6645,f6647,f6648,f6649,f6651,f6652,f6653,f6654,f6655,f349,f6656,f923,f6659,f514,f6660,f6661,f6662,f6663,f6664,f6666,f6671,f6673,f6674,f6639,f6700,f6702,f6703,f6705,f6707,f6708,f6642,f6767,f6769,f6770,f6772,f6774,f6775,f6790,f6799,f6801,f6802,f6803,f6806,f6807,f6814,f6857,f6859,f6860,f6862,f6864,f6865,f6872,f6916,f6919,f6672,f6929,f6930,f6931,f3895,f6932,f6917,f5987,f6953,f6955,f6956,f6957,f6960,f6961,f6973,f6982,f6984,f6985,f6987,f6989,f6990,f7002,f7009,f7011,f7012,f7014,f7016,f7017,f7037,f7039,f7040,f7042,f7044,f7045,f7052,f7061,f7063,f7064,f7066,f7068,f7069,f7077,f7080,f7082,f7083,f249,f7085,f7087,f261,f7088,f7030,f275,f7097,f7098,f7100,f7033,f6381,f1510,f5946,f274,f5894,f516,f7105,f5691,f252,f4482,f7112])).
fof(f7112,plain,(
  $false | ($spl2 | $spl196 | $spl199)),
  inference(subsumption_resolution,[],[f4470,f6886])).
fof(f6886,plain,(
  ( ! [X45,X44] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',X44))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X45),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))))) ) | ($spl2 | $spl199)),
  inference(resolution,[],[f4731,f240])).
fof(f240,plain,(
  sP0(sK1,sK2) | $spl2),
  inference(subsumption_resolution,[],[f198,f169])).
fof(f169,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f162])).
fof(f162,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f88])).
fof(f88,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X9] : (s(X6,X9) = s(X6,X9) <=> p(s(bool,'T_0')))),
  file('thm.clos_knownProof.ssgc_free_clockupd','thm.bool.REFL_CLAUSE')).
fof(f198,plain,(
  ~p(s(bool,'T_0')) | sP0(sK1,sK2) | $spl2),
  inference(superposition,[],[f154,f174])).
fof(f174,plain,(
  s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | $spl2),
  inference(cnf_transformation,[],[f174_D])).
fof(f174_D,plain,(
  s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f154,plain,(
  ( ! [X0,X1] : (sP0(X0,X1) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1))))) )),
  inference(cnf_transformation,[],[f107])).
fof(f107,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1)))) | sP0(X0,X1)) & (~sP0(X0,X1) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1))))))),
  inference(nnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1)))) <=> sP0(X0,X1))),
  inference(definition_folding,[],[f94,f97])).
fof(f97,plain,(
  ! [X0,X1] : (sP0(X0,X1) <=> (! [X5,X6,X7] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X7))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X5))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X7)))) & ! [X3,X4] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X4))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X3))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4))))) & ! [X2] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X2))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X2)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f94,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1)))) <=> (! [X5,X6,X7] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X7))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X5))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X7)))) & ! [X3,X4] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X4))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X3))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4))))) & ! [X2] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X2))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X2)))))))),
  inference(ennf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1)))) <=> (! [X5,X6,X7] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X7))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X5))) => s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X7)))) & ! [X3,X4] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X4))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X3))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4))))) & ! [X2] : (p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X2))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X2)))))))),
  inference(flattening,[],[f85])).
fof(f85,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1)))) <=> (! [X5,X6,X7] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X7))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X5))) => s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X7)))) & ! [X3,X4] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X4))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X3))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4))))) & ! [X2] : (p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X2))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X2)))))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X7)))) <=> (! [X18,X19,X20] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X19),s('type.closLang.exp',X20))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X6),X7))),s('type.num.num',X18))) => s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X20)))) & ! [X18,X21] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X21))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X6),X7))),s('type.num.num',X18))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X21))))) & ! [X22] : (p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X22))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X6),X7)))))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X22)))))))),
  file('thm.clos_knownProof.ssgc_free_clockupd','thm.clos_knownProof.ssgc_free_def')).
fof(f4731,plain,(
  ( ! [X2,X0,X3,X1] : (~sP0(X1,X2) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X1),X2))),s('type.num.num',X3))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))))) ) | $spl199),
  inference(trivial_inequality_removal,[],[f4730])).
fof(f4730,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X1),X2))),s('type.num.num',X3))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | ~sP0(X1,X2)) ) | $spl199),
  inference(superposition,[],[f4474,f143])).
fof(f143,plain,(
  ( ! [X0,X12,X1,X13,X11] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X13))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X12),s('type.closLang.exp',X13))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X11))) | ~sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | (! [X11,X12,X13] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X12),s('type.closLang.exp',X13))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X11))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X13)))) & ! [X9,X10] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X10))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X9))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X10))))) & ! [X8] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8))))))) & ((s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X1,X0)),s('type.closLang.exp',sK6(X1,X0)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',sK4(X1,X0)))) & s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X1,X0))))) | (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X1,X0)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',sK7(X1,X0)))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X1,X0)))))) | (p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X1,X0)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X1,X0)))))) | sP0(X0,X1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5,sK6,sK7,sK8,sK9])],[f105])).
fof(f105,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | (! [X11,X12,X13] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X12),s('type.closLang.exp',X13))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X11))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X13)))) & ! [X9,X10] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X10))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X9))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X10))))) & ! [X8] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8))))))) & (? [X5,X6,X7] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X7))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X5))) & s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X7)))) | ? [X3,X4] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X4))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X3))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4))))) | ? [X2] : (p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X2))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X2))))) | sP0(X0,X1)))),
  inference(rectify,[],[f104])).
fof(f104,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | (! [X5,X6,X7] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X7))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X5))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X7)))) & ! [X3,X4] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X4))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X3))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4))))) & ! [X2] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X2))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X2))))))) & (? [X5,X6,X7] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X7))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X5))) & s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X7)))) | ? [X3,X4] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X4))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X3))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4))))) | ? [X2] : (p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X2))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X2))))) | sP0(X0,X1)))),
  inference(flattening,[],[f103])).
fof(f103,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | (! [X5,X6,X7] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X7))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X5))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X7)))) & ! [X3,X4] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X4))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X3))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4))))) & ! [X2] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X2))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X2))))))) & ((? [X5,X6,X7] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X7))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X5))) & s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X7)))) | ? [X3,X4] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X4))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X3))) & ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4))))) | ? [X2] : (p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X2))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X2)))))) | sP0(X0,X1)))),
  inference(nnf_transformation,[],[f97])).
fof(f4482,plain,(
  p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | $spl202),
  inference(cnf_transformation,[],[f4482_D])).
fof(f4482_D,plain,(
  p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f252,plain,(
  ( ! [X21] : (s(bool,'T_0') != s(bool,X21)) ) | $spl16),
  inference(cnf_transformation,[],[f252_D])).
fof(f252_D,plain,(
  ( ! [X21] : (s(bool,'T_0') != s(bool,X21)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f5691,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) ) | ($spl10 | $spl24 | $spl134 | $spl192)),
  inference(subsumption_resolution,[],[f5680,f246])).
fof(f5680,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | ~p(s(bool,X1)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) ) | ($spl24 | $spl134 | $spl192)),
  inference(superposition,[],[f2302,f5181])).
fof(f5181,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | ($spl24 | $spl192)),
  inference(resolution,[],[f4466,f484])).
fof(f484,plain,(
  ( ! [X1] : (~p(s(bool,X1)) | s(bool,'T_0') = s(bool,X1)) ) | $spl24),
  inference(trivial_inequality_removal,[],[f478])).
fof(f478,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,X1)) | s(bool,'T_0') = s(bool,X1)) ) | $spl24),
  inference(superposition,[],[f347,f164])).
fof(f164,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.clos_knownProof.ssgc_free_clockupd',aHL_BOOL_CASES)).
fof(f7105,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl294),
  inference(cnf_transformation,[],[f7105_D])).
fof(f7105_D,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) <=> ~$spl294),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl294])])).
fof(f516,plain,(
  ( ! [X24] : (s(bool,'T_0') = s(bool,X24)) ) | $spl44),
  inference(cnf_transformation,[],[f516_D])).
fof(f516_D,plain,(
  ( ! [X24] : (s(bool,'T_0') = s(bool,X24)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f5894,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | ($spl2 | $spl50 | $spl192)),
  inference(subsumption_resolution,[],[f5884,f164])).
fof(f5884,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | ($spl2 | $spl50 | $spl192)),
  inference(superposition,[],[f5182,f5390])).
fof(f5390,plain,(
  ( ! [X38] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X38))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X38)))) ) | ($spl2 | $spl50)),
  inference(resolution,[],[f3961,f555])).
fof(f3961,plain,(
  ( ! [X11] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X11))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X11)))) ) | $spl2),
  inference(resolution,[],[f240,f1124])).
fof(f1124,plain,(
  ( ! [X4,X5,X3] : (~sP0(X4,X5) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X3))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X4),X5)))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X3)))) )),
  inference(subsumption_resolution,[],[f1111,f165])).
fof(f165,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.clos_knownProof.ssgc_free_clockupd',aHL_FALSITY)).
fof(f1111,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,'F_0')) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X3))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X4),X5)))))))) | ~sP0(X4,X5) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X3)))) )),
  inference(superposition,[],[f145,f164])).
fof(f145,plain,(
  ( ! [X0,X8,X1] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8)))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) | ~sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f106])).
fof(f5182,plain,(
  ( ! [X26] : (s(bool,X26) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,X26)) ) | $spl192),
  inference(resolution,[],[f4466,f1271])).
fof(f1271,plain,(
  ( ! [X6,X7] : (~p(s(bool,X7)) | s(bool,X6) != s(bool,X7) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f1262,f165])).
fof(f1262,plain,(
  ( ! [X6,X7] : (s(bool,X6) != s(bool,X7) | p(s(bool,'F_0')) | ~p(s(bool,X7)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f900,f164])).
fof(f900,plain,(
  ( ! [X26,X27] : (s(bool,X26) != s(bool,X27) | p(s(bool,X27)) | ~p(s(bool,X26))) )),
  inference(resolution,[],[f165,f168])).
fof(f168,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f116])).
fof(f116,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f101])).
fof(f101,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | ~p(s(bool,X1)) | p(s(bool,X3))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | ~p(s(bool,X0)) | p(s(bool,X2)))))),
  inference(flattening,[],[f100])).
fof(f100,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X1)) | p(s(bool,X3)))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | (~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(flattening,[],[f92])).
fof(f92,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3))) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) = s(bool,X1) & (p(s(bool,X1)) => s(bool,X2) = s(bool,X3))) => ((p(s(bool,X0)) => p(s(bool,X2))) <=> (p(s(bool,X1)) => p(s(bool,X3)))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X9,X14,X10,X15] : ((s(bool,X9) = s(bool,X14) & (p(s(bool,X14)) => s(bool,X10) = s(bool,X15))) => ((p(s(bool,X9)) => p(s(bool,X10))) <=> (p(s(bool,X14)) => p(s(bool,X15)))))),
  file('thm.clos_knownProof.ssgc_free_clockupd','thm.bool.IMP_CONG')).
fof(f274,plain,(
  ( ! [X76] : (~p(s(bool,X76))) ) | $spl20),
  inference(cnf_transformation,[],[f274_D])).
fof(f274_D,plain,(
  ( ! [X76] : (~p(s(bool,X76))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f5946,plain,(
  ( ! [X1] : (~p(s(bool,X1)) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | ($spl24 | $spl136 | $spl192)),
  inference(subsumption_resolution,[],[f5934,f484])).
fof(f5934,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | ~p(s(bool,X1)) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | ($spl24 | $spl136 | $spl192)),
  inference(superposition,[],[f2349,f5181])).
fof(f1510,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl102),
  inference(cnf_transformation,[],[f1510_D])).
fof(f1510_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f6381,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(bool,'F_0') = s(bool,X1)) ) | ($spl24 | $spl192 | $spl218)),
  inference(subsumption_resolution,[],[f6372,f164])).
fof(f6372,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(bool,'F_0') = s(bool,X1)) ) | ($spl24 | $spl192 | $spl218)),
  inference(superposition,[],[f5657,f5181])).
fof(f7033,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) ) | ($spl2 | $spl10 | $spl24 | $spl132 | $spl192)),
  inference(subsumption_resolution,[],[f7032,f246])).
fof(f7032,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | ~p(s(bool,X1)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) ) | ($spl2 | $spl24 | $spl132 | $spl192)),
  inference(forward_demodulation,[],[f7031,f174])).
fof(f7031,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | ~p(s(bool,X1)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) ) | ($spl24 | $spl132 | $spl192)),
  inference(subsumption_resolution,[],[f7024,f169])).
fof(f7024,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s(bool,X1) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | ~p(s(bool,X1)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) ) | ($spl24 | $spl132 | $spl192)),
  inference(superposition,[],[f2140,f5181])).
fof(f7100,plain,(
  s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl292),
  inference(cnf_transformation,[],[f7100_D])).
fof(f7100_D,plain,(
  s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) <=> ~$spl292),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl292])])).
fof(f7098,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl210),
  inference(subsumption_resolution,[],[f5158,f164])).
fof(f5158,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl210),
  inference(superposition,[],[f4951,f164])).
fof(f7097,plain,(
  $false | ($spl2 | $spl194 | $spl201)),
  inference(subsumption_resolution,[],[f4468,f5751])).
fof(f5751,plain,(
  ( ! [X33] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',X33))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))))) ) | ($spl2 | $spl201)),
  inference(resolution,[],[f4700,f240])).
fof(f4700,plain,(
  ( ! [X2,X0,X1] : (~sP0(X0,X1) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X2))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))))) ) | $spl201),
  inference(resolution,[],[f4478,f144])).
fof(f144,plain,(
  ( ! [X0,X10,X1,X9] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X10)))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X10))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X9))) | ~sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f106])).
fof(f275,plain,(
  ( ! [X75] : (p(s(bool,X75))) ) | $spl22),
  inference(cnf_transformation,[],[f275_D])).
fof(f275_D,plain,(
  ( ! [X75] : (p(s(bool,X75))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f7030,plain,(
  ( ! [X17,X15,X20,X18,X16] : (s(bool,X15) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X16),X17))) | s(bool,X20) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X18))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X16),X17))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X18)))) | ~p(s(bool,X20)) | ~p(s(bool,X15))) ) | $spl286),
  inference(cnf_transformation,[],[f7030_D])).
fof(f7030_D,plain,(
  ( ! [X17,X15,X20,X18,X16] : (s(bool,X15) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X16),X17))) | s(bool,X20) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X18))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X16),X17))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X18)))) | ~p(s(bool,X20)) | ~p(s(bool,X15))) ) <=> ~$spl286),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl286])])).
fof(f7088,plain,(
  ( ! [X61,X64,X62,X60,X65,X63] : (~p(s(bool,X60)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X61)))) | s(bool,X60) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X61))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X62),X63))))))) | p(s(bool,X64)) | ~p(s(bool,X65)) | s(bool,X65) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X62),X63)))) ) | $spl76),
  inference(resolution,[],[f2315,f168])).
fof(f2315,plain,(
  ( ! [X35,X33,X34,X32] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X34),X35)))) | ~p(s(bool,X32)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X33)))) | s(bool,X32) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X33))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X34),X35)))))))) ) | $spl76),
  inference(resolution,[],[f1122,f154])).
fof(f261,plain,(
  ( ! [X41,X40] : (s(bool,X40) != s(bool,X41) | ~p(s(bool,X40))) ) | $spl18),
  inference(cnf_transformation,[],[f261_D])).
fof(f261_D,plain,(
  ( ! [X41,X40] : (s(bool,X40) != s(bool,X41) | ~p(s(bool,X40))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f7087,plain,(
  ( ! [X59,X57,X54,X58,X56,X55,X53] : (~p(s(bool,X53)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X54)))) | s(bool,X53) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X54))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X55),X56))))))) | ~p(s(bool,X57)) | ~p(s(bool,X58)) | s(bool,X58) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X55),X56))) | s(bool,X57) != s(bool,X59)) ) | $spl76),
  inference(resolution,[],[f2315,f119])).
fof(f119,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f101])).
fof(f7085,plain,(
  ( ! [X39,X45,X43,X41,X44,X42,X40] : (~p(s(bool,X39)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X40)))) | s(bool,X39) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X40))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X41),X42))))))) | p(s(bool,X43)) | ~p(s(bool,X44)) | ~p(s(bool,X45)) | s(bool,X44) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X41),X42)))) ) | $spl76),
  inference(resolution,[],[f2315,f118])).
fof(f118,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X3)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f101])).
fof(f249,plain,(
  ( ! [X20,X18] : (s(bool,X18) != s(bool,X20) | p(s(bool,X18))) ) | $spl12),
  inference(cnf_transformation,[],[f249_D])).
fof(f249_D,plain,(
  ( ! [X20,X18] : (s(bool,X18) != s(bool,X20) | p(s(bool,X18))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f7083,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25] : (~p(s(bool,X25)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X26)))) | s(bool,X25) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X26))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X27),X28))))))) | p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X29) != s(bool,X31) | s(bool,X30) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X27),X28)))) ) | $spl76),
  inference(resolution,[],[f2315,f117])).
fof(f117,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f101])).
fof(f7082,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (~p(s(bool,X18)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X19)))) | s(bool,X18) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X19))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X20),X21))))))) | ~p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X23) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X20),X21))) | s(bool,X22) != s(bool,X24)) ) | $spl76),
  inference(resolution,[],[f2315,f115])).
fof(f115,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X3)) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f101])).
fof(f7080,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X9] : (~p(s(bool,X4)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X5)))) | s(bool,X4) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X5))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X6),X7))))))) | p(s(bool,X8)) | ~p(s(bool,X9)) | s(bool,X8) != s(bool,X10) | s(bool,X9) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X7)))) ) | $spl76),
  inference(resolution,[],[f2315,f113])).
fof(f113,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X3)) | ~p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f101])).
fof(f7077,plain,(
  ( ! [X6,X4,X7,X5,X9] : (s(bool,X4) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X5))) | s(bool,X9) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X7))) | ~p(s(bool,X9)) | p(s(bool,X4)) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X5))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X6),X7))))))))) ) | $spl290),
  inference(cnf_transformation,[],[f7077_D])).
fof(f7077_D,plain,(
  ( ! [X6,X4,X7,X5,X9] : (s(bool,X4) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X5))) | s(bool,X9) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X7))) | ~p(s(bool,X9)) | p(s(bool,X4)) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X5))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X6),X7))))))))) ) <=> ~$spl290),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl290])])).
fof(f7069,plain,(
  ( ! [X61,X64,X62,X60,X65,X63] : (s(bool,X60) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X61))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X61))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X62),X63)))))))) | p(s(bool,X60)) | p(s(bool,X64)) | ~p(s(bool,X65)) | s(bool,X65) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X62),X63)))) ) | $spl70),
  inference(resolution,[],[f2165,f168])).
fof(f2165,plain,(
  ( ! [X35,X33,X34,X32] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X34),X35)))) | s(bool,X32) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X33))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X33))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X34),X35)))))))) | p(s(bool,X32))) ) | $spl70),
  inference(resolution,[],[f1117,f154])).
fof(f7068,plain,(
  ( ! [X59,X57,X54,X58,X56,X55,X53] : (s(bool,X53) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X54))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X54))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X55),X56)))))))) | p(s(bool,X53)) | ~p(s(bool,X57)) | ~p(s(bool,X58)) | s(bool,X58) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X55),X56))) | s(bool,X57) != s(bool,X59)) ) | $spl70),
  inference(resolution,[],[f2165,f119])).
fof(f7066,plain,(
  ( ! [X39,X45,X43,X41,X44,X42,X40] : (s(bool,X39) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X40))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X40))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X41),X42)))))))) | p(s(bool,X39)) | p(s(bool,X43)) | ~p(s(bool,X44)) | ~p(s(bool,X45)) | s(bool,X44) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X41),X42)))) ) | $spl70),
  inference(resolution,[],[f2165,f118])).
fof(f7064,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25] : (s(bool,X25) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X26))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X26))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X27),X28)))))))) | p(s(bool,X25)) | p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X29) != s(bool,X31) | s(bool,X30) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X27),X28)))) ) | $spl70),
  inference(resolution,[],[f2165,f117])).
fof(f7063,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s(bool,X18) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X19))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X19))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X20),X21)))))))) | p(s(bool,X18)) | ~p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X23) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X20),X21))) | s(bool,X22) != s(bool,X24)) ) | $spl70),
  inference(resolution,[],[f2165,f115])).
fof(f7061,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X9] : (s(bool,X4) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X5))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X5))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X6),X7)))))))) | p(s(bool,X4)) | p(s(bool,X8)) | ~p(s(bool,X9)) | s(bool,X8) != s(bool,X10) | s(bool,X9) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X7)))) ) | $spl70),
  inference(resolution,[],[f2165,f113])).
fof(f7052,plain,(
  ( ! [X6,X8,X5] : (p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X5,X6)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X6),X5)))))))) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X5,X6)))) | ~p(s(bool,X8)) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X5)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X5,X6)),s('type.closLang.exp',sK6(X5,X6)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X6),X5))),s('type.num.num',sK4(X5,X6))))) ) | $spl288),
  inference(cnf_transformation,[],[f7052_D])).
fof(f7052_D,plain,(
  ( ! [X6,X8,X5] : (p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X5,X6)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X6),X5)))))))) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X5,X6)))) | ~p(s(bool,X8)) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X5)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X5,X6)),s('type.closLang.exp',sK6(X5,X6)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X6),X5))),s('type.num.num',sK4(X5,X6))))) ) <=> ~$spl288),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl288])])).
fof(f7045,plain,(
  ( ! [X47,X45,X48,X46] : (p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X45,X46)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X46),X45)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X45,X46)),s('type.closLang.exp',sK6(X45,X46)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X46),X45))),s('type.num.num',sK4(X45,X46)))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X46),X45)))) | p(s(bool,X47)) | ~p(s(bool,X48)) | s(bool,X48) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X45,X46))))) )),
  inference(resolution,[],[f1623,f168])).
fof(f1623,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X12,X13))))) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X12,X13)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X13),X12)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X12,X13)),s('type.closLang.exp',sK6(X12,X13)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X13),X12))),s('type.num.num',sK4(X12,X13)))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X13),X12))))) )),
  inference(resolution,[],[f148,f155])).
fof(f155,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1)))) | ~sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f107])).
fof(f148,plain,(
  ( ! [X0,X1] : (sP0(X0,X1) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X1,X0)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X1,X0))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X1,X0)),s('type.closLang.exp',sK6(X1,X0)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',sK4(X1,X0))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f7044,plain,(
  ( ! [X43,X41,X44,X42,X40] : (p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X40,X41)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X41),X40)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X40,X41)),s('type.closLang.exp',sK6(X40,X41)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X41),X40))),s('type.num.num',sK4(X40,X41)))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X41),X40)))) | ~p(s(bool,X42)) | ~p(s(bool,X43)) | s(bool,X43) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X40,X41)))) | s(bool,X42) != s(bool,X44)) )),
  inference(resolution,[],[f1623,f119])).
fof(f7042,plain,(
  ( ! [X30,X33,X31,X34,X32] : (p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X30,X31)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X31),X30)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X30,X31)),s('type.closLang.exp',sK6(X30,X31)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X31),X30))),s('type.num.num',sK4(X30,X31)))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X31),X30)))) | p(s(bool,X32)) | ~p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X33) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X30,X31))))) )),
  inference(resolution,[],[f1623,f118])).
fof(f7040,plain,(
  ( ! [X24,X23,X21,X22,X20] : (p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X20,X21)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X21),X20)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X20,X21)),s('type.closLang.exp',sK6(X20,X21)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X21),X20))),s('type.num.num',sK4(X20,X21)))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X21),X20)))) | p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X24) | s(bool,X23) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X20,X21))))) )),
  inference(resolution,[],[f1623,f117])).
fof(f7039,plain,(
  ( ! [X19,X17,X15,X18,X16] : (p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X15,X16)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X16),X15)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X15,X16)),s('type.closLang.exp',sK6(X15,X16)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X16),X15))),s('type.num.num',sK4(X15,X16)))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X16),X15)))) | ~p(s(bool,X17)) | ~p(s(bool,X18)) | s(bool,X18) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X15,X16)))) | s(bool,X17) != s(bool,X19)) )),
  inference(resolution,[],[f1623,f115])).
fof(f7037,plain,(
  ( ! [X6,X8,X7,X5,X9] : (p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X5,X6)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X6),X5)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X5,X6)),s('type.closLang.exp',sK6(X5,X6)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X6),X5))),s('type.num.num',sK4(X5,X6)))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X5)))) | p(s(bool,X7)) | ~p(s(bool,X8)) | s(bool,X7) != s(bool,X9) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X5,X6))))) )),
  inference(resolution,[],[f1623,f113])).
fof(f7017,plain,(
  ( ! [X76,X74,X72,X71,X75,X73] : (s(bool,X71) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X72),X73))) | ~p(s(bool,X71)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X74)))) | p(s(bool,X75)) | ~p(s(bool,X76)) | s(bool,X76) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X74))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X72),X73)))))))) ) | $spl132),
  inference(resolution,[],[f2140,f168])).
fof(f7016,plain,(
  ( ! [X70,X68,X66,X64,X69,X67,X65] : (s(bool,X64) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X65),X66))) | ~p(s(bool,X64)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X67)))) | ~p(s(bool,X68)) | ~p(s(bool,X69)) | s(bool,X69) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X67))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X65),X66))))))) | s(bool,X68) != s(bool,X70)) ) | $spl132),
  inference(resolution,[],[f2140,f119])).
fof(f7014,plain,(
  ( ! [X54,X52,X50,X56,X55,X53,X51] : (s(bool,X50) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X51),X52))) | ~p(s(bool,X50)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X53)))) | p(s(bool,X54)) | ~p(s(bool,X55)) | ~p(s(bool,X56)) | s(bool,X55) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X53))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X51),X52)))))))) ) | $spl132),
  inference(resolution,[],[f2140,f118])).
fof(f7012,plain,(
  ( ! [X39,X37,X41,X38,X36,X42,X40] : (s(bool,X36) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X37),X38))) | ~p(s(bool,X36)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X39)))) | p(s(bool,X40)) | ~p(s(bool,X41)) | s(bool,X40) != s(bool,X42) | s(bool,X41) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X39))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X37),X38)))))))) ) | $spl132),
  inference(resolution,[],[f2140,f117])).
fof(f7011,plain,(
  ( ! [X30,X35,X33,X31,X29,X34,X32] : (s(bool,X29) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X30),X31))) | ~p(s(bool,X29)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X32)))) | ~p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X34) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X32))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X30),X31))))))) | s(bool,X33) != s(bool,X35)) ) | $spl132),
  inference(resolution,[],[f2140,f115])).
fof(f7009,plain,(
  ( ! [X21,X19,X17,X15,X20,X18,X16] : (s(bool,X15) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X16),X17))) | ~p(s(bool,X15)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X18)))) | p(s(bool,X19)) | ~p(s(bool,X20)) | s(bool,X19) != s(bool,X21) | s(bool,X20) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X18))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X16),X17)))))))) ) | $spl132),
  inference(resolution,[],[f2140,f113])).
fof(f7002,plain,(
  ( ! [X12,X10,X15,X13,X11] : (s(bool,X10) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X11),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X12),s('type.closSem.state'(X11),X13))))) | s(bool,X15) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X11),X13))))))) | ~p(s(bool,X15)) | ~p(s(bool,X10))) ) | $spl284),
  inference(cnf_transformation,[],[f7002_D])).
fof(f7002_D,plain,(
  ( ! [X12,X10,X15,X13,X11] : (s(bool,X10) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X11),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X12),s('type.closSem.state'(X11),X13))))) | s(bool,X15) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X11),X13))))))) | ~p(s(bool,X15)) | ~p(s(bool,X10))) ) <=> ~$spl284),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl284])])).
fof(f6990,plain,(
  ( ! [X70,X68,X66,X71,X69,X67] : (s(bool,X66) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X67),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X68),s('type.closSem.state'(X67),X69))))) | ~p(s(bool,X66)) | p(s(bool,X70)) | ~p(s(bool,X71)) | s(bool,X71) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X67),X69)))))))) ) | $spl158),
  inference(resolution,[],[f5542,f168])).
fof(f5542,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X2)))))))) | s(bool,X3) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.closSem.state'(X0),X2))))) | ~p(s(bool,X3))) ) | $spl158),
  inference(superposition,[],[f3615,f125])).
fof(f125,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.closSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.closSem.state'(X0),X1)))))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.closSem.state'(X0),X1)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X16] : ! [X7,X8] : s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X16),X7))) = s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X16),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X8),s('type.closSem.state'(X16),X7)))))),
  file('thm.clos_knownProof.ssgc_free_clockupd','thm.closSem.closSem_65_prove_ltb')).
fof(f6989,plain,(
  ( ! [X61,X59,X64,X62,X60,X65,X63] : (s(bool,X59) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X60),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X61),s('type.closSem.state'(X60),X62))))) | ~p(s(bool,X59)) | ~p(s(bool,X63)) | ~p(s(bool,X64)) | s(bool,X64) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X60),X62))))))) | s(bool,X63) != s(bool,X65)) ) | $spl158),
  inference(resolution,[],[f5542,f119])).
fof(f6987,plain,(
  ( ! [X47,X45,X50,X48,X46,X51,X49] : (s(bool,X45) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X46),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X47),s('type.closSem.state'(X46),X48))))) | ~p(s(bool,X45)) | p(s(bool,X49)) | ~p(s(bool,X50)) | ~p(s(bool,X51)) | s(bool,X50) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X46),X48)))))))) ) | $spl158),
  inference(resolution,[],[f5542,f118])).
fof(f6985,plain,(
  ( ! [X37,X35,X33,X31,X36,X34,X32] : (s(bool,X31) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X32),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X33),s('type.closSem.state'(X32),X34))))) | ~p(s(bool,X31)) | p(s(bool,X35)) | ~p(s(bool,X36)) | s(bool,X35) != s(bool,X37) | s(bool,X36) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X32),X34)))))))) ) | $spl158),
  inference(resolution,[],[f5542,f117])).
fof(f6984,plain,(
  ( ! [X30,X28,X26,X24,X29,X27,X25] : (s(bool,X24) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X25),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X26),s('type.closSem.state'(X25),X27))))) | ~p(s(bool,X24)) | ~p(s(bool,X28)) | ~p(s(bool,X29)) | s(bool,X29) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X25),X27))))))) | s(bool,X28) != s(bool,X30)) ) | $spl158),
  inference(resolution,[],[f5542,f115])).
fof(f6982,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X16] : (s(bool,X10) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X11),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X12),s('type.closSem.state'(X11),X13))))) | ~p(s(bool,X10)) | p(s(bool,X14)) | ~p(s(bool,X15)) | s(bool,X14) != s(bool,X16) | s(bool,X15) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X11),X13)))))))) ) | $spl158),
  inference(resolution,[],[f5542,f113])).
fof(f6973,plain,(
  ( ! [X10,X13,X11] : (sP0(X10,X11) | s(bool,X13) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X11,X10)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X10),X11))))))) | p(s(bool,X13)) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X11,X10)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X11,X10)),s('type.closLang.exp',sK6(X11,X10)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X10),X11))),s('type.num.num',sK4(X11,X10))))) ) | $spl282),
  inference(cnf_transformation,[],[f6973_D])).
fof(f6973_D,plain,(
  ( ! [X10,X13,X11] : (sP0(X10,X11) | s(bool,X13) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X11,X10)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X10),X11))))))) | p(s(bool,X13)) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X11,X10)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X11,X10)),s('type.closLang.exp',sK6(X11,X10)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X10),X11))),s('type.num.num',sK4(X11,X10))))) ) <=> ~$spl282),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl282])])).
fof(f6961,plain,(
  ( ! [X52,X50,X53,X51] : (sP0(X50,X51) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X51,X50)),s('type.closLang.exp',sK6(X51,X50)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X50),X51))),s('type.num.num',sK4(X51,X50)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X51,X50)))) | p(s(bool,X52)) | p(s(bool,X53)) | s(bool,X53) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X51,X50)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X50),X51)))))))) )),
  inference(resolution,[],[f1672,f168])).
fof(f1672,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X0,X1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X0)))))))) | sP0(X1,X0) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X0,X1)),s('type.closLang.exp',sK6(X0,X1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X1),X0))),s('type.num.num',sK4(X0,X1)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X0,X1))))) )),
  inference(subsumption_resolution,[],[f1655,f169])).
fof(f1655,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | sP0(X1,X0) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X0,X1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X0)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X0,X1)),s('type.closLang.exp',sK6(X0,X1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X1),X0))),s('type.num.num',sK4(X0,X1)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X0,X1))))) )),
  inference(superposition,[],[f148,f164])).
fof(f6960,plain,(
  ( ! [X47,X45,X48,X46,X49] : (sP0(X45,X46) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X46,X45)),s('type.closLang.exp',sK6(X46,X45)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X45),X46))),s('type.num.num',sK4(X46,X45)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X46,X45)))) | p(s(bool,X47)) | ~p(s(bool,X48)) | s(bool,X47) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X46,X45)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X45),X46))))))) | s(bool,X48) != s(bool,X49)) )),
  inference(resolution,[],[f1672,f119])).
fof(f6957,plain,(
  ( ! [X30,X33,X31,X34,X32] : (sP0(X30,X31) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X31,X30)),s('type.closLang.exp',sK6(X31,X30)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X30),X31))),s('type.num.num',sK4(X31,X30)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X31,X30)))) | p(s(bool,X32)) | ~p(s(bool,X33)) | p(s(bool,X34)) | s(bool,X34) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X31,X30)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X30),X31)))))))) )),
  inference(resolution,[],[f1672,f118])).
fof(f6956,plain,(
  ( ! [X28,X26,X29,X27,X25] : (sP0(X25,X26) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X26,X25)),s('type.closLang.exp',sK6(X26,X25)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X25),X26))),s('type.num.num',sK4(X26,X25)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X26,X25)))) | p(s(bool,X27)) | p(s(bool,X28)) | s(bool,X27) != s(bool,X29) | s(bool,X28) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X26,X25)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X25),X26)))))))) )),
  inference(resolution,[],[f1672,f117])).
fof(f6955,plain,(
  ( ! [X24,X23,X21,X22,X20] : (sP0(X20,X21) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X21,X20)),s('type.closLang.exp',sK6(X21,X20)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X20),X21))),s('type.num.num',sK4(X21,X20)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X21,X20)))) | p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X21,X20)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X20),X21))))))) | s(bool,X23) != s(bool,X24)) )),
  inference(resolution,[],[f1672,f115])).
fof(f6953,plain,(
  ( ! [X14,X12,X10,X13,X11] : (sP0(X10,X11) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X11,X10)),s('type.closLang.exp',sK6(X11,X10)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X10),X11))),s('type.num.num',sK4(X11,X10)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X11,X10)))) | p(s(bool,X12)) | p(s(bool,X13)) | s(bool,X12) != s(bool,X14) | s(bool,X13) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X11,X10)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X10),X11)))))))) )),
  inference(resolution,[],[f1672,f113])).
fof(f5987,plain,(
  ( ! [X19] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X19)))) ) | $spl236),
  inference(cnf_transformation,[],[f5987_D])).
fof(f5987_D,plain,(
  ( ! [X19] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X19)))) ) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f6917,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X4))) | ~p(s(bool,X5)) | s(bool,X5) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X4))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl278),
  inference(cnf_transformation,[],[f6917_D])).
fof(f6917_D,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X4))) | ~p(s(bool,X5)) | s(bool,X5) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X4))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) <=> ~$spl278),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl278])])).
fof(f6932,plain,(
  ( ! [X39,X41,X40] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X40))) | ~p(s(bool,X41)) | s(bool,X41) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X40))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X39)))) ) | ($spl2 | $spl50 | $spl222)),
  inference(subsumption_resolution,[],[f6909,f3961])).
fof(f6909,plain,(
  ( ! [X39,X41,X40] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X40))) | ~p(s(bool,X41)) | s(bool,X41) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X40))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X39))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X39)))) ) | ($spl2 | $spl50 | $spl222)),
  inference(superposition,[],[f5724,f5390])).
fof(f3895,plain,(
  ( ! [X200,X199] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X199),X200)))) ) | $spl174),
  inference(cnf_transformation,[],[f3895_D])).
fof(f3895_D,plain,(
  ( ! [X200,X199] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X199),X200)))) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f6931,plain,(
  ( ! [X37,X35,X38,X36] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X37))) | ~p(s(bool,X38)) | s(bool,X38) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X37))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X35),X36)))) ) | ($spl50 | $spl129 | $spl222)),
  inference(subsumption_resolution,[],[f6908,f3536])).
fof(f3536,plain,(
  ( ! [X19,X18] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X18),X19)))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X18),X19)))) ) | $spl129),
  inference(resolution,[],[f3253,f925])).
fof(f925,plain,(
  ( ! [X0,X1] : (sP0(X0,X1) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1)))) )),
  inference(subsumption_resolution,[],[f918,f169])).
fof(f918,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | sP0(X0,X1) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1)))) )),
  inference(superposition,[],[f154,f164])).
fof(f3253,plain,(
  ( ! [X0,X1] : (~sP0(X0,X1) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))))))))) ) | $spl129),
  inference(subsumption_resolution,[],[f3190,f165])).
fof(f3190,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) | ~sP0(X0,X1)) ) | $spl129),
  inference(superposition,[],[f145,f3169])).
fof(f3169,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | $spl129),
  inference(trivial_inequality_removal,[],[f3167])).
fof(f3167,plain,(
  s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | $spl129),
  inference(superposition,[],[f1907,f164])).
fof(f1907,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | $spl129),
  inference(cnf_transformation,[],[f1907_D])).
fof(f1907_D,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) <=> ~$spl129),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl129])])).
fof(f6908,plain,(
  ( ! [X37,X35,X38,X36] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X37))) | ~p(s(bool,X38)) | s(bool,X38) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X37))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X35),X36)))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X35),X36)))) ) | ($spl50 | $spl129 | $spl222)),
  inference(superposition,[],[f5724,f3673])).
fof(f3673,plain,(
  ( ! [X48,X49] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X48),X49))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X48),X49)))) ) | ($spl50 | $spl129)),
  inference(resolution,[],[f3536,f555])).
fof(f6930,plain,(
  ( ! [X30,X31,X34] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X30),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X34),s('type.closSem.state'(X30),X31)))))) ) | $spl280),
  inference(cnf_transformation,[],[f6930_D])).
fof(f6930_D,plain,(
  ( ! [X30,X31,X34] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X30),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X34),s('type.closSem.state'(X30),X31)))))) ) <=> ~$spl280),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl280])])).
fof(f6929,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X32))) | ~p(s(bool,X33)) | s(bool,X33) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X32))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X30),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X34),s('type.closSem.state'(X30),X31)))))) ) | ($spl50 | $spl129 | $spl222)),
  inference(subsumption_resolution,[],[f6907,f3674])).
fof(f3674,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X2)))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.closSem.state'(X0),X2)))))) ) | $spl129),
  inference(superposition,[],[f3536,f125])).
fof(f6907,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X32))) | ~p(s(bool,X33)) | s(bool,X33) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X32))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X30),X31)))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X30),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X34),s('type.closSem.state'(X30),X31)))))) ) | ($spl50 | $spl129 | $spl222)),
  inference(superposition,[],[f5724,f3691])).
fof(f3691,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X2))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.closSem.state'(X0),X2)))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f3673,f125])).
fof(f6672,plain,(
  ( ! [X447,X446] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X446),X447)))))))) ) | $spl268),
  inference(cnf_transformation,[],[f6672_D])).
fof(f6672_D,plain,(
  ( ! [X447,X446] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X446),X447)))))))) ) <=> ~$spl268),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl268])])).
fof(f6919,plain,(
  ( ! [X17,X15,X13,X16] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X16))) | ~p(s(bool,X17)) | s(bool,X17) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X16))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X13),X15)))))))) ) | ($spl24 | $spl50 | $spl129 | $spl222)),
  inference(subsumption_resolution,[],[f6900,f6609])).
fof(f6609,plain,(
  ( ! [X325,X323,X324] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X323),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X324),s('type.closSem.state'(X323),X325)))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X323),X325)))))))) ) | ($spl24 | $spl50 | $spl129)),
  inference(trivial_inequality_removal,[],[f6574])).
fof(f6574,plain,(
  ( ! [X325,X323,X324] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X323),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X324),s('type.closSem.state'(X323),X325)))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X323),X325)))))))) ) | ($spl24 | $spl50 | $spl129)),
  inference(superposition,[],[f347,f3691])).
fof(f6900,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X16))) | ~p(s(bool,X17)) | s(bool,X17) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X16))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X13),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X14),s('type.closSem.state'(X13),X15)))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X13),X15)))))))) ) | ($spl50 | $spl129 | $spl222)),
  inference(superposition,[],[f5724,f3691])).
fof(f6916,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X4))) | ~p(s(bool,X5)) | s(bool,X5) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X4))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,X3))) ) | ($spl10 | $spl222)),
  inference(subsumption_resolution,[],[f6898,f246])).
fof(f6898,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X4))) | ~p(s(bool,X5)) | s(bool,X5) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X4))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,X3)) | s(bool,'T_0') = s(bool,X3)) ) | $spl222),
  inference(superposition,[],[f5724,f164])).
fof(f6872,plain,(
  ( ! [X6,X8,X5] : (sP0(X5,X6) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5)))) | ~p(s(bool,X8)) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X6,X5)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X5),X6))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X6,X5)),s('type.closLang.exp',sK6(X6,X5)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',sK4(X6,X5))))) ) | $spl276),
  inference(cnf_transformation,[],[f6872_D])).
fof(f6872_D,plain,(
  ( ! [X6,X8,X5] : (sP0(X5,X6) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5)))) | ~p(s(bool,X8)) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X6,X5)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X5),X6))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X6,X5)),s('type.closLang.exp',sK6(X6,X5)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',sK4(X6,X5))))) ) <=> ~$spl276),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl276])])).
fof(f6865,plain,(
  ( ! [X47,X45,X48,X46] : (sP0(X45,X46) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X46,X45)),s('type.closLang.exp',sK6(X46,X45)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X45),X46))),s('type.num.num',sK4(X46,X45)))) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X46,X45)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X45),X46))))))) | p(s(bool,X47)) | ~p(s(bool,X48)) | s(bool,X48) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X46,X45))))) )),
  inference(resolution,[],[f1671,f168])).
fof(f1671,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X2,X3))))) | sP0(X3,X2) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X2,X3)),s('type.closLang.exp',sK6(X2,X3)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X3),X2))),s('type.num.num',sK4(X2,X3)))) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X2,X3)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X3),X2)))))))) )),
  inference(subsumption_resolution,[],[f1654,f165])).
fof(f1654,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | sP0(X3,X2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X2,X3))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X2,X3)),s('type.closLang.exp',sK6(X2,X3)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X3),X2))),s('type.num.num',sK4(X2,X3)))) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X2,X3)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X3),X2)))))))) )),
  inference(superposition,[],[f148,f164])).
fof(f6864,plain,(
  ( ! [X43,X41,X44,X42,X40] : (sP0(X40,X41) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X41,X40)),s('type.closLang.exp',sK6(X41,X40)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X40),X41))),s('type.num.num',sK4(X41,X40)))) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X41,X40)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X40),X41))))))) | ~p(s(bool,X42)) | ~p(s(bool,X43)) | s(bool,X43) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X41,X40)))) | s(bool,X42) != s(bool,X44)) )),
  inference(resolution,[],[f1671,f119])).
fof(f6862,plain,(
  ( ! [X30,X33,X31,X34,X32] : (sP0(X30,X31) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X31,X30)),s('type.closLang.exp',sK6(X31,X30)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X30),X31))),s('type.num.num',sK4(X31,X30)))) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X31,X30)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X30),X31))))))) | p(s(bool,X32)) | ~p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X33) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X31,X30))))) )),
  inference(resolution,[],[f1671,f118])).
fof(f6860,plain,(
  ( ! [X24,X23,X21,X22,X20] : (sP0(X20,X21) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X21,X20)),s('type.closLang.exp',sK6(X21,X20)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X20),X21))),s('type.num.num',sK4(X21,X20)))) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X21,X20)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X20),X21))))))) | p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X24) | s(bool,X23) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X21,X20))))) )),
  inference(resolution,[],[f1671,f117])).
fof(f6859,plain,(
  ( ! [X19,X17,X15,X18,X16] : (sP0(X15,X16) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X16,X15)),s('type.closLang.exp',sK6(X16,X15)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X15),X16))),s('type.num.num',sK4(X16,X15)))) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X16,X15)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X15),X16))))))) | ~p(s(bool,X17)) | ~p(s(bool,X18)) | s(bool,X18) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X16,X15)))) | s(bool,X17) != s(bool,X19)) )),
  inference(resolution,[],[f1671,f115])).
fof(f6857,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP0(X5,X6) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X6,X5)),s('type.closLang.exp',sK6(X6,X5)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',sK4(X6,X5)))) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X6,X5)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X5),X6))))))) | p(s(bool,X7)) | ~p(s(bool,X8)) | s(bool,X7) != s(bool,X9) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5))))) )),
  inference(resolution,[],[f1671,f113])).
fof(f6814,plain,(
  ( ! [X26,X29,X27,X25] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X25))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X26),X27))))))) | p(s(bool,X29)) | s(bool,X29) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X25))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X26),X27)))) ) | $spl274),
  inference(cnf_transformation,[],[f6814_D])).
fof(f6814_D,plain,(
  ( ! [X26,X29,X27,X25] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X25))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X26),X27))))))) | p(s(bool,X29)) | s(bool,X29) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X25))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X26),X27)))) ) <=> ~$spl274),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl274])])).
fof(f6807,plain,(
  ( ! [X76,X74,X77,X75,X73] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X73))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X74),X75))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X74),X75))) | p(s(bool,X76)) | p(s(bool,X77)) | s(bool,X77) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X73)))) )),
  inference(resolution,[],[f2076,f168])).
fof(f2076,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X27)))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X27))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X28),X29))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X28),X29)))) )),
  inference(resolution,[],[f1125,f925])).
fof(f1125,plain,(
  ( ! [X2,X0,X1] : (~sP0(X1,X2) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0)))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2)))))))) )),
  inference(subsumption_resolution,[],[f1115,f169])).
fof(f1115,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0)))) | ~sP0(X1,X2) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2)))))))) )),
  inference(superposition,[],[f145,f164])).
fof(f6806,plain,(
  ( ! [X70,X68,X72,X71,X69,X67] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X67))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X68),X69))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X68),X69))) | p(s(bool,X70)) | ~p(s(bool,X71)) | s(bool,X70) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X67))) | s(bool,X71) != s(bool,X72)) )),
  inference(resolution,[],[f2076,f119])).
fof(f6803,plain,(
  ( ! [X54,X52,X50,X53,X51,X49] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X49))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X50),X51))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X50),X51))) | p(s(bool,X52)) | ~p(s(bool,X53)) | p(s(bool,X54)) | s(bool,X54) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X49)))) )),
  inference(resolution,[],[f2076,f118])).
fof(f6802,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X43))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X44),X45))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X44),X45))) | p(s(bool,X46)) | p(s(bool,X47)) | s(bool,X46) != s(bool,X48) | s(bool,X47) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X43)))) )),
  inference(resolution,[],[f2076,f117])).
fof(f6801,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X37))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X38),X39))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X38),X39))) | p(s(bool,X40)) | ~p(s(bool,X41)) | s(bool,X40) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X37))) | s(bool,X41) != s(bool,X42)) )),
  inference(resolution,[],[f2076,f115])).
fof(f6799,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X25))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X26),X27))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X26),X27))) | p(s(bool,X28)) | p(s(bool,X29)) | s(bool,X28) != s(bool,X30) | s(bool,X29) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X25)))) )),
  inference(resolution,[],[f2076,f113])).
fof(f6790,plain,(
  ( ! [X12,X10,X8,X9] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8))) | s(bool,X12) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X9),X10))))))) | ~p(s(bool,X12)) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X9),X10)))) ) | $spl272),
  inference(cnf_transformation,[],[f6790_D])).
fof(f6790_D,plain,(
  ( ! [X12,X10,X8,X9] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8))) | s(bool,X12) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X9),X10))))))) | ~p(s(bool,X12)) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X9),X10)))) ) <=> ~$spl272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl272])])).
fof(f6775,plain,(
  ( ! [X59,X57,X60,X58,X56] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X56))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X57),X58))) | p(s(bool,X59)) | ~p(s(bool,X60)) | s(bool,X60) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X56))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X57),X58)))))))) )),
  inference(resolution,[],[f1918,f168])).
fof(f1918,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X27))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X28),X29)))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X27))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X28),X29)))) )),
  inference(resolution,[],[f1124,f925])).
fof(f6774,plain,(
  ( ! [X54,X52,X50,X55,X53,X51] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X50))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X51),X52))) | ~p(s(bool,X53)) | ~p(s(bool,X54)) | s(bool,X54) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X50))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X51),X52))))))) | s(bool,X53) != s(bool,X55)) )),
  inference(resolution,[],[f1918,f119])).
fof(f6772,plain,(
  ( ! [X39,X43,X41,X38,X42,X40] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X38))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X39),X40))) | p(s(bool,X41)) | ~p(s(bool,X42)) | ~p(s(bool,X43)) | s(bool,X42) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X38))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X39),X40)))))))) )),
  inference(resolution,[],[f1918,f118])).
fof(f6770,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X26))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X27),X28))) | p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X29) != s(bool,X31) | s(bool,X30) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X26))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X27),X28)))))))) )),
  inference(resolution,[],[f1918,f117])).
fof(f6769,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X20))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X21),X22))) | ~p(s(bool,X23)) | ~p(s(bool,X24)) | s(bool,X24) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X20))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X21),X22))))))) | s(bool,X23) != s(bool,X25)) )),
  inference(resolution,[],[f1918,f115])).
fof(f6767,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X9),X10))) | p(s(bool,X11)) | ~p(s(bool,X12)) | s(bool,X11) != s(bool,X13) | s(bool,X12) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X9),X10)))))))) )),
  inference(resolution,[],[f1918,f113])).
fof(f6642,plain,(
  ( ! [X111,X109,X110,X113] : (~p(s(bool,X113)) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X109),X111))))))) | s(bool,X113) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X109),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X110),s('type.closSem.state'(X109),X111)))))) ) | $spl262),
  inference(cnf_transformation,[],[f6642_D])).
fof(f6642_D,plain,(
  ( ! [X111,X109,X110,X113] : (~p(s(bool,X113)) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X109),X111))))))) | s(bool,X113) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X109),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X110),s('type.closSem.state'(X109),X111)))))) ) <=> ~$spl262),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl262])])).
fof(f6708,plain,(
  ( ! [X54,X52,X50,X53,X51] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X50),X51))))))) | p(s(bool,X52)) | ~p(s(bool,X53)) | s(bool,X53) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X50),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X54),s('type.closSem.state'(X50),X51)))))) ) | ($spl24 | $spl50 | $spl129)),
  inference(resolution,[],[f6609,f168])).
fof(f6707,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X44),X45))))))) | ~p(s(bool,X46)) | ~p(s(bool,X47)) | s(bool,X47) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X44),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X48),s('type.closSem.state'(X44),X45))))) | s(bool,X46) != s(bool,X49)) ) | ($spl24 | $spl50 | $spl129)),
  inference(resolution,[],[f6609,f119])).
fof(f6705,plain,(
  ( ! [X37,X35,X33,X38,X36,X34] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X33),X34))))))) | p(s(bool,X35)) | ~p(s(bool,X36)) | ~p(s(bool,X37)) | s(bool,X36) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X33),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X38),s('type.closSem.state'(X33),X34)))))) ) | ($spl24 | $spl50 | $spl129)),
  inference(resolution,[],[f6609,f118])).
fof(f6703,plain,(
  ( ! [X26,X24,X23,X21,X25,X22] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X21),X22))))))) | p(s(bool,X23)) | ~p(s(bool,X24)) | s(bool,X23) != s(bool,X25) | s(bool,X24) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X21),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X26),s('type.closSem.state'(X21),X22)))))) ) | ($spl24 | $spl50 | $spl129)),
  inference(resolution,[],[f6609,f117])).
fof(f6702,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X15),X16))))))) | ~p(s(bool,X17)) | ~p(s(bool,X18)) | s(bool,X18) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X15),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X19),s('type.closSem.state'(X15),X16))))) | s(bool,X17) != s(bool,X20)) ) | ($spl24 | $spl50 | $spl129)),
  inference(resolution,[],[f6609,f115])).
fof(f6700,plain,(
  ( ! [X6,X4,X8,X7,X5,X3] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X3),X4))))))) | p(s(bool,X5)) | ~p(s(bool,X6)) | s(bool,X5) != s(bool,X7) | s(bool,X6) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X3),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X8),s('type.closSem.state'(X3),X4)))))) ) | ($spl24 | $spl50 | $spl129)),
  inference(resolution,[],[f6609,f113])).
fof(f6639,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X91),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X92),s('type.closSem.state'(X91),X93)))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X91),X93)))))))) ) | $spl260),
  inference(cnf_transformation,[],[f6639_D])).
fof(f6639_D,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X91),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X92),s('type.closSem.state'(X91),X93)))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X91),X93)))))))) ) <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f6674,plain,(
  ( ! [X453,X451,X452] : (s(bool,X453) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X451),X452))))))) | ~p(s(bool,X453))) ) | $spl270),
  inference(cnf_transformation,[],[f6674_D])).
fof(f6674_D,plain,(
  ( ! [X453,X451,X452] : (s(bool,X453) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X451),X452))))))) | ~p(s(bool,X453))) ) <=> ~$spl270),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl270])])).
fof(f6673,plain,(
  ( ! [X453,X449,X451,X452,X448,X450] : (s(bool,X453) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X451),X452))))))) | ~p(s(bool,X453)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X448),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X449),s('type.closSem.state'(X448),X450)))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X448),X450)))))))) ) | ($spl50 | $spl129 | $spl162 | $spl216)),
  inference(subsumption_resolution,[],[f6606,f3680])).
fof(f6606,plain,(
  ( ! [X453,X449,X451,X452,X448,X450] : (s(bool,'F_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X451),X452))) | s(bool,X453) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X451),X452))))))) | ~p(s(bool,X453)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X448),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X449),s('type.closSem.state'(X448),X450)))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X448),X450)))))))) ) | ($spl50 | $spl129 | $spl216)),
  inference(superposition,[],[f5549,f3691])).
fof(f6671,plain,(
  ( ! [X445,X447,X443,X444,X446] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X443),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X444),s('type.closSem.state'(X443),X445)))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X446),X447))))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X443),X445)))))))) ) | ($spl50 | $spl129 | $spl158)),
  inference(subsumption_resolution,[],[f6605,f3673])).
fof(f6605,plain,(
  ( ! [X445,X447,X443,X444,X446] : (s(bool,'F_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X446),X447))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X443),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X444),s('type.closSem.state'(X443),X445)))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X446),X447))))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X443),X445)))))))) ) | ($spl50 | $spl129 | $spl158)),
  inference(superposition,[],[f5541,f3691])).
fof(f5541,plain,(
  ( ! [X64,X62,X63] : (s(bool,X62) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X63),X64))) | ~p(s(bool,X62)) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X63),X64)))))))) ) | ($spl50 | $spl158)),
  inference(resolution,[],[f3615,f555])).
fof(f6666,plain,(
  ( ! [X412,X414,X410,X413,X411] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X413),X414))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X410),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X411),s('type.closSem.state'(X410),X412)))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X410),X412)))))))) ) | ($spl50 | $spl129 | $spl162)),
  inference(subsumption_resolution,[],[f6596,f3673])).
fof(f6596,plain,(
  ( ! [X412,X414,X410,X413,X411] : (s(bool,'F_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X413),X414))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X413),X414))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X410),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X411),s('type.closSem.state'(X410),X412)))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X410),X412)))))))) ) | ($spl50 | $spl129 | $spl162)),
  inference(superposition,[],[f3680,f3691])).
fof(f6664,plain,(
  ( ! [X397,X399,X396,X398] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X396),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X397),s('type.closSem.state'(X396),X398)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X399))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X396),X398)))))))) ) | ($spl2 | $spl50 | $spl129 | $spl136)),
  inference(subsumption_resolution,[],[f6592,f5390])).
fof(f6592,plain,(
  ( ! [X397,X399,X396,X398] : (s(bool,'F_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X399))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X396),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X397),s('type.closSem.state'(X396),X398)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X399))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X396),X398)))))))) ) | ($spl50 | $spl129 | $spl136)),
  inference(superposition,[],[f2349,f3691])).
fof(f6663,plain,(
  ( ! [X395] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X395))))) ) | $spl266),
  inference(cnf_transformation,[],[f6663_D])).
fof(f6663_D,plain,(
  ( ! [X395] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X395))))) ) <=> ~$spl266),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl266])])).
fof(f6662,plain,(
  ( ! [X393,X395,X392,X394] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X392),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X393),s('type.closSem.state'(X392),X394)))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X395)))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X392),X394)))))))) ) | ($spl2 | $spl50 | $spl129 | $spl134)),
  inference(subsumption_resolution,[],[f6591,f3962])).
fof(f3962,plain,(
  ( ! [X12] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X12)))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X12))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl2),
  inference(resolution,[],[f240,f1125])).
fof(f6591,plain,(
  ( ! [X393,X395,X392,X394] : (s(bool,'F_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X395))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X392),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X393),s('type.closSem.state'(X392),X394)))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X395)))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X392),X394)))))))) ) | ($spl50 | $spl129 | $spl134)),
  inference(superposition,[],[f2302,f3691])).
fof(f6661,plain,(
  ( ! [X383,X379,X380,X381] : (s(bool,X383) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X379),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X380),s('type.closSem.state'(X379),X381))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X379),X381))))))) | s(bool,'F_0') = s(bool,X383)) ) | $spl264),
  inference(cnf_transformation,[],[f6661_D])).
fof(f6661_D,plain,(
  ( ! [X383,X379,X380,X381] : (s(bool,X383) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X379),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X380),s('type.closSem.state'(X379),X381))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X379),X381))))))) | s(bool,'F_0') = s(bool,X383)) ) <=> ~$spl264),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl264])])).
fof(f6660,plain,(
  ( ! [X383,X379,X380,X382,X381] : (s(bool,X383) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X379),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X380),s('type.closSem.state'(X379),X381))))) | s(bool,'T_0') = s(bool,X382) | s(bool,'F_0') = s(bool,X383) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X379),X381)))))))) ) | ($spl50 | $spl106 | $spl129)),
  inference(subsumption_resolution,[],[f6588,f164])).
fof(f6588,plain,(
  ( ! [X383,X379,X380,X382,X381] : (s(bool,'F_0') != s(bool,X382) | s(bool,X383) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X379),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X380),s('type.closSem.state'(X379),X381))))) | s(bool,'T_0') = s(bool,X382) | s(bool,'F_0') = s(bool,X383) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X379),X381)))))))) ) | ($spl50 | $spl106 | $spl129)),
  inference(superposition,[],[f1773,f3691])).
fof(f1773,plain,(
  ( ! [X6,X8,X7] : (s(bool,X7) != s(bool,X8) | s(bool,X6) != s(bool,X7) | s(bool,'T_0') = s(bool,X8) | s(bool,'F_0') = s(bool,X6)) ) | $spl106),
  inference(subsumption_resolution,[],[f1762,f169])).
fof(f1762,plain,(
  ( ! [X6,X8,X7] : (s(bool,X6) != s(bool,X7) | s(bool,X7) != s(bool,X8) | ~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,X8) | s(bool,'F_0') = s(bool,X6)) ) | $spl106),
  inference(superposition,[],[f1577,f164])).
fof(f514,plain,(
  ( ! [X4,X7] : (s(bool,X4) != s(bool,X7) | s(bool,'T_0') = s(bool,X4)) ) | $spl42),
  inference(cnf_transformation,[],[f514_D])).
fof(f514_D,plain,(
  ( ! [X4,X7] : (s(bool,X4) != s(bool,X7) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f6659,plain,(
  ( ! [X372,X374,X370,X373,X371] : (s(bool,X373) != s(bool,X374) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X370),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X371),s('type.closSem.state'(X370),X372)))))) | s(bool,'T_0') = s(bool,X374) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X370),X372)))))))) ) | ($spl50 | $spl106 | $spl129)),
  inference(subsumption_resolution,[],[f6586,f1549])).
fof(f1549,plain,(
  ( ! [X6,X7] : (s(bool,X6) != s(bool,X7) | s(bool,'F_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f1542,f165])).
fof(f1542,plain,(
  ( ! [X6,X7] : (s(bool,X6) != s(bool,X7) | p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f1267,f164])).
fof(f1267,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5) | p(s(bool,X5)) | s(bool,'F_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f1255,f169])).
fof(f1255,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5) | p(s(bool,X5)) | ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X4)) )),
  inference(superposition,[],[f900,f164])).
fof(f6586,plain,(
  ( ! [X372,X374,X370,X373,X371] : (s(bool,'F_0') != s(bool,X373) | s(bool,X373) != s(bool,X374) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X370),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X371),s('type.closSem.state'(X370),X372)))))) | s(bool,'T_0') = s(bool,X374) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X370),X372)))))))) ) | ($spl50 | $spl106 | $spl129)),
  inference(superposition,[],[f1577,f3691])).
fof(f923,plain,(
  ( ! [X30,X31] : (sP0(X30,X31)) ) | $spl56),
  inference(cnf_transformation,[],[f923_D])).
fof(f923_D,plain,(
  ( ! [X30,X31] : (sP0(X30,X31)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f6656,plain,(
  ( ! [X344,X341,X343,X340,X342] : (sP0(X343,X344) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X340),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X341),s('type.closSem.state'(X340),X342)))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X340),X342)))))))) ) | ($spl50 | $spl52 | $spl129)),
  inference(subsumption_resolution,[],[f6579,f925])).
fof(f6579,plain,(
  ( ! [X344,X341,X343,X340,X342] : (s(bool,'F_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X343),X344))) | sP0(X343,X344) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X340),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X341),s('type.closSem.state'(X340),X342)))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X340),X342)))))))) ) | ($spl50 | $spl52 | $spl129)),
  inference(superposition,[],[f920,f3691])).
fof(f349,plain,(
  ( ! [X21] : (s(bool,'F_0') != s(bool,X21)) ) | $spl26),
  inference(cnf_transformation,[],[f349_D])).
fof(f349_D,plain,(
  ( ! [X21] : (s(bool,'F_0') != s(bool,X21)) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f6655,plain,(
  ( ! [X333,X335,X332,X334] : (s(bool,'F_0') != s(bool,X335) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X332),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X333),s('type.closSem.state'(X332),X334)))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X332),X334)))))))) ) | ($spl24 | $spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6577,f347])).
fof(f6577,plain,(
  ( ! [X333,X335,X332,X334] : (s(bool,'F_0') != s(bool,X335) | p(s(bool,X335)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X332),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X333),s('type.closSem.state'(X332),X334)))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X332),X334)))))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f900,f3691])).
fof(f6654,plain,(
  ( ! [X308,X306,X309,X305,X307] : (p(s(bool,X308)) | ~p(s(bool,X309)) | s(bool,X309) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X305),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X306),s('type.closSem.state'(X305),X307))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X305),X307)))))))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6570,f165])).
fof(f6570,plain,(
  ( ! [X308,X306,X309,X305,X307] : (p(s(bool,'F_0')) | p(s(bool,X308)) | ~p(s(bool,X309)) | s(bool,X309) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X305),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X306),s('type.closSem.state'(X305),X307))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X305),X307)))))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f168,f3691])).
fof(f6653,plain,(
  ( ! [X296,X298,X295,X297,X299] : (s(bool,'F_0') != s(bool,X298) | p(s(bool,X299)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X295),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X296),s('type.closSem.state'(X295),X297)))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X295),X297)))))))) ) | ($spl24 | $spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6568,f347])).
fof(f6568,plain,(
  ( ! [X296,X298,X295,X297,X299] : (s(bool,'F_0') != s(bool,X298) | p(s(bool,X299)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X295),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X296),s('type.closSem.state'(X295),X297)))))) | p(s(bool,X298)) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X295),X297)))))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f168,f3691])).
fof(f6652,plain,(
  ( ! [X271,X273,X275,X276,X272,X274] : (~p(s(bool,X274)) | ~p(s(bool,X275)) | s(bool,X275) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X271),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X272),s('type.closSem.state'(X271),X273))))) | s(bool,X274) != s(bool,X276) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X271),X273)))))))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6564,f165])).
fof(f6564,plain,(
  ( ! [X271,X273,X275,X276,X272,X274] : (p(s(bool,'F_0')) | ~p(s(bool,X274)) | ~p(s(bool,X275)) | s(bool,X275) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X271),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X272),s('type.closSem.state'(X271),X273))))) | s(bool,X274) != s(bool,X276) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X271),X273)))))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f119,f3691])).
fof(f6651,plain,(
  ( ! [X269,X265,X267,X268,X270,X266] : (s(bool,'F_0') != s(bool,X268) | ~p(s(bool,X269)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X265),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X266),s('type.closSem.state'(X265),X267)))))) | s(bool,X269) != s(bool,X270) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X265),X267)))))))) ) | ($spl24 | $spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6563,f347])).
fof(f6563,plain,(
  ( ! [X269,X265,X267,X268,X270,X266] : (s(bool,'F_0') != s(bool,X268) | p(s(bool,X268)) | ~p(s(bool,X269)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X265),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X266),s('type.closSem.state'(X265),X267)))))) | s(bool,X269) != s(bool,X270) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X265),X267)))))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f119,f3691])).
fof(f6649,plain,(
  ( ! [X227,X225,X223,X228,X226,X224] : (p(s(bool,X226)) | ~p(s(bool,X227)) | ~p(s(bool,X228)) | s(bool,X227) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X223),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X224),s('type.closSem.state'(X223),X225))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X223),X225)))))))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6556,f165])).
fof(f6556,plain,(
  ( ! [X227,X225,X223,X228,X226,X224] : (p(s(bool,'F_0')) | p(s(bool,X226)) | ~p(s(bool,X227)) | ~p(s(bool,X228)) | s(bool,X227) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X223),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X224),s('type.closSem.state'(X223),X225))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X223),X225)))))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f118,f3691])).
fof(f6648,plain,(
  ( ! [X212,X216,X215,X213,X211,X214] : (s(bool,'F_0') != s(bool,X214) | p(s(bool,X215)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X211),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X212),s('type.closSem.state'(X211),X213)))))) | ~p(s(bool,X216)) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X211),X213)))))))) ) | ($spl24 | $spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6554,f347])).
fof(f6554,plain,(
  ( ! [X212,X216,X215,X213,X211,X214] : (s(bool,'F_0') != s(bool,X214) | p(s(bool,X215)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X211),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X212),s('type.closSem.state'(X211),X213)))))) | ~p(s(bool,X216)) | p(s(bool,X214)) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X211),X213)))))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f118,f3691])).
fof(f6647,plain,(
  ( ! [X198,X196,X194,X197,X195,X193] : (p(s(bool,X196)) | ~p(s(bool,X197)) | s(bool,X196) != s(bool,X198) | s(bool,X197) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X193),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X194),s('type.closSem.state'(X193),X195))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X193),X195)))))))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6551,f165])).
fof(f6551,plain,(
  ( ! [X198,X196,X194,X197,X195,X193] : (p(s(bool,'F_0')) | p(s(bool,X196)) | ~p(s(bool,X197)) | s(bool,X196) != s(bool,X198) | s(bool,X197) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X193),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X194),s('type.closSem.state'(X193),X195))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X193),X195)))))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f117,f3691])).
fof(f6645,plain,(
  ( ! [X173,X171,X169,X174,X172,X170] : (s(bool,'F_0') != s(bool,X172) | p(s(bool,X173)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X169),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X170),s('type.closSem.state'(X169),X171)))))) | s(bool,X173) != s(bool,X174) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X169),X171)))))))) ) | ($spl24 | $spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6547,f347])).
fof(f6547,plain,(
  ( ! [X173,X171,X169,X174,X172,X170] : (s(bool,'F_0') != s(bool,X172) | p(s(bool,X173)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X169),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X170),s('type.closSem.state'(X169),X171)))))) | p(s(bool,X172)) | s(bool,X173) != s(bool,X174) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X169),X171)))))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f117,f3691])).
fof(f6644,plain,(
  ( ! [X156,X154,X152,X151,X155,X153] : (~p(s(bool,X154)) | ~p(s(bool,X155)) | s(bool,X155) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X151),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X152),s('type.closSem.state'(X151),X153))))) | s(bool,X154) != s(bool,X156) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X151),X153)))))))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6544,f165])).
fof(f6544,plain,(
  ( ! [X156,X154,X152,X151,X155,X153] : (p(s(bool,'F_0')) | ~p(s(bool,X154)) | ~p(s(bool,X155)) | s(bool,X155) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X151),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X152),s('type.closSem.state'(X151),X153))))) | s(bool,X154) != s(bool,X156) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X151),X153)))))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f115,f3691])).
fof(f6643,plain,(
  ( ! [X144,X142,X140,X143,X141,X139] : (s(bool,'F_0') != s(bool,X142) | ~p(s(bool,X143)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X139),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X140),s('type.closSem.state'(X139),X141)))))) | s(bool,X143) != s(bool,X144) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X139),X141)))))))) ) | ($spl24 | $spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6542,f347])).
fof(f6542,plain,(
  ( ! [X144,X142,X140,X143,X141,X139] : (s(bool,'F_0') != s(bool,X142) | p(s(bool,X142)) | ~p(s(bool,X143)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X139),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X140),s('type.closSem.state'(X139),X141)))))) | s(bool,X143) != s(bool,X144) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X139),X141)))))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f115,f3691])).
fof(f6641,plain,(
  ( ! [X111,X109,X114,X112,X110,X113] : (p(s(bool,X112)) | ~p(s(bool,X113)) | s(bool,X112) != s(bool,X114) | s(bool,X113) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X109),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X110),s('type.closSem.state'(X109),X111))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X109),X111)))))))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6537,f165])).
fof(f6537,plain,(
  ( ! [X111,X109,X114,X112,X110,X113] : (p(s(bool,'F_0')) | p(s(bool,X112)) | ~p(s(bool,X113)) | s(bool,X112) != s(bool,X114) | s(bool,X113) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X109),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X110),s('type.closSem.state'(X109),X111))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X109),X111)))))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f113,f3691])).
fof(f6638,plain,(
  ( ! [X94,X92,X95,X93,X91,X96] : (s(bool,'F_0') != s(bool,X94) | p(s(bool,X95)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X91),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X92),s('type.closSem.state'(X91),X93)))))) | s(bool,X95) != s(bool,X96) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X91),X93)))))))) ) | ($spl24 | $spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6534,f347])).
fof(f6534,plain,(
  ( ! [X94,X92,X95,X93,X91,X96] : (s(bool,'F_0') != s(bool,X94) | p(s(bool,X95)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X91),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X92),s('type.closSem.state'(X91),X93)))))) | p(s(bool,X94)) | s(bool,X95) != s(bool,X96) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X91),X93)))))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f113,f3691])).
fof(f6630,plain,(
  ( ! [X344,X345,X347,X348] : (s(bool,X347) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X344),X345))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X344),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X348),s('type.closSem.state'(X344),X345))))) | s(bool,'F_0') = s(bool,X347)) ) | $spl258),
  inference(cnf_transformation,[],[f6630_D])).
fof(f6630_D,plain,(
  ( ! [X344,X345,X347,X348] : (s(bool,X347) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X344),X345))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X344),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X348),s('type.closSem.state'(X344),X345))))) | s(bool,'F_0') = s(bool,X347)) ) <=> ~$spl258),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl258])])).
fof(f6629,plain,(
  ( ! [X344,X346,X345,X347,X348] : (s(bool,X347) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X344),X345))))))) | s(bool,'T_0') = s(bool,X346) | s(bool,'F_0') = s(bool,X347) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X344),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X348),s('type.closSem.state'(X344),X345)))))) ) | ($spl50 | $spl106 | $spl129)),
  inference(subsumption_resolution,[],[f6490,f164])).
fof(f6490,plain,(
  ( ! [X344,X346,X345,X347,X348] : (s(bool,'F_0') != s(bool,X346) | s(bool,X347) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X344),X345))))))) | s(bool,'T_0') = s(bool,X346) | s(bool,'F_0') = s(bool,X347) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X344),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X348),s('type.closSem.state'(X344),X345)))))) ) | ($spl50 | $spl106 | $spl129)),
  inference(superposition,[],[f1773,f3691])).
fof(f6048,plain,(
  ( ! [X6,X4,X8,X5] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X4),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X5),s('type.closSem.state'(X4),X6))))) | s(bool,X8) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X4),X6))))))) | ~p(s(bool,X8))) ) | $spl240),
  inference(cnf_transformation,[],[f6048_D])).
fof(f6048_D,plain,(
  ( ! [X6,X4,X8,X5] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X4),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X5),s('type.closSem.state'(X4),X6))))) | s(bool,X8) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X4),X6))))))) | ~p(s(bool,X8))) ) <=> ~$spl240),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl240])])).
fof(f6626,plain,(
  ( ! [X271,X273,X270,X272,X274] : (p(s(bool,X272)) | ~p(s(bool,X273)) | s(bool,X273) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X270),X271))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X270),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X274),s('type.closSem.state'(X270),X271)))))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6472,f165])).
fof(f6472,plain,(
  ( ! [X271,X273,X270,X272,X274] : (p(s(bool,'F_0')) | p(s(bool,X272)) | ~p(s(bool,X273)) | s(bool,X273) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X270),X271))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X270),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X274),s('type.closSem.state'(X270),X271)))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f168,f3691])).
fof(f6624,plain,(
  ( ! [X241,X239,X237,X242,X240,X238] : (~p(s(bool,X239)) | ~p(s(bool,X240)) | s(bool,X240) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X237),X238))))))) | s(bool,X239) != s(bool,X241) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X237),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X242),s('type.closSem.state'(X237),X238)))))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6466,f165])).
fof(f6466,plain,(
  ( ! [X241,X239,X237,X242,X240,X238] : (p(s(bool,'F_0')) | ~p(s(bool,X239)) | ~p(s(bool,X240)) | s(bool,X240) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X237),X238))))))) | s(bool,X239) != s(bool,X241) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X237),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X242),s('type.closSem.state'(X237),X238)))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f119,f3691])).
fof(f6621,plain,(
  ( ! [X191,X189,X194,X192,X190,X193] : (p(s(bool,X191)) | ~p(s(bool,X192)) | ~p(s(bool,X193)) | s(bool,X192) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X189),X190))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X189),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X194),s('type.closSem.state'(X189),X190)))))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6458,f165])).
fof(f6458,plain,(
  ( ! [X191,X189,X194,X192,X190,X193] : (p(s(bool,'F_0')) | p(s(bool,X191)) | ~p(s(bool,X192)) | ~p(s(bool,X193)) | s(bool,X192) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X189),X190))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X189),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X194),s('type.closSem.state'(X189),X190)))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f118,f3691])).
fof(f6619,plain,(
  ( ! [X163,X161,X159,X164,X162,X160] : (p(s(bool,X161)) | ~p(s(bool,X162)) | s(bool,X161) != s(bool,X163) | s(bool,X162) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X159),X160))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X159),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X164),s('type.closSem.state'(X159),X160)))))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6453,f165])).
fof(f6453,plain,(
  ( ! [X163,X161,X159,X164,X162,X160] : (p(s(bool,'F_0')) | p(s(bool,X161)) | ~p(s(bool,X162)) | s(bool,X161) != s(bool,X163) | s(bool,X162) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X159),X160))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X159),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X164),s('type.closSem.state'(X159),X160)))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f117,f3691])).
fof(f6616,plain,(
  ( ! [X121,X118,X122,X120,X119,X117] : (~p(s(bool,X119)) | ~p(s(bool,X120)) | s(bool,X120) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X117),X118))))))) | s(bool,X119) != s(bool,X121) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X117),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X122),s('type.closSem.state'(X117),X118)))))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6446,f165])).
fof(f6446,plain,(
  ( ! [X121,X118,X122,X120,X119,X117] : (p(s(bool,'F_0')) | ~p(s(bool,X119)) | ~p(s(bool,X120)) | s(bool,X120) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X117),X118))))))) | s(bool,X119) != s(bool,X121) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X117),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X122),s('type.closSem.state'(X117),X118)))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f115,f3691])).
fof(f6614,plain,(
  ( ! [X80,X78,X76,X79,X77,X75] : (p(s(bool,X77)) | ~p(s(bool,X78)) | s(bool,X77) != s(bool,X79) | s(bool,X78) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X75),X76))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X75),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X80),s('type.closSem.state'(X75),X76)))))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f6439,f165])).
fof(f6439,plain,(
  ( ! [X80,X78,X76,X79,X77,X75] : (p(s(bool,'F_0')) | p(s(bool,X77)) | ~p(s(bool,X78)) | s(bool,X77) != s(bool,X79) | s(bool,X78) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X75),X76))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X75),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X80),s('type.closSem.state'(X75),X76)))))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f113,f3691])).
fof(f6401,plain,(
  ( ! [X4,X7,X5,X3] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X3),X4))),s('type.num.num',X5))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X3),X4))) | ~p(s(bool,X7))) ) | $spl256),
  inference(cnf_transformation,[],[f6401_D])).
fof(f6401_D,plain,(
  ( ! [X4,X7,X5,X3] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X3),X4))),s('type.num.num',X5))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X3),X4))) | ~p(s(bool,X7))) ) <=> ~$spl256),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl256])])).
fof(f6394,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X51),X52))),s('type.num.num',X53))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | p(s(bool,X54)) | ~p(s(bool,X55)) | s(bool,X55) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X51),X52)))) ) | $spl201),
  inference(resolution,[],[f5748,f168])).
fof(f5748,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X24),X25)))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X24),X25))),s('type.num.num',X26))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))))) ) | $spl201),
  inference(resolution,[],[f4700,f154])).
fof(f6393,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X45),X46))),s('type.num.num',X47))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | ~p(s(bool,X48)) | ~p(s(bool,X49)) | s(bool,X49) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X45),X46))) | s(bool,X48) != s(bool,X50)) ) | $spl201),
  inference(resolution,[],[f5748,f119])).
fof(f6391,plain,(
  ( ! [X37,X35,X33,X38,X36,X34] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X33),X34))),s('type.num.num',X35))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | p(s(bool,X36)) | ~p(s(bool,X37)) | ~p(s(bool,X38)) | s(bool,X37) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X33),X34)))) ) | $spl201),
  inference(resolution,[],[f5748,f118])).
fof(f6389,plain,(
  ( ! [X26,X24,X23,X21,X25,X22] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X21),X22))),s('type.num.num',X23))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | p(s(bool,X24)) | ~p(s(bool,X25)) | s(bool,X24) != s(bool,X26) | s(bool,X25) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X21),X22)))) ) | $spl201),
  inference(resolution,[],[f5748,f117])).
fof(f6388,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X15),X16))),s('type.num.num',X17))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | ~p(s(bool,X18)) | ~p(s(bool,X19)) | s(bool,X19) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X15),X16))) | s(bool,X18) != s(bool,X20)) ) | $spl201),
  inference(resolution,[],[f5748,f115])).
fof(f6386,plain,(
  ( ! [X6,X4,X8,X7,X5,X3] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X3),X4))),s('type.num.num',X5))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X6) != s(bool,X8) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X3),X4)))) ) | $spl201),
  inference(resolution,[],[f5748,f113])).
fof(f6316,plain,(
  ( ! [X4,X7,X5] : (s(bool,'T_0') = s(bool,X4) | ~p(s(bool,X7)) | s(bool,X7) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X5))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X4) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X5)))) ) | $spl254),
  inference(cnf_transformation,[],[f6316_D])).
fof(f6316_D,plain,(
  ( ! [X4,X7,X5] : (s(bool,'T_0') = s(bool,X4) | ~p(s(bool,X7)) | s(bool,X7) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X5))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X4) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X5)))) ) <=> ~$spl254),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl254])])).
fof(f6307,plain,(
  ( ! [X47,X45,X46,X44] : (s(bool,'T_0') = s(bool,X44) | s(bool,X44) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X45))) | p(s(bool,X46)) | ~p(s(bool,X47)) | s(bool,X47) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X45))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl2),
  inference(resolution,[],[f6294,f168])).
fof(f6294,plain,(
  ( ! [X45,X44] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X45))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s(bool,'T_0') = s(bool,X44) | s(bool,X44) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X45)))) ) | $spl2),
  inference(resolution,[],[f1567,f240])).
fof(f1567,plain,(
  ( ! [X59,X57,X58,X56] : (~sP0(X58,X59) | s(bool,'T_0') = s(bool,X56) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X57))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X58),X59)))))))) | s(bool,X56) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X57)))) )),
  inference(resolution,[],[f1271,f145])).
fof(f6306,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s(bool,'T_0') = s(bool,X39) | s(bool,X39) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X40))) | ~p(s(bool,X41)) | ~p(s(bool,X42)) | s(bool,X42) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X40))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X41) != s(bool,X43)) ) | $spl2),
  inference(resolution,[],[f6294,f119])).
fof(f6304,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s(bool,'T_0') = s(bool,X29) | s(bool,X29) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X30))) | p(s(bool,X31)) | ~p(s(bool,X32)) | ~p(s(bool,X33)) | s(bool,X32) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X30))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl2),
  inference(resolution,[],[f6294,f118])).
fof(f6302,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s(bool,'T_0') = s(bool,X19) | s(bool,X19) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X20))) | p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X21) != s(bool,X23) | s(bool,X22) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X20))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl2),
  inference(resolution,[],[f6294,f117])).
fof(f6301,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s(bool,'T_0') = s(bool,X14) | s(bool,X14) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X15))) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,X17) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X15))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X16) != s(bool,X18)) ) | $spl2),
  inference(resolution,[],[f6294,f115])).
fof(f6299,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,'T_0') = s(bool,X4) | s(bool,X4) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X5))) | p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X6) != s(bool,X8) | s(bool,X7) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X5))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl2),
  inference(resolution,[],[f6294,f113])).
fof(f6169,plain,(
  ( ! [X6,X10,X8,X7] : (s(bool,X6) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X7,X8)))) | s(bool,X10) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X7,X8)))) | ~p(s(bool,X10)) | sP0(X8,X7) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X7,X8)),s('type.closLang.exp',sK6(X7,X8)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X8),X7))),s('type.num.num',sK4(X7,X8)))) | ~p(s(bool,X6))) ) | $spl250),
  inference(cnf_transformation,[],[f6169_D])).
fof(f6169_D,plain,(
  ( ! [X6,X10,X8,X7] : (s(bool,X6) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X7,X8)))) | s(bool,X10) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X7,X8)))) | ~p(s(bool,X10)) | sP0(X8,X7) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X7,X8)),s('type.closLang.exp',sK6(X7,X8)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X8),X7))),s('type.num.num',sK4(X7,X8)))) | ~p(s(bool,X6))) ) <=> ~$spl250),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl250])])).
fof(f6265,plain,(
  ( ! [X59,X57,X60,X58,X56] : (s(bool,X56) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X57,X58)))) | ~p(s(bool,X56)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X57,X58)),s('type.closLang.exp',sK6(X57,X58)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X58),X57))),s('type.num.num',sK4(X57,X58)))) | sP0(X58,X57) | p(s(bool,X59)) | ~p(s(bool,X60)) | s(bool,X60) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X57,X58))))) ) | $spl100),
  inference(resolution,[],[f1491,f168])).
fof(f6264,plain,(
  ( ! [X54,X52,X50,X55,X53,X51] : (s(bool,X50) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X51,X52)))) | ~p(s(bool,X50)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X51,X52)),s('type.closLang.exp',sK6(X51,X52)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X52),X51))),s('type.num.num',sK4(X51,X52)))) | sP0(X52,X51) | ~p(s(bool,X53)) | ~p(s(bool,X54)) | s(bool,X54) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X51,X52)))) | s(bool,X53) != s(bool,X55)) ) | $spl100),
  inference(resolution,[],[f1491,f119])).
fof(f6262,plain,(
  ( ! [X39,X43,X41,X38,X42,X40] : (s(bool,X38) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X39,X40)))) | ~p(s(bool,X38)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X39,X40)),s('type.closLang.exp',sK6(X39,X40)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X40),X39))),s('type.num.num',sK4(X39,X40)))) | sP0(X40,X39) | p(s(bool,X41)) | ~p(s(bool,X42)) | ~p(s(bool,X43)) | s(bool,X42) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X39,X40))))) ) | $spl100),
  inference(resolution,[],[f1491,f118])).
fof(f6260,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s(bool,X26) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X27,X28)))) | ~p(s(bool,X26)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X27,X28)),s('type.closLang.exp',sK6(X27,X28)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X28),X27))),s('type.num.num',sK4(X27,X28)))) | sP0(X28,X27) | p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X29) != s(bool,X31) | s(bool,X30) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X27,X28))))) ) | $spl100),
  inference(resolution,[],[f1491,f117])).
fof(f6259,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s(bool,X20) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X21,X22)))) | ~p(s(bool,X20)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X21,X22)),s('type.closLang.exp',sK6(X21,X22)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X22),X21))),s('type.num.num',sK4(X21,X22)))) | sP0(X22,X21) | ~p(s(bool,X23)) | ~p(s(bool,X24)) | s(bool,X24) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X21,X22)))) | s(bool,X23) != s(bool,X25)) ) | $spl100),
  inference(resolution,[],[f1491,f115])).
fof(f6257,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X9,X10)))) | ~p(s(bool,X8)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X9,X10)),s('type.closLang.exp',sK6(X9,X10)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X10),X9))),s('type.num.num',sK4(X9,X10)))) | sP0(X10,X9) | p(s(bool,X11)) | ~p(s(bool,X12)) | s(bool,X11) != s(bool,X13) | s(bool,X12) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X9,X10))))) ) | $spl100),
  inference(resolution,[],[f1491,f113])).
fof(f6209,plain,(
  ( ! [X2,X3,X1] : (s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2))) | ~p(s(bool,X3)) | s(bool,X3) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2)))))))) ) | $spl252),
  inference(cnf_transformation,[],[f6209_D])).
fof(f6209_D,plain,(
  ( ! [X2,X3,X1] : (s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2))) | ~p(s(bool,X3)) | s(bool,X3) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2)))))))) ) <=> ~$spl252),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl252])])).
fof(f6208,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2))) | s(bool,X3) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))) | ~p(s(bool,X3)) | s(bool,'F_0') = s(bool,X0)) ) | ($spl50 | $spl216)),
  inference(subsumption_resolution,[],[f6191,f555])).
fof(f6191,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2))) | s(bool,X3) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))) | ~p(s(bool,X3)) | ~p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl216),
  inference(superposition,[],[f5549,f164])).
fof(f6162,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s(bool,X54) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X55,X56)))) | ~p(s(bool,X54)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X55,X56)),s('type.closLang.exp',sK6(X55,X56)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X56),X55))),s('type.num.num',sK4(X55,X56)))) | sP0(X56,X55) | p(s(bool,X57)) | ~p(s(bool,X58)) | s(bool,X58) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X55,X56))))) ) | $spl98),
  inference(resolution,[],[f1485,f168])).
fof(f6161,plain,(
  ( ! [X52,X50,X48,X53,X51,X49] : (s(bool,X48) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X49,X50)))) | ~p(s(bool,X48)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X49,X50)),s('type.closLang.exp',sK6(X49,X50)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X50),X49))),s('type.num.num',sK4(X49,X50)))) | sP0(X50,X49) | ~p(s(bool,X51)) | ~p(s(bool,X52)) | s(bool,X52) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X49,X50)))) | s(bool,X51) != s(bool,X53)) ) | $spl98),
  inference(resolution,[],[f1485,f119])).
fof(f6159,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (s(bool,X36) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X37,X38)))) | ~p(s(bool,X36)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X37,X38)),s('type.closLang.exp',sK6(X37,X38)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X38),X37))),s('type.num.num',sK4(X37,X38)))) | sP0(X38,X37) | p(s(bool,X39)) | ~p(s(bool,X40)) | ~p(s(bool,X41)) | s(bool,X40) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X37,X38))))) ) | $spl98),
  inference(resolution,[],[f1485,f118])).
fof(f6157,plain,(
  ( ! [X28,X26,X24,X29,X27,X25] : (s(bool,X24) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X25,X26)))) | ~p(s(bool,X24)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X25,X26)),s('type.closLang.exp',sK6(X25,X26)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X26),X25))),s('type.num.num',sK4(X25,X26)))) | sP0(X26,X25) | p(s(bool,X27)) | ~p(s(bool,X28)) | s(bool,X27) != s(bool,X29) | s(bool,X28) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X25,X26))))) ) | $spl98),
  inference(resolution,[],[f1485,f117])).
fof(f6156,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s(bool,X18) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X19,X20)))) | ~p(s(bool,X18)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X19,X20)),s('type.closLang.exp',sK6(X19,X20)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X20),X19))),s('type.num.num',sK4(X19,X20)))) | sP0(X20,X19) | ~p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X22) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X19,X20)))) | s(bool,X21) != s(bool,X23)) ) | $spl98),
  inference(resolution,[],[f1485,f115])).
fof(f6154,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(bool,X6) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X7,X8)))) | ~p(s(bool,X6)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X7,X8)),s('type.closLang.exp',sK6(X7,X8)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X8),X7))),s('type.num.num',sK4(X7,X8)))) | sP0(X8,X7) | p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,X10) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X7,X8))))) ) | $spl98),
  inference(resolution,[],[f1485,f113])).
fof(f6142,plain,(
  ( ! [X4,X7,X5,X3] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X3))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X4),X5))))))) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X4),X5))) | ~p(s(bool,X7)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X3))))) ) | $spl248),
  inference(cnf_transformation,[],[f6142_D])).
fof(f6142_D,plain,(
  ( ! [X4,X7,X5,X3] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X3))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X4),X5))))))) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X4),X5))) | ~p(s(bool,X7)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X3))))) ) <=> ~$spl248),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl248])])).
fof(f6135,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X51))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X52),X53))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X51)))) | p(s(bool,X54)) | ~p(s(bool,X55)) | s(bool,X55) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X52),X53)))) )),
  inference(resolution,[],[f2075,f168])).
fof(f2075,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X25),X26)))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X24))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X25),X26))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X24))))) )),
  inference(resolution,[],[f1125,f154])).
fof(f6134,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X45))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X46),X47))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X45)))) | ~p(s(bool,X48)) | ~p(s(bool,X49)) | s(bool,X49) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X46),X47))) | s(bool,X48) != s(bool,X50)) )),
  inference(resolution,[],[f2075,f119])).
fof(f6132,plain,(
  ( ! [X37,X35,X33,X38,X36,X34] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X33))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X34),X35))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X33)))) | p(s(bool,X36)) | ~p(s(bool,X37)) | ~p(s(bool,X38)) | s(bool,X37) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X34),X35)))) )),
  inference(resolution,[],[f2075,f118])).
fof(f6130,plain,(
  ( ! [X26,X24,X23,X21,X25,X22] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X21))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X22),X23))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X21)))) | p(s(bool,X24)) | ~p(s(bool,X25)) | s(bool,X24) != s(bool,X26) | s(bool,X25) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X22),X23)))) )),
  inference(resolution,[],[f2075,f117])).
fof(f6129,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X15))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X16),X17))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X15)))) | ~p(s(bool,X18)) | ~p(s(bool,X19)) | s(bool,X19) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X16),X17))) | s(bool,X18) != s(bool,X20)) )),
  inference(resolution,[],[f2075,f115])).
fof(f6127,plain,(
  ( ! [X6,X4,X8,X7,X5,X3] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X3))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X4),X5))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X3)))) | p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X6) != s(bool,X8) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X4),X5)))) )),
  inference(resolution,[],[f2075,f113])).
fof(f6119,plain,(
  ( ! [X4,X7,X5,X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X3))) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X4),X5))) | ~p(s(bool,X7)) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X3))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X4),X5))))))))) ) | $spl246),
  inference(cnf_transformation,[],[f6119_D])).
fof(f6119_D,plain,(
  ( ! [X4,X7,X5,X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X3))) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X4),X5))) | ~p(s(bool,X7)) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X3))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X4),X5))))))))) ) <=> ~$spl246),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl246])])).
fof(f6112,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X51))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X51))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X52),X53)))))))) | p(s(bool,X54)) | ~p(s(bool,X55)) | s(bool,X55) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X52),X53)))) )),
  inference(resolution,[],[f1917,f168])).
fof(f1917,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X25),X26)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X24))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X24))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X25),X26))))))))) )),
  inference(resolution,[],[f1124,f154])).
fof(f6111,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X45))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X45))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X46),X47)))))))) | ~p(s(bool,X48)) | ~p(s(bool,X49)) | s(bool,X49) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X46),X47))) | s(bool,X48) != s(bool,X50)) )),
  inference(resolution,[],[f1917,f119])).
fof(f6109,plain,(
  ( ! [X37,X35,X33,X38,X36,X34] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X33))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X33))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X34),X35)))))))) | p(s(bool,X36)) | ~p(s(bool,X37)) | ~p(s(bool,X38)) | s(bool,X37) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X34),X35)))) )),
  inference(resolution,[],[f1917,f118])).
fof(f6107,plain,(
  ( ! [X26,X24,X23,X21,X25,X22] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X21))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X21))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X22),X23)))))))) | p(s(bool,X24)) | ~p(s(bool,X25)) | s(bool,X24) != s(bool,X26) | s(bool,X25) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X22),X23)))) )),
  inference(resolution,[],[f1917,f117])).
fof(f6106,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X15))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X15))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X16),X17)))))))) | ~p(s(bool,X18)) | ~p(s(bool,X19)) | s(bool,X19) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X16),X17))) | s(bool,X18) != s(bool,X20)) )),
  inference(resolution,[],[f1917,f115])).
fof(f6104,plain,(
  ( ! [X6,X4,X8,X7,X5,X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X3))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X3))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X4),X5)))))))) | p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X6) != s(bool,X8) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X4),X5)))) )),
  inference(resolution,[],[f1917,f113])).
fof(f6098,plain,(
  ( ! [X12,X10,X8,X9] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8)))) | s(bool,X12) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X9),X10))))))) | ~p(s(bool,X12)) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X9),X10)))) ) | $spl244),
  inference(cnf_transformation,[],[f6098_D])).
fof(f6098_D,plain,(
  ( ! [X12,X10,X8,X9] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8)))) | s(bool,X12) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X9),X10))))))) | ~p(s(bool,X12)) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X9),X10)))) ) <=> ~$spl244),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl244])])).
fof(f6085,plain,(
  ( ! [X59,X57,X60,X58,X56] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X56)))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X57),X58))) | p(s(bool,X59)) | ~p(s(bool,X60)) | s(bool,X60) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X56))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X57),X58)))))))) )),
  inference(resolution,[],[f1132,f168])).
fof(f1132,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X2))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X2)))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1)))) )),
  inference(resolution,[],[f925,f145])).
fof(f6084,plain,(
  ( ! [X54,X52,X50,X55,X53,X51] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X50)))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X51),X52))) | ~p(s(bool,X53)) | ~p(s(bool,X54)) | s(bool,X54) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X50))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X51),X52))))))) | s(bool,X53) != s(bool,X55)) )),
  inference(resolution,[],[f1132,f119])).
fof(f6082,plain,(
  ( ! [X39,X43,X41,X38,X42,X40] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X38)))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X39),X40))) | p(s(bool,X41)) | ~p(s(bool,X42)) | ~p(s(bool,X43)) | s(bool,X42) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X38))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X39),X40)))))))) )),
  inference(resolution,[],[f1132,f118])).
fof(f6080,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X26)))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X27),X28))) | p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X29) != s(bool,X31) | s(bool,X30) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X26))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X27),X28)))))))) )),
  inference(resolution,[],[f1132,f117])).
fof(f6079,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X20)))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X21),X22))) | ~p(s(bool,X23)) | ~p(s(bool,X24)) | s(bool,X24) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X20))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X21),X22))))))) | s(bool,X23) != s(bool,X25)) )),
  inference(resolution,[],[f1132,f115])).
fof(f6077,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8)))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X9),X10))) | p(s(bool,X11)) | ~p(s(bool,X12)) | s(bool,X11) != s(bool,X13) | s(bool,X12) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X9),X10)))))))) )),
  inference(resolution,[],[f1132,f113])).
fof(f6067,plain,(
  ( ! [X6,X8,X5] : (~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X5,X6))))) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X5,X6)))) | ~p(s(bool,X8)) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X5)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X5,X6)),s('type.closLang.exp',sK6(X5,X6)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X6),X5))),s('type.num.num',sK4(X5,X6))))) ) | $spl242),
  inference(cnf_transformation,[],[f6067_D])).
fof(f6067_D,plain,(
  ( ! [X6,X8,X5] : (~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X5,X6))))) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X5,X6)))) | ~p(s(bool,X8)) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X5)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X5,X6)),s('type.closLang.exp',sK6(X5,X6)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X6),X5))),s('type.num.num',sK4(X5,X6))))) ) <=> ~$spl242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl242])])).
fof(f6060,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X45,X46))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X45,X46)),s('type.closLang.exp',sK6(X45,X46)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X46),X45))),s('type.num.num',sK4(X45,X46)))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X46),X45)))) | p(s(bool,X47)) | ~p(s(bool,X48)) | s(bool,X48) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X45,X46))))) )),
  inference(resolution,[],[f1446,f168])).
fof(f1446,plain,(
  ( ! [X10,X9] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X9,X10))))) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X9,X10))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X9,X10)),s('type.closLang.exp',sK6(X9,X10)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X10),X9))),s('type.num.num',sK4(X9,X10)))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X10),X9))))) )),
  inference(resolution,[],[f152,f155])).
fof(f152,plain,(
  ( ! [X0,X1] : (sP0(X0,X1) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X1,X0))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X1,X0))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X1,X0)),s('type.closLang.exp',sK6(X1,X0)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',sK4(X1,X0))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f6059,plain,(
  ( ! [X43,X41,X44,X42,X40] : (~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X40,X41))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X40,X41)),s('type.closLang.exp',sK6(X40,X41)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X41),X40))),s('type.num.num',sK4(X40,X41)))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X41),X40)))) | ~p(s(bool,X42)) | ~p(s(bool,X43)) | s(bool,X43) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X40,X41)))) | s(bool,X42) != s(bool,X44)) )),
  inference(resolution,[],[f1446,f119])).
fof(f6057,plain,(
  ( ! [X30,X33,X31,X34,X32] : (~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X30,X31))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X30,X31)),s('type.closLang.exp',sK6(X30,X31)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X31),X30))),s('type.num.num',sK4(X30,X31)))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X31),X30)))) | p(s(bool,X32)) | ~p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X33) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X30,X31))))) )),
  inference(resolution,[],[f1446,f118])).
fof(f6055,plain,(
  ( ! [X24,X23,X21,X22,X20] : (~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X20,X21))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X20,X21)),s('type.closLang.exp',sK6(X20,X21)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X21),X20))),s('type.num.num',sK4(X20,X21)))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X21),X20)))) | p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X24) | s(bool,X23) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X20,X21))))) )),
  inference(resolution,[],[f1446,f117])).
fof(f6054,plain,(
  ( ! [X19,X17,X15,X18,X16] : (~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X15,X16))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X15,X16)),s('type.closLang.exp',sK6(X15,X16)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X16),X15))),s('type.num.num',sK4(X15,X16)))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X16),X15)))) | ~p(s(bool,X17)) | ~p(s(bool,X18)) | s(bool,X18) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X15,X16)))) | s(bool,X17) != s(bool,X19)) )),
  inference(resolution,[],[f1446,f115])).
fof(f6052,plain,(
  ( ! [X6,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X5,X6))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X5,X6)),s('type.closLang.exp',sK6(X5,X6)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X6),X5))),s('type.num.num',sK4(X5,X6)))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X5)))) | p(s(bool,X7)) | ~p(s(bool,X8)) | s(bool,X7) != s(bool,X9) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X5,X6))))) )),
  inference(resolution,[],[f1446,f113])).
fof(f6037,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X52),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X53),s('type.closSem.state'(X52),X54))))) | p(s(bool,X55)) | ~p(s(bool,X56)) | s(bool,X56) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X52),X54)))))))) ) | $spl129),
  inference(resolution,[],[f3674,f168])).
fof(f6036,plain,(
  ( ! [X47,X50,X48,X46,X51,X49] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X46),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X47),s('type.closSem.state'(X46),X48))))) | ~p(s(bool,X49)) | ~p(s(bool,X50)) | s(bool,X50) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X46),X48))))))) | s(bool,X49) != s(bool,X51)) ) | $spl129),
  inference(resolution,[],[f3674,f119])).
fof(f6034,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X34),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X35),s('type.closSem.state'(X34),X36))))) | p(s(bool,X37)) | ~p(s(bool,X38)) | ~p(s(bool,X39)) | s(bool,X38) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X34),X36)))))))) ) | $spl129),
  inference(resolution,[],[f3674,f118])).
fof(f6032,plain,(
  ( ! [X26,X24,X23,X27,X25,X22] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X22),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X23),s('type.closSem.state'(X22),X24))))) | p(s(bool,X25)) | ~p(s(bool,X26)) | s(bool,X25) != s(bool,X27) | s(bool,X26) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X22),X24)))))))) ) | $spl129),
  inference(resolution,[],[f3674,f117])).
fof(f6031,plain,(
  ( ! [X21,X19,X17,X20,X18,X16] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X16),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X17),s('type.closSem.state'(X16),X18))))) | ~p(s(bool,X19)) | ~p(s(bool,X20)) | s(bool,X20) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X16),X18))))))) | s(bool,X19) != s(bool,X21)) ) | $spl129),
  inference(resolution,[],[f3674,f115])).
fof(f6029,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X4),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X5),s('type.closSem.state'(X4),X6))))) | p(s(bool,X7)) | ~p(s(bool,X8)) | s(bool,X7) != s(bool,X9) | s(bool,X8) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X4),X6)))))))) ) | $spl129),
  inference(resolution,[],[f3674,f113])).
fof(f6022,plain,(
  ( ! [X6,X4,X7,X5,X9] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X4),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',X7))) | s(bool,X9) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6))) | ~p(s(bool,X9))) ) | $spl238),
  inference(cnf_transformation,[],[f6022_D])).
fof(f6022_D,plain,(
  ( ! [X6,X4,X7,X5,X9] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X4),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',X7))) | s(bool,X9) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6))) | ~p(s(bool,X9))) ) <=> ~$spl238),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl238])])).
fof(f6015,plain,(
  ( ! [X61,X64,X62,X60,X65,X63] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X60),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X61),X62))),s('type.num.num',X63))) | p(s(bool,X64)) | ~p(s(bool,X65)) | s(bool,X65) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X61),X62)))) ) | $spl35),
  inference(resolution,[],[f3820,f168])).
fof(f3820,plain,(
  ( ! [X35,X33,X34,X32] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X33),X34)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X32),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X33),X34))),s('type.num.num',X35)))) ) | $spl35),
  inference(resolution,[],[f2742,f154])).
fof(f2742,plain,(
  ( ! [X2,X0,X3,X1] : (~sP0(X1,X2) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X1),X2))),s('type.num.num',X3)))) ) | $spl35),
  inference(trivial_inequality_removal,[],[f2741])).
fof(f2741,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X1),X2))),s('type.num.num',X3))) | ~sP0(X1,X2)) ) | $spl35),
  inference(superposition,[],[f395,f143])).
fof(f6014,plain,(
  ( ! [X59,X57,X54,X58,X56,X55,X53] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X53),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X54),X55))),s('type.num.num',X56))) | ~p(s(bool,X57)) | ~p(s(bool,X58)) | s(bool,X58) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X54),X55))) | s(bool,X57) != s(bool,X59)) ) | $spl35),
  inference(resolution,[],[f3820,f119])).
fof(f6012,plain,(
  ( ! [X39,X45,X43,X41,X44,X42,X40] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X39),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X40),X41))),s('type.num.num',X42))) | p(s(bool,X43)) | ~p(s(bool,X44)) | ~p(s(bool,X45)) | s(bool,X44) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X40),X41)))) ) | $spl35),
  inference(resolution,[],[f3820,f118])).
fof(f6010,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X25),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X26),X27))),s('type.num.num',X28))) | p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X29) != s(bool,X31) | s(bool,X30) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X26),X27)))) ) | $spl35),
  inference(resolution,[],[f3820,f117])).
fof(f6009,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X18),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X19),X20))),s('type.num.num',X21))) | ~p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X23) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X19),X20))) | s(bool,X22) != s(bool,X24)) ) | $spl35),
  inference(resolution,[],[f3820,f115])).
fof(f6007,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X9] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X4),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',X7))) | p(s(bool,X8)) | ~p(s(bool,X9)) | s(bool,X8) != s(bool,X10) | s(bool,X9) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6)))) ) | $spl35),
  inference(resolution,[],[f3820,f113])).
fof(f5974,plain,(
  ( ! [X3] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X3))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X3))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl234),
  inference(cnf_transformation,[],[f5974_D])).
fof(f5974_D,plain,(
  ( ! [X3] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X3))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X3))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) <=> ~$spl234),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl234])])).
fof(f5986,plain,(
  ( ! [X19,X20] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X20))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X20))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X19)))) ) | ($spl2 | $spl50 | $spl138)),
  inference(subsumption_resolution,[],[f5967,f3961])).
fof(f5967,plain,(
  ( ! [X19,X20] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X20))) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X19))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X20))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X19)))) ) | ($spl2 | $spl50 | $spl138)),
  inference(superposition,[],[f2370,f5390])).
fof(f5985,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X18))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X18))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X16),X17)))) ) | ($spl50 | $spl129 | $spl138)),
  inference(subsumption_resolution,[],[f5966,f3536])).
fof(f5966,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X18))) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X16),X17)))))))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X18))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X16),X17)))) ) | ($spl50 | $spl129 | $spl138)),
  inference(superposition,[],[f2370,f3673])).
fof(f5973,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X3))) | p(s(bool,X2)) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X3))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | ($spl10 | $spl138)),
  inference(subsumption_resolution,[],[f5958,f246])).
fof(f5958,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X3))) | p(s(bool,X2)) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X3))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,X2)) ) | $spl138),
  inference(superposition,[],[f2370,f164])).
fof(f5942,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X1))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X1)))) ) | $spl232),
  inference(cnf_transformation,[],[f5942_D])).
fof(f5942_D,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X1))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X1)))) ) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f5941,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X1))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X1))) | s(bool,'F_0') = s(bool,X0)) ) | ($spl50 | $spl136)),
  inference(subsumption_resolution,[],[f5927,f555])).
fof(f5927,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X1))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | ~p(s(bool,X0)) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X1))) | s(bool,'F_0') = s(bool,X0)) ) | $spl136),
  inference(superposition,[],[f2349,f164])).
fof(f5913,plain,(
  ( ! [X6,X7,X9] : (sP0(X6,X7) | s(bool,X9) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X7,X6)))) | ~p(s(bool,X9)) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X7,X6)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X7,X6)),s('type.closLang.exp',sK6(X7,X6)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X6),X7))),s('type.num.num',sK4(X7,X6))))) ) | $spl230),
  inference(cnf_transformation,[],[f5913_D])).
fof(f5913_D,plain,(
  ( ! [X6,X7,X9] : (sP0(X6,X7) | s(bool,X9) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X7,X6)))) | ~p(s(bool,X9)) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X7,X6)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X7,X6)),s('type.closLang.exp',sK6(X7,X6)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X6),X7))),s('type.num.num',sK4(X7,X6))))) ) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f5906,plain,(
  ( ! [X47,X48,X46,X49] : (sP0(X46,X47) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X47,X46)),s('type.closLang.exp',sK6(X47,X46)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X46),X47))),s('type.num.num',sK4(X47,X46)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X47,X46)))) | p(s(bool,X48)) | ~p(s(bool,X49)) | s(bool,X49) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X47,X46))))) )),
  inference(resolution,[],[f1498,f168])).
fof(f1498,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X0,X1))))) | sP0(X1,X0) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X0,X1)),s('type.closLang.exp',sK6(X0,X1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X1),X0))),s('type.num.num',sK4(X0,X1)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X0,X1))))) )),
  inference(subsumption_resolution,[],[f1476,f169])).
fof(f1476,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | sP0(X1,X0) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X0,X1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X0,X1)),s('type.closLang.exp',sK6(X0,X1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X1),X0))),s('type.num.num',sK4(X0,X1)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X0,X1))))) )),
  inference(superposition,[],[f152,f164])).
fof(f5905,plain,(
  ( ! [X45,X43,X41,X44,X42] : (sP0(X41,X42) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X42,X41)),s('type.closLang.exp',sK6(X42,X41)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X41),X42))),s('type.num.num',sK4(X42,X41)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X42,X41)))) | ~p(s(bool,X43)) | ~p(s(bool,X44)) | s(bool,X44) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X42,X41)))) | s(bool,X43) != s(bool,X45)) )),
  inference(resolution,[],[f1498,f119])).
fof(f5903,plain,(
  ( ! [X35,X33,X31,X34,X32] : (sP0(X31,X32) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X32,X31)),s('type.closLang.exp',sK6(X32,X31)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X31),X32))),s('type.num.num',sK4(X32,X31)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X32,X31)))) | p(s(bool,X33)) | ~p(s(bool,X34)) | ~p(s(bool,X35)) | s(bool,X34) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X32,X31))))) )),
  inference(resolution,[],[f1498,f118])).
fof(f5901,plain,(
  ( ! [X24,X23,X21,X25,X22] : (sP0(X21,X22) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X22,X21)),s('type.closLang.exp',sK6(X22,X21)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X21),X22))),s('type.num.num',sK4(X22,X21)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X22,X21)))) | p(s(bool,X23)) | ~p(s(bool,X24)) | s(bool,X23) != s(bool,X25) | s(bool,X24) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X22,X21))))) )),
  inference(resolution,[],[f1498,f117])).
fof(f5900,plain,(
  ( ! [X19,X17,X20,X18,X16] : (sP0(X16,X17) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X17,X16)),s('type.closLang.exp',sK6(X17,X16)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X16),X17))),s('type.num.num',sK4(X17,X16)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X17,X16)))) | ~p(s(bool,X18)) | ~p(s(bool,X19)) | s(bool,X19) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X17,X16)))) | s(bool,X18) != s(bool,X20)) )),
  inference(resolution,[],[f1498,f115])).
fof(f5898,plain,(
  ( ! [X6,X10,X8,X7,X9] : (sP0(X6,X7) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X7,X6)),s('type.closLang.exp',sK6(X7,X6)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X6),X7))),s('type.num.num',sK4(X7,X6)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X7,X6)))) | p(s(bool,X8)) | ~p(s(bool,X9)) | s(bool,X8) != s(bool,X10) | s(bool,X9) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X7,X6))))) )),
  inference(resolution,[],[f1498,f113])).
fof(f5875,plain,(
  ( ! [X6,X8,X5] : (sP0(X5,X6) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5)))) | ~p(s(bool,X8)) | s(bool,'F_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X6,X5)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X6,X5)),s('type.closLang.exp',sK6(X6,X5)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',sK4(X6,X5))))) ) | $spl228),
  inference(cnf_transformation,[],[f5875_D])).
fof(f5875_D,plain,(
  ( ! [X6,X8,X5] : (sP0(X5,X6) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5)))) | ~p(s(bool,X8)) | s(bool,'F_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X6,X5)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X6,X5)),s('type.closLang.exp',sK6(X6,X5)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',sK4(X6,X5))))) ) <=> ~$spl228),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl228])])).
fof(f5868,plain,(
  ( ! [X47,X45,X48,X46] : (sP0(X45,X46) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X46,X45)),s('type.closLang.exp',sK6(X46,X45)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X45),X46))),s('type.num.num',sK4(X46,X45)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X46,X45)))) | p(s(bool,X47)) | ~p(s(bool,X48)) | s(bool,X48) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X46,X45))))) )),
  inference(resolution,[],[f1497,f168])).
fof(f1497,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X0,X1))))) | sP0(X1,X0) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X0,X1)),s('type.closLang.exp',sK6(X0,X1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X1),X0))),s('type.num.num',sK4(X0,X1)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X0,X1))))) )),
  inference(subsumption_resolution,[],[f1474,f169])).
fof(f1474,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | sP0(X1,X0) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X0,X1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X0,X1)),s('type.closLang.exp',sK6(X0,X1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X1),X0))),s('type.num.num',sK4(X0,X1)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X0,X1))))) )),
  inference(superposition,[],[f152,f164])).
fof(f5867,plain,(
  ( ! [X43,X41,X44,X42,X40] : (sP0(X40,X41) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X41,X40)),s('type.closLang.exp',sK6(X41,X40)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X40),X41))),s('type.num.num',sK4(X41,X40)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X41,X40)))) | ~p(s(bool,X42)) | ~p(s(bool,X43)) | s(bool,X43) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X41,X40)))) | s(bool,X42) != s(bool,X44)) )),
  inference(resolution,[],[f1497,f119])).
fof(f5865,plain,(
  ( ! [X30,X33,X31,X34,X32] : (sP0(X30,X31) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X31,X30)),s('type.closLang.exp',sK6(X31,X30)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X30),X31))),s('type.num.num',sK4(X31,X30)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X31,X30)))) | p(s(bool,X32)) | ~p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X33) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X31,X30))))) )),
  inference(resolution,[],[f1497,f118])).
fof(f5863,plain,(
  ( ! [X24,X23,X21,X22,X20] : (sP0(X20,X21) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X21,X20)),s('type.closLang.exp',sK6(X21,X20)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X20),X21))),s('type.num.num',sK4(X21,X20)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X21,X20)))) | p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X24) | s(bool,X23) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X21,X20))))) )),
  inference(resolution,[],[f1497,f117])).
fof(f5862,plain,(
  ( ! [X19,X17,X15,X18,X16] : (sP0(X15,X16) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X16,X15)),s('type.closLang.exp',sK6(X16,X15)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X15),X16))),s('type.num.num',sK4(X16,X15)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X16,X15)))) | ~p(s(bool,X17)) | ~p(s(bool,X18)) | s(bool,X18) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X16,X15)))) | s(bool,X17) != s(bool,X19)) )),
  inference(resolution,[],[f1497,f115])).
fof(f5860,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP0(X5,X6) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X6,X5)),s('type.closLang.exp',sK6(X6,X5)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',sK4(X6,X5)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X6,X5)))) | p(s(bool,X7)) | ~p(s(bool,X8)) | s(bool,X7) != s(bool,X9) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5))))) )),
  inference(resolution,[],[f1497,f113])).
fof(f5811,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2)))))))) ) | $spl226),
  inference(cnf_transformation,[],[f5811_D])).
fof(f5811_D,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2)))))))) ) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f5810,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))) | s(bool,'F_0') = s(bool,X0)) ) | ($spl50 | $spl158)),
  inference(subsumption_resolution,[],[f5793,f555])).
fof(f5793,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2))) | ~p(s(bool,X0)) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))) | s(bool,'F_0') = s(bool,X0)) ) | ($spl50 | $spl158)),
  inference(superposition,[],[f5541,f164])).
fof(f5774,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2)))) ) | $spl224),
  inference(cnf_transformation,[],[f5774_D])).
fof(f5774_D,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2)))) ) <=> ~$spl224),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl224])])).
fof(f5773,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2))) | ~p(s(bool,X0))) ) | ($spl24 | $spl162)),
  inference(subsumption_resolution,[],[f5757,f347])).
fof(f5757,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2))) | ~p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl162),
  inference(superposition,[],[f3680,f164])).
fof(f5724,plain,(
  ( ! [X4,X7,X5] : (s(bool,X4) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X5))) | ~p(s(bool,X7)) | s(bool,X7) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X5))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,X4))) ) | $spl222),
  inference(cnf_transformation,[],[f5724_D])).
fof(f5724_D,plain,(
  ( ! [X4,X7,X5] : (s(bool,X4) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X5))) | ~p(s(bool,X7)) | s(bool,X7) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X5))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,X4))) ) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f5715,plain,(
  ( ! [X47,X45,X46,X44] : (s(bool,X44) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X45))) | p(s(bool,X44)) | p(s(bool,X46)) | ~p(s(bool,X47)) | s(bool,X47) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X45))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | ($spl2 | $spl70)),
  inference(resolution,[],[f3959,f168])).
fof(f3959,plain,(
  ( ! [X8,X7] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8))) | p(s(bool,X7))) ) | ($spl2 | $spl70)),
  inference(resolution,[],[f240,f1117])).
fof(f5714,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s(bool,X39) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X40))) | p(s(bool,X39)) | ~p(s(bool,X41)) | ~p(s(bool,X42)) | s(bool,X42) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X40))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X41) != s(bool,X43)) ) | ($spl2 | $spl70)),
  inference(resolution,[],[f3959,f119])).
fof(f5712,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s(bool,X29) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X30))) | p(s(bool,X29)) | p(s(bool,X31)) | ~p(s(bool,X32)) | ~p(s(bool,X33)) | s(bool,X32) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X30))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | ($spl2 | $spl70)),
  inference(resolution,[],[f3959,f118])).
fof(f5710,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s(bool,X19) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X20))) | p(s(bool,X19)) | p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X21) != s(bool,X23) | s(bool,X22) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X20))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | ($spl2 | $spl70)),
  inference(resolution,[],[f3959,f117])).
fof(f5709,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s(bool,X14) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X15))) | p(s(bool,X14)) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,X17) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X15))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X16) != s(bool,X18)) ) | ($spl2 | $spl70)),
  inference(resolution,[],[f3959,f115])).
fof(f5707,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,X4) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X5))) | p(s(bool,X4)) | p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X6) != s(bool,X8) | s(bool,X7) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X5))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | ($spl2 | $spl70)),
  inference(resolution,[],[f3959,f113])).
fof(f5687,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X1))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X1))))) ) | $spl220),
  inference(cnf_transformation,[],[f5687_D])).
fof(f5687_D,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X1))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X1))))) ) <=> ~$spl220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl220])])).
fof(f5686,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X1))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X1)))) | s(bool,'F_0') = s(bool,X0)) ) | ($spl50 | $spl134)),
  inference(subsumption_resolution,[],[f5673,f555])).
fof(f5673,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X1))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | ~p(s(bool,X0)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X1)))) | s(bool,'F_0') = s(bool,X0)) ) | $spl134),
  inference(superposition,[],[f2302,f164])).
fof(f5657,plain,(
  ( ! [X189,X187] : (s(bool,X189) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X187))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X187))) | s(bool,'F_0') = s(bool,X189)) ) | $spl218),
  inference(cnf_transformation,[],[f5657_D])).
fof(f5657_D,plain,(
  ( ! [X189,X187] : (s(bool,X189) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X187))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X187))) | s(bool,'F_0') = s(bool,X189)) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f5656,plain,(
  ( ! [X189,X187,X188] : (s(bool,X189) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X187))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,X188) | s(bool,'F_0') = s(bool,X189) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X187)))) ) | ($spl2 | $spl50 | $spl106)),
  inference(subsumption_resolution,[],[f5626,f164])).
fof(f5626,plain,(
  ( ! [X189,X187,X188] : (s(bool,'F_0') != s(bool,X188) | s(bool,X189) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X187))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,X188) | s(bool,'F_0') = s(bool,X189) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X187)))) ) | ($spl2 | $spl50 | $spl106)),
  inference(superposition,[],[f1773,f5390])).
fof(f2349,plain,(
  ( ! [X2,X0] : (s(bool,X2) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | ~p(s(bool,X2)) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0)))) ) | $spl136),
  inference(cnf_transformation,[],[f2349_D])).
fof(f2349_D,plain,(
  ( ! [X2,X0] : (s(bool,X2) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | ~p(s(bool,X2)) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0)))) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f5653,plain,(
  ( ! [X151,X149,X150] : (p(s(bool,X150)) | ~p(s(bool,X151)) | s(bool,X151) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X149))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X149)))) ) | ($spl2 | $spl50)),
  inference(subsumption_resolution,[],[f5608,f165])).
fof(f5608,plain,(
  ( ! [X151,X149,X150] : (p(s(bool,'F_0')) | p(s(bool,X150)) | ~p(s(bool,X151)) | s(bool,X151) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X149))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X149)))) ) | ($spl2 | $spl50)),
  inference(superposition,[],[f168,f5390])).
fof(f5651,plain,(
  ( ! [X132,X130,X131,X129] : (~p(s(bool,X130)) | ~p(s(bool,X131)) | s(bool,X131) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X129))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X130) != s(bool,X132) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X129)))) ) | ($spl2 | $spl50)),
  inference(subsumption_resolution,[],[f5602,f165])).
fof(f5602,plain,(
  ( ! [X132,X130,X131,X129] : (p(s(bool,'F_0')) | ~p(s(bool,X130)) | ~p(s(bool,X131)) | s(bool,X131) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X129))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X130) != s(bool,X132) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X129)))) ) | ($spl2 | $spl50)),
  inference(superposition,[],[f119,f5390])).
fof(f5648,plain,(
  ( ! [X99,X97,X100,X98] : (p(s(bool,X98)) | ~p(s(bool,X99)) | ~p(s(bool,X100)) | s(bool,X99) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X97))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X97)))) ) | ($spl2 | $spl50)),
  inference(subsumption_resolution,[],[f5594,f165])).
fof(f5594,plain,(
  ( ! [X99,X97,X100,X98] : (p(s(bool,'F_0')) | p(s(bool,X98)) | ~p(s(bool,X99)) | ~p(s(bool,X100)) | s(bool,X99) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X97))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X97)))) ) | ($spl2 | $spl50)),
  inference(superposition,[],[f118,f5390])).
fof(f5646,plain,(
  ( ! [X80,X78,X79,X77] : (p(s(bool,X78)) | ~p(s(bool,X79)) | s(bool,X78) != s(bool,X80) | s(bool,X79) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X77))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X77)))) ) | ($spl2 | $spl50)),
  inference(subsumption_resolution,[],[f5589,f165])).
fof(f5589,plain,(
  ( ! [X80,X78,X79,X77] : (p(s(bool,'F_0')) | p(s(bool,X78)) | ~p(s(bool,X79)) | s(bool,X78) != s(bool,X80) | s(bool,X79) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X77))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X77)))) ) | ($spl2 | $spl50)),
  inference(superposition,[],[f117,f5390])).
fof(f5643,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,X50)) | ~p(s(bool,X51)) | s(bool,X51) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X49))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X50) != s(bool,X52) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X49)))) ) | ($spl2 | $spl50)),
  inference(subsumption_resolution,[],[f5582,f165])).
fof(f5582,plain,(
  ( ! [X52,X50,X51,X49] : (p(s(bool,'F_0')) | ~p(s(bool,X50)) | ~p(s(bool,X51)) | s(bool,X51) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X49))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X50) != s(bool,X52) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X49)))) ) | ($spl2 | $spl50)),
  inference(superposition,[],[f115,f5390])).
fof(f5641,plain,(
  ( ! [X24,X23,X21,X22] : (p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X24) | s(bool,X23) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X21))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X21)))) ) | ($spl2 | $spl50)),
  inference(subsumption_resolution,[],[f5575,f165])).
fof(f5575,plain,(
  ( ! [X24,X23,X21,X22] : (p(s(bool,'F_0')) | p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X24) | s(bool,X23) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X21))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X21)))) ) | ($spl2 | $spl50)),
  inference(superposition,[],[f113,f5390])).
fof(f5551,plain,(
  $false | ($spl2 | $spl28 | $spl35)),
  inference(subsumption_resolution,[],[f389,f3966])).
fof(f3966,plain,(
  ( ! [X19,X20] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X19),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',X20)))) ) | ($spl2 | $spl35)),
  inference(resolution,[],[f240,f2742])).
fof(f5549,plain,(
  ( ! [X6,X4,X8,X5] : (s(bool,X4) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6))) | s(bool,X8) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X5),X6))))))) | ~p(s(bool,X8)) | ~p(s(bool,X4))) ) | $spl216),
  inference(cnf_transformation,[],[f5549_D])).
fof(f5549_D,plain,(
  ( ! [X6,X4,X8,X5] : (s(bool,X4) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6))) | s(bool,X8) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X5),X6))))))) | ~p(s(bool,X8)) | ~p(s(bool,X4))) ) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f5539,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s(bool,X52) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X53),X54))) | ~p(s(bool,X52)) | p(s(bool,X55)) | ~p(s(bool,X56)) | s(bool,X56) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X53),X54)))))))) ) | $spl158),
  inference(resolution,[],[f3615,f168])).
fof(f5538,plain,(
  ( ! [X47,X50,X48,X46,X51,X49] : (s(bool,X46) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X47),X48))) | ~p(s(bool,X46)) | ~p(s(bool,X49)) | ~p(s(bool,X50)) | s(bool,X50) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X47),X48))))))) | s(bool,X49) != s(bool,X51)) ) | $spl158),
  inference(resolution,[],[f3615,f119])).
fof(f5536,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(bool,X34) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X35),X36))) | ~p(s(bool,X34)) | p(s(bool,X37)) | ~p(s(bool,X38)) | ~p(s(bool,X39)) | s(bool,X38) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X35),X36)))))))) ) | $spl158),
  inference(resolution,[],[f3615,f118])).
fof(f5534,plain,(
  ( ! [X26,X24,X23,X27,X25,X22] : (s(bool,X22) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X23),X24))) | ~p(s(bool,X22)) | p(s(bool,X25)) | ~p(s(bool,X26)) | s(bool,X25) != s(bool,X27) | s(bool,X26) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X23),X24)))))))) ) | $spl158),
  inference(resolution,[],[f3615,f117])).
fof(f5533,plain,(
  ( ! [X21,X19,X17,X20,X18,X16] : (s(bool,X16) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X17),X18))) | ~p(s(bool,X16)) | ~p(s(bool,X19)) | ~p(s(bool,X20)) | s(bool,X20) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X17),X18))))))) | s(bool,X19) != s(bool,X21)) ) | $spl158),
  inference(resolution,[],[f3615,f115])).
fof(f5531,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s(bool,X4) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6))) | ~p(s(bool,X4)) | p(s(bool,X7)) | ~p(s(bool,X8)) | s(bool,X7) != s(bool,X9) | s(bool,X8) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X5),X6)))))))) ) | $spl158),
  inference(resolution,[],[f3615,f113])).
fof(f3791,plain,(
  ( ! [X246,X248,X245] : (s(bool,X248) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X245),X246))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X245),X246))) | s(bool,'F_0') = s(bool,X248)) ) | $spl164),
  inference(cnf_transformation,[],[f3791_D])).
fof(f3791_D,plain,(
  ( ! [X246,X248,X245] : (s(bool,X248) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X245),X246))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X245),X246))) | s(bool,'F_0') = s(bool,X248)) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f5523,plain,(
  ( ! [X243,X246,X244,X245] : (s(bool,X246) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X243),X244))))))) | s(bool,'T_0') = s(bool,X245) | s(bool,'F_0') = s(bool,X246) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X243),X244)))) ) | ($spl50 | $spl106 | $spl129)),
  inference(subsumption_resolution,[],[f5492,f164])).
fof(f5492,plain,(
  ( ! [X243,X246,X244,X245] : (s(bool,'F_0') != s(bool,X245) | s(bool,X246) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X243),X244))))))) | s(bool,'T_0') = s(bool,X245) | s(bool,'F_0') = s(bool,X246) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X243),X244)))) ) | ($spl50 | $spl106 | $spl129)),
  inference(superposition,[],[f1773,f3673])).
fof(f3680,plain,(
  ( ! [X0,X3,X1] : (s(bool,X3) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1))) | ~p(s(bool,X3))) ) | $spl162),
  inference(cnf_transformation,[],[f3680_D])).
fof(f3680_D,plain,(
  ( ! [X0,X3,X1] : (s(bool,X3) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1))) | ~p(s(bool,X3))) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f5519,plain,(
  ( ! [X189,X187,X190,X188] : (p(s(bool,X189)) | ~p(s(bool,X190)) | s(bool,X190) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X187),X188))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X187),X188)))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f5474,f165])).
fof(f5474,plain,(
  ( ! [X189,X187,X190,X188] : (p(s(bool,'F_0')) | p(s(bool,X189)) | ~p(s(bool,X190)) | s(bool,X190) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X187),X188))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X187),X188)))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f168,f3673])).
fof(f5517,plain,(
  ( ! [X163,X161,X164,X162,X160] : (~p(s(bool,X162)) | ~p(s(bool,X163)) | s(bool,X163) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X160),X161))))))) | s(bool,X162) != s(bool,X164) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X160),X161)))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f5468,f165])).
fof(f5468,plain,(
  ( ! [X163,X161,X164,X162,X160] : (p(s(bool,'F_0')) | ~p(s(bool,X162)) | ~p(s(bool,X163)) | s(bool,X163) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X160),X161))))))) | s(bool,X162) != s(bool,X164) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X160),X161)))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f119,f3673])).
fof(f5514,plain,(
  ( ! [X123,X121,X124,X122,X120] : (p(s(bool,X122)) | ~p(s(bool,X123)) | ~p(s(bool,X124)) | s(bool,X123) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X120),X121))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X120),X121)))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f5460,f165])).
fof(f5460,plain,(
  ( ! [X123,X121,X124,X122,X120] : (p(s(bool,'F_0')) | p(s(bool,X122)) | ~p(s(bool,X123)) | ~p(s(bool,X124)) | s(bool,X123) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X120),X121))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X120),X121)))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f118,f3673])).
fof(f5512,plain,(
  ( ! [X99,X97,X95,X98,X96] : (p(s(bool,X97)) | ~p(s(bool,X98)) | s(bool,X97) != s(bool,X99) | s(bool,X98) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X95),X96))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X95),X96)))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f5455,f165])).
fof(f5455,plain,(
  ( ! [X99,X97,X95,X98,X96] : (p(s(bool,'F_0')) | p(s(bool,X97)) | ~p(s(bool,X98)) | s(bool,X97) != s(bool,X99) | s(bool,X98) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X95),X96))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X95),X96)))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f117,f3673])).
fof(f5509,plain,(
  ( ! [X61,X64,X62,X60,X63] : (~p(s(bool,X62)) | ~p(s(bool,X63)) | s(bool,X63) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X60),X61))))))) | s(bool,X62) != s(bool,X64) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X60),X61)))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f5448,f165])).
fof(f5448,plain,(
  ( ! [X61,X64,X62,X60,X63] : (p(s(bool,'F_0')) | ~p(s(bool,X62)) | ~p(s(bool,X63)) | s(bool,X63) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X60),X61))))))) | s(bool,X62) != s(bool,X64) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X60),X61)))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f115,f3673])).
fof(f5507,plain,(
  ( ! [X28,X26,X29,X27,X25] : (p(s(bool,X27)) | ~p(s(bool,X28)) | s(bool,X27) != s(bool,X29) | s(bool,X28) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X25),X26))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X25),X26)))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f5441,f165])).
fof(f5441,plain,(
  ( ! [X28,X26,X29,X27,X25] : (p(s(bool,'F_0')) | p(s(bool,X27)) | ~p(s(bool,X28)) | s(bool,X27) != s(bool,X29) | s(bool,X28) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X25),X26))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X25),X26)))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f113,f3673])).
fof(f2370,plain,(
  ( ! [X10,X8] : (s(bool,X10) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8))) | p(s(bool,X10)) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl138),
  inference(cnf_transformation,[],[f2370_D])).
fof(f2370_D,plain,(
  ( ! [X10,X8] : (s(bool,X10) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8))) | p(s(bool,X10)) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f5411,plain,(
  ( ! [X41,X42,X40] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X40))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,X41)) | p(s(bool,X42)) | s(bool,X42) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X40)))) ) | $spl2),
  inference(resolution,[],[f3962,f168])).
fof(f5410,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X36))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,X37)) | ~p(s(bool,X38)) | s(bool,X37) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X36))) | s(bool,X38) != s(bool,X39)) ) | $spl2),
  inference(resolution,[],[f3962,f119])).
fof(f5407,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X24))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,X25)) | ~p(s(bool,X26)) | p(s(bool,X27)) | s(bool,X27) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X24)))) ) | $spl2),
  inference(resolution,[],[f3962,f118])).
fof(f5406,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X20))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,X21)) | p(s(bool,X22)) | s(bool,X21) != s(bool,X23) | s(bool,X22) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X20)))) ) | $spl2),
  inference(resolution,[],[f3962,f117])).
fof(f5405,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X16))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,X17)) | ~p(s(bool,X18)) | s(bool,X17) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X16))) | s(bool,X18) != s(bool,X19)) ) | $spl2),
  inference(resolution,[],[f3962,f115])).
fof(f5403,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,X9)) | p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,X10) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8)))) ) | $spl2),
  inference(resolution,[],[f3962,f113])).
fof(f5388,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X32))) | p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X34) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X32))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl2),
  inference(resolution,[],[f3961,f168])).
fof(f5387,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X28))) | ~p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X30) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X28))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X29) != s(bool,X31)) ) | $spl2),
  inference(resolution,[],[f3961,f119])).
fof(f5385,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X20))) | p(s(bool,X21)) | ~p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X20))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl2),
  inference(resolution,[],[f3961,f118])).
fof(f5383,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X12))) | p(s(bool,X13)) | ~p(s(bool,X14)) | s(bool,X13) != s(bool,X15) | s(bool,X14) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X12))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl2),
  inference(resolution,[],[f3961,f117])).
fof(f5382,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8))) | ~p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X10) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X9) != s(bool,X11)) ) | $spl2),
  inference(resolution,[],[f3961,f115])).
fof(f5380,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0))) | p(s(bool,X1)) | ~p(s(bool,X2)) | s(bool,X1) != s(bool,X3) | s(bool,X2) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl2),
  inference(resolution,[],[f3961,f113])).
fof(f5234,plain,(
  ( ! [X43,X41,X42,X40] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X40),X41))) | p(s(bool,X42)) | ~p(s(bool,X43)) | s(bool,X43) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X40),X41)))))))) ) | $spl129),
  inference(resolution,[],[f3536,f168])).
fof(f5233,plain,(
  ( ! [X39,X37,X35,X38,X36] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X35),X36))) | ~p(s(bool,X37)) | ~p(s(bool,X38)) | s(bool,X38) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X35),X36))))))) | s(bool,X37) != s(bool,X39)) ) | $spl129),
  inference(resolution,[],[f3536,f119])).
fof(f5231,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X25),X26))) | p(s(bool,X27)) | ~p(s(bool,X28)) | ~p(s(bool,X29)) | s(bool,X28) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X25),X26)))))))) ) | $spl129),
  inference(resolution,[],[f3536,f118])).
fof(f5229,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X15),X16))) | p(s(bool,X17)) | ~p(s(bool,X18)) | s(bool,X17) != s(bool,X19) | s(bool,X18) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X15),X16)))))))) ) | $spl129),
  inference(resolution,[],[f3536,f117])).
fof(f5228,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X10),X11))) | ~p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X13) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X10),X11))))))) | s(bool,X12) != s(bool,X14)) ) | $spl129),
  inference(resolution,[],[f3536,f115])).
fof(f5226,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1))) | p(s(bool,X2)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X4) | s(bool,X3) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) ) | $spl129),
  inference(resolution,[],[f3536,f113])).
fof(f2302,plain,(
  ( ! [X2,X0] : (s(bool,X2) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | ~p(s(bool,X2)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0))))) ) | $spl134),
  inference(cnf_transformation,[],[f2302_D])).
fof(f2302_D,plain,(
  ( ! [X2,X0] : (s(bool,X2) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | ~p(s(bool,X2)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0))))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f5202,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X32)))) | p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X34) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X32))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl2),
  inference(resolution,[],[f4204,f168])).
fof(f4204,plain,(
  ( ! [X4] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X4))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X4))))) ) | $spl2),
  inference(subsumption_resolution,[],[f4141,f169])).
fof(f4141,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X4))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X4))))) ) | $spl2),
  inference(superposition,[],[f1109,f174])).
fof(f1109,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2)))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0))))) )),
  inference(resolution,[],[f145,f154])).
fof(f5201,plain,(
  ( ! [X30,X28,X31,X29] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X28)))) | ~p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X30) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X28))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X29) != s(bool,X31)) ) | $spl2),
  inference(resolution,[],[f4204,f119])).
fof(f5199,plain,(
  ( ! [X23,X21,X22,X20] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X20)))) | p(s(bool,X21)) | ~p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X20))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl2),
  inference(resolution,[],[f4204,f118])).
fof(f5197,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X12)))) | p(s(bool,X13)) | ~p(s(bool,X14)) | s(bool,X13) != s(bool,X15) | s(bool,X14) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X12))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl2),
  inference(resolution,[],[f4204,f117])).
fof(f5196,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8)))) | ~p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X10) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X9) != s(bool,X11)) ) | $spl2),
  inference(resolution,[],[f4204,f115])).
fof(f5194,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0)))) | p(s(bool,X1)) | ~p(s(bool,X2)) | s(bool,X1) != s(bool,X3) | s(bool,X2) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl2),
  inference(resolution,[],[f4204,f113])).
fof(f5187,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,X1) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl214),
  inference(cnf_transformation,[],[f5187_D])).
fof(f5187_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,X1) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) <=> ~$spl214),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl214])])).
fof(f5180,plain,(
  ( ! [X24,X25] : (p(s(bool,X24)) | p(s(bool,X25)) | s(bool,X25) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl192),
  inference(resolution,[],[f4466,f168])).
fof(f5179,plain,(
  ( ! [X23,X21,X22] : (p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X21) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X22) != s(bool,X23)) ) | $spl192),
  inference(resolution,[],[f4466,f119])).
fof(f5176,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | p(s(bool,X14)) | s(bool,X14) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl192),
  inference(resolution,[],[f4466,f118])).
fof(f5175,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,X10) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl192),
  inference(resolution,[],[f4466,f117])).
fof(f5174,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X6) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X7) != s(bool,X8)) ) | $spl192),
  inference(resolution,[],[f4466,f115])).
fof(f5172,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,X1) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl192),
  inference(resolution,[],[f4466,f113])).
fof(f5164,plain,(
  s(bool,'T_0') != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl213),
  inference(cnf_transformation,[],[f5164_D])).
fof(f5164_D,plain,(
  s(bool,'T_0') != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) <=> ~$spl213),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl213])])).
fof(f5162,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(bool,'F_0') = s(bool,X0)) ) | $spl210),
  inference(duplicate_literal_removal,[],[f5153])).
fof(f5153,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0)) ) | $spl210),
  inference(superposition,[],[f4951,f164])).
fof(f3506,plain,(
  ( ! [X127] : (s(bool,X127) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'F_0') = s(bool,X127)) ) | $spl156),
  inference(cnf_transformation,[],[f3506_D])).
fof(f3506_D,plain,(
  ( ! [X127] : (s(bool,X127) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'F_0') = s(bool,X127)) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f5129,plain,(
  ( ! [X127,X126] : (s(bool,X127) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,X126) | s(bool,'F_0') = s(bool,X127)) ) | ($spl33 | $spl50 | $spl106)),
  inference(subsumption_resolution,[],[f5086,f164])).
fof(f5086,plain,(
  ( ! [X127,X126] : (s(bool,'F_0') != s(bool,X126) | s(bool,X127) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,X126) | s(bool,'F_0') = s(bool,X127)) ) | ($spl33 | $spl50 | $spl106)),
  inference(superposition,[],[f1773,f3381])).
fof(f3381,plain,(
  s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | ($spl33 | $spl50)),
  inference(resolution,[],[f392,f555])).
fof(f392,plain,(
  ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | $spl33),
  inference(cnf_transformation,[],[f392_D])).
fof(f392_D,plain,(
  ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f3388,plain,(
  ( ! [X1] : (~p(s(bool,X1)) | s(bool,X1) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl154),
  inference(cnf_transformation,[],[f3388_D])).
fof(f3388_D,plain,(
  ( ! [X1] : (~p(s(bool,X1)) | s(bool,X1) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f4996,plain,(
  ( ! [X24,X25] : (p(s(bool,X24)) | ~p(s(bool,X25)) | s(bool,X25) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | ($spl2 | $spl129)),
  inference(resolution,[],[f4115,f168])).
fof(f4115,plain,(
  ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | ($spl2 | $spl129)),
  inference(resolution,[],[f3956,f3535])).
fof(f3535,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X16),X17)))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X16),X17))))))))) ) | $spl129),
  inference(resolution,[],[f3253,f154])).
fof(f3956,plain,(
  p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) | $spl2),
  inference(resolution,[],[f240,f155])).
fof(f4995,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X22) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X21) != s(bool,X23)) ) | ($spl2 | $spl129)),
  inference(resolution,[],[f4115,f119])).
fof(f4993,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,X15)) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,X16) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | ($spl2 | $spl129)),
  inference(resolution,[],[f4115,f118])).
fof(f4991,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,X10) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | ($spl2 | $spl129)),
  inference(resolution,[],[f4115,f117])).
fof(f4990,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X7) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X6) != s(bool,X8)) ) | ($spl2 | $spl129)),
  inference(resolution,[],[f4115,f115])).
fof(f4988,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,X1) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | ($spl2 | $spl129)),
  inference(resolution,[],[f4115,f113])).
fof(f4951,plain,(
  ( ! [X130] : (s(bool,X130) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(bool,'F_0') = s(bool,X130)) ) | $spl210),
  inference(cnf_transformation,[],[f4951_D])).
fof(f4951_D,plain,(
  ( ! [X130] : (s(bool,X130) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(bool,'F_0') = s(bool,X130)) ) <=> ~$spl210),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl210])])).
fof(f4950,plain,(
  ( ! [X130,X129] : (s(bool,X130) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(bool,'T_0') = s(bool,X129) | s(bool,'F_0') = s(bool,X130)) ) | ($spl50 | $spl106 | $spl201)),
  inference(subsumption_resolution,[],[f4907,f164])).
fof(f4907,plain,(
  ( ! [X130,X129] : (s(bool,'F_0') != s(bool,X129) | s(bool,X130) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(bool,'T_0') = s(bool,X129) | s(bool,'F_0') = s(bool,X130)) ) | ($spl50 | $spl106 | $spl201)),
  inference(superposition,[],[f1773,f4711])).
fof(f4711,plain,(
  s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ($spl50 | $spl201)),
  inference(resolution,[],[f4478,f555])).
fof(f4468,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl194),
  inference(cnf_transformation,[],[f4468_D])).
fof(f4468_D,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f4470,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | $spl196),
  inference(cnf_transformation,[],[f4470_D])).
fof(f4470_D,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f4805,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ($spl0 | $spl24 | $spl202)),
  inference(forward_demodulation,[],[f4804,f122])).
fof(f122,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.closSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.closSem.state'(X0),X1)))))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.closSem.state'(X0),X1)))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X16] : ! [X7,X8] : s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X16),X7))) = s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X16),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X8),s('type.closSem.state'(X16),X7)))))),
  file('thm.clos_knownProof.ssgc_free_clockupd','thm.closSem.closSem_82_prove_ltb')).
fof(f4804,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ($spl0 | $spl24 | $spl202)),
  inference(forward_demodulation,[],[f4803,f124])).
fof(f124,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.closSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.closSem.state'(X0),X1)))))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.closSem.state'(X0),X1)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X16] : ! [X7,X8] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X16),X7))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X16),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X8),s('type.closSem.state'(X16),X7)))))),
  file('thm.clos_knownProof.ssgc_free_clockupd','thm.closSem.closSem_69_prove_ltb')).
fof(f4803,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ($spl0 | $spl24 | $spl202)),
  inference(subsumption_resolution,[],[f4802,f4383])).
fof(f4383,plain,(
  ~sP0(sK1,'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))) | $spl0),
  inference(subsumption_resolution,[],[f4318,f165])).
fof(f4318,plain,(
  p(s(bool,'F_0')) | ~sP0(sK1,'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))) | $spl0),
  inference(superposition,[],[f155,f173])).
fof(f4802,plain,(
  sP0(sK1,'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ($spl24 | $spl202)),
  inference(subsumption_resolution,[],[f4734,f169])).
fof(f4734,plain,(
  ~p(s(bool,'T_0')) | sP0(sK1,'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ($spl24 | $spl202)),
  inference(superposition,[],[f150,f4686])).
fof(f4686,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ($spl24 | $spl202)),
  inference(resolution,[],[f4482,f484])).
fof(f150,plain,(
  ( ! [X0,X1] : (sP0(X0,X1) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X1,X0))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X1,X0)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',sK7(X1,X0)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X1,X0)),s('type.closLang.exp',sK6(X1,X0)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',sK4(X1,X0))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f4714,plain,(
  ( ! [X4] : (~p(s(bool,X4)) | s(bool,X4) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl208),
  inference(cnf_transformation,[],[f4714_D])).
fof(f4714_D,plain,(
  ( ! [X4] : (~p(s(bool,X4)) | s(bool,X4) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f4709,plain,(
  ( ! [X28,X27] : (p(s(bool,X27)) | ~p(s(bool,X28)) | s(bool,X28) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl201),
  inference(resolution,[],[f4478,f168])).
fof(f4708,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,X24)) | ~p(s(bool,X25)) | s(bool,X25) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(bool,X24) != s(bool,X26)) ) | $spl201),
  inference(resolution,[],[f4478,f119])).
fof(f4706,plain,(
  ( ! [X19,X20,X18] : (p(s(bool,X18)) | ~p(s(bool,X19)) | ~p(s(bool,X20)) | s(bool,X19) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl201),
  inference(resolution,[],[f4478,f118])).
fof(f4704,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X12) != s(bool,X14) | s(bool,X13) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl201),
  inference(resolution,[],[f4478,f117])).
fof(f4703,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X10) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(bool,X9) != s(bool,X11)) ) | $spl201),
  inference(resolution,[],[f4478,f115])).
fof(f4701,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,X3)) | ~p(s(bool,X4)) | s(bool,X3) != s(bool,X5) | s(bool,X4) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl201),
  inference(resolution,[],[f4478,f113])).
fof(f4698,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,X1) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl206),
  inference(cnf_transformation,[],[f4698_D])).
fof(f4698_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,X1) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f4685,plain,(
  ( ! [X24,X25] : (p(s(bool,X24)) | p(s(bool,X25)) | s(bool,X25) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl202),
  inference(resolution,[],[f4482,f168])).
fof(f4684,plain,(
  ( ! [X23,X21,X22] : (p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X21) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(bool,X22) != s(bool,X23)) ) | $spl202),
  inference(resolution,[],[f4482,f119])).
fof(f4681,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | p(s(bool,X14)) | s(bool,X14) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl202),
  inference(resolution,[],[f4482,f118])).
fof(f4680,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,X10) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl202),
  inference(resolution,[],[f4482,f117])).
fof(f4679,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X6) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(bool,X7) != s(bool,X8)) ) | $spl202),
  inference(resolution,[],[f4482,f115])).
fof(f4677,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,X1) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl202),
  inference(resolution,[],[f4482,f113])).
fof(f4474,plain,(
  s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl199),
  inference(cnf_transformation,[],[f4474_D])).
fof(f4474_D,plain,(
  s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) <=> ~$spl199),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl199])])).
fof(f4478,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | $spl201),
  inference(cnf_transformation,[],[f4478_D])).
fof(f4478_D,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) <=> ~$spl201),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl201])])).
fof(f4697,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ($spl0 | $spl202)),
  inference(subsumption_resolution,[],[f4676,f4383])).
fof(f4676,plain,(
  sP0(sK1,'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl202),
  inference(resolution,[],[f4482,f153])).
fof(f153,plain,(
  ( ! [X0,X1] : (sP0(X0,X1) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X1,X0))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X1,X0))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X1,X0))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f4696,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ($spl0 | $spl202)),
  inference(forward_demodulation,[],[f4695,f124])).
fof(f4695,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ($spl0 | $spl202)),
  inference(subsumption_resolution,[],[f4675,f4383])).
fof(f4675,plain,(
  sP0(sK1,'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl202),
  inference(resolution,[],[f4482,f151])).
fof(f151,plain,(
  ( ! [X0,X1] : (sP0(X0,X1) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X1,X0))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X1,X0)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',sK7(X1,X0)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X1,X0))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f4694,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | ($spl0 | $spl202)),
  inference(forward_demodulation,[],[f4693,f122])).
fof(f4693,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ($spl0 | $spl202)),
  inference(subsumption_resolution,[],[f4674,f4383])).
fof(f4674,plain,(
  sP0(sK1,'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl202),
  inference(resolution,[],[f4482,f152])).
fof(f4692,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ($spl0 | $spl202)),
  inference(forward_demodulation,[],[f4691,f122])).
fof(f4691,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ($spl0 | $spl202)),
  inference(forward_demodulation,[],[f4690,f124])).
fof(f4690,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ($spl0 | $spl202)),
  inference(subsumption_resolution,[],[f4673,f4383])).
fof(f4673,plain,(
  sP0(sK1,'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl202),
  inference(resolution,[],[f4482,f150])).
fof(f4670,plain,(
  ( ! [X3] : (~p(s(bool,X3)) | s(bool,X3) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl204),
  inference(cnf_transformation,[],[f4670_D])).
fof(f4670_D,plain,(
  ( ! [X3] : (~p(s(bool,X3)) | s(bool,X3) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f4665,plain,(
  ( ! [X26,X27] : (p(s(bool,X26)) | ~p(s(bool,X27)) | s(bool,X27) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl203),
  inference(resolution,[],[f4483,f168])).
fof(f4664,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,X23)) | ~p(s(bool,X24)) | s(bool,X24) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(bool,X23) != s(bool,X25)) ) | $spl203),
  inference(resolution,[],[f4483,f119])).
fof(f4662,plain,(
  ( ! [X19,X17,X18] : (p(s(bool,X17)) | ~p(s(bool,X18)) | ~p(s(bool,X19)) | s(bool,X18) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl203),
  inference(resolution,[],[f4483,f118])).
fof(f4660,plain,(
  ( ! [X12,X13,X11] : (p(s(bool,X11)) | ~p(s(bool,X12)) | s(bool,X11) != s(bool,X13) | s(bool,X12) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl203),
  inference(resolution,[],[f4483,f117])).
fof(f4659,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,X8)) | ~p(s(bool,X9)) | s(bool,X9) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(bool,X8) != s(bool,X10)) ) | $spl203),
  inference(resolution,[],[f4483,f115])).
fof(f4657,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,X2)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X4) | s(bool,X3) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) ) | $spl203),
  inference(resolution,[],[f4483,f113])).
fof(f1903,plain,(
  ( ! [X17] : (s(bool,X17) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,'F_0') = s(bool,X17)) ) | $spl124),
  inference(cnf_transformation,[],[f1903_D])).
fof(f1903_D,plain,(
  ( ! [X17] : (s(bool,X17) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,'F_0') = s(bool,X17)) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f4585,plain,(
  ( ! [X127,X126] : (s(bool,X127) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,'T_0') = s(bool,X126) | s(bool,'F_0') = s(bool,X127)) ) | ($spl106 | $spl129)),
  inference(subsumption_resolution,[],[f4548,f164])).
fof(f4548,plain,(
  ( ! [X127,X126] : (s(bool,'F_0') != s(bool,X126) | s(bool,X127) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,'T_0') = s(bool,X126) | s(bool,'F_0') = s(bool,X127)) ) | ($spl106 | $spl129)),
  inference(superposition,[],[f1773,f3169])).
fof(f4483,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | $spl203),
  inference(cnf_transformation,[],[f4483_D])).
fof(f4483_D,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) <=> ~$spl203),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl203])])).
fof(f4458,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl0),
  inference(resolution,[],[f4383,f153])).
fof(f4485,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | $spl0),
  inference(forward_demodulation,[],[f4457,f122])).
fof(f4457,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl0),
  inference(resolution,[],[f4383,f152])).
fof(f4484,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl0),
  inference(forward_demodulation,[],[f4456,f124])).
fof(f4456,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl0),
  inference(resolution,[],[f4383,f151])).
fof(f4481,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | $spl0),
  inference(forward_demodulation,[],[f4480,f122])).
fof(f4480,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl0),
  inference(forward_demodulation,[],[f4455,f124])).
fof(f4455,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl0),
  inference(resolution,[],[f4383,f150])).
fof(f4466,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | $spl192),
  inference(cnf_transformation,[],[f4466_D])).
fof(f4466_D,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f4479,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl0),
  inference(forward_demodulation,[],[f4454,f125])).
fof(f4454,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl0),
  inference(resolution,[],[f4383,f149])).
fof(f149,plain,(
  ( ! [X0,X1] : (sP0(X0,X1) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X1,X0)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X1,X0))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X1,X0))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f4476,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | $spl0),
  inference(forward_demodulation,[],[f4475,f122])).
fof(f4475,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl0),
  inference(forward_demodulation,[],[f4453,f125])).
fof(f4453,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl0),
  inference(resolution,[],[f4383,f148])).
fof(f4472,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl0),
  inference(forward_demodulation,[],[f4471,f124])).
fof(f4471,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl0),
  inference(forward_demodulation,[],[f4452,f125])).
fof(f4452,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl0),
  inference(resolution,[],[f4383,f147])).
fof(f147,plain,(
  ( ! [X0,X1] : (sP0(X0,X1) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X1,X0)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X1,X0)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',sK7(X1,X0)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X1,X0))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f4464,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | $spl0),
  inference(forward_demodulation,[],[f4463,f122])).
fof(f4463,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl0),
  inference(forward_demodulation,[],[f4462,f124])).
fof(f4462,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl0),
  inference(forward_demodulation,[],[f4451,f125])).
fof(f4451,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK7('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)),s('type.closLang.exp',sK6('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',sK4('const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)),sK1)))) | $spl0),
  inference(resolution,[],[f4383,f146])).
fof(f146,plain,(
  ( ! [X0,X1] : (sP0(X0,X1) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X1,X0)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X1,X0)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',sK7(X1,X0)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X1,X0)),s('type.closLang.exp',sK6(X1,X0)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',sK4(X1,X0))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f4434,plain,(
  $false | ($spl2 | $spl24 | $spl62)),
  inference(resolution,[],[f4314,f167])).
fof(f167,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.clos_knownProof.ssgc_free_clockupd',aHL_TRUTH)).
fof(f4314,plain,(
  ( ! [X1] : (~p(s(bool,X1))) ) | ($spl2 | $spl24 | $spl62)),
  inference(subsumption_resolution,[],[f4313,f484])).
fof(f4313,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | ~p(s(bool,X1))) ) | ($spl2 | $spl62)),
  inference(forward_demodulation,[],[f957,f174])).
fof(f4435,plain,(
  $false | ($spl2 | $spl24 | $spl62)),
  inference(resolution,[],[f4314,f166])).
fof(f166,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.clos_knownProof.ssgc_free_clockupd','thm.bool.TRUTH')).
fof(f4436,plain,(
  $false | ($spl2 | $spl24 | $spl62)),
  inference(resolution,[],[f4314,f169])).
fof(f4419,plain,(
  ( ! [X133] : (s(bool,X133) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) | s(bool,'F_0') = s(bool,X133)) ) | $spl190),
  inference(cnf_transformation,[],[f4419_D])).
fof(f4419_D,plain,(
  ( ! [X133] : (s(bool,X133) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) | s(bool,'F_0') = s(bool,X133)) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f4418,plain,(
  ( ! [X132,X133] : (s(bool,X133) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) | s(bool,'T_0') = s(bool,X132) | s(bool,'F_0') = s(bool,X133)) ) | ($spl0 | $spl106)),
  inference(subsumption_resolution,[],[f4379,f164])).
fof(f4379,plain,(
  ( ! [X132,X133] : (s(bool,'F_0') != s(bool,X132) | s(bool,X133) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) | s(bool,'T_0') = s(bool,X132) | s(bool,'F_0') = s(bool,X133)) ) | ($spl0 | $spl106)),
  inference(superposition,[],[f1773,f173])).
fof(f1086,plain,(
  ( ! [X2,X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,X0) != s(bool,X2) | p(s(bool,X2))) ) | $spl66),
  inference(cnf_transformation,[],[f1086_D])).
fof(f1086_D,plain,(
  ( ! [X2,X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,X0) != s(bool,X2) | p(s(bool,X2))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f4268,plain,(
  ( ! [X33,X34,X32] : (s(bool,'F_0') = s(bool,X32) | p(s(bool,X33)) | p(s(bool,X34)) | s(bool,X32) != s(bool,X34)) ) | $spl50),
  inference(resolution,[],[f555,f168])).
fof(f4267,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,'F_0') = s(bool,X28) | p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X28) != s(bool,X29) | s(bool,X30) != s(bool,X31)) ) | $spl50),
  inference(resolution,[],[f555,f119])).
fof(f4264,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,'F_0') = s(bool,X16) | p(s(bool,X17)) | ~p(s(bool,X18)) | p(s(bool,X19)) | s(bool,X16) != s(bool,X19)) ) | $spl50),
  inference(resolution,[],[f555,f118])).
fof(f4263,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'F_0') = s(bool,X12) | p(s(bool,X13)) | p(s(bool,X14)) | s(bool,X13) != s(bool,X15) | s(bool,X12) != s(bool,X14)) ) | $spl50),
  inference(resolution,[],[f555,f117])).
fof(f4262,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'F_0') = s(bool,X8) | p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X8) != s(bool,X9) | s(bool,X10) != s(bool,X11)) ) | $spl50),
  inference(resolution,[],[f555,f115])).
fof(f4260,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | s(bool,X1) != s(bool,X3) | s(bool,X0) != s(bool,X2)) ) | $spl50),
  inference(resolution,[],[f555,f113])).
fof(f4132,plain,(
  ( ! [X7] : (p(s(bool,X7)) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl188),
  inference(cnf_transformation,[],[f4132_D])).
fof(f4132_D,plain,(
  ( ! [X7] : (p(s(bool,X7)) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f4127,plain,(
  ( ! [X30,X31] : (p(s(bool,X30)) | p(s(bool,X31)) | s(bool,X31) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl2),
  inference(resolution,[],[f3956,f168])).
fof(f4126,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X27)) | ~p(s(bool,X28)) | s(bool,X27) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X28) != s(bool,X29)) ) | $spl2),
  inference(resolution,[],[f3956,f119])).
fof(f4123,plain,(
  ( ! [X19,X20,X18] : (p(s(bool,X18)) | ~p(s(bool,X19)) | p(s(bool,X20)) | s(bool,X20) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl2),
  inference(resolution,[],[f3956,f118])).
fof(f4122,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,X15)) | p(s(bool,X16)) | s(bool,X15) != s(bool,X17) | s(bool,X16) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl2),
  inference(resolution,[],[f3956,f117])).
fof(f4121,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X12) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X13) != s(bool,X14)) ) | $spl2),
  inference(resolution,[],[f3956,f115])).
fof(f4119,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X6)) | p(s(bool,X7)) | s(bool,X6) != s(bool,X8) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl2),
  inference(resolution,[],[f3956,f113])).
fof(f177,plain,(
  s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) | $spl4),
  inference(cnf_transformation,[],[f177_D])).
fof(f177_D,plain,(
  s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f179,plain,(
  s(bool,'F_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | $spl7),
  inference(cnf_transformation,[],[f179_D])).
fof(f179_D,plain,(
  s(bool,'F_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f4113,plain,(
  s(bool,'F_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))),
  inference(superposition,[],[f111,f164])).
fof(f111,plain,(
  s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))),
  inference(cnf_transformation,[],[f99])).
fof(f99,plain,(
  s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3])],[f91])).
fof(f91,plain,(
  ? [X0,X1,X2] : s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1))) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.closSem.state'(X0),X1)))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2] : s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1))) = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.closSem.state'(X0),X1)))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ~! [X0] : ! [X1,X2] : s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1))) = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.closSem.state'(X0),X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X7))) = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X8),s('type.closSem.state'(X6),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X7))) = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X8),s('type.closSem.state'(X6),X7)))))),
  file('thm.clos_knownProof.ssgc_free_clockupd','thm.clos_knownProof.ssgc_free_clockupd')).
fof(f173,plain,(
  s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) | $spl0),
  inference(cnf_transformation,[],[f173_D])).
fof(f173_D,plain,(
  s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f175,plain,(
  s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | $spl3),
  inference(cnf_transformation,[],[f175_D])).
fof(f175_D,plain,(
  s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f4112,plain,(
  s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))),
  inference(superposition,[],[f111,f164])).
fof(f347,plain,(
  ( ! [X13] : (s(bool,'F_0') != s(bool,X13) | ~p(s(bool,X13))) ) | $spl24),
  inference(cnf_transformation,[],[f347_D])).
fof(f347_D,plain,(
  ( ! [X13] : (s(bool,'F_0') != s(bool,X13) | ~p(s(bool,X13))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f4103,plain,(
  ( ! [X24,X25] : (p(s(bool,X24)) | ~p(s(bool,X25)) | s(bool,'F_0') != s(bool,X25)) )),
  inference(resolution,[],[f165,f168])).
fof(f4102,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,'F_0') != s(bool,X22) | s(bool,X21) != s(bool,X23)) )),
  inference(resolution,[],[f165,f119])).
fof(f4100,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,X15)) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,'F_0') != s(bool,X16)) )),
  inference(resolution,[],[f165,f118])).
fof(f4098,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,'F_0') != s(bool,X10)) )),
  inference(resolution,[],[f165,f117])).
fof(f4097,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,'F_0') != s(bool,X7) | s(bool,X6) != s(bool,X8)) )),
  inference(resolution,[],[f165,f115])).
fof(f4095,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,'F_0') != s(bool,X1)) )),
  inference(resolution,[],[f165,f113])).
fof(f4053,plain,(
  $false | ($spl0 | $spl4 | $spl33 | $spl50 | $spl161)),
  inference(subsumption_resolution,[],[f3984,f3635])).
fof(f3984,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | ($spl0 | $spl4 | $spl33 | $spl50)),
  inference(backward_demodulation,[],[f3952,f3381])).
fof(f3952,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f173,f177])).
fof(f4052,plain,(
  $false | ($spl0 | $spl4 | $spl129)),
  inference(subsumption_resolution,[],[f3983,f1907])).
fof(f3983,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | ($spl0 | $spl4 | $spl129)),
  inference(backward_demodulation,[],[f3952,f3169])).
fof(f4047,plain,(
  $false | ($spl0 | $spl4)),
  inference(subsumption_resolution,[],[f3973,f167])).
fof(f3973,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl4)),
  inference(backward_demodulation,[],[f3952,f165])).
fof(f178,plain,(
  s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | $spl6),
  inference(cnf_transformation,[],[f178_D])).
fof(f178_D,plain,(
  s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f3950,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl122),
  inference(subsumption_resolution,[],[f2062,f164])).
fof(f2062,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl122),
  inference(superposition,[],[f1901,f164])).
fof(f3919,plain,(
  sP0(sK1,sK2) | $spl184),
  inference(cnf_transformation,[],[f3919_D])).
fof(f3919_D,plain,(
  sP0(sK1,sK2) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f2429,plain,(
  ( ! [X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1))))))) ) | $spl140),
  inference(cnf_transformation,[],[f2429_D])).
fof(f2429_D,plain,(
  ( ! [X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1))))))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f3926,plain,(
  ( ! [X2] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X2),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | sP0(sK1,sK2)) ) | ($spl4 | $spl24 | $spl33 | $spl35 | $spl36 | $spl50)),
  inference(subsumption_resolution,[],[f3925,f169])).
fof(f3925,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X2),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | sP0(sK1,sK2)) ) | ($spl4 | $spl24 | $spl33 | $spl35 | $spl36 | $spl50)),
  inference(forward_demodulation,[],[f3924,f2895])).
fof(f2895,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | ($spl24 | $spl36)),
  inference(resolution,[],[f396,f484])).
fof(f396,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | $spl36),
  inference(cnf_transformation,[],[f396_D])).
fof(f396_D,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f3924,plain,(
  ( ! [X2] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X2),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | sP0(sK1,sK2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) ) | ($spl4 | $spl33 | $spl35 | $spl50)),
  inference(subsumption_resolution,[],[f3923,f165])).
fof(f3923,plain,(
  ( ! [X2] : (p(s(bool,'F_0')) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X2),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | sP0(sK1,sK2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) ) | ($spl4 | $spl33 | $spl35 | $spl50)),
  inference(forward_demodulation,[],[f3837,f3381])).
fof(f3837,plain,(
  ( ! [X2] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X2),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | sP0(sK1,sK2) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) ) | ($spl4 | $spl35)),
  inference(superposition,[],[f3824,f148])).
fof(f3824,plain,(
  ( ! [X45,X44] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X44),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',X45)))) ) | ($spl4 | $spl35)),
  inference(forward_demodulation,[],[f3823,f122])).
fof(f3823,plain,(
  ( ! [X45,X44] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X44),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',X45)))) ) | ($spl4 | $spl35)),
  inference(resolution,[],[f2742,f633])).
fof(f633,plain,(
  sP0(sK1,'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))) | $spl4),
  inference(subsumption_resolution,[],[f589,f169])).
fof(f589,plain,(
  ~p(s(bool,'T_0')) | sP0(sK1,'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))) | $spl4),
  inference(superposition,[],[f154,f177])).
fof(f3920,plain,(
  ~sP0(sK1,sK2) | $spl185),
  inference(cnf_transformation,[],[f3920_D])).
fof(f3920_D,plain,(
  ~sP0(sK1,sK2) <=> ~$spl185),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl185])])).
fof(f3921,plain,(
  ( ! [X0] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X0))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X0))))) ) | $spl186),
  inference(cnf_transformation,[],[f3921_D])).
fof(f3921_D,plain,(
  ( ! [X0] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X0))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X0))))) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f3862,plain,(
  ( ! [X0] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X0))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X0)))) | ~sP0(sK1,sK2)) ) | $spl30),
  inference(superposition,[],[f144,f391])).
fof(f3892,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl171),
  inference(cnf_transformation,[],[f3892_D])).
fof(f3892_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl171),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl171])])).
fof(f3918,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,X0))) ) | $spl24),
  inference(subsumption_resolution,[],[f477,f347])).
fof(f477,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl24),
  inference(superposition,[],[f347,f164])).
fof(f3916,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,X1))) ) | $spl10),
  inference(subsumption_resolution,[],[f1044,f246])).
fof(f1044,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,X1)) | s(bool,'T_0') = s(bool,X1)) ) | $spl10),
  inference(superposition,[],[f246,f164])).
fof(f3915,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,X0))) ) | $spl24),
  inference(subsumption_resolution,[],[f1057,f347])).
fof(f1057,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl24),
  inference(superposition,[],[f347,f164])).
fof(f3913,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X3) | s(bool,X2) != s(bool,X3)) ) | $spl116),
  inference(subsumption_resolution,[],[f1782,f1772])).
fof(f1782,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X3) | s(bool,X2) != s(bool,X3) | s(bool,'T_0') = s(bool,X2)) ) | $spl116),
  inference(superposition,[],[f1772,f164])).
fof(f3912,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,X7)) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6)))) ) | $spl182),
  inference(cnf_transformation,[],[f3912_D])).
fof(f3912_D,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,X7)) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6)))) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f3911,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,X7)) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6)))) ) | ($spl58 | $spl104)),
  inference(subsumption_resolution,[],[f1794,f1529])).
fof(f1529,plain,(
  ( ! [X19,X20,X18] : (s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X19),X20))) | p(s(bool,X18)) | s(bool,X18) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X19),X20)))) ) | ($spl58 | $spl104)),
  inference(resolution,[],[f941,f1511])).
fof(f1794,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,X7)) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6))) | s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6)))) ) | ($spl58 | $spl104)),
  inference(superposition,[],[f1529,f164])).
fof(f1864,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X1)) ) | $spl4),
  inference(forward_demodulation,[],[f1863,f177])).
fof(f1863,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) | s(bool,'T_0') = s(bool,X1)) ) | $spl4),
  inference(duplicate_literal_removal,[],[f1856])).
fof(f1856,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl4),
  inference(superposition,[],[f1579,f164])).
fof(f1579,plain,(
  ( ! [X8] : (s(bool,X8) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) | s(bool,'T_0') = s(bool,X8)) ) | $spl4),
  inference(subsumption_resolution,[],[f1574,f169])).
fof(f1574,plain,(
  ( ! [X8] : (~p(s(bool,'T_0')) | s(bool,X8) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) | s(bool,'T_0') = s(bool,X8)) ) | $spl4),
  inference(superposition,[],[f1271,f177])).
fof(f2066,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,'F_0') = s(bool,X0)) ) | $spl122),
  inference(duplicate_literal_removal,[],[f2056])).
fof(f2056,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0)) ) | $spl122),
  inference(superposition,[],[f1901,f164])).
fof(f3905,plain,(
  ( ! [X127] : (s(bool,'T_0') = s(bool,X127) | s(bool,X127) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | $spl180),
  inference(cnf_transformation,[],[f3905_D])).
fof(f3905_D,plain,(
  ( ! [X127] : (s(bool,'T_0') = s(bool,X127) | s(bool,X127) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f3245,plain,(
  ( ! [X127] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X127) | s(bool,X127) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | ($spl116 | $spl129)),
  inference(superposition,[],[f1772,f3169])).
fof(f3363,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X1)) ) | ($spl24 | $spl36)),
  inference(forward_demodulation,[],[f3362,f2895])).
fof(f3362,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | s(bool,'T_0') = s(bool,X1)) ) | $spl36),
  inference(duplicate_literal_removal,[],[f3354])).
fof(f3354,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl36),
  inference(superposition,[],[f2896,f164])).
fof(f2896,plain,(
  ( ! [X26] : (s(bool,X26) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | s(bool,'T_0') = s(bool,X26)) ) | $spl36),
  inference(resolution,[],[f396,f1271])).
fof(f3901,plain,(
  ( ! [X125] : (s(bool,'T_0') = s(bool,X125) | s(bool,X125) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl178),
  inference(cnf_transformation,[],[f3901_D])).
fof(f3901_D,plain,(
  ( ! [X125] : (s(bool,'T_0') = s(bool,X125) | s(bool,X125) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f3455,plain,(
  ( ! [X125] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X125) | s(bool,X125) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | ($spl33 | $spl50 | $spl116)),
  inference(superposition,[],[f1772,f3381])).
fof(f3897,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3))))))))) ) | $spl176),
  inference(cnf_transformation,[],[f3897_D])).
fof(f3897_D,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3))))))))) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f3896,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3))))))))) ) | ($spl104 | $spl129)),
  inference(subsumption_resolution,[],[f3686,f3537])).
fof(f3537,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X20),X21))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X20),X21))))))))) ) | ($spl104 | $spl129)),
  inference(resolution,[],[f3253,f1511])).
fof(f3686,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3)))))))) | s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X2),X3)))) ) | ($spl104 | $spl129)),
  inference(superposition,[],[f3537,f164])).
fof(f3700,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | ($spl50 | $spl129 | $spl161)),
  inference(superposition,[],[f3635,f3673])).
fof(f3894,plain,(
  ( ! [X200,X199] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X199),X200)))) ) | ($spl10 | $spl50 | $spl129)),
  inference(subsumption_resolution,[],[f3745,f3536])).
fof(f3745,plain,(
  ( ! [X200,X199] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X199),X200)))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X199),X200)))) ) | ($spl10 | $spl50 | $spl129)),
  inference(superposition,[],[f246,f3673])).
fof(f3890,plain,(
  ( ! [X261,X260] : (s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X260),X261))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X260),X261)))) ) | $spl168),
  inference(cnf_transformation,[],[f3890_D])).
fof(f3890_D,plain,(
  ( ! [X261,X260] : (s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X260),X261))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X260),X261)))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f3789,plain,(
  ( ! [X241,X240] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X240),X241))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X240),X241)))) ) | ($spl4 | $spl50 | $spl129)),
  inference(forward_demodulation,[],[f3759,f177])).
fof(f3759,plain,(
  ( ! [X241,X240] : (s(bool,'F_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X240),X241))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X240),X241)))) ) | ($spl4 | $spl50 | $spl129)),
  inference(superposition,[],[f1579,f3673])).
fof(f3893,plain,(
  ( ! [X243,X244,X242] : (s(bool,'T_0') = s(bool,X244) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X242),X243))) | s(bool,X244) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X242),X243)))))))) ) | $spl172),
  inference(cnf_transformation,[],[f3893_D])).
fof(f3893_D,plain,(
  ( ! [X243,X244,X242] : (s(bool,'T_0') = s(bool,X244) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X242),X243))) | s(bool,X244) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X242),X243)))))))) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f3760,plain,(
  ( ! [X243,X244,X242] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,X244) | s(bool,X244) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X242),X243))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X242),X243)))) ) | ($spl50 | $spl116 | $spl129)),
  inference(superposition,[],[f1772,f3673])).
fof(f1904,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,X4) | s(bool,'F_0') = s(bool,X5) | s(bool,X4) != s(bool,X5)) ) | $spl126),
  inference(cnf_transformation,[],[f1904_D])).
fof(f1904_D,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') != s(bool,X4) | s(bool,'F_0') = s(bool,X5) | s(bool,X4) != s(bool,X5)) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f3762,plain,(
  ( ! [X251,X249,X252,X250] : (s(bool,'F_0') != s(bool,X251) | s(bool,X251) != s(bool,X252) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X249),X250))))))) | s(bool,'F_0') = s(bool,X252) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X249),X250)))) ) | ($spl50 | $spl106 | $spl129)),
  inference(superposition,[],[f1773,f3673])).
fof(f3792,plain,(
  ( ! [X261,X260] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X260),X261))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X260),X261)))) ) | ($spl24 | $spl36 | $spl50 | $spl129)),
  inference(forward_demodulation,[],[f3766,f2895])).
fof(f3766,plain,(
  ( ! [X261,X260] : (s(bool,'F_0') != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X260),X261))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X260),X261)))) ) | ($spl36 | $spl50 | $spl129)),
  inference(superposition,[],[f2896,f3673])).
fof(f3889,plain,(
  $false | ($spl4 | $spl6 | $spl24 | $spl33 | $spl35 | $spl36 | $spl50)),
  inference(equality_resolution,[],[f3850])).
fof(f3850,plain,(
  ( ! [X2] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X2),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1))))))) ) | ($spl4 | $spl6 | $spl24 | $spl33 | $spl35 | $spl36 | $spl50)),
  inference(subsumption_resolution,[],[f3849,f169])).
fof(f3849,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X2),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1))))))) ) | ($spl4 | $spl6 | $spl24 | $spl33 | $spl35 | $spl36 | $spl50)),
  inference(forward_demodulation,[],[f3848,f2895])).
fof(f3848,plain,(
  ( ! [X2] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X2),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) ) | ($spl4 | $spl6 | $spl33 | $spl35 | $spl50)),
  inference(subsumption_resolution,[],[f3847,f165])).
fof(f3847,plain,(
  ( ! [X2] : (p(s(bool,'F_0')) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X2),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) ) | ($spl4 | $spl6 | $spl33 | $spl35 | $spl50)),
  inference(forward_demodulation,[],[f3846,f3381])).
fof(f3846,plain,(
  ( ! [X2] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X2),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) ) | ($spl4 | $spl6 | $spl35)),
  inference(subsumption_resolution,[],[f3837,f342])).
fof(f342,plain,(
  ~sP0(sK1,sK2) | $spl6),
  inference(subsumption_resolution,[],[f301,f165])).
fof(f301,plain,(
  p(s(bool,'F_0')) | ~sP0(sK1,sK2) | $spl6),
  inference(superposition,[],[f155,f178])).
fof(f3879,plain,(
  ( ! [X6,X8,X7,X5,X11,X9] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X5))) | s(bool,X11) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X7),X8))) | ~p(s(bool,X11)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X5))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X7),X8))),s('type.num.num',X9)))) ) | $spl166),
  inference(cnf_transformation,[],[f3879_D])).
fof(f3879_D,plain,(
  ( ! [X6,X8,X7,X5,X11,X9] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X5))) | s(bool,X11) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X7),X8))) | ~p(s(bool,X11)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X5))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X7),X8))),s('type.num.num',X9)))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f3872,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X69))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X70),s('type.closLang.exp',X69))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X71),X72))),s('type.num.num',X73))) | p(s(bool,X74)) | ~p(s(bool,X75)) | s(bool,X75) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X71),X72)))) )),
  inference(resolution,[],[f905,f168])).
fof(f905,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X2))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X3),s('type.closLang.exp',X2))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X4)))) )),
  inference(resolution,[],[f154,f143])).
fof(f3871,plain,(
  ( ! [X61,X68,X66,X64,X62,X67,X65,X63] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X61))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X62),s('type.closLang.exp',X61))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X63),X64))),s('type.num.num',X65))) | ~p(s(bool,X66)) | ~p(s(bool,X67)) | s(bool,X67) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X63),X64))) | s(bool,X66) != s(bool,X68)) )),
  inference(resolution,[],[f905,f119])).
fof(f3869,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X51,X49] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X45))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X46),s('type.closLang.exp',X45))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X47),X48))),s('type.num.num',X49))) | p(s(bool,X50)) | ~p(s(bool,X51)) | ~p(s(bool,X52)) | s(bool,X51) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X47),X48)))) )),
  inference(resolution,[],[f905,f118])).
fof(f3867,plain,(
  ( ! [X30,X35,X33,X31,X29,X36,X34,X32] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X29))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X30),s('type.closLang.exp',X29))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X31),X32))),s('type.num.num',X33))) | p(s(bool,X34)) | ~p(s(bool,X35)) | s(bool,X34) != s(bool,X36) | s(bool,X35) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X31),X32)))) )),
  inference(resolution,[],[f905,f117])).
fof(f3866,plain,(
  ( ! [X28,X26,X24,X23,X21,X27,X25,X22] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X21))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X22),s('type.closLang.exp',X21))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X23),X24))),s('type.num.num',X25))) | ~p(s(bool,X26)) | ~p(s(bool,X27)) | s(bool,X27) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X23),X24))) | s(bool,X26) != s(bool,X28)) )),
  inference(resolution,[],[f905,f115])).
fof(f3864,plain,(
  ( ! [X6,X12,X10,X8,X7,X5,X11,X9] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X5))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X5))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X7),X8))),s('type.num.num',X9))) | p(s(bool,X10)) | ~p(s(bool,X11)) | s(bool,X10) != s(bool,X12) | s(bool,X11) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X7),X8)))) )),
  inference(resolution,[],[f905,f113])).
fof(f391,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | $spl30),
  inference(cnf_transformation,[],[f391_D])).
fof(f391_D,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f3861,plain,(
  ( ! [X0] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1))))) ) | ($spl4 | $spl6 | $spl33 | $spl35 | $spl50)),
  inference(subsumption_resolution,[],[f3860,f165])).
fof(f3860,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1))))) ) | ($spl4 | $spl6 | $spl33 | $spl35 | $spl50)),
  inference(forward_demodulation,[],[f3839,f3381])).
fof(f3839,plain,(
  ( ! [X0] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1))))) ) | ($spl4 | $spl6 | $spl35)),
  inference(subsumption_resolution,[],[f3835,f342])).
fof(f3835,plain,(
  ( ! [X0] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | sP0(sK1,sK2) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1))))) ) | ($spl4 | $spl35)),
  inference(superposition,[],[f3824,f146])).
fof(f3858,plain,(
  $false | ($spl4 | $spl6 | $spl31 | $spl33 | $spl35 | $spl50)),
  inference(equality_resolution,[],[f3842])).
fof(f3842,plain,(
  ( ! [X0] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1))))))) ) | ($spl4 | $spl6 | $spl31 | $spl33 | $spl35 | $spl50)),
  inference(subsumption_resolution,[],[f3841,f165])).
fof(f3841,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1))))))) ) | ($spl4 | $spl6 | $spl31 | $spl33 | $spl35 | $spl50)),
  inference(forward_demodulation,[],[f3840,f3381])).
fof(f3840,plain,(
  ( ! [X0] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))))) ) | ($spl4 | $spl6 | $spl31 | $spl35)),
  inference(subsumption_resolution,[],[f3839,f390])).
fof(f390,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | $spl31),
  inference(cnf_transformation,[],[f390_D])).
fof(f390_D,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f3790,plain,(
  ( ! [X246,X248,X247,X245] : (s(bool,X248) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X245),X246))))))) | s(bool,'T_0') = s(bool,X247) | s(bool,'F_0') = s(bool,X248) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X245),X246)))) ) | ($spl50 | $spl106 | $spl129)),
  inference(subsumption_resolution,[],[f3761,f164])).
fof(f3761,plain,(
  ( ! [X246,X248,X247,X245] : (s(bool,'F_0') != s(bool,X247) | s(bool,X248) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X245),X246))))))) | s(bool,'T_0') = s(bool,X247) | s(bool,'F_0') = s(bool,X248) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X245),X246)))) ) | ($spl50 | $spl106 | $spl129)),
  inference(superposition,[],[f1773,f3673])).
fof(f3785,plain,(
  ( ! [X189,X187,X190,X188] : (p(s(bool,X189)) | ~p(s(bool,X190)) | s(bool,X190) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X187),X188))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X187),X188)))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f3742,f165])).
fof(f3742,plain,(
  ( ! [X189,X187,X190,X188] : (p(s(bool,'F_0')) | p(s(bool,X189)) | ~p(s(bool,X190)) | s(bool,X190) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X187),X188))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X187),X188)))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f168,f3673])).
fof(f3783,plain,(
  ( ! [X163,X161,X164,X162,X160] : (~p(s(bool,X162)) | ~p(s(bool,X163)) | s(bool,X163) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X160),X161))))))) | s(bool,X162) != s(bool,X164) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X160),X161)))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f3736,f165])).
fof(f3736,plain,(
  ( ! [X163,X161,X164,X162,X160] : (p(s(bool,'F_0')) | ~p(s(bool,X162)) | ~p(s(bool,X163)) | s(bool,X163) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X160),X161))))))) | s(bool,X162) != s(bool,X164) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X160),X161)))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f119,f3673])).
fof(f3780,plain,(
  ( ! [X123,X121,X124,X122,X120] : (p(s(bool,X122)) | ~p(s(bool,X123)) | ~p(s(bool,X124)) | s(bool,X123) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X120),X121))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X120),X121)))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f3728,f165])).
fof(f3728,plain,(
  ( ! [X123,X121,X124,X122,X120] : (p(s(bool,'F_0')) | p(s(bool,X122)) | ~p(s(bool,X123)) | ~p(s(bool,X124)) | s(bool,X123) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X120),X121))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X120),X121)))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f118,f3673])).
fof(f3778,plain,(
  ( ! [X99,X97,X95,X98,X96] : (p(s(bool,X97)) | ~p(s(bool,X98)) | s(bool,X97) != s(bool,X99) | s(bool,X98) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X95),X96))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X95),X96)))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f3723,f165])).
fof(f3723,plain,(
  ( ! [X99,X97,X95,X98,X96] : (p(s(bool,'F_0')) | p(s(bool,X97)) | ~p(s(bool,X98)) | s(bool,X97) != s(bool,X99) | s(bool,X98) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X95),X96))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X95),X96)))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f117,f3673])).
fof(f3775,plain,(
  ( ! [X61,X64,X62,X60,X63] : (~p(s(bool,X62)) | ~p(s(bool,X63)) | s(bool,X63) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X60),X61))))))) | s(bool,X62) != s(bool,X64) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X60),X61)))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f3716,f165])).
fof(f3716,plain,(
  ( ! [X61,X64,X62,X60,X63] : (p(s(bool,'F_0')) | ~p(s(bool,X62)) | ~p(s(bool,X63)) | s(bool,X63) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X60),X61))))))) | s(bool,X62) != s(bool,X64) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X60),X61)))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f115,f3673])).
fof(f3773,plain,(
  ( ! [X28,X26,X29,X27,X25] : (p(s(bool,X27)) | ~p(s(bool,X28)) | s(bool,X27) != s(bool,X29) | s(bool,X28) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X25),X26))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X25),X26)))) ) | ($spl50 | $spl129)),
  inference(subsumption_resolution,[],[f3709,f165])).
fof(f3709,plain,(
  ( ! [X28,X26,X29,X27,X25] : (p(s(bool,'F_0')) | p(s(bool,X27)) | ~p(s(bool,X28)) | s(bool,X27) != s(bool,X29) | s(bool,X28) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X25),X26))))))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X25),X26)))) ) | ($spl50 | $spl129)),
  inference(superposition,[],[f113,f3673])).
fof(f3671,plain,(
  ( ! [X43,X41,X42,X40] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X40),X41))) | p(s(bool,X42)) | ~p(s(bool,X43)) | s(bool,X43) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X40),X41)))))))) ) | $spl129),
  inference(resolution,[],[f3536,f168])).
fof(f3670,plain,(
  ( ! [X39,X37,X35,X38,X36] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X35),X36))) | ~p(s(bool,X37)) | ~p(s(bool,X38)) | s(bool,X38) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X35),X36))))))) | s(bool,X37) != s(bool,X39)) ) | $spl129),
  inference(resolution,[],[f3536,f119])).
fof(f3668,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X25),X26))) | p(s(bool,X27)) | ~p(s(bool,X28)) | ~p(s(bool,X29)) | s(bool,X28) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X25),X26)))))))) ) | $spl129),
  inference(resolution,[],[f3536,f118])).
fof(f3666,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X15),X16))) | p(s(bool,X17)) | ~p(s(bool,X18)) | s(bool,X17) != s(bool,X19) | s(bool,X18) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X15),X16)))))))) ) | $spl129),
  inference(resolution,[],[f3536,f117])).
fof(f3665,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X10),X11))) | ~p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X13) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X10),X11))))))) | s(bool,X12) != s(bool,X14)) ) | $spl129),
  inference(resolution,[],[f3536,f115])).
fof(f3663,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1))) | p(s(bool,X2)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X4) | s(bool,X3) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))))) ) | $spl129),
  inference(resolution,[],[f3536,f113])).
fof(f3635,plain,(
  s(bool,'T_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | $spl161),
  inference(cnf_transformation,[],[f3635_D])).
fof(f3635_D,plain,(
  s(bool,'T_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) <=> ~$spl161),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl161])])).
fof(f3633,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'F_0') = s(bool,X0)) ) | $spl156),
  inference(duplicate_literal_removal,[],[f3625])).
fof(f3625,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0)) ) | $spl156),
  inference(superposition,[],[f3506,f164])).
fof(f3615,plain,(
  ( ! [X2,X5,X3] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3)))))))) | s(bool,X5) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X2),X3))) | ~p(s(bool,X5))) ) | $spl158),
  inference(cnf_transformation,[],[f3615_D])).
fof(f3615_D,plain,(
  ( ! [X2,X5,X3] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3)))))))) | s(bool,X5) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X2),X3))) | ~p(s(bool,X5))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f3608,plain,(
  ( ! [X45,X43,X44,X42] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X42),X43)))))))) | p(s(bool,X44)) | ~p(s(bool,X45)) | s(bool,X45) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X42),X43)))) ) | $spl129),
  inference(resolution,[],[f3535,f168])).
fof(f3607,plain,(
  ( ! [X39,X37,X41,X38,X40] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X37),X38)))))))) | ~p(s(bool,X39)) | ~p(s(bool,X40)) | s(bool,X40) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X37),X38))) | s(bool,X39) != s(bool,X41)) ) | $spl129),
  inference(resolution,[],[f3535,f119])).
fof(f3605,plain,(
  ( ! [X30,X28,X31,X29,X27] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X27),X28)))))))) | p(s(bool,X29)) | ~p(s(bool,X30)) | ~p(s(bool,X31)) | s(bool,X30) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X27),X28)))) ) | $spl129),
  inference(resolution,[],[f3535,f118])).
fof(f3603,plain,(
  ( ! [X21,X19,X17,X20,X18] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X17),X18)))))))) | p(s(bool,X19)) | ~p(s(bool,X20)) | s(bool,X19) != s(bool,X21) | s(bool,X20) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X17),X18)))) ) | $spl129),
  inference(resolution,[],[f3535,f117])).
fof(f3602,plain,(
  ( ! [X14,X12,X15,X13,X16] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X12),X13)))))))) | ~p(s(bool,X14)) | ~p(s(bool,X15)) | s(bool,X15) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X12),X13))) | s(bool,X14) != s(bool,X16)) ) | $spl129),
  inference(resolution,[],[f3535,f115])).
fof(f3600,plain,(
  ( ! [X6,X4,X2,X5,X3] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3)))))))) | p(s(bool,X4)) | ~p(s(bool,X5)) | s(bool,X4) != s(bool,X6) | s(bool,X5) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X2),X3)))) ) | $spl129),
  inference(resolution,[],[f3535,f113])).
fof(f3557,plain,(
  $false | ($spl6 | $spl24 | $spl33 | $spl50 | $spl120)),
  inference(trivial_inequality_removal,[],[f3550])).
fof(f3550,plain,(
  s(bool,'F_0') != s(bool,'F_0') | ($spl6 | $spl24 | $spl33 | $spl50 | $spl120)),
  inference(superposition,[],[f3542,f178])).
fof(f3542,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1)) ) | ($spl24 | $spl33 | $spl50 | $spl120)),
  inference(subsumption_resolution,[],[f3541,f347])).
fof(f3541,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | p(s(bool,X1))) ) | ($spl33 | $spl50 | $spl120)),
  inference(forward_demodulation,[],[f1880,f3381])).
fof(f3556,plain,(
  $false | ($spl24 | $spl33 | $spl50 | $spl120 | $spl129)),
  inference(trivial_inequality_removal,[],[f3551])).
fof(f3551,plain,(
  s(bool,'F_0') != s(bool,'F_0') | ($spl24 | $spl33 | $spl50 | $spl120 | $spl129)),
  inference(superposition,[],[f3542,f3169])).
fof(f3555,plain,(
  $false | ($spl24 | $spl33 | $spl50 | $spl120)),
  inference(trivial_inequality_removal,[],[f3553])).
fof(f3553,plain,(
  s(bool,'F_0') != s(bool,'F_0') | ($spl24 | $spl33 | $spl50 | $spl120)),
  inference(superposition,[],[f3542,f3381])).
fof(f3554,plain,(
  $false | ($spl24 | $spl33 | $spl50 | $spl120)),
  inference(equality_resolution,[],[f3542])).
fof(f3505,plain,(
  ( ! [X127,X126] : (s(bool,X127) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,X126) | s(bool,'F_0') = s(bool,X127)) ) | ($spl33 | $spl50 | $spl106)),
  inference(subsumption_resolution,[],[f3456,f164])).
fof(f3456,plain,(
  ( ! [X127,X126] : (s(bool,'F_0') != s(bool,X126) | s(bool,X127) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,'T_0') = s(bool,X126) | s(bool,'F_0') = s(bool,X127)) ) | ($spl33 | $spl50 | $spl106)),
  inference(superposition,[],[f1773,f3381])).
fof(f389,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl28),
  inference(cnf_transformation,[],[f389_D])).
fof(f389_D,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f3465,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl6 | $spl33 | $spl50)),
  inference(subsumption_resolution,[],[f3464,f342])).
fof(f3464,plain,(
  sP0(sK1,sK2) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl33 | $spl50)),
  inference(subsumption_resolution,[],[f3395,f165])).
fof(f3395,plain,(
  p(s(bool,'F_0')) | sP0(sK1,sK2) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl33 | $spl50)),
  inference(superposition,[],[f146,f3381])).
fof(f3379,plain,(
  ( ! [X24,X25] : (p(s(bool,X24)) | ~p(s(bool,X25)) | s(bool,X25) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl33),
  inference(resolution,[],[f392,f168])).
fof(f3378,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X22) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X21) != s(bool,X23)) ) | $spl33),
  inference(resolution,[],[f392,f119])).
fof(f3376,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,X15)) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,X16) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl33),
  inference(resolution,[],[f392,f118])).
fof(f3374,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,X10) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl33),
  inference(resolution,[],[f392,f117])).
fof(f3373,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X7) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X6) != s(bool,X8)) ) | $spl33),
  inference(resolution,[],[f392,f115])).
fof(f3371,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,X1) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl33),
  inference(resolution,[],[f392,f113])).
fof(f3384,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl6 | $spl33)),
  inference(subsumption_resolution,[],[f3367,f342])).
fof(f3367,plain,(
  sP0(sK1,sK2) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl33),
  inference(resolution,[],[f392,f146])).
fof(f3322,plain,(
  $false | ($spl24 | $spl36 | $spl142)),
  inference(resolution,[],[f3308,f167])).
fof(f3308,plain,(
  ( ! [X4] : (~p(s(bool,X4))) ) | ($spl24 | $spl36 | $spl142)),
  inference(subsumption_resolution,[],[f3307,f484])).
fof(f3307,plain,(
  ( ! [X4] : (s(bool,'T_0') != s(bool,X4) | ~p(s(bool,X4))) ) | ($spl24 | $spl36 | $spl142)),
  inference(forward_demodulation,[],[f2468,f2895])).
fof(f3323,plain,(
  $false | ($spl24 | $spl36 | $spl142)),
  inference(resolution,[],[f3308,f166])).
fof(f3324,plain,(
  $false | ($spl24 | $spl36 | $spl142)),
  inference(resolution,[],[f3308,f169])).
fof(f3304,plain,(
  $false | ($spl6 | $spl24 | $spl129 | $spl130)),
  inference(trivial_inequality_removal,[],[f3299])).
fof(f3299,plain,(
  s(bool,'F_0') != s(bool,'F_0') | ($spl6 | $spl24 | $spl129 | $spl130)),
  inference(superposition,[],[f3291,f178])).
fof(f3291,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1)) ) | ($spl24 | $spl129 | $spl130)),
  inference(subsumption_resolution,[],[f3290,f347])).
fof(f3290,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | p(s(bool,X1))) ) | ($spl129 | $spl130)),
  inference(forward_demodulation,[],[f1943,f3169])).
fof(f3303,plain,(
  $false | ($spl24 | $spl129 | $spl130)),
  inference(trivial_inequality_removal,[],[f3300])).
fof(f3300,plain,(
  s(bool,'F_0') != s(bool,'F_0') | ($spl24 | $spl129 | $spl130)),
  inference(superposition,[],[f3291,f3169])).
fof(f3302,plain,(
  $false | ($spl24 | $spl129 | $spl130)),
  inference(equality_resolution,[],[f3291])).
fof(f3288,plain,(
  ( ! [X128,X129] : (s(bool,X129) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,'T_0') = s(bool,X128) | s(bool,'F_0') = s(bool,X129)) ) | ($spl106 | $spl129)),
  inference(subsumption_resolution,[],[f3246,f164])).
fof(f3246,plain,(
  ( ! [X128,X129] : (s(bool,'F_0') != s(bool,X128) | s(bool,X129) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,'T_0') = s(bool,X128) | s(bool,'F_0') = s(bool,X129)) ) | ($spl106 | $spl129)),
  inference(superposition,[],[f1773,f3169])).
fof(f399,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | $spl39),
  inference(cnf_transformation,[],[f399_D])).
fof(f399_D,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) <=> ~$spl39),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl39])])).
fof(f3088,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl6 | $spl24 | $spl36)),
  inference(subsumption_resolution,[],[f3087,f342])).
fof(f3087,plain,(
  sP0(sK1,sK2) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl24 | $spl36)),
  inference(subsumption_resolution,[],[f3020,f169])).
fof(f3020,plain,(
  ~p(s(bool,'T_0')) | sP0(sK1,sK2) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl24 | $spl36)),
  inference(superposition,[],[f152,f2895])).
fof(f3148,plain,(
  $false | ($spl24 | $spl46 | $spl128)),
  inference(resolution,[],[f3136,f167])).
fof(f3136,plain,(
  ( ! [X3] : (~p(s(bool,X3))) ) | ($spl24 | $spl46 | $spl128)),
  inference(subsumption_resolution,[],[f3135,f484])).
fof(f3135,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3) | ~p(s(bool,X3))) ) | ($spl46 | $spl128)),
  inference(forward_demodulation,[],[f530,f1908])).
fof(f3149,plain,(
  $false | ($spl24 | $spl46 | $spl128)),
  inference(resolution,[],[f3136,f166])).
fof(f3150,plain,(
  $false | ($spl24 | $spl46 | $spl128)),
  inference(resolution,[],[f3136,f169])).
fof(f3133,plain,(
  $false | ($spl3 | $spl24 | $spl36 | $spl150)),
  inference(subsumption_resolution,[],[f3132,f183])).
fof(f183,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl3),
  inference(subsumption_resolution,[],[f181,f175])).
fof(f181,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | $spl3),
  inference(superposition,[],[f175,f164])).
fof(f3132,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl24 | $spl36 | $spl150)),
  inference(forward_demodulation,[],[f2881,f2895])).
fof(f393,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | $spl32),
  inference(cnf_transformation,[],[f393_D])).
fof(f393_D,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f3086,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl6 | $spl24 | $spl36)),
  inference(subsumption_resolution,[],[f3085,f342])).
fof(f3085,plain,(
  sP0(sK1,sK2) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl24 | $spl36)),
  inference(subsumption_resolution,[],[f3019,f169])).
fof(f3019,plain,(
  ~p(s(bool,'T_0')) | sP0(sK1,sK2) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl24 | $spl36)),
  inference(superposition,[],[f148,f2895])).
fof(f2974,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl6 | $spl128)),
  inference(subsumption_resolution,[],[f2973,f342])).
fof(f2973,plain,(
  sP0(sK1,sK2) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl128),
  inference(subsumption_resolution,[],[f2906,f169])).
fof(f2906,plain,(
  ~p(s(bool,'T_0')) | sP0(sK1,sK2) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl128),
  inference(superposition,[],[f150,f1908])).
fof(f2904,plain,(
  $false | ($spl36 | $spl147)),
  inference(subsumption_resolution,[],[f2903,f2591])).
fof(f2903,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | $spl36),
  inference(subsumption_resolution,[],[f2898,f165])).
fof(f2898,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | $spl36),
  inference(superposition,[],[f396,f164])).
fof(f2902,plain,(
  $false | ($spl24 | $spl36 | $spl147)),
  inference(subsumption_resolution,[],[f2895,f2591])).
fof(f2901,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,X1) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) ) | $spl152),
  inference(cnf_transformation,[],[f2901_D])).
fof(f2901_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,X1) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f2894,plain,(
  ( ! [X24,X25] : (p(s(bool,X24)) | p(s(bool,X25)) | s(bool,X25) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) ) | $spl36),
  inference(resolution,[],[f396,f168])).
fof(f2893,plain,(
  ( ! [X23,X21,X22] : (p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X21) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | s(bool,X22) != s(bool,X23)) ) | $spl36),
  inference(resolution,[],[f396,f119])).
fof(f2890,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | p(s(bool,X14)) | s(bool,X14) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) ) | $spl36),
  inference(resolution,[],[f396,f118])).
fof(f2889,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,X10) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) ) | $spl36),
  inference(resolution,[],[f396,f117])).
fof(f2888,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X6) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | s(bool,X7) != s(bool,X8)) ) | $spl36),
  inference(resolution,[],[f396,f115])).
fof(f2886,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,X1) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) ) | $spl36),
  inference(resolution,[],[f396,f113])).
fof(f2900,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl6 | $spl36)),
  inference(subsumption_resolution,[],[f2883,f342])).
fof(f2883,plain,(
  sP0(sK1,sK2) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl36),
  inference(resolution,[],[f396,f152])).
fof(f2899,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl6 | $spl36)),
  inference(subsumption_resolution,[],[f2882,f342])).
fof(f2882,plain,(
  sP0(sK1,sK2) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl36),
  inference(resolution,[],[f396,f148])).
fof(f2881,plain,(
  s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | $spl150),
  inference(cnf_transformation,[],[f2881_D])).
fof(f2881_D,plain,(
  s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f2879,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) ) | $spl144),
  inference(subsumption_resolution,[],[f2585,f164])).
fof(f2585,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) ) | $spl144),
  inference(superposition,[],[f2576,f164])).
fof(f1908,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | $spl128),
  inference(cnf_transformation,[],[f1908_D])).
fof(f1908_D,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f2642,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl4 | $spl6)),
  inference(subsumption_resolution,[],[f2331,f342])).
fof(f2331,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | sP0(sK1,sK2) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl4),
  inference(resolution,[],[f1921,f146])).
fof(f1921,plain,(
  ( ! [X33] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X33))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X33)))) ) | $spl4),
  inference(forward_demodulation,[],[f1920,f125])).
fof(f1920,plain,(
  ( ! [X33] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X33))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X33)))) ) | $spl4),
  inference(resolution,[],[f1124,f633])).
fof(f397,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | $spl37),
  inference(cnf_transformation,[],[f397_D])).
fof(f397_D,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f2639,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl4 | $spl6)),
  inference(subsumption_resolution,[],[f2332,f342])).
fof(f2332,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | sP0(sK1,sK2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl4),
  inference(resolution,[],[f1921,f148])).
fof(f2833,plain,(
  $false | ($spl4 | $spl6 | $spl35 | $spl37)),
  inference(subsumption_resolution,[],[f2764,f167])).
fof(f2764,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl6 | $spl35 | $spl37)),
  inference(backward_demodulation,[],[f2644,f2633])).
fof(f2633,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | ($spl4 | $spl6 | $spl35 | $spl37)),
  inference(subsumption_resolution,[],[f2632,f2409])).
fof(f2409,plain,(
  ( ! [X45,X44] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X44),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',X45)))) ) | ($spl4 | $spl35)),
  inference(forward_demodulation,[],[f2408,f122])).
fof(f2408,plain,(
  ( ! [X45,X44] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X44),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',X45)))) ) | ($spl4 | $spl35)),
  inference(resolution,[],[f1946,f633])).
fof(f1946,plain,(
  ( ! [X2,X0,X3,X1] : (~sP0(X1,X2) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X1),X2))),s('type.num.num',X3)))) ) | $spl35),
  inference(trivial_inequality_removal,[],[f1945])).
fof(f1945,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X1),X2))),s('type.num.num',X3))) | ~sP0(X1,X2)) ) | $spl35),
  inference(superposition,[],[f395,f143])).
fof(f2644,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | ($spl4 | $spl6 | $spl35 | $spl37)),
  inference(subsumption_resolution,[],[f2643,f2409])).
fof(f2759,plain,(
  ( ! [X6,X4,X7,X5,X9] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X4))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',X7))) | s(bool,X9) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6))) | ~p(s(bool,X9)) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4))))) ) | $spl148),
  inference(cnf_transformation,[],[f2759_D])).
fof(f2759_D,plain,(
  ( ! [X6,X4,X7,X5,X9] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X4))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',X7))) | s(bool,X9) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6))) | ~p(s(bool,X9)) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4))))) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f2752,plain,(
  ( ! [X61,X64,X62,X60,X65,X63] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X60))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X61),X62))),s('type.num.num',X63))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X60)))) | p(s(bool,X64)) | ~p(s(bool,X65)) | s(bool,X65) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X61),X62)))) )),
  inference(resolution,[],[f1147,f168])).
fof(f1147,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6)))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X4))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',X7))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4))))) )),
  inference(resolution,[],[f144,f154])).
fof(f2751,plain,(
  ( ! [X59,X57,X54,X58,X56,X55,X53] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X53))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X54),X55))),s('type.num.num',X56))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X53)))) | ~p(s(bool,X57)) | ~p(s(bool,X58)) | s(bool,X58) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X54),X55))) | s(bool,X57) != s(bool,X59)) )),
  inference(resolution,[],[f1147,f119])).
fof(f2749,plain,(
  ( ! [X39,X45,X43,X41,X44,X42,X40] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X39))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X40),X41))),s('type.num.num',X42))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X39)))) | p(s(bool,X43)) | ~p(s(bool,X44)) | ~p(s(bool,X45)) | s(bool,X44) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X40),X41)))) )),
  inference(resolution,[],[f1147,f118])).
fof(f2747,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X25))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X26),X27))),s('type.num.num',X28))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X25)))) | p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X29) != s(bool,X31) | s(bool,X30) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X26),X27)))) )),
  inference(resolution,[],[f1147,f117])).
fof(f2746,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X18))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X19),X20))),s('type.num.num',X21))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X18)))) | ~p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X23) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X19),X20))) | s(bool,X22) != s(bool,X24)) )),
  inference(resolution,[],[f1147,f115])).
fof(f2744,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X9] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X4))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',X7))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X4)))) | p(s(bool,X8)) | ~p(s(bool,X9)) | s(bool,X8) != s(bool,X10) | s(bool,X9) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6)))) )),
  inference(resolution,[],[f1147,f113])).
fof(f530,plain,(
  ( ! [X3] : (~p(s(bool,X3)) | s(bool,X3) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | $spl46),
  inference(cnf_transformation,[],[f530_D])).
fof(f530_D,plain,(
  ( ! [X3] : (~p(s(bool,X3)) | s(bool,X3) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f2734,plain,(
  ( ! [X26,X27] : (p(s(bool,X26)) | ~p(s(bool,X27)) | s(bool,X27) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | ($spl4 | $spl6 | $spl35 | $spl37)),
  inference(resolution,[],[f2633,f168])).
fof(f2733,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,X23)) | ~p(s(bool,X24)) | s(bool,X24) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,X23) != s(bool,X25)) ) | ($spl4 | $spl6 | $spl35 | $spl37)),
  inference(resolution,[],[f2633,f119])).
fof(f2731,plain,(
  ( ! [X19,X17,X18] : (p(s(bool,X17)) | ~p(s(bool,X18)) | ~p(s(bool,X19)) | s(bool,X18) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | ($spl4 | $spl6 | $spl35 | $spl37)),
  inference(resolution,[],[f2633,f118])).
fof(f2729,plain,(
  ( ! [X12,X13,X11] : (p(s(bool,X11)) | ~p(s(bool,X12)) | s(bool,X11) != s(bool,X13) | s(bool,X12) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | ($spl4 | $spl6 | $spl35 | $spl37)),
  inference(resolution,[],[f2633,f117])).
fof(f2728,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,X8)) | ~p(s(bool,X9)) | s(bool,X9) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,X8) != s(bool,X10)) ) | ($spl4 | $spl6 | $spl35 | $spl37)),
  inference(resolution,[],[f2633,f115])).
fof(f2726,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,X2)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X4) | s(bool,X3) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | ($spl4 | $spl6 | $spl35 | $spl37)),
  inference(resolution,[],[f2633,f113])).
fof(f395,plain,(
  s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | $spl35),
  inference(cnf_transformation,[],[f395_D])).
fof(f395_D,plain,(
  s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f2681,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | ($spl4 | $spl6 | $spl37)),
  inference(subsumption_resolution,[],[f2624,f342])).
fof(f2624,plain,(
  sP0(sK1,sK2) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | ($spl4 | $spl37)),
  inference(trivial_inequality_removal,[],[f2623])).
fof(f2623,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) | sP0(sK1,sK2) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | ($spl4 | $spl37)),
  inference(superposition,[],[f2613,f151])).
fof(f2613,plain,(
  ( ! [X33] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',X33)))) ) | ($spl4 | $spl37)),
  inference(forward_demodulation,[],[f2612,f124])).
fof(f2612,plain,(
  ( ! [X33] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))),s('type.num.num',X33)))) ) | ($spl4 | $spl37)),
  inference(resolution,[],[f2454,f633])).
fof(f2454,plain,(
  ( ! [X2,X0,X1] : (~sP0(X0,X1) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X0),X1))),s('type.num.num',X2)))) ) | $spl37),
  inference(resolution,[],[f397,f144])).
fof(f2683,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | ($spl4 | $spl6 | $spl37)),
  inference(subsumption_resolution,[],[f2625,f342])).
fof(f2625,plain,(
  sP0(sK1,sK2) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | ($spl4 | $spl37)),
  inference(trivial_inequality_removal,[],[f2622])).
fof(f2622,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) | sP0(sK1,sK2) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | ($spl4 | $spl37)),
  inference(superposition,[],[f2613,f147])).
fof(f2632,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl4 | $spl6 | $spl37)),
  inference(subsumption_resolution,[],[f2626,f342])).
fof(f2626,plain,(
  sP0(sK1,sK2) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl4 | $spl37)),
  inference(trivial_inequality_removal,[],[f2621])).
fof(f2621,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) | sP0(sK1,sK2) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl4 | $spl37)),
  inference(superposition,[],[f2613,f150])).
fof(f2629,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl4 | $spl6 | $spl37)),
  inference(subsumption_resolution,[],[f2627,f342])).
fof(f2627,plain,(
  sP0(sK1,sK2) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl4 | $spl37)),
  inference(trivial_inequality_removal,[],[f2620])).
fof(f2620,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) | sP0(sK1,sK2) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl4 | $spl37)),
  inference(superposition,[],[f2613,f146])).
fof(f2712,plain,(
  $false | ($spl4 | $spl6 | $spl24 | $spl32 | $spl34 | $spl37)),
  inference(subsumption_resolution,[],[f2711,f2613])).
fof(f2711,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | ($spl4 | $spl6 | $spl24 | $spl32 | $spl34)),
  inference(subsumption_resolution,[],[f2710,f2304])).
fof(f2304,plain,(
  p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | ($spl4 | $spl24 | $spl32)),
  inference(subsumption_resolution,[],[f2295,f169])).
fof(f2295,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | ($spl4 | $spl24 | $spl32)),
  inference(superposition,[],[f2143,f1876])).
fof(f1876,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | ($spl24 | $spl32)),
  inference(resolution,[],[f393,f484])).
fof(f2143,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0))))) ) | $spl4),
  inference(forward_demodulation,[],[f2142,f125])).
fof(f2142,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0))))) ) | $spl4),
  inference(subsumption_resolution,[],[f2136,f169])).
fof(f2136,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0))))) ) | $spl4),
  inference(superposition,[],[f1109,f177])).
fof(f2710,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | ($spl6 | $spl34)),
  inference(subsumption_resolution,[],[f2701,f342])).
fof(f2701,plain,(
  sP0(sK1,sK2) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | $spl34),
  inference(trivial_inequality_removal,[],[f2690])).
fof(f2690,plain,(
  s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') | sP0(sK1,sK2) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | $spl34),
  inference(superposition,[],[f151,f394])).
fof(f394,plain,(
  s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | $spl34),
  inference(cnf_transformation,[],[f394_D])).
fof(f394_D,plain,(
  s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') = s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f1943,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,X1) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | $spl130),
  inference(cnf_transformation,[],[f1943_D])).
fof(f1943_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,X1) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f2651,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,X1) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | ($spl4 | $spl24 | $spl32)),
  inference(resolution,[],[f2304,f113])).
fof(f2653,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X6) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,X7) != s(bool,X8)) ) | ($spl4 | $spl24 | $spl32)),
  inference(resolution,[],[f2304,f115])).
fof(f2654,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,X10) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | ($spl4 | $spl24 | $spl32)),
  inference(resolution,[],[f2304,f117])).
fof(f2655,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | p(s(bool,X14)) | s(bool,X14) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | ($spl4 | $spl24 | $spl32)),
  inference(resolution,[],[f2304,f118])).
fof(f2658,plain,(
  ( ! [X23,X21,X22] : (p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X21) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,X22) != s(bool,X23)) ) | ($spl4 | $spl24 | $spl32)),
  inference(resolution,[],[f2304,f119])).
fof(f2659,plain,(
  ( ! [X24,X25] : (p(s(bool,X24)) | p(s(bool,X25)) | s(bool,X25) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | ($spl4 | $spl24 | $spl32)),
  inference(resolution,[],[f2304,f168])).
fof(f2678,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | ($spl4 | $spl6 | $spl37)),
  inference(subsumption_resolution,[],[f2677,f2613])).
fof(f2677,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | ($spl4 | $spl6)),
  inference(subsumption_resolution,[],[f2333,f342])).
fof(f2333,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | sP0(sK1,sK2) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | $spl4),
  inference(resolution,[],[f1921,f147])).
fof(f2643,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl4 | $spl6 | $spl37)),
  inference(subsumption_resolution,[],[f2642,f2613])).
fof(f2666,plain,(
  $false | ($spl4 | $spl6 | $spl24 | $spl32 | $spl35 | $spl37)),
  inference(subsumption_resolution,[],[f2665,f2409])).
fof(f2665,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl4 | $spl6 | $spl24 | $spl32 | $spl37)),
  inference(subsumption_resolution,[],[f2664,f2613])).
fof(f2664,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl4 | $spl6 | $spl24 | $spl32)),
  inference(subsumption_resolution,[],[f2647,f342])).
fof(f2647,plain,(
  sP0(sK1,sK2) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl4 | $spl24 | $spl32)),
  inference(resolution,[],[f2304,f150])).
fof(f2637,plain,(
  ( ! [X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))))) ) | ($spl4 | $spl6 | $spl35 | $spl37)),
  inference(subsumption_resolution,[],[f2426,f2613])).
fof(f2426,plain,(
  ( ! [X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1))))) ) | ($spl4 | $spl6 | $spl35)),
  inference(subsumption_resolution,[],[f2421,f342])).
fof(f2421,plain,(
  ( ! [X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | sP0(sK1,sK2) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1))))) ) | ($spl4 | $spl35)),
  inference(superposition,[],[f2409,f150])).
fof(f2635,plain,(
  $false | ($spl4 | $spl6 | $spl24 | $spl35 | $spl37 | $spl38)),
  inference(subsumption_resolution,[],[f2634,f167])).
fof(f2634,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl6 | $spl24 | $spl35 | $spl37 | $spl38)),
  inference(forward_demodulation,[],[f2633,f1935])).
fof(f1935,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | ($spl24 | $spl38)),
  inference(resolution,[],[f398,f484])).
fof(f398,plain,(
  p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | $spl38),
  inference(cnf_transformation,[],[f398_D])).
fof(f398_D,plain,(
  p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f2628,plain,(
  $false | ($spl4 | $spl30 | $spl37)),
  inference(trivial_inequality_removal,[],[f2619])).
fof(f2619,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) | ($spl4 | $spl30 | $spl37)),
  inference(superposition,[],[f2613,f391])).
fof(f2591,plain,(
  s(bool,'T_0') != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | $spl147),
  inference(cnf_transformation,[],[f2591_D])).
fof(f2591_D,plain,(
  s(bool,'T_0') != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) <=> ~$spl147),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl147])])).
fof(f2589,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | s(bool,'F_0') = s(bool,X0)) ) | $spl144),
  inference(duplicate_literal_removal,[],[f2579])).
fof(f2579,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0)) ) | $spl144),
  inference(superposition,[],[f2576,f164])).
fof(f2576,plain,(
  ( ! [X130] : (s(bool,X130) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | s(bool,'F_0') = s(bool,X130)) ) | $spl144),
  inference(cnf_transformation,[],[f2576_D])).
fof(f2576_D,plain,(
  ( ! [X130] : (s(bool,X130) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | s(bool,'F_0') = s(bool,X130)) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f2575,plain,(
  ( ! [X130,X129] : (s(bool,X130) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | s(bool,'T_0') = s(bool,X129) | s(bool,'F_0') = s(bool,X130)) ) | ($spl37 | $spl50 | $spl106)),
  inference(subsumption_resolution,[],[f2533,f164])).
fof(f2533,plain,(
  ( ! [X130,X129] : (s(bool,'F_0') != s(bool,X129) | s(bool,X130) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | s(bool,'T_0') = s(bool,X129) | s(bool,'F_0') = s(bool,X130)) ) | ($spl37 | $spl50 | $spl106)),
  inference(superposition,[],[f1773,f2465])).
fof(f2465,plain,(
  s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | ($spl37 | $spl50)),
  inference(resolution,[],[f397,f555])).
fof(f2468,plain,(
  ( ! [X4] : (~p(s(bool,X4)) | s(bool,X4) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) ) | $spl142),
  inference(cnf_transformation,[],[f2468_D])).
fof(f2468_D,plain,(
  ( ! [X4] : (~p(s(bool,X4)) | s(bool,X4) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f2463,plain,(
  ( ! [X28,X27] : (p(s(bool,X27)) | ~p(s(bool,X28)) | s(bool,X28) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) ) | $spl37),
  inference(resolution,[],[f397,f168])).
fof(f2462,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,X24)) | ~p(s(bool,X25)) | s(bool,X25) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | s(bool,X24) != s(bool,X26)) ) | $spl37),
  inference(resolution,[],[f397,f119])).
fof(f2460,plain,(
  ( ! [X19,X20,X18] : (p(s(bool,X18)) | ~p(s(bool,X19)) | ~p(s(bool,X20)) | s(bool,X19) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) ) | $spl37),
  inference(resolution,[],[f397,f118])).
fof(f2458,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X12) != s(bool,X14) | s(bool,X13) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) ) | $spl37),
  inference(resolution,[],[f397,f117])).
fof(f2457,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X10) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))) | s(bool,X9) != s(bool,X11)) ) | $spl37),
  inference(resolution,[],[f397,f115])).
fof(f2455,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,X3)) | ~p(s(bool,X4)) | s(bool,X3) != s(bool,X5) | s(bool,X4) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) ) | $spl37),
  inference(resolution,[],[f397,f113])).
fof(f2440,plain,(
  $false | $spl140),
  inference(equality_resolution,[],[f2429])).
fof(f2434,plain,(
  ( ! [X3] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X3),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) ) | ($spl4 | $spl6 | $spl24 | $spl35 | $spl38)),
  inference(subsumption_resolution,[],[f2433,f169])).
fof(f2433,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X3),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) ) | ($spl4 | $spl6 | $spl24 | $spl35 | $spl38)),
  inference(forward_demodulation,[],[f2432,f1935])).
fof(f2432,plain,(
  ( ! [X3] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X3),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) ) | ($spl4 | $spl6 | $spl35)),
  inference(subsumption_resolution,[],[f2423,f342])).
fof(f2423,plain,(
  ( ! [X3] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X3),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | sP0(sK1,sK2) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) ) | ($spl4 | $spl35)),
  inference(superposition,[],[f2409,f152])).
fof(f2428,plain,(
  ( ! [X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1))))) ) | ($spl4 | $spl6 | $spl24 | $spl35 | $spl38)),
  inference(subsumption_resolution,[],[f2427,f169])).
fof(f2427,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp',sK6(sK2,sK1)))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1))))) ) | ($spl4 | $spl6 | $spl24 | $spl35 | $spl38)),
  inference(forward_demodulation,[],[f2426,f1935])).
fof(f2364,plain,(
  ( ! [X41,X42,X40] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X40))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,X41)) | p(s(bool,X42)) | s(bool,X42) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X40)))) ) | $spl4),
  inference(resolution,[],[f2079,f168])).
fof(f2079,plain,(
  ( ! [X33] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X33)))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X33))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl4),
  inference(forward_demodulation,[],[f2078,f125])).
fof(f2078,plain,(
  ( ! [X33] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X33)))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X33))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))))))) ) | $spl4),
  inference(resolution,[],[f1125,f633])).
fof(f2363,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X36))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,X37)) | ~p(s(bool,X38)) | s(bool,X37) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X36))) | s(bool,X38) != s(bool,X39)) ) | $spl4),
  inference(resolution,[],[f2079,f119])).
fof(f2360,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X24))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,X25)) | ~p(s(bool,X26)) | p(s(bool,X27)) | s(bool,X27) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X24)))) ) | $spl4),
  inference(resolution,[],[f2079,f118])).
fof(f2359,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X20))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,X21)) | p(s(bool,X22)) | s(bool,X21) != s(bool,X23) | s(bool,X22) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X20)))) ) | $spl4),
  inference(resolution,[],[f2079,f117])).
fof(f2358,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X16))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,X17)) | ~p(s(bool,X18)) | s(bool,X17) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X16))) | s(bool,X18) != s(bool,X19)) ) | $spl4),
  inference(resolution,[],[f2079,f115])).
fof(f2356,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | p(s(bool,X9)) | p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,X10) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8)))) ) | $spl4),
  inference(resolution,[],[f2079,f113])).
fof(f2343,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X32))) | p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X34) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X32))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl4),
  inference(resolution,[],[f1921,f168])).
fof(f2342,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X28))) | ~p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X30) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X28))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X29) != s(bool,X31)) ) | $spl4),
  inference(resolution,[],[f1921,f119])).
fof(f2340,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X20))) | p(s(bool,X21)) | ~p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X20))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl4),
  inference(resolution,[],[f1921,f118])).
fof(f2338,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X12))) | p(s(bool,X13)) | ~p(s(bool,X14)) | s(bool,X13) != s(bool,X15) | s(bool,X14) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X12))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl4),
  inference(resolution,[],[f1921,f117])).
fof(f2337,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8))) | ~p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X10) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X9) != s(bool,X11)) ) | $spl4),
  inference(resolution,[],[f1921,f115])).
fof(f2335,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0))) | p(s(bool,X1)) | ~p(s(bool,X2)) | s(bool,X1) != s(bool,X3) | s(bool,X2) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl4),
  inference(resolution,[],[f1921,f113])).
fof(f2292,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X32)))) | p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X34) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X32))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl4),
  inference(resolution,[],[f2143,f168])).
fof(f2291,plain,(
  ( ! [X30,X28,X31,X29] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X28)))) | ~p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X30) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X28))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X29) != s(bool,X31)) ) | $spl4),
  inference(resolution,[],[f2143,f119])).
fof(f2289,plain,(
  ( ! [X23,X21,X22,X20] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X20)))) | p(s(bool,X21)) | ~p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X20))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl4),
  inference(resolution,[],[f2143,f118])).
fof(f2287,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X12)))) | p(s(bool,X13)) | ~p(s(bool,X14)) | s(bool,X13) != s(bool,X15) | s(bool,X14) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X12))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl4),
  inference(resolution,[],[f2143,f117])).
fof(f2286,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X8)))) | ~p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X10) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X9) != s(bool,X11)) ) | $spl4),
  inference(resolution,[],[f2143,f115])).
fof(f2284,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0)))) | p(s(bool,X1)) | ~p(s(bool,X2)) | s(bool,X1) != s(bool,X3) | s(bool,X2) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl4),
  inference(resolution,[],[f2143,f113])).
fof(f2301,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl4 | $spl6)),
  inference(subsumption_resolution,[],[f2300,f342])).
fof(f2300,plain,(
  sP0(sK1,sK2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl4),
  inference(subsumption_resolution,[],[f2281,f152])).
fof(f2281,plain,(
  p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | sP0(sK1,sK2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl4),
  inference(resolution,[],[f2143,f148])).
fof(f2299,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl4 | $spl6)),
  inference(subsumption_resolution,[],[f2298,f342])).
fof(f2298,plain,(
  sP0(sK1,sK2) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl4),
  inference(subsumption_resolution,[],[f2280,f150])).
fof(f2280,plain,(
  p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | sP0(sK1,sK2) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl4),
  inference(resolution,[],[f2143,f146])).
fof(f2140,plain,(
  ( ! [X4,X7,X5,X3] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X3))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X4),X5)))))))) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X4),X5))) | ~p(s(bool,X7)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X3))))) ) | $spl132),
  inference(cnf_transformation,[],[f2140_D])).
fof(f2140_D,plain,(
  ( ! [X4,X7,X5,X3] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X3))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X4),X5)))))))) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X4),X5))) | ~p(s(bool,X7)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X3))))) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f2133,plain,(
  ( ! [X54,X52,X55,X53,X51] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X51))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X52),X53)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X51)))) | p(s(bool,X54)) | ~p(s(bool,X55)) | s(bool,X55) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X52),X53)))) )),
  inference(resolution,[],[f1109,f168])).
fof(f2132,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X45))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X46),X47)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X45)))) | ~p(s(bool,X48)) | ~p(s(bool,X49)) | s(bool,X49) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X46),X47))) | s(bool,X48) != s(bool,X50)) )),
  inference(resolution,[],[f1109,f119])).
fof(f2130,plain,(
  ( ! [X37,X35,X33,X38,X36,X34] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X33))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X34),X35)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X33)))) | p(s(bool,X36)) | ~p(s(bool,X37)) | ~p(s(bool,X38)) | s(bool,X37) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X34),X35)))) )),
  inference(resolution,[],[f1109,f118])).
fof(f2128,plain,(
  ( ! [X26,X24,X23,X21,X25,X22] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X21))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X22),X23)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X21)))) | p(s(bool,X24)) | ~p(s(bool,X25)) | s(bool,X24) != s(bool,X26) | s(bool,X25) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X22),X23)))) )),
  inference(resolution,[],[f1109,f117])).
fof(f2127,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X15))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X16),X17)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X15)))) | ~p(s(bool,X18)) | ~p(s(bool,X19)) | s(bool,X19) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X16),X17))) | s(bool,X18) != s(bool,X20)) )),
  inference(resolution,[],[f1109,f115])).
fof(f2125,plain,(
  ( ! [X6,X4,X8,X7,X5,X3] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X3))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X4),X5)))))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X3)))) | p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X6) != s(bool,X8) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X4),X5)))) )),
  inference(resolution,[],[f1109,f113])).
fof(f2093,plain,(
  $false | ($spl24 | $spl38 | $spl46)),
  inference(resolution,[],[f2081,f167])).
fof(f2081,plain,(
  ( ! [X3] : (~p(s(bool,X3))) ) | ($spl24 | $spl38 | $spl46)),
  inference(subsumption_resolution,[],[f2080,f484])).
fof(f2080,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3) | ~p(s(bool,X3))) ) | ($spl24 | $spl38 | $spl46)),
  inference(forward_demodulation,[],[f530,f1935])).
fof(f2094,plain,(
  $false | ($spl24 | $spl38 | $spl46)),
  inference(resolution,[],[f2081,f166])).
fof(f2095,plain,(
  $false | ($spl24 | $spl38 | $spl46)),
  inference(resolution,[],[f2081,f169])).
fof(f2103,plain,(
  $false | ($spl24 | $spl32 | $spl38 | $spl46)),
  inference(resolution,[],[f2081,f393])).
fof(f2016,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl6 | $spl24 | $spl38)),
  inference(subsumption_resolution,[],[f2015,f342])).
fof(f2015,plain,(
  sP0(sK1,sK2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl24 | $spl38)),
  inference(subsumption_resolution,[],[f1950,f169])).
fof(f1950,plain,(
  ~p(s(bool,'T_0')) | sP0(sK1,sK2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl24 | $spl38)),
  inference(superposition,[],[f152,f1935])).
fof(f2014,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl6 | $spl24 | $spl38)),
  inference(subsumption_resolution,[],[f2013,f342])).
fof(f2013,plain,(
  sP0(sK1,sK2) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl24 | $spl38)),
  inference(subsumption_resolution,[],[f1949,f169])).
fof(f1949,plain,(
  ~p(s(bool,'T_0')) | sP0(sK1,sK2) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl24 | $spl38)),
  inference(superposition,[],[f150,f1935])).
fof(f1934,plain,(
  ( ! [X24,X25] : (p(s(bool,X24)) | p(s(bool,X25)) | s(bool,X25) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | $spl38),
  inference(resolution,[],[f398,f168])).
fof(f1933,plain,(
  ( ! [X23,X21,X22] : (p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X21) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,X22) != s(bool,X23)) ) | $spl38),
  inference(resolution,[],[f398,f119])).
fof(f1930,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | p(s(bool,X14)) | s(bool,X14) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | $spl38),
  inference(resolution,[],[f398,f118])).
fof(f1929,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,X10) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | $spl38),
  inference(resolution,[],[f398,f117])).
fof(f1928,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X6) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,X7) != s(bool,X8)) ) | $spl38),
  inference(resolution,[],[f398,f115])).
fof(f1926,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,X1) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | $spl38),
  inference(resolution,[],[f398,f113])).
fof(f1942,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | ($spl6 | $spl38)),
  inference(subsumption_resolution,[],[f1925,f342])).
fof(f1925,plain,(
  sP0(sK1,sK2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | $spl38),
  inference(resolution,[],[f398,f153])).
fof(f1941,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | ($spl6 | $spl38)),
  inference(subsumption_resolution,[],[f1924,f342])).
fof(f1924,plain,(
  sP0(sK1,sK2) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | $spl38),
  inference(resolution,[],[f398,f151])).
fof(f1940,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl6 | $spl38)),
  inference(subsumption_resolution,[],[f1923,f342])).
fof(f1923,plain,(
  sP0(sK1,sK2) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl38),
  inference(resolution,[],[f398,f152])).
fof(f1939,plain,(
  s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | ($spl6 | $spl38)),
  inference(subsumption_resolution,[],[f1922,f342])).
fof(f1922,plain,(
  sP0(sK1,sK2) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl38),
  inference(resolution,[],[f398,f150])).
fof(f1205,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | $spl6),
  inference(resolution,[],[f153,f342])).
fof(f1326,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | $spl6),
  inference(resolution,[],[f151,f342])).
fof(f1448,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl6),
  inference(resolution,[],[f152,f342])).
fof(f1713,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl6),
  inference(resolution,[],[f150,f342])).
fof(f1895,plain,(
  ( ! [X17,X16] : (s(bool,'F_0') != s(bool,X16) | s(bool,X16) != s(bool,X17) | s(bool,'T_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,'F_0') = s(bool,X17)) ) | ($spl39 | $spl106)),
  inference(superposition,[],[f1773,f533])).
fof(f533,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | $spl39),
  inference(subsumption_resolution,[],[f528,f169])).
fof(f528,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | $spl39),
  inference(superposition,[],[f399,f164])).
fof(f1897,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,X4) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X3) | s(bool,'F_0') = s(bool,X5)) ) | $spl106),
  inference(duplicate_literal_removal,[],[f1890])).
fof(f1890,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,X4) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X3) | s(bool,'F_0') = s(bool,X5) | s(bool,'T_0') = s(bool,X3)) ) | $spl106),
  inference(superposition,[],[f1773,f164])).
fof(f1902,plain,(
  ( ! [X17,X16] : (s(bool,X17) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,'T_0') = s(bool,X16) | s(bool,'F_0') = s(bool,X17)) ) | ($spl39 | $spl106)),
  inference(subsumption_resolution,[],[f1888,f164])).
fof(f1888,plain,(
  ( ! [X17,X16] : (s(bool,'F_0') != s(bool,X16) | s(bool,X17) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,'T_0') = s(bool,X16) | s(bool,'F_0') = s(bool,X17)) ) | ($spl39 | $spl106)),
  inference(superposition,[],[f1773,f533])).
fof(f1901,plain,(
  ( ! [X15] : (s(bool,X15) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,'F_0') = s(bool,X15)) ) | $spl122),
  inference(cnf_transformation,[],[f1901_D])).
fof(f1901_D,plain,(
  ( ! [X15] : (s(bool,X15) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,'F_0') = s(bool,X15)) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f1900,plain,(
  ( ! [X14,X15] : (s(bool,X15) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,'T_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X15)) ) | ($spl6 | $spl106)),
  inference(subsumption_resolution,[],[f1887,f164])).
fof(f1887,plain,(
  ( ! [X14,X15] : (s(bool,'F_0') != s(bool,X14) | s(bool,X15) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,'T_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X15)) ) | ($spl6 | $spl106)),
  inference(superposition,[],[f1773,f178])).
fof(f1880,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,X1) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl120),
  inference(cnf_transformation,[],[f1880_D])).
fof(f1880_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,X1) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f1875,plain,(
  ( ! [X24,X25] : (p(s(bool,X24)) | p(s(bool,X25)) | s(bool,X25) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl32),
  inference(resolution,[],[f393,f168])).
fof(f1874,plain,(
  ( ! [X23,X21,X22] : (p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X21) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X22) != s(bool,X23)) ) | $spl32),
  inference(resolution,[],[f393,f119])).
fof(f1871,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | p(s(bool,X14)) | s(bool,X14) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl32),
  inference(resolution,[],[f393,f118])).
fof(f1870,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,X10) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl32),
  inference(resolution,[],[f393,f117])).
fof(f1869,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X6) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2))))))) | s(bool,X7) != s(bool,X8)) ) | $spl32),
  inference(resolution,[],[f393,f115])).
fof(f1867,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,X1) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) ) | $spl32),
  inference(resolution,[],[f393,f113])).
fof(f1835,plain,(
  ( ! [X2,X5,X3] : (sP0(X2,X3) | s(bool,X5) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X3,X2)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3))))))) | p(s(bool,X5)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X3,X2)),s('type.closLang.exp',sK6(X3,X2)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X2),X3))),s('type.num.num',sK4(X3,X2)))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X3,X2)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X2),X3))),s('type.num.num',sK7(X3,X2))))) ) | $spl118),
  inference(cnf_transformation,[],[f1835_D])).
fof(f1835_D,plain,(
  ( ! [X2,X5,X3] : (sP0(X2,X3) | s(bool,X5) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X3,X2)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3))))))) | p(s(bool,X5)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X3,X2)),s('type.closLang.exp',sK6(X3,X2)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X2),X3))),s('type.num.num',sK4(X3,X2)))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X3,X2)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X2),X3))),s('type.num.num',sK7(X3,X2))))) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f1815,plain,(
  ( ! [X45,X43,X44,X42] : (sP0(X42,X43) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X43,X42)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X42),X43))),s('type.num.num',sK7(X43,X42)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X43,X42)),s('type.closLang.exp',sK6(X43,X42)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X42),X43))),s('type.num.num',sK4(X43,X42)))) | p(s(bool,X44)) | p(s(bool,X45)) | s(bool,X45) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X43,X42)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X42),X43)))))))) )),
  inference(resolution,[],[f146,f168])).
fof(f1814,plain,(
  ( ! [X39,X37,X41,X38,X40] : (sP0(X37,X38) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X38,X37)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X37),X38))),s('type.num.num',sK7(X38,X37)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X38,X37)),s('type.closLang.exp',sK6(X38,X37)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X37),X38))),s('type.num.num',sK4(X38,X37)))) | p(s(bool,X39)) | ~p(s(bool,X40)) | s(bool,X39) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X38,X37)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X37),X38))))))) | s(bool,X40) != s(bool,X41)) )),
  inference(resolution,[],[f146,f119])).
fof(f1811,plain,(
  ( ! [X26,X24,X23,X25,X22] : (sP0(X22,X23) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X23,X22)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X22),X23))),s('type.num.num',sK7(X23,X22)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X23,X22)),s('type.closLang.exp',sK6(X23,X22)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X22),X23))),s('type.num.num',sK4(X23,X22)))) | p(s(bool,X24)) | ~p(s(bool,X25)) | p(s(bool,X26)) | s(bool,X26) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X23,X22)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X22),X23)))))))) )),
  inference(resolution,[],[f146,f118])).
fof(f1810,plain,(
  ( ! [X21,X19,X17,X20,X18] : (sP0(X17,X18) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X18,X17)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X17),X18))),s('type.num.num',sK7(X18,X17)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X18,X17)),s('type.closLang.exp',sK6(X18,X17)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X17),X18))),s('type.num.num',sK4(X18,X17)))) | p(s(bool,X19)) | p(s(bool,X20)) | s(bool,X19) != s(bool,X21) | s(bool,X20) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X18,X17)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X17),X18)))))))) )),
  inference(resolution,[],[f146,f117])).
fof(f1809,plain,(
  ( ! [X14,X12,X15,X13,X16] : (sP0(X12,X13) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X13,X12)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X12),X13))),s('type.num.num',sK7(X13,X12)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X13,X12)),s('type.closLang.exp',sK6(X13,X12)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X12),X13))),s('type.num.num',sK4(X13,X12)))) | p(s(bool,X14)) | ~p(s(bool,X15)) | s(bool,X14) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X13,X12)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X12),X13))))))) | s(bool,X15) != s(bool,X16)) )),
  inference(resolution,[],[f146,f115])).
fof(f1807,plain,(
  ( ! [X6,X4,X2,X5,X3] : (sP0(X2,X3) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X3,X2)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X2),X3))),s('type.num.num',sK7(X3,X2)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X3,X2)),s('type.closLang.exp',sK6(X3,X2)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X2),X3))),s('type.num.num',sK4(X3,X2)))) | p(s(bool,X4)) | p(s(bool,X5)) | s(bool,X4) != s(bool,X6) | s(bool,X5) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X3,X2)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3)))))))) )),
  inference(resolution,[],[f146,f113])).
fof(f1805,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl6),
  inference(resolution,[],[f146,f342])).
fof(f1772,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X2) | s(bool,X1) != s(bool,X2)) ) | $spl116),
  inference(cnf_transformation,[],[f1772_D])).
fof(f1772_D,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X2) | s(bool,X1) != s(bool,X2)) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f1771,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) != s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'F_0') = s(bool,X0)) ) | ($spl50 | $spl106)),
  inference(subsumption_resolution,[],[f1760,f555])).
fof(f1760,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) != s(bool,X2) | ~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X2) | s(bool,'F_0') = s(bool,X0)) ) | $spl106),
  inference(superposition,[],[f1577,f164])).
fof(f1742,plain,(
  ( ! [X4,X7,X5] : (sP0(X4,X5) | s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X5,X4)))) | ~p(s(bool,X7)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X5,X4)),s('type.closLang.exp',sK6(X5,X4)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X4),X5))),s('type.num.num',sK4(X5,X4)))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X5,X4)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X4),X5))),s('type.num.num',sK7(X5,X4))))) ) | $spl114),
  inference(cnf_transformation,[],[f1742_D])).
fof(f1742_D,plain,(
  ( ! [X4,X7,X5] : (sP0(X4,X5) | s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X5,X4)))) | ~p(s(bool,X7)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X5,X4)),s('type.closLang.exp',sK6(X5,X4)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X4),X5))),s('type.num.num',sK4(X5,X4)))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X5,X4)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X4),X5))),s('type.num.num',sK7(X5,X4))))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f1723,plain,(
  ( ! [X47,X45,X46,X44] : (sP0(X44,X45) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X45,X44)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X44),X45))),s('type.num.num',sK7(X45,X44)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X45,X44)),s('type.closLang.exp',sK6(X45,X44)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X44),X45))),s('type.num.num',sK4(X45,X44)))) | p(s(bool,X46)) | ~p(s(bool,X47)) | s(bool,X47) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X45,X44))))) )),
  inference(resolution,[],[f150,f168])).
fof(f1722,plain,(
  ( ! [X39,X43,X41,X42,X40] : (sP0(X39,X40) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X40,X39)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X39),X40))),s('type.num.num',sK7(X40,X39)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X40,X39)),s('type.closLang.exp',sK6(X40,X39)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X39),X40))),s('type.num.num',sK4(X40,X39)))) | ~p(s(bool,X41)) | ~p(s(bool,X42)) | s(bool,X42) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X40,X39)))) | s(bool,X41) != s(bool,X43)) )),
  inference(resolution,[],[f150,f119])).
fof(f1720,plain,(
  ( ! [X30,X33,X31,X29,X32] : (sP0(X29,X30) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X30,X29)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X29),X30))),s('type.num.num',sK7(X30,X29)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X30,X29)),s('type.closLang.exp',sK6(X30,X29)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X29),X30))),s('type.num.num',sK4(X30,X29)))) | p(s(bool,X31)) | ~p(s(bool,X32)) | ~p(s(bool,X33)) | s(bool,X32) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X30,X29))))) )),
  inference(resolution,[],[f150,f118])).
fof(f1718,plain,(
  ( ! [X23,X21,X19,X22,X20] : (sP0(X19,X20) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X20,X19)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X19),X20))),s('type.num.num',sK7(X20,X19)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X20,X19)),s('type.closLang.exp',sK6(X20,X19)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X19),X20))),s('type.num.num',sK4(X20,X19)))) | p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X21) != s(bool,X23) | s(bool,X22) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X20,X19))))) )),
  inference(resolution,[],[f150,f117])).
fof(f1717,plain,(
  ( ! [X14,X17,X15,X18,X16] : (sP0(X14,X15) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X15,X14)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X14),X15))),s('type.num.num',sK7(X15,X14)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X15,X14)),s('type.closLang.exp',sK6(X15,X14)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X14),X15))),s('type.num.num',sK4(X15,X14)))) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,X17) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X15,X14)))) | s(bool,X16) != s(bool,X18)) )),
  inference(resolution,[],[f150,f115])).
fof(f1715,plain,(
  ( ! [X6,X4,X8,X7,X5] : (sP0(X4,X5) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X5,X4)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X4),X5))),s('type.num.num',sK7(X5,X4)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X5,X4)),s('type.closLang.exp',sK6(X5,X4)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X4),X5))),s('type.num.num',sK4(X5,X4)))) | p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X6) != s(bool,X8) | s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X5,X4))))) )),
  inference(resolution,[],[f150,f113])).
fof(f1667,plain,(
  ( ! [X6,X8,X5] : (sP0(X5,X6) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5)))) | ~p(s(bool,X8)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X6,X5)),s('type.closLang.exp',sK6(X6,X5)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',sK4(X6,X5)))) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X6,X5)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X5),X6))))))))) ) | $spl112),
  inference(cnf_transformation,[],[f1667_D])).
fof(f1667_D,plain,(
  ( ! [X6,X8,X5] : (sP0(X5,X6) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5)))) | ~p(s(bool,X8)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X6,X5)),s('type.closLang.exp',sK6(X6,X5)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',sK4(X6,X5)))) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X6,X5)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X5),X6))))))))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f1647,plain,(
  ( ! [X47,X45,X48,X46] : (sP0(X45,X46) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X46,X45)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X45),X46)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X46,X45)),s('type.closLang.exp',sK6(X46,X45)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X45),X46))),s('type.num.num',sK4(X46,X45)))) | p(s(bool,X47)) | ~p(s(bool,X48)) | s(bool,X48) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X46,X45))))) )),
  inference(resolution,[],[f148,f168])).
fof(f1646,plain,(
  ( ! [X43,X41,X44,X42,X40] : (sP0(X40,X41) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X41,X40)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X40),X41)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X41,X40)),s('type.closLang.exp',sK6(X41,X40)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X40),X41))),s('type.num.num',sK4(X41,X40)))) | ~p(s(bool,X42)) | ~p(s(bool,X43)) | s(bool,X43) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X41,X40)))) | s(bool,X42) != s(bool,X44)) )),
  inference(resolution,[],[f148,f119])).
fof(f1644,plain,(
  ( ! [X30,X33,X31,X34,X32] : (sP0(X30,X31) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X31,X30)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X30),X31)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X31,X30)),s('type.closLang.exp',sK6(X31,X30)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X30),X31))),s('type.num.num',sK4(X31,X30)))) | p(s(bool,X32)) | ~p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X33) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X31,X30))))) )),
  inference(resolution,[],[f148,f118])).
fof(f1642,plain,(
  ( ! [X24,X23,X21,X22,X20] : (sP0(X20,X21) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X21,X20)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X20),X21)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X21,X20)),s('type.closLang.exp',sK6(X21,X20)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X20),X21))),s('type.num.num',sK4(X21,X20)))) | p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X24) | s(bool,X23) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X21,X20))))) )),
  inference(resolution,[],[f148,f117])).
fof(f1641,plain,(
  ( ! [X19,X17,X15,X18,X16] : (sP0(X15,X16) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X16,X15)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X15),X16)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X16,X15)),s('type.closLang.exp',sK6(X16,X15)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X15),X16))),s('type.num.num',sK4(X16,X15)))) | ~p(s(bool,X17)) | ~p(s(bool,X18)) | s(bool,X18) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X16,X15)))) | s(bool,X17) != s(bool,X19)) )),
  inference(resolution,[],[f148,f115])).
fof(f1639,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP0(X5,X6) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X6,X5)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X5),X6)))))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X6,X5)),s('type.closLang.exp',sK6(X6,X5)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',sK4(X6,X5)))) | p(s(bool,X7)) | ~p(s(bool,X8)) | s(bool,X7) != s(bool,X9) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5))))) )),
  inference(resolution,[],[f148,f113])).
fof(f1663,plain,(
  ( ! [X2,X5,X3] : (sP0(X2,X3) | s(bool,X5) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X3,X2)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3))))))) | p(s(bool,X5)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X3,X2)),s('type.closLang.exp',sK6(X3,X2)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X2),X3))),s('type.num.num',sK4(X3,X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X3,X2)))))) ) | $spl110),
  inference(cnf_transformation,[],[f1663_D])).
fof(f1663_D,plain,(
  ( ! [X2,X5,X3] : (sP0(X2,X3) | s(bool,X5) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X3,X2)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3))))))) | p(s(bool,X5)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X3,X2)),s('type.closLang.exp',sK6(X3,X2)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X2),X3))),s('type.num.num',sK4(X3,X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X3,X2)))))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f1635,plain,(
  ( ! [X45,X43,X44,X42] : (sP0(X42,X43) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X43,X42))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X43,X42)),s('type.closLang.exp',sK6(X43,X42)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X42),X43))),s('type.num.num',sK4(X43,X42)))) | p(s(bool,X44)) | p(s(bool,X45)) | s(bool,X45) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X43,X42)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X42),X43)))))))) )),
  inference(resolution,[],[f148,f168])).
fof(f1634,plain,(
  ( ! [X39,X37,X41,X38,X40] : (sP0(X37,X38) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X38,X37))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X38,X37)),s('type.closLang.exp',sK6(X38,X37)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X37),X38))),s('type.num.num',sK4(X38,X37)))) | p(s(bool,X39)) | ~p(s(bool,X40)) | s(bool,X39) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X38,X37)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X37),X38))))))) | s(bool,X40) != s(bool,X41)) )),
  inference(resolution,[],[f148,f119])).
fof(f1631,plain,(
  ( ! [X26,X24,X23,X25,X22] : (sP0(X22,X23) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X23,X22))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X23,X22)),s('type.closLang.exp',sK6(X23,X22)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X22),X23))),s('type.num.num',sK4(X23,X22)))) | p(s(bool,X24)) | ~p(s(bool,X25)) | p(s(bool,X26)) | s(bool,X26) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X23,X22)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X22),X23)))))))) )),
  inference(resolution,[],[f148,f118])).
fof(f1630,plain,(
  ( ! [X21,X19,X17,X20,X18] : (sP0(X17,X18) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X18,X17))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X18,X17)),s('type.closLang.exp',sK6(X18,X17)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X17),X18))),s('type.num.num',sK4(X18,X17)))) | p(s(bool,X19)) | p(s(bool,X20)) | s(bool,X19) != s(bool,X21) | s(bool,X20) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X18,X17)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X17),X18)))))))) )),
  inference(resolution,[],[f148,f117])).
fof(f1629,plain,(
  ( ! [X14,X12,X15,X13,X16] : (sP0(X12,X13) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X13,X12))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X13,X12)),s('type.closLang.exp',sK6(X13,X12)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X12),X13))),s('type.num.num',sK4(X13,X12)))) | p(s(bool,X14)) | ~p(s(bool,X15)) | s(bool,X14) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X13,X12)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X12),X13))))))) | s(bool,X15) != s(bool,X16)) )),
  inference(resolution,[],[f148,f115])).
fof(f1627,plain,(
  ( ! [X6,X4,X2,X5,X3] : (sP0(X2,X3) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X3,X2))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X3,X2)),s('type.closLang.exp',sK6(X3,X2)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X2),X3))),s('type.num.num',sK4(X3,X2)))) | p(s(bool,X4)) | p(s(bool,X5)) | s(bool,X4) != s(bool,X6) | s(bool,X5) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X3,X2)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3)))))))) )),
  inference(resolution,[],[f148,f113])).
fof(f1625,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl6),
  inference(resolution,[],[f148,f342])).
fof(f1612,plain,(
  ( ! [X2,X5,X3] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X3,X2)))) | s(bool,X5) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X3,X2)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3))))))) | p(s(bool,X5)) | sP0(X2,X3) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X3,X2)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X2),X3))),s('type.num.num',sK7(X3,X2))))) ) | $spl108),
  inference(cnf_transformation,[],[f1612_D])).
fof(f1612_D,plain,(
  ( ! [X2,X5,X3] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X3,X2)))) | s(bool,X5) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X3,X2)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3))))))) | p(s(bool,X5)) | sP0(X2,X3) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X3,X2)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X2),X3))),s('type.num.num',sK7(X3,X2))))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f1596,plain,(
  ( ! [X45,X43,X44,X42] : (sP0(X42,X43) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X43,X42)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X42),X43))),s('type.num.num',sK7(X43,X42)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X43,X42)))) | p(s(bool,X44)) | p(s(bool,X45)) | s(bool,X45) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X43,X42)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X42),X43)))))))) )),
  inference(resolution,[],[f147,f168])).
fof(f1595,plain,(
  ( ! [X39,X37,X41,X38,X40] : (sP0(X37,X38) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X38,X37)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X37),X38))),s('type.num.num',sK7(X38,X37)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X38,X37)))) | p(s(bool,X39)) | ~p(s(bool,X40)) | s(bool,X39) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X38,X37)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X37),X38))))))) | s(bool,X40) != s(bool,X41)) )),
  inference(resolution,[],[f147,f119])).
fof(f1592,plain,(
  ( ! [X26,X24,X23,X25,X22] : (sP0(X22,X23) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X23,X22)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X22),X23))),s('type.num.num',sK7(X23,X22)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X23,X22)))) | p(s(bool,X24)) | ~p(s(bool,X25)) | p(s(bool,X26)) | s(bool,X26) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X23,X22)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X22),X23)))))))) )),
  inference(resolution,[],[f147,f118])).
fof(f1591,plain,(
  ( ! [X21,X19,X17,X20,X18] : (sP0(X17,X18) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X18,X17)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X17),X18))),s('type.num.num',sK7(X18,X17)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X18,X17)))) | p(s(bool,X19)) | p(s(bool,X20)) | s(bool,X19) != s(bool,X21) | s(bool,X20) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X18,X17)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X17),X18)))))))) )),
  inference(resolution,[],[f147,f117])).
fof(f1590,plain,(
  ( ! [X14,X12,X15,X13,X16] : (sP0(X12,X13) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X13,X12)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X12),X13))),s('type.num.num',sK7(X13,X12)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X13,X12)))) | p(s(bool,X14)) | ~p(s(bool,X15)) | s(bool,X14) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X13,X12)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X12),X13))))))) | s(bool,X15) != s(bool,X16)) )),
  inference(resolution,[],[f147,f115])).
fof(f1588,plain,(
  ( ! [X6,X4,X2,X5,X3] : (sP0(X2,X3) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X3,X2)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X2),X3))),s('type.num.num',sK7(X3,X2)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X3,X2)))) | p(s(bool,X4)) | p(s(bool,X5)) | s(bool,X4) != s(bool,X6) | s(bool,X5) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X3,X2)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3)))))))) )),
  inference(resolution,[],[f147,f113])).
fof(f1586,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | $spl6),
  inference(resolution,[],[f147,f342])).
fof(f1577,plain,(
  ( ! [X0,X3,X1] : (s(bool,X1) != s(bool,X3) | s(bool,X0) != s(bool,X1) | ~p(s(bool,X3)) | s(bool,'T_0') = s(bool,X0)) ) | $spl106),
  inference(cnf_transformation,[],[f1577_D])).
fof(f1577_D,plain,(
  ( ! [X0,X3,X1] : (s(bool,X1) != s(bool,X3) | s(bool,X0) != s(bool,X1) | ~p(s(bool,X3)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f1560,plain,(
  ( ! [X43,X41,X42,X40] : (s(bool,X40) != s(bool,X41) | s(bool,'T_0') = s(bool,X40) | p(s(bool,X42)) | ~p(s(bool,X43)) | s(bool,X41) != s(bool,X43)) )),
  inference(resolution,[],[f1271,f168])).
fof(f1559,plain,(
  ( ! [X39,X37,X35,X38,X36] : (s(bool,X35) != s(bool,X36) | s(bool,'T_0') = s(bool,X35) | ~p(s(bool,X37)) | ~p(s(bool,X38)) | s(bool,X36) != s(bool,X38) | s(bool,X37) != s(bool,X39)) )),
  inference(resolution,[],[f1271,f119])).
fof(f1557,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s(bool,X25) != s(bool,X26) | s(bool,'T_0') = s(bool,X25) | p(s(bool,X27)) | ~p(s(bool,X28)) | ~p(s(bool,X29)) | s(bool,X26) != s(bool,X28)) )),
  inference(resolution,[],[f1271,f118])).
fof(f1555,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s(bool,X15) != s(bool,X16) | s(bool,'T_0') = s(bool,X15) | p(s(bool,X17)) | ~p(s(bool,X18)) | s(bool,X17) != s(bool,X19) | s(bool,X16) != s(bool,X18)) )),
  inference(resolution,[],[f1271,f117])).
fof(f1554,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s(bool,X10) != s(bool,X11) | s(bool,'T_0') = s(bool,X10) | ~p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X11) != s(bool,X13) | s(bool,X12) != s(bool,X14)) )),
  inference(resolution,[],[f1271,f115])).
fof(f1552,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X0) | p(s(bool,X2)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X4) | s(bool,X1) != s(bool,X3)) )),
  inference(resolution,[],[f1271,f113])).
fof(f1511,plain,(
  ( ! [X2,X1] : (sP0(X1,X2) | s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2)))) ) | $spl104),
  inference(cnf_transformation,[],[f1511_D])).
fof(f1511_D,plain,(
  ( ! [X2,X1] : (sP0(X1,X2) | s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2)))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f1509,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2))) | sP0(X1,X2) | s(bool,'F_0') = s(bool,X0)) ) | ($spl50 | $spl52)),
  inference(subsumption_resolution,[],[f1499,f555])).
fof(f1499,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X1),X2))) | sP0(X1,X2) | ~p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl52),
  inference(superposition,[],[f920,f164])).
fof(f1491,plain,(
  ( ! [X6,X8,X5] : (~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X6,X5))))) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5)))) | ~p(s(bool,X8)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X6,X5)),s('type.closLang.exp',sK6(X6,X5)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',sK4(X6,X5)))) | sP0(X5,X6)) ) | $spl100),
  inference(cnf_transformation,[],[f1491_D])).
fof(f1491_D,plain,(
  ( ! [X6,X8,X5] : (~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X6,X5))))) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5)))) | ~p(s(bool,X8)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X6,X5)),s('type.closLang.exp',sK6(X6,X5)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',sK4(X6,X5)))) | sP0(X5,X6)) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f1470,plain,(
  ( ! [X47,X45,X48,X46] : (sP0(X45,X46) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X46,X45))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X46,X45)),s('type.closLang.exp',sK6(X46,X45)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X45),X46))),s('type.num.num',sK4(X46,X45)))) | p(s(bool,X47)) | ~p(s(bool,X48)) | s(bool,X48) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X46,X45))))) )),
  inference(resolution,[],[f152,f168])).
fof(f1469,plain,(
  ( ! [X43,X41,X44,X42,X40] : (sP0(X40,X41) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X41,X40))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X41,X40)),s('type.closLang.exp',sK6(X41,X40)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X40),X41))),s('type.num.num',sK4(X41,X40)))) | ~p(s(bool,X42)) | ~p(s(bool,X43)) | s(bool,X43) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X41,X40)))) | s(bool,X42) != s(bool,X44)) )),
  inference(resolution,[],[f152,f119])).
fof(f1467,plain,(
  ( ! [X30,X33,X31,X34,X32] : (sP0(X30,X31) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X31,X30))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X31,X30)),s('type.closLang.exp',sK6(X31,X30)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X30),X31))),s('type.num.num',sK4(X31,X30)))) | p(s(bool,X32)) | ~p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X33) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X31,X30))))) )),
  inference(resolution,[],[f152,f118])).
fof(f1465,plain,(
  ( ! [X24,X23,X21,X22,X20] : (sP0(X20,X21) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X21,X20))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X21,X20)),s('type.closLang.exp',sK6(X21,X20)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X20),X21))),s('type.num.num',sK4(X21,X20)))) | p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X24) | s(bool,X23) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X21,X20))))) )),
  inference(resolution,[],[f152,f117])).
fof(f1464,plain,(
  ( ! [X19,X17,X15,X18,X16] : (sP0(X15,X16) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X16,X15))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X16,X15)),s('type.closLang.exp',sK6(X16,X15)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X15),X16))),s('type.num.num',sK4(X16,X15)))) | ~p(s(bool,X17)) | ~p(s(bool,X18)) | s(bool,X18) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X16,X15)))) | s(bool,X17) != s(bool,X19)) )),
  inference(resolution,[],[f152,f115])).
fof(f1462,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP0(X5,X6) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X6,X5))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X6,X5)),s('type.closLang.exp',sK6(X6,X5)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X5),X6))),s('type.num.num',sK4(X6,X5)))) | p(s(bool,X7)) | ~p(s(bool,X8)) | s(bool,X7) != s(bool,X9) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5))))) )),
  inference(resolution,[],[f152,f113])).
fof(f1485,plain,(
  ( ! [X4,X7,X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X5,X4))))) | s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X5,X4)))) | ~p(s(bool,X7)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X5,X4)),s('type.closLang.exp',sK6(X5,X4)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X4),X5))),s('type.num.num',sK4(X5,X4)))) | sP0(X4,X5)) ) | $spl98),
  inference(cnf_transformation,[],[f1485_D])).
fof(f1485_D,plain,(
  ( ! [X4,X7,X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X5,X4))))) | s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X5,X4)))) | ~p(s(bool,X7)) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X5,X4)),s('type.closLang.exp',sK6(X5,X4)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X4),X5))),s('type.num.num',sK4(X5,X4)))) | sP0(X4,X5)) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f1458,plain,(
  ( ! [X47,X45,X46,X44] : (sP0(X44,X45) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X45,X44))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X45,X44)),s('type.closLang.exp',sK6(X45,X44)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X44),X45))),s('type.num.num',sK4(X45,X44)))) | p(s(bool,X46)) | ~p(s(bool,X47)) | s(bool,X47) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X45,X44))))) )),
  inference(resolution,[],[f152,f168])).
fof(f1457,plain,(
  ( ! [X39,X43,X41,X42,X40] : (sP0(X39,X40) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X40,X39))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X40,X39)),s('type.closLang.exp',sK6(X40,X39)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X39),X40))),s('type.num.num',sK4(X40,X39)))) | ~p(s(bool,X41)) | ~p(s(bool,X42)) | s(bool,X42) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X40,X39)))) | s(bool,X41) != s(bool,X43)) )),
  inference(resolution,[],[f152,f119])).
fof(f1455,plain,(
  ( ! [X30,X33,X31,X29,X32] : (sP0(X29,X30) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X30,X29))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X30,X29)),s('type.closLang.exp',sK6(X30,X29)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X29),X30))),s('type.num.num',sK4(X30,X29)))) | p(s(bool,X31)) | ~p(s(bool,X32)) | ~p(s(bool,X33)) | s(bool,X32) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X30,X29))))) )),
  inference(resolution,[],[f152,f118])).
fof(f1453,plain,(
  ( ! [X23,X21,X19,X22,X20] : (sP0(X19,X20) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X20,X19))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X20,X19)),s('type.closLang.exp',sK6(X20,X19)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X19),X20))),s('type.num.num',sK4(X20,X19)))) | p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X21) != s(bool,X23) | s(bool,X22) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X20,X19))))) )),
  inference(resolution,[],[f152,f117])).
fof(f1452,plain,(
  ( ! [X14,X17,X15,X18,X16] : (sP0(X14,X15) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X15,X14))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X15,X14)),s('type.closLang.exp',sK6(X15,X14)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X14),X15))),s('type.num.num',sK4(X15,X14)))) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,X17) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X15,X14)))) | s(bool,X16) != s(bool,X18)) )),
  inference(resolution,[],[f152,f115])).
fof(f1450,plain,(
  ( ! [X6,X4,X8,X7,X5] : (sP0(X4,X5) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X5,X4))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(X5,X4)),s('type.closLang.exp',sK6(X5,X4)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(X4),X5))),s('type.num.num',sK4(X5,X4)))) | p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X6) != s(bool,X8) | s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X5,X4))))) )),
  inference(resolution,[],[f152,f113])).
fof(f1357,plain,(
  $false | $spl48),
  inference(equality_resolution,[],[f531])).
fof(f1349,plain,(
  ( ! [X4,X7,X5] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X5,X4)))) | s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X5,X4)))) | ~p(s(bool,X7)) | sP0(X4,X5) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X5,X4)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X4),X5))),s('type.num.num',sK7(X5,X4))))) ) | $spl96),
  inference(cnf_transformation,[],[f1349_D])).
fof(f1349_D,plain,(
  ( ! [X4,X7,X5] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X5,X4)))) | s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X5,X4)))) | ~p(s(bool,X7)) | sP0(X4,X5) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X5,X4)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X4),X5))),s('type.num.num',sK7(X5,X4))))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f1336,plain,(
  ( ! [X47,X45,X46,X44] : (sP0(X44,X45) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X45,X44)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X44),X45))),s('type.num.num',sK7(X45,X44)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X45,X44)))) | p(s(bool,X46)) | ~p(s(bool,X47)) | s(bool,X47) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X45,X44))))) )),
  inference(resolution,[],[f151,f168])).
fof(f1335,plain,(
  ( ! [X39,X43,X41,X42,X40] : (sP0(X39,X40) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X40,X39)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X39),X40))),s('type.num.num',sK7(X40,X39)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X40,X39)))) | ~p(s(bool,X41)) | ~p(s(bool,X42)) | s(bool,X42) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X40,X39)))) | s(bool,X41) != s(bool,X43)) )),
  inference(resolution,[],[f151,f119])).
fof(f1333,plain,(
  ( ! [X30,X33,X31,X29,X32] : (sP0(X29,X30) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X30,X29)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X29),X30))),s('type.num.num',sK7(X30,X29)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X30,X29)))) | p(s(bool,X31)) | ~p(s(bool,X32)) | ~p(s(bool,X33)) | s(bool,X32) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X30,X29))))) )),
  inference(resolution,[],[f151,f118])).
fof(f1331,plain,(
  ( ! [X23,X21,X19,X22,X20] : (sP0(X19,X20) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X20,X19)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X19),X20))),s('type.num.num',sK7(X20,X19)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X20,X19)))) | p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X21) != s(bool,X23) | s(bool,X22) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X20,X19))))) )),
  inference(resolution,[],[f151,f117])).
fof(f1330,plain,(
  ( ! [X14,X17,X15,X18,X16] : (sP0(X14,X15) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X15,X14)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X14),X15))),s('type.num.num',sK7(X15,X14)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X15,X14)))) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,X17) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X15,X14)))) | s(bool,X16) != s(bool,X18)) )),
  inference(resolution,[],[f151,f115])).
fof(f1328,plain,(
  ( ! [X6,X4,X8,X7,X5] : (sP0(X4,X5) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(X5,X4)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X4),X5))),s('type.num.num',sK7(X5,X4)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X5,X4)))) | p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X6) != s(bool,X8) | s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X5,X4))))) )),
  inference(resolution,[],[f151,f113])).
fof(f1316,plain,(
  ( ! [X6,X8,X5] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X6,X5)))) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5)))) | ~p(s(bool,X8)) | sP0(X5,X6) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X6,X5)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X5),X6))))))))) ) | $spl94),
  inference(cnf_transformation,[],[f1316_D])).
fof(f1316_D,plain,(
  ( ! [X6,X8,X5] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X6,X5)))) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5)))) | ~p(s(bool,X8)) | sP0(X5,X6) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X6,X5)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X5),X6))))))))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f1300,plain,(
  ( ! [X47,X45,X48,X46] : (sP0(X45,X46) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X46,X45)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X45),X46)))))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X46,X45)))) | p(s(bool,X47)) | ~p(s(bool,X48)) | s(bool,X48) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X46,X45))))) )),
  inference(resolution,[],[f149,f168])).
fof(f1299,plain,(
  ( ! [X43,X41,X44,X42,X40] : (sP0(X40,X41) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X41,X40)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X40),X41)))))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X41,X40)))) | ~p(s(bool,X42)) | ~p(s(bool,X43)) | s(bool,X43) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X41,X40)))) | s(bool,X42) != s(bool,X44)) )),
  inference(resolution,[],[f149,f119])).
fof(f1297,plain,(
  ( ! [X30,X33,X31,X34,X32] : (sP0(X30,X31) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X31,X30)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X30),X31)))))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X31,X30)))) | p(s(bool,X32)) | ~p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X33) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X31,X30))))) )),
  inference(resolution,[],[f149,f118])).
fof(f1295,plain,(
  ( ! [X24,X23,X21,X22,X20] : (sP0(X20,X21) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X21,X20)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X20),X21)))))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X21,X20)))) | p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X24) | s(bool,X23) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X21,X20))))) )),
  inference(resolution,[],[f149,f117])).
fof(f1294,plain,(
  ( ! [X19,X17,X15,X18,X16] : (sP0(X15,X16) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X16,X15)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X15),X16)))))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X16,X15)))) | ~p(s(bool,X17)) | ~p(s(bool,X18)) | s(bool,X18) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X16,X15)))) | s(bool,X17) != s(bool,X19)) )),
  inference(resolution,[],[f149,f115])).
fof(f1292,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP0(X5,X6) | p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X6,X5)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X5),X6)))))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X6,X5)))) | p(s(bool,X7)) | ~p(s(bool,X8)) | s(bool,X7) != s(bool,X9) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5))))) )),
  inference(resolution,[],[f149,f113])).
fof(f1312,plain,(
  ( ! [X2,X5,X3] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X3,X2)))) | s(bool,X5) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X3,X2)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3))))))) | p(s(bool,X5)) | sP0(X2,X3) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X3,X2)))))) ) | $spl92),
  inference(cnf_transformation,[],[f1312_D])).
fof(f1312_D,plain,(
  ( ! [X2,X5,X3] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X3,X2)))) | s(bool,X5) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X3,X2)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3))))))) | p(s(bool,X5)) | sP0(X2,X3) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X3,X2)))))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f1289,plain,(
  ( ! [X45,X43,X44,X42] : (sP0(X42,X43) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X43,X42))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X43,X42)))) | p(s(bool,X44)) | p(s(bool,X45)) | s(bool,X45) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X43,X42)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X42),X43)))))))) )),
  inference(resolution,[],[f149,f168])).
fof(f1288,plain,(
  ( ! [X39,X37,X41,X38,X40] : (sP0(X37,X38) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X38,X37))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X38,X37)))) | p(s(bool,X39)) | ~p(s(bool,X40)) | s(bool,X39) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X38,X37)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X37),X38))))))) | s(bool,X40) != s(bool,X41)) )),
  inference(resolution,[],[f149,f119])).
fof(f1285,plain,(
  ( ! [X26,X24,X23,X25,X22] : (sP0(X22,X23) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X23,X22))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X23,X22)))) | p(s(bool,X24)) | ~p(s(bool,X25)) | p(s(bool,X26)) | s(bool,X26) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X23,X22)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X22),X23)))))))) )),
  inference(resolution,[],[f149,f118])).
fof(f1284,plain,(
  ( ! [X21,X19,X17,X20,X18] : (sP0(X17,X18) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X18,X17))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X18,X17)))) | p(s(bool,X19)) | p(s(bool,X20)) | s(bool,X19) != s(bool,X21) | s(bool,X20) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X18,X17)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X17),X18)))))))) )),
  inference(resolution,[],[f149,f117])).
fof(f1283,plain,(
  ( ! [X14,X12,X15,X13,X16] : (sP0(X12,X13) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X13,X12))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X13,X12)))) | p(s(bool,X14)) | ~p(s(bool,X15)) | s(bool,X14) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X13,X12)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X12),X13))))))) | s(bool,X15) != s(bool,X16)) )),
  inference(resolution,[],[f149,f115])).
fof(f1281,plain,(
  ( ! [X6,X4,X2,X5,X3] : (sP0(X2,X3) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X3,X2))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X3,X2)))) | p(s(bool,X4)) | p(s(bool,X5)) | s(bool,X4) != s(bool,X6) | s(bool,X5) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(X3,X2)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X2),X3)))))))) )),
  inference(resolution,[],[f149,f113])).
fof(f1279,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | $spl6),
  inference(resolution,[],[f149,f342])).
fof(f251,plain,(
  ( ! [X23,X22] : (s(bool,X22) != s(bool,X23) | p(s(bool,X22)) | ~p(s(bool,X23))) ) | $spl14),
  inference(cnf_transformation,[],[f251_D])).
fof(f251_D,plain,(
  ( ! [X23,X22] : (s(bool,X22) != s(bool,X23) | p(s(bool,X22)) | ~p(s(bool,X23))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f1242,plain,(
  ( ! [X35,X34] : (sP0(X34,X35) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X35,X34))))) ) | $spl86),
  inference(cnf_transformation,[],[f1242_D])).
fof(f1242_D,plain,(
  ( ! [X35,X34] : (sP0(X34,X35) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X35,X34))))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f1250,plain,(
  ( ! [X52,X50,X51,X49] : (sP0(X49,X50) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X50,X49)))) | ~p(s(bool,X51)) | p(s(bool,X52)) | s(bool,X51) != s(bool,X52)) )),
  inference(subsumption_resolution,[],[f1228,f168])).
fof(f1228,plain,(
  ( ! [X52,X50,X51,X49] : (sP0(X49,X50) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X50,X49))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X50,X49)))) | ~p(s(bool,X51)) | p(s(bool,X52)) | s(bool,X51) != s(bool,X52)) )),
  inference(resolution,[],[f153,f168])).
fof(f1244,plain,(
  ( ! [X6,X8,X5] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X6,X5)))) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5)))) | ~p(s(bool,X8)) | sP0(X5,X6) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X6,X5)))))) ) | $spl88),
  inference(cnf_transformation,[],[f1244_D])).
fof(f1244_D,plain,(
  ( ! [X6,X8,X5] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X6,X5)))) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5)))) | ~p(s(bool,X8)) | sP0(X5,X6) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X6,X5)))))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f1227,plain,(
  ( ! [X47,X45,X48,X46] : (sP0(X45,X46) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X46,X45))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X46,X45)))) | p(s(bool,X47)) | ~p(s(bool,X48)) | s(bool,X48) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X46,X45))))) )),
  inference(resolution,[],[f153,f168])).
fof(f1226,plain,(
  ( ! [X43,X41,X44,X42,X40] : (sP0(X40,X41) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X41,X40))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X41,X40)))) | ~p(s(bool,X42)) | ~p(s(bool,X43)) | s(bool,X43) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X41,X40)))) | s(bool,X42) != s(bool,X44)) )),
  inference(resolution,[],[f153,f119])).
fof(f1249,plain,(
  ( ! [X39,X37,X35,X36] : (sP0(X35,X36) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X36,X35)))) | ~p(s(bool,X37)) | p(s(bool,X39)) | s(bool,X37) != s(bool,X39)) )),
  inference(subsumption_resolution,[],[f1248,f168])).
fof(f1248,plain,(
  ( ! [X39,X37,X35,X36] : (sP0(X35,X36) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X36,X35))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X36,X35)))) | ~p(s(bool,X37)) | p(s(bool,X39)) | s(bool,X37) != s(bool,X39)) )),
  inference(subsumption_resolution,[],[f1225,f168])).
fof(f1225,plain,(
  ( ! [X39,X37,X35,X38,X36] : (sP0(X35,X36) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X36,X35))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X36,X35)))) | ~p(s(bool,X37)) | ~p(s(bool,X38)) | p(s(bool,X39)) | s(bool,X37) != s(bool,X39)) )),
  inference(resolution,[],[f153,f118])).
fof(f1224,plain,(
  ( ! [X30,X33,X31,X34,X32] : (sP0(X30,X31) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X31,X30))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X31,X30)))) | p(s(bool,X32)) | ~p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X33) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X31,X30))))) )),
  inference(resolution,[],[f153,f118])).
fof(f1246,plain,(
  ( ! [X14,X10,X11] : (sP0(X10,X11) | s(bool,X14) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X11,X10)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X11,X10))))) ) | $spl90),
  inference(cnf_transformation,[],[f1246_D])).
fof(f1246_D,plain,(
  ( ! [X14,X10,X11] : (sP0(X10,X11) | s(bool,X14) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X11,X10)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X11,X10))))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f1247,plain,(
  ( ! [X28,X26,X29,X27,X25] : (sP0(X25,X26) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X26,X25)))) | ~p(s(bool,X27)) | p(s(bool,X28)) | s(bool,X29) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X26,X25)))) | s(bool,X27) != s(bool,X28)) )),
  inference(subsumption_resolution,[],[f1223,f168])).
fof(f1223,plain,(
  ( ! [X28,X26,X29,X27,X25] : (sP0(X25,X26) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X26,X25))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X26,X25)))) | ~p(s(bool,X27)) | p(s(bool,X28)) | s(bool,X29) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X26,X25)))) | s(bool,X27) != s(bool,X28)) )),
  inference(resolution,[],[f153,f117])).
fof(f1222,plain,(
  ( ! [X24,X23,X21,X22,X20] : (sP0(X20,X21) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X21,X20))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X21,X20)))) | p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X24) | s(bool,X23) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X21,X20))))) )),
  inference(resolution,[],[f153,f117])).
fof(f1221,plain,(
  ( ! [X19,X17,X15,X18,X16] : (sP0(X15,X16) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X16,X15))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X16,X15)))) | ~p(s(bool,X17)) | ~p(s(bool,X18)) | s(bool,X18) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X16,X15)))) | s(bool,X17) != s(bool,X19)) )),
  inference(resolution,[],[f153,f115])).
fof(f1245,plain,(
  ( ! [X14,X12,X10,X13,X11] : (sP0(X10,X11) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X11,X10)))) | ~p(s(bool,X12)) | p(s(bool,X13)) | s(bool,X14) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X11,X10)))) | s(bool,X12) != s(bool,X13)) )),
  inference(subsumption_resolution,[],[f1220,f168])).
fof(f1220,plain,(
  ( ! [X14,X12,X10,X13,X11] : (sP0(X10,X11) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X11,X10))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X11,X10)))) | ~p(s(bool,X12)) | p(s(bool,X13)) | s(bool,X14) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X11,X10)))) | s(bool,X12) != s(bool,X13)) )),
  inference(resolution,[],[f153,f113])).
fof(f1219,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP0(X5,X6) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X6,X5))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X6,X5)))) | p(s(bool,X7)) | ~p(s(bool,X8)) | s(bool,X7) != s(bool,X9) | s(bool,X8) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X6,X5))))) )),
  inference(resolution,[],[f153,f113])).
fof(f1243,plain,(
  ( ! [X50,X48,X51,X49] : (sP0(X48,X49) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X49,X48)))) | ~p(s(bool,X50)) | p(s(bool,X51)) | s(bool,X50) != s(bool,X51)) )),
  inference(subsumption_resolution,[],[f1216,f168])).
fof(f1216,plain,(
  ( ! [X50,X48,X51,X49] : (sP0(X48,X49) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X49,X48))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X49,X48)))) | ~p(s(bool,X50)) | p(s(bool,X51)) | s(bool,X50) != s(bool,X51)) )),
  inference(resolution,[],[f153,f168])).
fof(f1236,plain,(
  ( ! [X4,X7,X5] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X5,X4)))) | s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X5,X4)))) | ~p(s(bool,X7)) | sP0(X4,X5) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X5,X4)))))) ) | $spl82),
  inference(cnf_transformation,[],[f1236_D])).
fof(f1236_D,plain,(
  ( ! [X4,X7,X5] : (s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X5,X4)))) | s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X5,X4)))) | ~p(s(bool,X7)) | sP0(X4,X5) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X5,X4)))))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f1215,plain,(
  ( ! [X47,X45,X46,X44] : (sP0(X44,X45) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X45,X44))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X45,X44)))) | p(s(bool,X46)) | ~p(s(bool,X47)) | s(bool,X47) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X45,X44))))) )),
  inference(resolution,[],[f153,f168])).
fof(f1214,plain,(
  ( ! [X39,X43,X41,X42,X40] : (sP0(X39,X40) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X40,X39))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X40,X39)))) | ~p(s(bool,X41)) | ~p(s(bool,X42)) | s(bool,X42) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X40,X39)))) | s(bool,X41) != s(bool,X43)) )),
  inference(resolution,[],[f153,f119])).
fof(f1241,plain,(
  ( ! [X35,X38,X36,X34] : (sP0(X34,X35) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X35,X34)))) | ~p(s(bool,X36)) | p(s(bool,X38)) | s(bool,X36) != s(bool,X38)) )),
  inference(subsumption_resolution,[],[f1240,f168])).
fof(f1240,plain,(
  ( ! [X35,X38,X36,X34] : (sP0(X34,X35) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X35,X34))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X35,X34)))) | ~p(s(bool,X36)) | p(s(bool,X38)) | s(bool,X36) != s(bool,X38)) )),
  inference(subsumption_resolution,[],[f1213,f168])).
fof(f1213,plain,(
  ( ! [X37,X35,X38,X36,X34] : (sP0(X34,X35) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X35,X34))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X35,X34)))) | ~p(s(bool,X36)) | ~p(s(bool,X37)) | p(s(bool,X38)) | s(bool,X36) != s(bool,X38)) )),
  inference(resolution,[],[f153,f118])).
fof(f1212,plain,(
  ( ! [X30,X33,X31,X29,X32] : (sP0(X29,X30) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X30,X29))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X30,X29)))) | p(s(bool,X31)) | ~p(s(bool,X32)) | ~p(s(bool,X33)) | s(bool,X32) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X30,X29))))) )),
  inference(resolution,[],[f153,f118])).
fof(f1238,plain,(
  ( ! [X10,X13,X9] : (sP0(X9,X10) | s(bool,X13) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X10,X9)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X10,X9))))) ) | $spl84),
  inference(cnf_transformation,[],[f1238_D])).
fof(f1238_D,plain,(
  ( ! [X10,X13,X9] : (sP0(X9,X10) | s(bool,X13) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X10,X9)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X10,X9))))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f1239,plain,(
  ( ! [X28,X26,X24,X27,X25] : (sP0(X24,X25) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X25,X24)))) | ~p(s(bool,X26)) | p(s(bool,X27)) | s(bool,X28) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X25,X24)))) | s(bool,X26) != s(bool,X27)) )),
  inference(subsumption_resolution,[],[f1211,f168])).
fof(f1211,plain,(
  ( ! [X28,X26,X24,X27,X25] : (sP0(X24,X25) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X25,X24))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X25,X24)))) | ~p(s(bool,X26)) | p(s(bool,X27)) | s(bool,X28) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X25,X24)))) | s(bool,X26) != s(bool,X27)) )),
  inference(resolution,[],[f153,f117])).
fof(f1210,plain,(
  ( ! [X23,X21,X19,X22,X20] : (sP0(X19,X20) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X20,X19))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X20,X19)))) | p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X21) != s(bool,X23) | s(bool,X22) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X20,X19))))) )),
  inference(resolution,[],[f153,f117])).
fof(f1209,plain,(
  ( ! [X14,X17,X15,X18,X16] : (sP0(X14,X15) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X15,X14))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X15,X14)))) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,X17) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X15,X14)))) | s(bool,X16) != s(bool,X18)) )),
  inference(resolution,[],[f153,f115])).
fof(f1237,plain,(
  ( ! [X12,X10,X13,X11,X9] : (sP0(X9,X10) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X10,X9)))) | ~p(s(bool,X11)) | p(s(bool,X12)) | s(bool,X13) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X10,X9)))) | s(bool,X11) != s(bool,X12)) )),
  inference(subsumption_resolution,[],[f1208,f168])).
fof(f1208,plain,(
  ( ! [X12,X10,X13,X11,X9] : (sP0(X9,X10) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X10,X9))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X10,X9)))) | ~p(s(bool,X11)) | p(s(bool,X12)) | s(bool,X13) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X10,X9)))) | s(bool,X11) != s(bool,X12)) )),
  inference(resolution,[],[f153,f113])).
fof(f1207,plain,(
  ( ! [X6,X4,X8,X7,X5] : (sP0(X4,X5) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(X5,X4))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(X5,X4)))) | p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X6) != s(bool,X8) | s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(X5,X4))))) )),
  inference(resolution,[],[f153,f113])).
fof(f1197,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,X3) | s(bool,'T_0') = s(bool,X2)) ) | $spl42),
  inference(duplicate_literal_removal,[],[f1185])).
fof(f1185,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,X3) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl42),
  inference(superposition,[],[f514,f164])).
fof(f1198,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl42),
  inference(subsumption_resolution,[],[f1184,f514])).
fof(f1184,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0)) ) | $spl42),
  inference(superposition,[],[f514,f164])).
fof(f1177,plain,(
  ( ! [X26,X27] : (p(s(bool,X26)) | ~p(s(bool,X27)) | s(bool,X27) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | $spl39),
  inference(resolution,[],[f399,f168])).
fof(f1176,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,X23)) | ~p(s(bool,X24)) | s(bool,X24) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,X23) != s(bool,X25)) ) | $spl39),
  inference(resolution,[],[f399,f119])).
fof(f1174,plain,(
  ( ! [X19,X17,X18] : (p(s(bool,X17)) | ~p(s(bool,X18)) | ~p(s(bool,X19)) | s(bool,X18) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | $spl39),
  inference(resolution,[],[f399,f118])).
fof(f531,plain,(
  ( ! [X7] : (s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | $spl48),
  inference(cnf_transformation,[],[f531_D])).
fof(f531_D,plain,(
  ( ! [X7] : (s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f1173,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,X14)) | p(s(bool,X15)) | s(bool,X16) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,X14) != s(bool,X15)) ) | $spl39),
  inference(resolution,[],[f399,f117])).
fof(f1172,plain,(
  ( ! [X12,X13,X11] : (p(s(bool,X11)) | ~p(s(bool,X12)) | s(bool,X11) != s(bool,X13) | s(bool,X12) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | $spl39),
  inference(resolution,[],[f399,f117])).
fof(f1171,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,X8)) | ~p(s(bool,X9)) | s(bool,X9) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,X8) != s(bool,X10)) ) | $spl39),
  inference(resolution,[],[f399,f115])).
fof(f1170,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,X5)) | p(s(bool,X6)) | s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,X5) != s(bool,X6)) ) | $spl39),
  inference(resolution,[],[f399,f113])).
fof(f1169,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,X2)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X4) | s(bool,X3) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | $spl39),
  inference(resolution,[],[f399,f113])).
fof(f1161,plain,(
  ( ! [X2,X0,X5,X3,X1] : (~sP0(X1,X2) | p(s(bool,X5)) | s(bool,X5) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X0))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X0))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X1),X2))),s('type.num.num',X3)))) ) | $spl78),
  inference(cnf_transformation,[],[f1161_D])).
fof(f1161_D,plain,(
  ( ! [X2,X0,X5,X3,X1] : (~sP0(X1,X2) | p(s(bool,X5)) | s(bool,X5) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X0))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X0))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X1),X2))),s('type.num.num',X3)))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f1144,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X56))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X57),X58))),s('type.num.num',X59))) | ~sP0(X57,X58) | p(s(bool,X60)) | p(s(bool,X61)) | s(bool,X61) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X56)))) )),
  inference(resolution,[],[f144,f168])).
fof(f1143,plain,(
  ( ! [X54,X52,X50,X55,X53,X51,X49] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X49))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X50),X51))),s('type.num.num',X52))) | ~sP0(X50,X51) | p(s(bool,X53)) | ~p(s(bool,X54)) | s(bool,X53) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X49))) | s(bool,X54) != s(bool,X55)) )),
  inference(resolution,[],[f144,f119])).
fof(f1162,plain,(
  ( ! [X10,X8,X7,X13,X9] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X7))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X8),X9))),s('type.num.num',X10))) | s(bool,X13) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X7))) | ~sP0(X8,X9)) ) | $spl80),
  inference(cnf_transformation,[],[f1162_D])).
fof(f1162_D,plain,(
  ( ! [X10,X8,X7,X13,X9] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X7))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X8),X9))),s('type.num.num',X10))) | s(bool,X13) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X7))) | ~sP0(X8,X9)) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f1142,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X42))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X43),X44))),s('type.num.num',X45))) | ~sP0(X43,X44) | p(s(bool,X46)) | ~p(s(bool,X47)) | s(bool,X46) != s(bool,X47) | s(bool,X48) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X42)))) )),
  inference(resolution,[],[f144,f119])).
fof(f1140,plain,(
  ( ! [X30,X28,X33,X31,X29,X34,X32] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X28))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X29),X30))),s('type.num.num',X31))) | ~sP0(X29,X30) | p(s(bool,X32)) | ~p(s(bool,X33)) | p(s(bool,X34)) | s(bool,X34) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X28)))) )),
  inference(resolution,[],[f144,f118])).
fof(f1139,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X21))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X22),X23))),s('type.num.num',X24))) | ~sP0(X22,X23) | p(s(bool,X25)) | p(s(bool,X26)) | s(bool,X25) != s(bool,X27) | s(bool,X26) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X21)))) )),
  inference(resolution,[],[f144,f117])).
fof(f1138,plain,(
  ( ! [X14,X19,X17,X15,X20,X18,X16] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X14))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X15),X16))),s('type.num.num',X17))) | ~sP0(X15,X16) | p(s(bool,X18)) | ~p(s(bool,X19)) | s(bool,X18) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X14))) | s(bool,X19) != s(bool,X20)) )),
  inference(resolution,[],[f144,f115])).
fof(f1137,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X7))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X8),X9))),s('type.num.num',X10))) | ~sP0(X8,X9) | p(s(bool,X11)) | ~p(s(bool,X12)) | s(bool,X11) != s(bool,X12) | s(bool,X13) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X7)))) )),
  inference(resolution,[],[f144,f115])).
fof(f1136,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),X0))))) != s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(X1),X2))),s('type.num.num',X3))) | ~sP0(X1,X2) | p(s(bool,X4)) | p(s(bool,X5)) | s(bool,X4) != s(bool,X6) | s(bool,X5) != s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X0)))) )),
  inference(resolution,[],[f144,f113])).
fof(f1122,plain,(
  ( ! [X4,X2,X0,X1] : (~sP0(X1,X2) | s(bool,X4) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))) | ~p(s(bool,X4)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0))))) ) | $spl76),
  inference(cnf_transformation,[],[f1122_D])).
fof(f1122_D,plain,(
  ( ! [X4,X2,X0,X1] : (~sP0(X1,X2) | s(bool,X4) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))) | ~p(s(bool,X4)) | p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0))))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f1106,plain,(
  ( ! [X52,X50,X48,X51,X49] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X48)))) | ~sP0(X49,X50) | p(s(bool,X51)) | ~p(s(bool,X52)) | s(bool,X52) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X48))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X49),X50)))))))) )),
  inference(resolution,[],[f145,f168])).
fof(f1105,plain,(
  ( ! [X47,X45,X43,X46,X44,X42] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X42)))) | ~sP0(X43,X44) | ~p(s(bool,X45)) | ~p(s(bool,X46)) | s(bool,X46) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X42))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X43),X44))))))) | s(bool,X45) != s(bool,X47)) )),
  inference(resolution,[],[f145,f119])).
fof(f1103,plain,(
  ( ! [X30,X35,X33,X31,X34,X32] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X30)))) | ~sP0(X31,X32) | p(s(bool,X33)) | ~p(s(bool,X34)) | ~p(s(bool,X35)) | s(bool,X34) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X30))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X31),X32)))))))) )),
  inference(resolution,[],[f145,f118])).
fof(f1101,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X18)))) | ~sP0(X19,X20) | p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X21) != s(bool,X23) | s(bool,X22) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X18))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X19),X20)))))))) )),
  inference(resolution,[],[f145,f117])).
fof(f1100,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X12)))) | ~sP0(X13,X14) | ~p(s(bool,X15)) | ~p(s(bool,X16)) | s(bool,X16) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X12))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X13),X14))))))) | s(bool,X15) != s(bool,X17)) )),
  inference(resolution,[],[f145,f115])).
fof(f1098,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0)))) | ~sP0(X1,X2) | p(s(bool,X3)) | ~p(s(bool,X4)) | s(bool,X3) != s(bool,X5) | s(bool,X4) != s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2)))))))) )),
  inference(resolution,[],[f145,f113])).
fof(f1117,plain,(
  ( ! [X4,X2,X0,X1] : (~sP0(X1,X2) | p(s(bool,X4)) | s(bool,X4) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))))) ) | $spl70),
  inference(cnf_transformation,[],[f1117_D])).
fof(f1117_D,plain,(
  ( ! [X4,X2,X0,X1] : (~sP0(X1,X2) | p(s(bool,X4)) | s(bool,X4) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0))) | ~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f1096,plain,(
  ( ! [X52,X50,X48,X51,X49] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X48))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X49),X50)))))))) | ~sP0(X49,X50) | p(s(bool,X51)) | p(s(bool,X52)) | s(bool,X52) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X48)))) )),
  inference(resolution,[],[f145,f168])).
fof(f1095,plain,(
  ( ! [X47,X45,X43,X46,X44,X42] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X42))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X43),X44)))))))) | ~sP0(X43,X44) | p(s(bool,X45)) | ~p(s(bool,X46)) | s(bool,X45) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X42))) | s(bool,X46) != s(bool,X47)) )),
  inference(resolution,[],[f145,f119])).
fof(f1119,plain,(
  ( ! [X6,X11] : (s(bool,X11) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X6)))) ) | $spl72),
  inference(cnf_transformation,[],[f1119_D])).
fof(f1119_D,plain,(
  ( ! [X6,X11] : (s(bool,X11) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X6)))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f1120,plain,(
  ( ! [X8,X7] : (~sP0(X7,X8)) ) | $spl74),
  inference(cnf_transformation,[],[f1120_D])).
fof(f1120_D,plain,(
  ( ! [X8,X7] : (~sP0(X7,X8)) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f1121,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (~sP0(X37,X38) | p(s(bool,X39)) | ~p(s(bool,X40)) | s(bool,X39) != s(bool,X40) | s(bool,X41) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X36)))) )),
  inference(subsumption_resolution,[],[f1094,f168])).
fof(f1094,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X36))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X37),X38)))))))) | ~sP0(X37,X38) | p(s(bool,X39)) | ~p(s(bool,X40)) | s(bool,X39) != s(bool,X40) | s(bool,X41) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X36)))) )),
  inference(resolution,[],[f145,f119])).
fof(f1092,plain,(
  ( ! [X28,X26,X24,X29,X27,X25] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X24))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X25),X26)))))))) | ~sP0(X25,X26) | p(s(bool,X27)) | ~p(s(bool,X28)) | p(s(bool,X29)) | s(bool,X29) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X24)))) )),
  inference(resolution,[],[f145,f118])).
fof(f1091,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X18))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X19),X20)))))))) | ~sP0(X19,X20) | p(s(bool,X21)) | p(s(bool,X22)) | s(bool,X21) != s(bool,X23) | s(bool,X22) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X18)))) )),
  inference(resolution,[],[f145,f117])).
fof(f1090,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X12))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X13),X14)))))))) | ~sP0(X13,X14) | p(s(bool,X15)) | ~p(s(bool,X16)) | s(bool,X15) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X12))) | s(bool,X16) != s(bool,X17)) )),
  inference(resolution,[],[f145,f115])).
fof(f1118,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (~sP0(X7,X8) | p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X9) != s(bool,X10) | s(bool,X11) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X6)))) )),
  inference(subsumption_resolution,[],[f1089,f168])).
fof(f1089,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X7),X8)))))))) | ~sP0(X7,X8) | p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X9) != s(bool,X10) | s(bool,X11) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X6)))) )),
  inference(resolution,[],[f145,f115])).
fof(f1088,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X0))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2)))))))) | ~sP0(X1,X2) | p(s(bool,X3)) | p(s(bool,X4)) | s(bool,X3) != s(bool,X5) | s(bool,X4) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',X0)))) )),
  inference(resolution,[],[f145,f113])).
fof(f1075,plain,(
  ( ! [X33,X34,X32] : (s(bool,'F_0') = s(bool,X32) | p(s(bool,X33)) | p(s(bool,X34)) | s(bool,X32) != s(bool,X34)) ) | $spl50),
  inference(resolution,[],[f555,f168])).
fof(f1074,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,'F_0') = s(bool,X28) | p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X28) != s(bool,X29) | s(bool,X30) != s(bool,X31)) ) | $spl50),
  inference(resolution,[],[f555,f119])).
fof(f1087,plain,(
  ( ! [X4,X7] : (s(bool,'F_0') = s(bool,X4) | s(bool,X4) != s(bool,X7)) ) | $spl68),
  inference(cnf_transformation,[],[f1087_D])).
fof(f1087_D,plain,(
  ( ! [X4,X7] : (s(bool,'F_0') = s(bool,X4) | s(bool,X4) != s(bool,X7)) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f1073,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'F_0') = s(bool,X24) | p(s(bool,X25)) | ~p(s(bool,X26)) | s(bool,X25) != s(bool,X26) | s(bool,X24) != s(bool,X27)) ) | $spl50),
  inference(resolution,[],[f555,f119])).
fof(f1071,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,'F_0') = s(bool,X16) | p(s(bool,X17)) | ~p(s(bool,X18)) | p(s(bool,X19)) | s(bool,X16) != s(bool,X19)) ) | $spl50),
  inference(resolution,[],[f555,f118])).
fof(f1070,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'F_0') = s(bool,X12) | p(s(bool,X13)) | p(s(bool,X14)) | s(bool,X13) != s(bool,X15) | s(bool,X12) != s(bool,X14)) ) | $spl50),
  inference(resolution,[],[f555,f117])).
fof(f1069,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'F_0') = s(bool,X8) | p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X8) != s(bool,X9) | s(bool,X10) != s(bool,X11)) ) | $spl50),
  inference(resolution,[],[f555,f115])).
fof(f1068,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'F_0') = s(bool,X4) | p(s(bool,X5)) | ~p(s(bool,X6)) | s(bool,X5) != s(bool,X6) | s(bool,X4) != s(bool,X7)) ) | $spl50),
  inference(resolution,[],[f555,f115])).
fof(f1067,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | s(bool,X1) != s(bool,X3) | s(bool,X0) != s(bool,X2)) ) | $spl50),
  inference(resolution,[],[f555,f113])).
fof(f1040,plain,(
  ( ! [X107,X106] : (s(bool,'F_0') != s(bool,X107) | p(s(bool,X106)) | ~p(s(bool,X107))) ) | $spl6),
  inference(forward_demodulation,[],[f1039,f178])).
fof(f1039,plain,(
  ( ! [X107,X106] : (p(s(bool,X106)) | ~p(s(bool,X107)) | s(bool,X107) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(subsumption_resolution,[],[f1003,f165])).
fof(f1003,plain,(
  ( ! [X107,X106] : (p(s(bool,'F_0')) | p(s(bool,X106)) | ~p(s(bool,X107)) | s(bool,X107) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(superposition,[],[f168,f178])).
fof(f1036,plain,(
  ( ! [X94,X95,X93] : (s(bool,'F_0') != s(bool,X94) | ~p(s(bool,X93)) | ~p(s(bool,X94)) | s(bool,X93) != s(bool,X95)) ) | $spl6),
  inference(forward_demodulation,[],[f1035,f178])).
fof(f1035,plain,(
  ( ! [X94,X95,X93] : (~p(s(bool,X93)) | ~p(s(bool,X94)) | s(bool,X94) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X93) != s(bool,X95)) ) | $spl6),
  inference(subsumption_resolution,[],[f997,f165])).
fof(f997,plain,(
  ( ! [X94,X95,X93] : (p(s(bool,'F_0')) | ~p(s(bool,X93)) | ~p(s(bool,X94)) | s(bool,X94) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X93) != s(bool,X95)) ) | $spl6),
  inference(superposition,[],[f119,f178])).
fof(f245,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5)) ) | $spl8),
  inference(cnf_transformation,[],[f245_D])).
fof(f245_D,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f1033,plain,(
  ( ! [X88,X87,X89] : (s(bool,'F_0') != s(bool,X87) | ~p(s(bool,X87)) | s(bool,X88) != s(bool,X89)) ) | $spl6),
  inference(subsumption_resolution,[],[f1032,f165])).
fof(f1032,plain,(
  ( ! [X88,X87,X89] : (p(s(bool,'F_0')) | s(bool,'F_0') != s(bool,X87) | ~p(s(bool,X87)) | s(bool,X88) != s(bool,X89)) ) | $spl6),
  inference(subsumption_resolution,[],[f1031,f168])).
fof(f1031,plain,(
  ( ! [X88,X87,X89] : (p(s(bool,'F_0')) | s(bool,'F_0') != s(bool,X87) | ~p(s(bool,X88)) | ~p(s(bool,X87)) | s(bool,X88) != s(bool,X89)) ) | $spl6),
  inference(forward_demodulation,[],[f995,f178])).
fof(f995,plain,(
  ( ! [X88,X87,X89] : (s(bool,'F_0') != s(bool,X87) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) | ~p(s(bool,X88)) | ~p(s(bool,X87)) | s(bool,X88) != s(bool,X89)) ) | $spl6),
  inference(superposition,[],[f119,f178])).
fof(f1030,plain,(
  ( ! [X85,X86,X84] : (s(bool,'F_0') != s(bool,X84) | p(s(bool,X85)) | ~p(s(bool,X86)) | s(bool,X85) != s(bool,X86)) ) | $spl6),
  inference(subsumption_resolution,[],[f994,f117])).
fof(f994,plain,(
  ( ! [X85,X86,X84] : (s(bool,'F_0') != s(bool,X84) | p(s(bool,X85)) | ~p(s(bool,X84)) | ~p(s(bool,X86)) | s(bool,X85) != s(bool,X86)) ) | $spl6),
  inference(superposition,[],[f119,f178])).
fof(f1029,plain,(
  ( ! [X83,X81,X82] : (s(bool,'F_0') != s(bool,X81) | p(s(bool,X82)) | ~p(s(bool,X83)) | s(bool,X82) != s(bool,X83)) ) | $spl6),
  inference(subsumption_resolution,[],[f993,f168])).
fof(f993,plain,(
  ( ! [X83,X81,X82] : (s(bool,'F_0') != s(bool,X81) | p(s(bool,X82)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) | ~p(s(bool,X83)) | s(bool,X82) != s(bool,X83)) ) | $spl6),
  inference(superposition,[],[f119,f178])).
fof(f1027,plain,(
  ( ! [X70,X71,X69] : (s(bool,'F_0') != s(bool,X70) | p(s(bool,X69)) | ~p(s(bool,X70)) | ~p(s(bool,X71))) ) | $spl6),
  inference(forward_demodulation,[],[f1026,f178])).
fof(f1026,plain,(
  ( ! [X70,X71,X69] : (p(s(bool,X69)) | ~p(s(bool,X70)) | ~p(s(bool,X71)) | s(bool,X70) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(subsumption_resolution,[],[f989,f165])).
fof(f989,plain,(
  ( ! [X70,X71,X69] : (p(s(bool,'F_0')) | p(s(bool,X69)) | ~p(s(bool,X70)) | ~p(s(bool,X71)) | s(bool,X70) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(superposition,[],[f118,f178])).
fof(f1022,plain,(
  ( ! [X54,X56,X55] : (s(bool,'F_0') != s(bool,X55) | p(s(bool,X54)) | ~p(s(bool,X55)) | s(bool,X54) != s(bool,X56)) ) | $spl6),
  inference(forward_demodulation,[],[f1021,f178])).
fof(f1021,plain,(
  ( ! [X54,X56,X55] : (p(s(bool,X54)) | ~p(s(bool,X55)) | s(bool,X54) != s(bool,X56) | s(bool,X55) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(subsumption_resolution,[],[f984,f165])).
fof(f984,plain,(
  ( ! [X54,X56,X55] : (p(s(bool,'F_0')) | p(s(bool,X54)) | ~p(s(bool,X55)) | s(bool,X54) != s(bool,X56) | s(bool,X55) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(superposition,[],[f117,f178])).
fof(f1018,plain,(
  ( ! [X35,X33,X34] : (s(bool,'F_0') != s(bool,X34) | ~p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X33) != s(bool,X35)) ) | $spl6),
  inference(forward_demodulation,[],[f1017,f178])).
fof(f1017,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X34) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X33) != s(bool,X35)) ) | $spl6),
  inference(subsumption_resolution,[],[f977,f165])).
fof(f977,plain,(
  ( ! [X35,X33,X34] : (p(s(bool,'F_0')) | ~p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X34) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X33) != s(bool,X35)) ) | $spl6),
  inference(superposition,[],[f115,f178])).
fof(f1016,plain,(
  ( ! [X30,X31,X32] : (s(bool,'F_0') != s(bool,X30) | ~p(s(bool,X30)) | s(bool,X31) != s(bool,X32)) ) | $spl6),
  inference(subsumption_resolution,[],[f1015,f165])).
fof(f1015,plain,(
  ( ! [X30,X31,X32] : (p(s(bool,'F_0')) | s(bool,'F_0') != s(bool,X30) | ~p(s(bool,X30)) | s(bool,X31) != s(bool,X32)) ) | $spl6),
  inference(subsumption_resolution,[],[f1014,f168])).
fof(f1014,plain,(
  ( ! [X30,X31,X32] : (p(s(bool,'F_0')) | s(bool,'F_0') != s(bool,X30) | ~p(s(bool,X31)) | ~p(s(bool,X30)) | s(bool,X31) != s(bool,X32)) ) | $spl6),
  inference(forward_demodulation,[],[f976,f178])).
fof(f976,plain,(
  ( ! [X30,X31,X32] : (s(bool,'F_0') != s(bool,X30) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) | ~p(s(bool,X31)) | ~p(s(bool,X30)) | s(bool,X31) != s(bool,X32)) ) | $spl6),
  inference(superposition,[],[f115,f178])).
fof(f1012,plain,(
  ( ! [X26,X24,X25] : (s(bool,'F_0') != s(bool,X24) | p(s(bool,X25)) | ~p(s(bool,X26)) | s(bool,X25) != s(bool,X26)) ) | $spl6),
  inference(subsumption_resolution,[],[f974,f168])).
fof(f974,plain,(
  ( ! [X26,X24,X25] : (s(bool,'F_0') != s(bool,X24) | p(s(bool,X25)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) | ~p(s(bool,X26)) | s(bool,X25) != s(bool,X26)) ) | $spl6),
  inference(superposition,[],[f115,f178])).
fof(f1011,plain,(
  ( ! [X23,X21,X22] : (s(bool,'F_0') != s(bool,X21) | p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X23)) ) | $spl6),
  inference(subsumption_resolution,[],[f973,f117])).
fof(f973,plain,(
  ( ! [X23,X21,X22] : (s(bool,'F_0') != s(bool,X21) | p(s(bool,X22)) | ~p(s(bool,X21)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X23)) ) | $spl6),
  inference(superposition,[],[f115,f178])).
fof(f1010,plain,(
  ( ! [X14,X12,X13] : (s(bool,'F_0') != s(bool,X13) | p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X12) != s(bool,X14)) ) | $spl6),
  inference(forward_demodulation,[],[f1009,f178])).
fof(f1009,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X12) != s(bool,X14) | s(bool,X13) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(subsumption_resolution,[],[f970,f165])).
fof(f970,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,'F_0')) | p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X12) != s(bool,X14) | s(bool,X13) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(superposition,[],[f113,f178])).
fof(f957,plain,(
  ( ! [X1] : (~p(s(bool,X1)) | s(bool,X1) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl62),
  inference(cnf_transformation,[],[f957_D])).
fof(f957_D,plain,(
  ( ! [X1] : (~p(s(bool,X1)) | s(bool,X1) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f953,plain,(
  ( ! [X24,X25] : (p(s(bool,X24)) | ~p(s(bool,X25)) | s(bool,X25) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(resolution,[],[f906,f168])).
fof(f906,plain,(
  ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) | $spl6),
  inference(resolution,[],[f154,f342])).
fof(f952,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X22) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X21) != s(bool,X23)) ) | $spl6),
  inference(resolution,[],[f906,f119])).
fof(f950,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,X15)) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,X16) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(resolution,[],[f906,f118])).
fof(f958,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl64),
  inference(cnf_transformation,[],[f958_D])).
fof(f958_D,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f949,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,X12)) | p(s(bool,X13)) | s(bool,X14) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X12) != s(bool,X13)) ) | $spl6),
  inference(resolution,[],[f906,f117])).
fof(f948,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,X10) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(resolution,[],[f906,f117])).
fof(f947,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X7) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X6) != s(bool,X8)) ) | $spl6),
  inference(resolution,[],[f906,f115])).
fof(f946,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,X3)) | p(s(bool,X4)) | s(bool,X5) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X3) != s(bool,X4)) ) | $spl6),
  inference(resolution,[],[f906,f113])).
fof(f945,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,X1) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(resolution,[],[f906,f113])).
fof(f941,plain,(
  ( ! [X2,X5,X3] : (~sP0(X2,X3) | s(bool,X5) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X2),X3))) | p(s(bool,X5))) ) | $spl58),
  inference(cnf_transformation,[],[f941_D])).
fof(f941_D,plain,(
  ( ! [X2,X5,X3] : (~sP0(X2,X3) | s(bool,X5) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X2),X3))) | p(s(bool,X5))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f935,plain,(
  ( ! [X45,X43,X44,X42] : (~sP0(X42,X43) | p(s(bool,X44)) | p(s(bool,X45)) | s(bool,X45) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X42),X43)))) )),
  inference(resolution,[],[f155,f168])).
fof(f934,plain,(
  ( ! [X39,X37,X41,X38,X40] : (~sP0(X37,X38) | p(s(bool,X39)) | ~p(s(bool,X40)) | s(bool,X39) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X37),X38))) | s(bool,X40) != s(bool,X41)) )),
  inference(resolution,[],[f155,f119])).
fof(f942,plain,(
  ( ! [X8,X7,X11] : (~sP0(X7,X8) | s(bool,X11) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X7),X8)))) ) | $spl60),
  inference(cnf_transformation,[],[f942_D])).
fof(f942_D,plain,(
  ( ! [X8,X7,X11] : (~sP0(X7,X8) | s(bool,X11) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X7),X8)))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f933,plain,(
  ( ! [X35,X33,X36,X34,X32] : (~sP0(X32,X33) | p(s(bool,X34)) | ~p(s(bool,X35)) | s(bool,X34) != s(bool,X35) | s(bool,X36) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X32),X33)))) )),
  inference(resolution,[],[f155,f119])).
fof(f931,plain,(
  ( ! [X26,X24,X23,X25,X22] : (~sP0(X22,X23) | p(s(bool,X24)) | ~p(s(bool,X25)) | p(s(bool,X26)) | s(bool,X26) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X22),X23)))) )),
  inference(resolution,[],[f155,f118])).
fof(f930,plain,(
  ( ! [X21,X19,X17,X20,X18] : (~sP0(X17,X18) | p(s(bool,X19)) | p(s(bool,X20)) | s(bool,X19) != s(bool,X21) | s(bool,X20) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X17),X18)))) )),
  inference(resolution,[],[f155,f117])).
fof(f929,plain,(
  ( ! [X14,X12,X15,X13,X16] : (~sP0(X12,X13) | p(s(bool,X14)) | ~p(s(bool,X15)) | s(bool,X14) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X12),X13))) | s(bool,X15) != s(bool,X16)) )),
  inference(resolution,[],[f155,f115])).
fof(f928,plain,(
  ( ! [X10,X8,X7,X11,X9] : (~sP0(X7,X8) | p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X9) != s(bool,X10) | s(bool,X11) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X7),X8)))) )),
  inference(resolution,[],[f155,f115])).
fof(f927,plain,(
  ( ! [X6,X4,X2,X5,X3] : (~sP0(X2,X3) | p(s(bool,X4)) | p(s(bool,X5)) | s(bool,X4) != s(bool,X6) | s(bool,X5) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X2),X3)))) )),
  inference(resolution,[],[f155,f113])).
fof(f916,plain,(
  ( ! [X47,X45,X46,X44] : (sP0(X44,X45) | ~p(s(bool,X46)) | p(s(bool,X47)) | s(bool,X46) != s(bool,X47)) )),
  inference(resolution,[],[f154,f168])).
fof(f920,plain,(
  ( ! [X0,X3,X1] : (s(bool,X3) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1))) | sP0(X0,X1) | ~p(s(bool,X3))) ) | $spl52),
  inference(cnf_transformation,[],[f920_D])).
fof(f920_D,plain,(
  ( ! [X0,X3,X1] : (s(bool,X3) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1))) | sP0(X0,X1) | ~p(s(bool,X3))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f915,plain,(
  ( ! [X43,X41,X42,X40] : (sP0(X40,X41) | p(s(bool,X42)) | ~p(s(bool,X43)) | s(bool,X43) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X40),X41)))) )),
  inference(resolution,[],[f154,f168])).
fof(f914,plain,(
  ( ! [X39,X37,X35,X38,X36] : (sP0(X35,X36) | ~p(s(bool,X37)) | ~p(s(bool,X38)) | s(bool,X38) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X35),X36))) | s(bool,X37) != s(bool,X39)) )),
  inference(resolution,[],[f154,f119])).
fof(f922,plain,(
  ( ! [X30,X31,X34,X32] : (sP0(X30,X31) | ~p(s(bool,X32)) | p(s(bool,X34)) | s(bool,X32) != s(bool,X34)) )),
  inference(subsumption_resolution,[],[f913,f168])).
fof(f913,plain,(
  ( ! [X30,X33,X31,X34,X32] : (sP0(X30,X31) | ~p(s(bool,X32)) | ~p(s(bool,X33)) | p(s(bool,X34)) | s(bool,X32) != s(bool,X34)) )),
  inference(resolution,[],[f154,f118])).
fof(f912,plain,(
  ( ! [X28,X26,X29,X27,X25] : (sP0(X25,X26) | p(s(bool,X27)) | ~p(s(bool,X28)) | ~p(s(bool,X29)) | s(bool,X28) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X25),X26)))) )),
  inference(resolution,[],[f154,f118])).
fof(f921,plain,(
  ( ! [X6,X5,X9] : (sP0(X5,X6) | s(bool,X9) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6)))) ) | $spl54),
  inference(cnf_transformation,[],[f921_D])).
fof(f921_D,plain,(
  ( ! [X6,X5,X9] : (sP0(X5,X6) | s(bool,X9) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6)))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f911,plain,(
  ( ! [X24,X23,X21,X22,X20] : (sP0(X20,X21) | ~p(s(bool,X22)) | p(s(bool,X23)) | s(bool,X24) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X20),X21))) | s(bool,X22) != s(bool,X23)) )),
  inference(resolution,[],[f154,f117])).
fof(f910,plain,(
  ( ! [X19,X17,X15,X18,X16] : (sP0(X15,X16) | p(s(bool,X17)) | ~p(s(bool,X18)) | s(bool,X17) != s(bool,X19) | s(bool,X18) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X15),X16)))) )),
  inference(resolution,[],[f154,f117])).
fof(f909,plain,(
  ( ! [X14,X12,X10,X13,X11] : (sP0(X10,X11) | ~p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X13) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X10),X11))) | s(bool,X12) != s(bool,X14)) )),
  inference(resolution,[],[f154,f115])).
fof(f908,plain,(
  ( ! [X6,X8,X7,X5,X9] : (sP0(X5,X6) | ~p(s(bool,X7)) | p(s(bool,X8)) | s(bool,X9) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X5),X6))) | s(bool,X7) != s(bool,X8)) )),
  inference(resolution,[],[f154,f113])).
fof(f907,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP0(X0,X1) | p(s(bool,X2)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X4) | s(bool,X3) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X1)))) )),
  inference(resolution,[],[f154,f113])).
fof(f899,plain,(
  ( ! [X24,X25] : (p(s(bool,X24)) | ~p(s(bool,X25)) | s(bool,'F_0') != s(bool,X25)) )),
  inference(resolution,[],[f165,f168])).
fof(f898,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,'F_0') != s(bool,X22) | s(bool,X21) != s(bool,X23)) )),
  inference(resolution,[],[f165,f119])).
fof(f896,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,X15)) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,'F_0') != s(bool,X16)) )),
  inference(resolution,[],[f165,f118])).
fof(f895,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,X12)) | p(s(bool,X13)) | s(bool,'F_0') != s(bool,X14) | s(bool,X12) != s(bool,X13)) )),
  inference(resolution,[],[f165,f117])).
fof(f894,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,'F_0') != s(bool,X10)) )),
  inference(resolution,[],[f165,f117])).
fof(f893,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,'F_0') != s(bool,X7) | s(bool,X6) != s(bool,X8)) )),
  inference(resolution,[],[f165,f115])).
fof(f892,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,X3)) | p(s(bool,X4)) | s(bool,'F_0') != s(bool,X5) | s(bool,X3) != s(bool,X4)) )),
  inference(resolution,[],[f165,f113])).
fof(f891,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,'F_0') != s(bool,X1)) )),
  inference(resolution,[],[f165,f113])).
fof(f830,plain,(
  $false | ($spl39 | $spl44)),
  inference(subsumption_resolution,[],[f710,f167])).
fof(f710,plain,(
  ~p(s(bool,'T_0')) | ($spl39 | $spl44)),
  inference(backward_demodulation,[],[f516,f399])).
fof(f820,plain,(
  $false | $spl44),
  inference(subsumption_resolution,[],[f703,f167])).
fof(f703,plain,(
  ~p(s(bool,'T_0')) | $spl44),
  inference(backward_demodulation,[],[f516,f165])).
fof(f817,plain,(
  $false | ($spl3 | $spl44)),
  inference(trivial_inequality_removal,[],[f812])).
fof(f812,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ($spl3 | $spl44)),
  inference(superposition,[],[f183,f516])).
fof(f815,plain,(
  $false | ($spl3 | $spl44)),
  inference(trivial_inequality_removal,[],[f814])).
fof(f814,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ($spl3 | $spl44)),
  inference(superposition,[],[f175,f516])).
fof(f698,plain,(
  $false | ($spl6 | $spl26)),
  inference(trivial_inequality_removal,[],[f695])).
fof(f695,plain,(
  s(bool,'F_0') != s(bool,'F_0') | ($spl6 | $spl26)),
  inference(superposition,[],[f349,f178])).
fof(f697,plain,(
  $false | $spl26),
  inference(equality_resolution,[],[f349])).
fof(f246,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3) | p(s(bool,X3))) ) | $spl10),
  inference(cnf_transformation,[],[f246_D])).
fof(f246_D,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3) | p(s(bool,X3))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f557,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X1) | p(s(bool,X1)) | ~p(s(bool,X0))) ) | ($spl14 | $spl24)),
  inference(subsumption_resolution,[],[f548,f347])).
fof(f548,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X1) | p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl14),
  inference(superposition,[],[f251,f164])).
fof(f555,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl50),
  inference(cnf_transformation,[],[f555_D])).
fof(f555_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f554,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,'F_0') = s(bool,X0)) ) | ($spl14 | $spl24)),
  inference(subsumption_resolution,[],[f543,f484])).
fof(f543,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X1) | p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,'F_0') = s(bool,X0)) ) | $spl14),
  inference(superposition,[],[f251,f164])).
fof(f686,plain,(
  $false | ($spl4 | $spl16)),
  inference(trivial_inequality_removal,[],[f684])).
fof(f684,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ($spl4 | $spl16)),
  inference(superposition,[],[f252,f177])).
fof(f685,plain,(
  $false | $spl16),
  inference(equality_resolution,[],[f252])).
fof(f676,plain,(
  ( ! [X111,X110] : (s(bool,'T_0') != s(bool,X111) | p(s(bool,X110)) | p(s(bool,X111))) ) | $spl4),
  inference(forward_demodulation,[],[f675,f177])).
fof(f675,plain,(
  ( ! [X111,X110] : (p(s(bool,X110)) | p(s(bool,X111)) | s(bool,X111) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))) ) | $spl4),
  inference(subsumption_resolution,[],[f630,f169])).
fof(f630,plain,(
  ( ! [X111,X110] : (~p(s(bool,'T_0')) | p(s(bool,X110)) | p(s(bool,X111)) | s(bool,X111) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))) ) | $spl4),
  inference(superposition,[],[f168,f177])).
fof(f671,plain,(
  ( ! [X101,X99,X100] : (s(bool,'T_0') != s(bool,X99) | p(s(bool,X99)) | ~p(s(bool,X100)) | s(bool,X100) != s(bool,X101)) ) | $spl4),
  inference(forward_demodulation,[],[f670,f177])).
fof(f670,plain,(
  ( ! [X101,X99,X100] : (p(s(bool,X99)) | ~p(s(bool,X100)) | s(bool,X99) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) | s(bool,X100) != s(bool,X101)) ) | $spl4),
  inference(subsumption_resolution,[],[f624,f169])).
fof(f624,plain,(
  ( ! [X101,X99,X100] : (~p(s(bool,'T_0')) | p(s(bool,X99)) | ~p(s(bool,X100)) | s(bool,X99) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) | s(bool,X100) != s(bool,X101)) ) | $spl4),
  inference(superposition,[],[f119,f177])).
fof(f669,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') != s(bool,X98) | p(s(bool,X96)) | ~p(s(bool,X97)) | s(bool,X96) != s(bool,X97)) ) | $spl4),
  inference(forward_demodulation,[],[f668,f177])).
fof(f668,plain,(
  ( ! [X97,X98,X96] : (p(s(bool,X96)) | ~p(s(bool,X97)) | s(bool,X96) != s(bool,X97) | s(bool,X98) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))) ) | $spl4),
  inference(subsumption_resolution,[],[f623,f168])).
fof(f623,plain,(
  ( ! [X97,X98,X96] : (~p(s(bool,'T_0')) | p(s(bool,X96)) | ~p(s(bool,X97)) | s(bool,X96) != s(bool,X97) | s(bool,X98) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))) ) | $spl4),
  inference(superposition,[],[f119,f177])).
fof(f664,plain,(
  ( ! [X85,X86,X84] : (s(bool,'T_0') != s(bool,X84) | p(s(bool,X85)) | ~p(s(bool,X86)) | s(bool,X85) != s(bool,X86)) ) | $spl4),
  inference(subsumption_resolution,[],[f619,f117])).
fof(f619,plain,(
  ( ! [X85,X86,X84] : (s(bool,'T_0') != s(bool,X84) | p(s(bool,X85)) | ~p(s(bool,X84)) | ~p(s(bool,X86)) | s(bool,X85) != s(bool,X86)) ) | $spl4),
  inference(superposition,[],[f119,f177])).
fof(f663,plain,(
  ( ! [X83,X81,X82] : (s(bool,'T_0') != s(bool,X81) | p(s(bool,X82)) | ~p(s(bool,X83)) | s(bool,X82) != s(bool,X83)) ) | $spl4),
  inference(subsumption_resolution,[],[f618,f168])).
fof(f618,plain,(
  ( ! [X83,X81,X82] : (s(bool,'T_0') != s(bool,X81) | p(s(bool,X82)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))) | ~p(s(bool,X83)) | s(bool,X82) != s(bool,X83)) ) | $spl4),
  inference(superposition,[],[f119,f177])).
fof(f662,plain,(
  ( ! [X76,X77,X75] : (s(bool,'T_0') != s(bool,X77) | p(s(bool,X75)) | ~p(s(bool,X76)) | p(s(bool,X77))) ) | $spl4),
  inference(forward_demodulation,[],[f661,f177])).
fof(f661,plain,(
  ( ! [X76,X77,X75] : (p(s(bool,X75)) | ~p(s(bool,X76)) | p(s(bool,X77)) | s(bool,X77) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))) ) | $spl4),
  inference(subsumption_resolution,[],[f616,f169])).
fof(f616,plain,(
  ( ! [X76,X77,X75] : (~p(s(bool,'T_0')) | p(s(bool,X75)) | ~p(s(bool,X76)) | p(s(bool,X77)) | s(bool,X77) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))) ) | $spl4),
  inference(superposition,[],[f118,f177])).
fof(f656,plain,(
  ( ! [X61,X62,X60] : (s(bool,'T_0') != s(bool,X61) | p(s(bool,X60)) | p(s(bool,X61)) | s(bool,X60) != s(bool,X62)) ) | $spl4),
  inference(forward_demodulation,[],[f655,f177])).
fof(f655,plain,(
  ( ! [X61,X62,X60] : (p(s(bool,X60)) | p(s(bool,X61)) | s(bool,X60) != s(bool,X62) | s(bool,X61) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))) ) | $spl4),
  inference(subsumption_resolution,[],[f611,f169])).
fof(f611,plain,(
  ( ! [X61,X62,X60] : (~p(s(bool,'T_0')) | p(s(bool,X60)) | p(s(bool,X61)) | s(bool,X60) != s(bool,X62) | s(bool,X61) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))) ) | $spl4),
  inference(superposition,[],[f117,f177])).
fof(f652,plain,(
  ( ! [X43,X44,X42] : (s(bool,'T_0') != s(bool,X42) | p(s(bool,X42)) | s(bool,X43) != s(bool,X44)) ) | $spl4),
  inference(subsumption_resolution,[],[f651,f169])).
fof(f651,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,'T_0')) | s(bool,'T_0') != s(bool,X42) | p(s(bool,X42)) | s(bool,X43) != s(bool,X44)) ) | $spl4),
  inference(subsumption_resolution,[],[f650,f119])).
fof(f650,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,'T_0')) | s(bool,'T_0') != s(bool,X42) | p(s(bool,X43)) | p(s(bool,X42)) | s(bool,X43) != s(bool,X44)) ) | $spl4),
  inference(forward_demodulation,[],[f605,f177])).
fof(f605,plain,(
  ( ! [X43,X44,X42] : (s(bool,'T_0') != s(bool,X42) | p(s(bool,X43)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))) | p(s(bool,X42)) | s(bool,X43) != s(bool,X44)) ) | $spl4),
  inference(superposition,[],[f117,f177])).
fof(f649,plain,(
  ( ! [X39,X41,X40] : (s(bool,'T_0') != s(bool,X39) | p(s(bool,X39)) | ~p(s(bool,X40)) | s(bool,X40) != s(bool,X41)) ) | $spl4),
  inference(forward_demodulation,[],[f648,f177])).
fof(f648,plain,(
  ( ! [X39,X41,X40] : (p(s(bool,X39)) | ~p(s(bool,X40)) | s(bool,X39) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) | s(bool,X40) != s(bool,X41)) ) | $spl4),
  inference(subsumption_resolution,[],[f604,f169])).
fof(f604,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,'T_0')) | p(s(bool,X39)) | ~p(s(bool,X40)) | s(bool,X39) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) | s(bool,X40) != s(bool,X41)) ) | $spl4),
  inference(superposition,[],[f115,f177])).
fof(f647,plain,(
  ( ! [X37,X38,X36] : (s(bool,'T_0') != s(bool,X38) | p(s(bool,X36)) | ~p(s(bool,X37)) | s(bool,X36) != s(bool,X37)) ) | $spl4),
  inference(forward_demodulation,[],[f646,f177])).
fof(f646,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,X36)) | ~p(s(bool,X37)) | s(bool,X36) != s(bool,X37) | s(bool,X38) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))) ) | $spl4),
  inference(subsumption_resolution,[],[f603,f168])).
fof(f603,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'T_0')) | p(s(bool,X36)) | ~p(s(bool,X37)) | s(bool,X36) != s(bool,X37) | s(bool,X38) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))) ) | $spl4),
  inference(superposition,[],[f115,f177])).
fof(f642,plain,(
  ( ! [X26,X24,X25] : (s(bool,'T_0') != s(bool,X24) | p(s(bool,X25)) | ~p(s(bool,X26)) | s(bool,X25) != s(bool,X26)) ) | $spl4),
  inference(subsumption_resolution,[],[f599,f168])).
fof(f599,plain,(
  ( ! [X26,X24,X25] : (s(bool,'T_0') != s(bool,X24) | p(s(bool,X25)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))) | ~p(s(bool,X26)) | s(bool,X25) != s(bool,X26)) ) | $spl4),
  inference(superposition,[],[f115,f177])).
fof(f641,plain,(
  ( ! [X23,X21,X22] : (s(bool,'T_0') != s(bool,X21) | p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X23)) ) | $spl4),
  inference(subsumption_resolution,[],[f598,f117])).
fof(f598,plain,(
  ( ! [X23,X21,X22] : (s(bool,'T_0') != s(bool,X21) | p(s(bool,X22)) | ~p(s(bool,X21)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X23)) ) | $spl4),
  inference(superposition,[],[f115,f177])).
fof(f640,plain,(
  ( ! [X19,X20,X18] : (s(bool,'T_0') != s(bool,X19) | p(s(bool,X18)) | p(s(bool,X19)) | s(bool,X18) != s(bool,X20)) ) | $spl4),
  inference(forward_demodulation,[],[f639,f177])).
fof(f639,plain,(
  ( ! [X19,X20,X18] : (p(s(bool,X18)) | p(s(bool,X19)) | s(bool,X18) != s(bool,X20) | s(bool,X19) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))) ) | $spl4),
  inference(subsumption_resolution,[],[f597,f169])).
fof(f597,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'T_0')) | p(s(bool,X18)) | p(s(bool,X19)) | s(bool,X18) != s(bool,X20) | s(bool,X19) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))) ) | $spl4),
  inference(superposition,[],[f113,f177])).
fof(f638,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,X3) | p(s(bool,X3)) | s(bool,X4) != s(bool,X5)) ) | $spl4),
  inference(subsumption_resolution,[],[f637,f169])).
fof(f637,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s(bool,'T_0') != s(bool,X3) | p(s(bool,X3)) | s(bool,X4) != s(bool,X5)) ) | $spl4),
  inference(subsumption_resolution,[],[f636,f119])).
fof(f636,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s(bool,'T_0') != s(bool,X3) | p(s(bool,X4)) | p(s(bool,X3)) | s(bool,X4) != s(bool,X5)) ) | $spl4),
  inference(forward_demodulation,[],[f592,f177])).
fof(f592,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,X3) | p(s(bool,X4)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))) | p(s(bool,X3)) | s(bool,X4) != s(bool,X5)) ) | $spl4),
  inference(superposition,[],[f113,f177])).
fof(f572,plain,(
  $false | $spl20),
  inference(resolution,[],[f274,f167])).
fof(f573,plain,(
  $false | $spl20),
  inference(resolution,[],[f274,f166])).
fof(f574,plain,(
  $false | $spl20),
  inference(resolution,[],[f274,f169])).
fof(f526,plain,(
  ( ! [X26,X27] : (p(s(bool,X26)) | ~p(s(bool,X27)) | s(bool,X27) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | $spl39),
  inference(resolution,[],[f399,f168])).
fof(f525,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,X23)) | ~p(s(bool,X24)) | s(bool,X24) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,X23) != s(bool,X25)) ) | $spl39),
  inference(resolution,[],[f399,f119])).
fof(f523,plain,(
  ( ! [X19,X17,X18] : (p(s(bool,X17)) | ~p(s(bool,X18)) | ~p(s(bool,X19)) | s(bool,X18) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | $spl39),
  inference(resolution,[],[f399,f118])).
fof(f522,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,X14)) | p(s(bool,X15)) | s(bool,X16) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,X14) != s(bool,X15)) ) | $spl39),
  inference(resolution,[],[f399,f117])).
fof(f521,plain,(
  ( ! [X12,X13,X11] : (p(s(bool,X11)) | ~p(s(bool,X12)) | s(bool,X11) != s(bool,X13) | s(bool,X12) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | $spl39),
  inference(resolution,[],[f399,f117])).
fof(f520,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,X8)) | ~p(s(bool,X9)) | s(bool,X9) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,X8) != s(bool,X10)) ) | $spl39),
  inference(resolution,[],[f399,f115])).
fof(f519,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,X5)) | p(s(bool,X6)) | s(bool,X7) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1)))) | s(bool,X5) != s(bool,X6)) ) | $spl39),
  inference(resolution,[],[f399,f113])).
fof(f518,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,X2)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X4) | s(bool,X3) != s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) ) | $spl39),
  inference(resolution,[],[f399,f113])).
fof(f496,plain,(
  ( ! [X37,X35,X36] : (s(bool,'T_0') = s(bool,X35) | ~p(s(bool,X36)) | p(s(bool,X37)) | s(bool,X36) != s(bool,X37)) ) | $spl24),
  inference(resolution,[],[f484,f168])).
fof(f513,plain,(
  ( ! [X2,X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X2) | ~p(s(bool,X2))) ) | $spl40),
  inference(cnf_transformation,[],[f513_D])).
fof(f513_D,plain,(
  ( ! [X2,X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X2) | ~p(s(bool,X2))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f495,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,X32) | p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X32) != s(bool,X34)) ) | $spl24),
  inference(resolution,[],[f484,f168])).
fof(f494,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,'T_0') = s(bool,X28) | ~p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X28) != s(bool,X30) | s(bool,X29) != s(bool,X31)) ) | $spl24),
  inference(resolution,[],[f484,f119])).
fof(f515,plain,(
  ( ! [X24,X27,X25] : (s(bool,'T_0') = s(bool,X24) | ~p(s(bool,X25)) | p(s(bool,X27)) | s(bool,X25) != s(bool,X27)) ) | $spl24),
  inference(subsumption_resolution,[],[f493,f168])).
fof(f493,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'T_0') = s(bool,X24) | ~p(s(bool,X25)) | ~p(s(bool,X26)) | p(s(bool,X27)) | s(bool,X25) != s(bool,X27)) ) | $spl24),
  inference(resolution,[],[f484,f118])).
fof(f492,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'T_0') = s(bool,X20) | p(s(bool,X21)) | ~p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X20) != s(bool,X22)) ) | $spl24),
  inference(resolution,[],[f484,f118])).
fof(f491,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,'T_0') = s(bool,X16) | ~p(s(bool,X17)) | p(s(bool,X18)) | s(bool,X16) != s(bool,X19) | s(bool,X17) != s(bool,X18)) ) | $spl24),
  inference(resolution,[],[f484,f117])).
fof(f490,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'T_0') = s(bool,X12) | p(s(bool,X13)) | ~p(s(bool,X14)) | s(bool,X13) != s(bool,X15) | s(bool,X12) != s(bool,X14)) ) | $spl24),
  inference(resolution,[],[f484,f117])).
fof(f489,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,X8) | ~p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X8) != s(bool,X10) | s(bool,X9) != s(bool,X11)) ) | $spl24),
  inference(resolution,[],[f484,f115])).
fof(f488,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,X4) | ~p(s(bool,X5)) | p(s(bool,X6)) | s(bool,X4) != s(bool,X7) | s(bool,X5) != s(bool,X6)) ) | $spl24),
  inference(resolution,[],[f484,f113])).
fof(f487,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~p(s(bool,X2)) | s(bool,X1) != s(bool,X3) | s(bool,X0) != s(bool,X2)) ) | $spl24),
  inference(resolution,[],[f484,f113])).
fof(f486,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f173,f297])).
fof(f297,plain,(
  s(bool,'F_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2))))) | $spl6),
  inference(backward_demodulation,[],[f178,f111])).
fof(f471,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,X3) | ~p(s(bool,X2))) ) | $spl18),
  inference(subsumption_resolution,[],[f460,f261])).
fof(f460,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,X3) | ~p(s(bool,X2)) | s(bool,'T_0') = s(bool,X2)) ) | $spl18),
  inference(superposition,[],[f261,f164])).
fof(f470,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X1) | ~p(s(bool,X0))) ) | $spl18),
  inference(subsumption_resolution,[],[f459,f261])).
fof(f459,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X1) | ~p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(superposition,[],[f261,f164])).
fof(f456,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,X3) | p(s(bool,X2))) ) | $spl12),
  inference(subsumption_resolution,[],[f445,f249])).
fof(f445,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') != s(bool,X3) | p(s(bool,X2)) | s(bool,'T_0') = s(bool,X2)) ) | $spl12),
  inference(superposition,[],[f249,f164])).
fof(f455,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X1) | p(s(bool,X0))) ) | $spl12),
  inference(subsumption_resolution,[],[f444,f249])).
fof(f444,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X1) | p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl12),
  inference(superposition,[],[f249,f164])).
fof(f440,plain,(
  $false | $spl8),
  inference(equality_resolution,[],[f245])).
fof(f410,plain,(
  $false | $spl22),
  inference(resolution,[],[f275,f165])).
fof(f386,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | $spl6),
  inference(resolution,[],[f342,f153])).
fof(f385,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl6),
  inference(resolution,[],[f342,f152])).
fof(f384,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | $spl6),
  inference(resolution,[],[f342,f151])).
fof(f383,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.closSem.v',sK9(sK2,sK1))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl6),
  inference(resolution,[],[f342,f150])).
fof(f382,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | $spl6),
  inference(resolution,[],[f342,f149])).
fof(f381,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK8(sK2,sK1))))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl6),
  inference(resolution,[],[f342,f148])).
fof(f380,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0') != s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK6(sK2,sK1)))) | $spl6),
  inference(resolution,[],[f342,f147])).
fof(f379,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK9(sK2,sK1)))),s(fun('type.option.option'('type.closSem.v'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK1),sK2)))))))) | s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.option.SOME_1'(s('type.closSem.ref'('type.closSem.v'),'const.closSem.ValueArray_1'(s('type.list.list'('type.closSem.v'),sK8(sK2,sK1)))))) = s('type.option.option'('type.closSem.ref'('type.closSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'const.closSem.state_refs_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK7(sK2,sK1)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK5(sK2,sK1)),s('type.closLang.exp',sK6(sK2,sK1)))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'const.closSem.state_code_1'(s('type.closSem.state'(sK1),sK2))),s('type.num.num',sK4(sK2,sK1)))) | $spl6),
  inference(resolution,[],[f342,f146])).
fof(f378,plain,(
  ( ! [X107,X106] : (s(bool,'F_0') != s(bool,X107) | p(s(bool,X106)) | ~p(s(bool,X107))) ) | $spl6),
  inference(forward_demodulation,[],[f377,f178])).
fof(f377,plain,(
  ( ! [X107,X106] : (p(s(bool,X106)) | ~p(s(bool,X107)) | s(bool,X107) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(subsumption_resolution,[],[f339,f165])).
fof(f339,plain,(
  ( ! [X107,X106] : (p(s(bool,'F_0')) | p(s(bool,X106)) | ~p(s(bool,X107)) | s(bool,X107) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(superposition,[],[f168,f178])).
fof(f374,plain,(
  ( ! [X94,X95,X93] : (s(bool,'F_0') != s(bool,X94) | ~p(s(bool,X93)) | ~p(s(bool,X94)) | s(bool,X93) != s(bool,X95)) ) | $spl6),
  inference(forward_demodulation,[],[f373,f178])).
fof(f373,plain,(
  ( ! [X94,X95,X93] : (~p(s(bool,X93)) | ~p(s(bool,X94)) | s(bool,X94) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X93) != s(bool,X95)) ) | $spl6),
  inference(subsumption_resolution,[],[f333,f165])).
fof(f333,plain,(
  ( ! [X94,X95,X93] : (p(s(bool,'F_0')) | ~p(s(bool,X93)) | ~p(s(bool,X94)) | s(bool,X94) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X93) != s(bool,X95)) ) | $spl6),
  inference(superposition,[],[f119,f178])).
fof(f371,plain,(
  ( ! [X88,X87,X89] : (s(bool,'F_0') != s(bool,X87) | ~p(s(bool,X87)) | s(bool,X88) != s(bool,X89)) ) | $spl6),
  inference(subsumption_resolution,[],[f370,f165])).
fof(f370,plain,(
  ( ! [X88,X87,X89] : (p(s(bool,'F_0')) | s(bool,'F_0') != s(bool,X87) | ~p(s(bool,X87)) | s(bool,X88) != s(bool,X89)) ) | $spl6),
  inference(subsumption_resolution,[],[f369,f168])).
fof(f369,plain,(
  ( ! [X88,X87,X89] : (p(s(bool,'F_0')) | s(bool,'F_0') != s(bool,X87) | ~p(s(bool,X88)) | ~p(s(bool,X87)) | s(bool,X88) != s(bool,X89)) ) | $spl6),
  inference(forward_demodulation,[],[f331,f178])).
fof(f331,plain,(
  ( ! [X88,X87,X89] : (s(bool,'F_0') != s(bool,X87) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) | ~p(s(bool,X88)) | ~p(s(bool,X87)) | s(bool,X88) != s(bool,X89)) ) | $spl6),
  inference(superposition,[],[f119,f178])).
fof(f368,plain,(
  ( ! [X85,X86,X84] : (s(bool,'F_0') != s(bool,X84) | p(s(bool,X85)) | ~p(s(bool,X86)) | s(bool,X85) != s(bool,X86)) ) | $spl6),
  inference(subsumption_resolution,[],[f330,f117])).
fof(f330,plain,(
  ( ! [X85,X86,X84] : (s(bool,'F_0') != s(bool,X84) | p(s(bool,X85)) | ~p(s(bool,X84)) | ~p(s(bool,X86)) | s(bool,X85) != s(bool,X86)) ) | $spl6),
  inference(superposition,[],[f119,f178])).
fof(f367,plain,(
  ( ! [X83,X81,X82] : (s(bool,'F_0') != s(bool,X81) | p(s(bool,X82)) | ~p(s(bool,X83)) | s(bool,X82) != s(bool,X83)) ) | $spl6),
  inference(subsumption_resolution,[],[f329,f168])).
fof(f329,plain,(
  ( ! [X83,X81,X82] : (s(bool,'F_0') != s(bool,X81) | p(s(bool,X82)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) | ~p(s(bool,X83)) | s(bool,X82) != s(bool,X83)) ) | $spl6),
  inference(superposition,[],[f119,f178])).
fof(f365,plain,(
  ( ! [X70,X71,X69] : (s(bool,'F_0') != s(bool,X70) | p(s(bool,X69)) | ~p(s(bool,X70)) | ~p(s(bool,X71))) ) | $spl6),
  inference(forward_demodulation,[],[f364,f178])).
fof(f364,plain,(
  ( ! [X70,X71,X69] : (p(s(bool,X69)) | ~p(s(bool,X70)) | ~p(s(bool,X71)) | s(bool,X70) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(subsumption_resolution,[],[f325,f165])).
fof(f325,plain,(
  ( ! [X70,X71,X69] : (p(s(bool,'F_0')) | p(s(bool,X69)) | ~p(s(bool,X70)) | ~p(s(bool,X71)) | s(bool,X70) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(superposition,[],[f118,f178])).
fof(f360,plain,(
  ( ! [X54,X56,X55] : (s(bool,'F_0') != s(bool,X55) | p(s(bool,X54)) | ~p(s(bool,X55)) | s(bool,X54) != s(bool,X56)) ) | $spl6),
  inference(forward_demodulation,[],[f359,f178])).
fof(f359,plain,(
  ( ! [X54,X56,X55] : (p(s(bool,X54)) | ~p(s(bool,X55)) | s(bool,X54) != s(bool,X56) | s(bool,X55) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(subsumption_resolution,[],[f320,f165])).
fof(f320,plain,(
  ( ! [X54,X56,X55] : (p(s(bool,'F_0')) | p(s(bool,X54)) | ~p(s(bool,X55)) | s(bool,X54) != s(bool,X56) | s(bool,X55) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(superposition,[],[f117,f178])).
fof(f356,plain,(
  ( ! [X35,X33,X34] : (s(bool,'F_0') != s(bool,X34) | ~p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X33) != s(bool,X35)) ) | $spl6),
  inference(forward_demodulation,[],[f355,f178])).
fof(f355,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X34) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X33) != s(bool,X35)) ) | $spl6),
  inference(subsumption_resolution,[],[f313,f165])).
fof(f313,plain,(
  ( ! [X35,X33,X34] : (p(s(bool,'F_0')) | ~p(s(bool,X33)) | ~p(s(bool,X34)) | s(bool,X34) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X33) != s(bool,X35)) ) | $spl6),
  inference(superposition,[],[f115,f178])).
fof(f354,plain,(
  ( ! [X30,X31,X32] : (s(bool,'F_0') != s(bool,X30) | ~p(s(bool,X30)) | s(bool,X31) != s(bool,X32)) ) | $spl6),
  inference(subsumption_resolution,[],[f353,f165])).
fof(f353,plain,(
  ( ! [X30,X31,X32] : (p(s(bool,'F_0')) | s(bool,'F_0') != s(bool,X30) | ~p(s(bool,X30)) | s(bool,X31) != s(bool,X32)) ) | $spl6),
  inference(subsumption_resolution,[],[f352,f168])).
fof(f352,plain,(
  ( ! [X30,X31,X32] : (p(s(bool,'F_0')) | s(bool,'F_0') != s(bool,X30) | ~p(s(bool,X31)) | ~p(s(bool,X30)) | s(bool,X31) != s(bool,X32)) ) | $spl6),
  inference(forward_demodulation,[],[f312,f178])).
fof(f312,plain,(
  ( ! [X30,X31,X32] : (s(bool,'F_0') != s(bool,X30) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) | ~p(s(bool,X31)) | ~p(s(bool,X30)) | s(bool,X31) != s(bool,X32)) ) | $spl6),
  inference(superposition,[],[f115,f178])).
fof(f350,plain,(
  ( ! [X26,X24,X25] : (s(bool,'F_0') != s(bool,X24) | p(s(bool,X25)) | ~p(s(bool,X26)) | s(bool,X25) != s(bool,X26)) ) | $spl6),
  inference(subsumption_resolution,[],[f310,f168])).
fof(f310,plain,(
  ( ! [X26,X24,X25] : (s(bool,'F_0') != s(bool,X24) | p(s(bool,X25)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) | ~p(s(bool,X26)) | s(bool,X25) != s(bool,X26)) ) | $spl6),
  inference(superposition,[],[f115,f178])).
fof(f348,plain,(
  ( ! [X23,X21,X22] : (s(bool,'F_0') != s(bool,X21) | p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X23)) ) | $spl6),
  inference(subsumption_resolution,[],[f309,f117])).
fof(f309,plain,(
  ( ! [X23,X21,X22] : (s(bool,'F_0') != s(bool,X21) | p(s(bool,X22)) | ~p(s(bool,X21)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X23)) ) | $spl6),
  inference(superposition,[],[f115,f178])).
fof(f346,plain,(
  ( ! [X14,X12,X13] : (s(bool,'F_0') != s(bool,X13) | p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X12) != s(bool,X14)) ) | $spl6),
  inference(forward_demodulation,[],[f345,f178])).
fof(f345,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X12) != s(bool,X14) | s(bool,X13) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(subsumption_resolution,[],[f306,f165])).
fof(f306,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,'F_0')) | p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X12) != s(bool,X14) | s(bool,X13) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl6),
  inference(superposition,[],[f113,f178])).
fof(f293,plain,(
  s(bool,'F_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))),
  inference(superposition,[],[f111,f164])).
fof(f292,plain,(
  s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))),
  inference(superposition,[],[f111,f164])).
fof(f288,plain,(
  ( ! [X111,X110] : (s(bool,'T_0') != s(bool,X111) | p(s(bool,X110)) | p(s(bool,X111))) ) | $spl2),
  inference(forward_demodulation,[],[f287,f174])).
fof(f287,plain,(
  ( ! [X111,X110] : (p(s(bool,X110)) | p(s(bool,X111)) | s(bool,X111) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl2),
  inference(subsumption_resolution,[],[f239,f169])).
fof(f239,plain,(
  ( ! [X111,X110] : (~p(s(bool,'T_0')) | p(s(bool,X110)) | p(s(bool,X111)) | s(bool,X111) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl2),
  inference(superposition,[],[f168,f174])).
fof(f284,plain,(
  ( ! [X101,X99,X100] : (s(bool,'T_0') != s(bool,X99) | p(s(bool,X99)) | ~p(s(bool,X100)) | s(bool,X100) != s(bool,X101)) ) | $spl2),
  inference(forward_demodulation,[],[f283,f174])).
fof(f283,plain,(
  ( ! [X101,X99,X100] : (p(s(bool,X99)) | ~p(s(bool,X100)) | s(bool,X99) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X100) != s(bool,X101)) ) | $spl2),
  inference(subsumption_resolution,[],[f233,f169])).
fof(f233,plain,(
  ( ! [X101,X99,X100] : (~p(s(bool,'T_0')) | p(s(bool,X99)) | ~p(s(bool,X100)) | s(bool,X99) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X100) != s(bool,X101)) ) | $spl2),
  inference(superposition,[],[f119,f174])).
fof(f282,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') != s(bool,X98) | p(s(bool,X96)) | ~p(s(bool,X97)) | s(bool,X96) != s(bool,X97)) ) | $spl2),
  inference(forward_demodulation,[],[f281,f174])).
fof(f281,plain,(
  ( ! [X97,X98,X96] : (p(s(bool,X96)) | ~p(s(bool,X97)) | s(bool,X96) != s(bool,X97) | s(bool,X98) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl2),
  inference(subsumption_resolution,[],[f232,f168])).
fof(f232,plain,(
  ( ! [X97,X98,X96] : (~p(s(bool,'T_0')) | p(s(bool,X96)) | ~p(s(bool,X97)) | s(bool,X96) != s(bool,X97) | s(bool,X98) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl2),
  inference(superposition,[],[f119,f174])).
fof(f277,plain,(
  ( ! [X85,X86,X84] : (s(bool,'T_0') != s(bool,X84) | p(s(bool,X85)) | ~p(s(bool,X86)) | s(bool,X85) != s(bool,X86)) ) | $spl2),
  inference(subsumption_resolution,[],[f228,f117])).
fof(f228,plain,(
  ( ! [X85,X86,X84] : (s(bool,'T_0') != s(bool,X84) | p(s(bool,X85)) | ~p(s(bool,X84)) | ~p(s(bool,X86)) | s(bool,X85) != s(bool,X86)) ) | $spl2),
  inference(superposition,[],[f119,f174])).
fof(f276,plain,(
  ( ! [X83,X81,X82] : (s(bool,'T_0') != s(bool,X81) | p(s(bool,X82)) | ~p(s(bool,X83)) | s(bool,X82) != s(bool,X83)) ) | $spl2),
  inference(subsumption_resolution,[],[f227,f168])).
fof(f227,plain,(
  ( ! [X83,X81,X82] : (s(bool,'T_0') != s(bool,X81) | p(s(bool,X82)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) | ~p(s(bool,X83)) | s(bool,X82) != s(bool,X83)) ) | $spl2),
  inference(superposition,[],[f119,f174])).
fof(f273,plain,(
  ( ! [X76,X77,X75] : (s(bool,'T_0') != s(bool,X77) | p(s(bool,X75)) | ~p(s(bool,X76)) | p(s(bool,X77))) ) | $spl2),
  inference(forward_demodulation,[],[f272,f174])).
fof(f272,plain,(
  ( ! [X76,X77,X75] : (p(s(bool,X75)) | ~p(s(bool,X76)) | p(s(bool,X77)) | s(bool,X77) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl2),
  inference(subsumption_resolution,[],[f225,f169])).
fof(f225,plain,(
  ( ! [X76,X77,X75] : (~p(s(bool,'T_0')) | p(s(bool,X75)) | ~p(s(bool,X76)) | p(s(bool,X77)) | s(bool,X77) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl2),
  inference(superposition,[],[f118,f174])).
fof(f267,plain,(
  ( ! [X61,X62,X60] : (s(bool,'T_0') != s(bool,X61) | p(s(bool,X60)) | p(s(bool,X61)) | s(bool,X60) != s(bool,X62)) ) | $spl2),
  inference(forward_demodulation,[],[f266,f174])).
fof(f266,plain,(
  ( ! [X61,X62,X60] : (p(s(bool,X60)) | p(s(bool,X61)) | s(bool,X60) != s(bool,X62) | s(bool,X61) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl2),
  inference(subsumption_resolution,[],[f220,f169])).
fof(f220,plain,(
  ( ! [X61,X62,X60] : (~p(s(bool,'T_0')) | p(s(bool,X60)) | p(s(bool,X61)) | s(bool,X60) != s(bool,X62) | s(bool,X61) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl2),
  inference(superposition,[],[f117,f174])).
fof(f264,plain,(
  ( ! [X43,X44,X42] : (s(bool,'T_0') != s(bool,X42) | p(s(bool,X42)) | s(bool,X43) != s(bool,X44)) ) | $spl2),
  inference(subsumption_resolution,[],[f263,f169])).
fof(f263,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,'T_0')) | s(bool,'T_0') != s(bool,X42) | p(s(bool,X42)) | s(bool,X43) != s(bool,X44)) ) | $spl2),
  inference(subsumption_resolution,[],[f262,f119])).
fof(f262,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,'T_0')) | s(bool,'T_0') != s(bool,X42) | p(s(bool,X43)) | p(s(bool,X42)) | s(bool,X43) != s(bool,X44)) ) | $spl2),
  inference(forward_demodulation,[],[f214,f174])).
fof(f214,plain,(
  ( ! [X43,X44,X42] : (s(bool,'T_0') != s(bool,X42) | p(s(bool,X43)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) | p(s(bool,X42)) | s(bool,X43) != s(bool,X44)) ) | $spl2),
  inference(superposition,[],[f117,f174])).
fof(f260,plain,(
  ( ! [X39,X41,X40] : (s(bool,'T_0') != s(bool,X39) | p(s(bool,X39)) | ~p(s(bool,X40)) | s(bool,X40) != s(bool,X41)) ) | $spl2),
  inference(forward_demodulation,[],[f259,f174])).
fof(f259,plain,(
  ( ! [X39,X41,X40] : (p(s(bool,X39)) | ~p(s(bool,X40)) | s(bool,X39) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X40) != s(bool,X41)) ) | $spl2),
  inference(subsumption_resolution,[],[f213,f169])).
fof(f213,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,'T_0')) | p(s(bool,X39)) | ~p(s(bool,X40)) | s(bool,X39) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,X40) != s(bool,X41)) ) | $spl2),
  inference(superposition,[],[f115,f174])).
fof(f258,plain,(
  ( ! [X37,X38,X36] : (s(bool,'T_0') != s(bool,X38) | p(s(bool,X36)) | ~p(s(bool,X37)) | s(bool,X36) != s(bool,X37)) ) | $spl2),
  inference(forward_demodulation,[],[f257,f174])).
fof(f257,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,X36)) | ~p(s(bool,X37)) | s(bool,X36) != s(bool,X37) | s(bool,X38) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl2),
  inference(subsumption_resolution,[],[f212,f168])).
fof(f212,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'T_0')) | p(s(bool,X36)) | ~p(s(bool,X37)) | s(bool,X36) != s(bool,X37) | s(bool,X38) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl2),
  inference(superposition,[],[f115,f174])).
fof(f253,plain,(
  ( ! [X26,X24,X25] : (s(bool,'T_0') != s(bool,X24) | p(s(bool,X25)) | ~p(s(bool,X26)) | s(bool,X25) != s(bool,X26)) ) | $spl2),
  inference(subsumption_resolution,[],[f208,f168])).
fof(f208,plain,(
  ( ! [X26,X24,X25] : (s(bool,'T_0') != s(bool,X24) | p(s(bool,X25)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) | ~p(s(bool,X26)) | s(bool,X25) != s(bool,X26)) ) | $spl2),
  inference(superposition,[],[f115,f174])).
fof(f250,plain,(
  ( ! [X23,X21,X22] : (s(bool,'T_0') != s(bool,X21) | p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X23)) ) | $spl2),
  inference(subsumption_resolution,[],[f207,f117])).
fof(f207,plain,(
  ( ! [X23,X21,X22] : (s(bool,'T_0') != s(bool,X21) | p(s(bool,X22)) | ~p(s(bool,X21)) | ~p(s(bool,X23)) | s(bool,X22) != s(bool,X23)) ) | $spl2),
  inference(superposition,[],[f115,f174])).
fof(f248,plain,(
  ( ! [X19,X20,X18] : (s(bool,'T_0') != s(bool,X19) | p(s(bool,X18)) | p(s(bool,X19)) | s(bool,X18) != s(bool,X20)) ) | $spl2),
  inference(forward_demodulation,[],[f247,f174])).
fof(f247,plain,(
  ( ! [X19,X20,X18] : (p(s(bool,X18)) | p(s(bool,X19)) | s(bool,X18) != s(bool,X20) | s(bool,X19) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl2),
  inference(subsumption_resolution,[],[f206,f169])).
fof(f206,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'T_0')) | p(s(bool,X18)) | p(s(bool,X19)) | s(bool,X18) != s(bool,X20) | s(bool,X19) != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) ) | $spl2),
  inference(superposition,[],[f113,f174])).
fof(f244,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,X3) | p(s(bool,X3)) | s(bool,X4) != s(bool,X5)) ) | $spl2),
  inference(subsumption_resolution,[],[f243,f169])).
fof(f243,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s(bool,'T_0') != s(bool,X3) | p(s(bool,X3)) | s(bool,X4) != s(bool,X5)) ) | $spl2),
  inference(subsumption_resolution,[],[f242,f119])).
fof(f242,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s(bool,'T_0') != s(bool,X3) | p(s(bool,X4)) | p(s(bool,X3)) | s(bool,X4) != s(bool,X5)) ) | $spl2),
  inference(forward_demodulation,[],[f201,f174])).
fof(f201,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,X3) | p(s(bool,X4)) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2)))) | p(s(bool,X3)) | s(bool,X4) != s(bool,X5)) ) | $spl2),
  inference(superposition,[],[f113,f174])).
fof(f190,plain,(
  $false | ($spl3 | $spl7)),
  inference(subsumption_resolution,[],[f189,f175])).
fof(f189,plain,(
  s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | $spl7),
  inference(trivial_inequality_removal,[],[f188])).
fof(f188,plain,(
  s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | $spl7),
  inference(superposition,[],[f179,f164])).
fof(f171,plain,(
  s(bool,'F_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))),
  inference(superposition,[],[f111,f164])).
fof(f170,plain,(
  s(bool,'T_0') != s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),sK2))) | s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK3),s('type.closSem.state'(sK1),sK2)))))),
  inference(superposition,[],[f111,f164])).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 317
% Passive clauses: 1136
% Generated clauses: 7119
% Final active clauses: 203
% Final passive clauses: 580
% Input formulas: 36
% Initial clauses: 57
% 
% Selected by SInE selection: 31
% SInE iterations: 1
% 
% Duplicate literals: 47
% Trivial inequalities: 177
% Fw subsumption resolutions: 1071
% Fw demodulations: 703
% Bw demodulations: 49
% 
% Simple tautologies: 164
% Equational tautologies: 6
% Forward subsumptions: 3109
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 1630
% Forward superposition: 1228
% Backward superposition: 1785
% Self superposition: 2
% Equality resolution: 55
% 
% Split clauses: 711
% Split components: 1541
% SAT solver clauses: 765
% SAT solver unit clauses: 10
% SAT solver binary clauses: 203
% 
% Sat splits: 711
% Sat splitting refutations: 53
% 
% Memory used [KB]: 5756
% Time elapsed: 0.531 s
% ------------------------------
% ------------------------------
% Success in time 12.45 s
