Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.labProps
% (3432)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 254
% Passive clauses: 5316
% Generated clauses: 33390
% Final active clauses: 244
% Final passive clauses: 4752
% Input formulas: 261
% Initial clauses: 343
% 
% Duplicate literals: 818
% Trivial inequalities: 385
% Fw subsumption resolutions: 3413
% Fw demodulations: 5578
% Bw demodulations: 6
% 
% Simple tautologies: 411
% Equational tautologies: 46
% Forward subsumptions: 16602
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 1078
% Factoring: 6
% Forward superposition: 10449
% Backward superposition: 11048
% Self superposition: 160
% Equality factoring: 88
% Equality resolution: 26
% 
% Split clauses: 357
% Split components: 723
% SAT solver clauses: 1081
% SAT solver unit clauses: 31
% SAT solver binary clauses: 154
% 
% Sat splits: 357
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1071
% TWLsolver calls for satisfiability: 244
% 
% Memory used [KB]: 26353
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.labProps
% (3456)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 267
% Passive clauses: 1920
% Generated clauses: 30145
% Final active clauses: 264
% Final passive clauses: 1598
% Input formulas: 261
% Initial clauses: 343
% 
% Duplicate literals: 19
% Trivial inequalities: 1944
% Fw subsumption resolutions: 1758
% Fw demodulations: 9299
% Bw demodulations: 56
% Condensations: 15
% Global subsumptions: 6
% 
% Simple tautologies: 56
% Equational tautologies: 13
% Forward subsumptions: 12920
% 
% Binary resolution: 46
% Factoring: 1
% Forward superposition: 5981
% Backward superposition: 8699
% Self superposition: 18
% Equality factoring: 2
% Equality resolution: 48
% 
% Split clauses: 4
% Split components: 8
% SAT solver clauses: 2522
% SAT solver unit clauses: 571
% SAT solver binary clauses: 60
% SAT solver learnt clauses: 12
% SAT solver learnt literals: 2
% 
% Sat splits: 4
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 2498
% TWLsolver calls for satisfiability: 3723
% 
% Memory used [KB]: 29295
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.labProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.labProps
% SZS output start Proof for thm.labProps
fof(f117230,plain,(
  $false),
  inference(subsumption_resolution,[],[f836,f117151])).
fof(f117151,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),'const.labProps.align_dm_1'(s('type.labSem.state'(X0,X1),X2)))))) )),
  inference(forward_demodulation,[],[f116860,f1015])).
fof(f1015,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X0),bool),fun('type.fcp.cart'(bool,X0),bool)),X3),s('type.labSem.state'(X0,X1),X2)))))) )),
  inference(cnf_transformation,[],[f526])).
fof(f526,plain,(
  ! [X0,X1,X2,X3] : s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X0),bool),fun('type.fcp.cart'(bool,X0),bool)),X3),s('type.labSem.state'(X0,X1),X2)))))),
  inference(flattening,[],[f525])).
fof(f525,plain,(
  ! [X0,X1] : ! [X2,X3] : s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X0),bool),fun('type.fcp.cart'(bool,X0),bool)),X3),s('type.labSem.state'(X0,X1),X2)))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6,X10] : ! [X8,X13] : s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X10),X8))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X10),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X6),bool),fun('type.fcp.cart'(bool,X6),bool)),X13),s('type.labSem.state'(X6,X10),X8)))))),
  file('thm.labProps.align_dm_const|split|10','thm.labSem.labSem_|49|59_prove_ltb')).
fof(f116860,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),'const.labProps.align_dm_1'(s('type.labSem.state'(X0,X1),X2))))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X0),bool),fun('type.fcp.cart'(bool,X0),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X0),bool),'const.pred_set.INTER_2'(s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))),s(fun('type.fcp.cart'(bool,X0),bool),'const.alignment.byte_aligned_0'))))),s('type.labSem.state'(X0,X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f909,f1094])).
fof(f1094,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.labSem.state'(X0,X1),X2) != s('type.labSem.state'(X0,X1),X3) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f820])).
fof(f820,plain,(
  ! [X0,X1,X2,X3] : ((s('type.labSem.state'(X0,X1),X2) != s('type.labSem.state'(X0,X1),X3) | (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3))))) & (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3)))),
  inference(flattening,[],[f819])).
fof(f819,plain,(
  ! [X0,X1,X2,X3] : ((s('type.labSem.state'(X0,X1),X2) != s('type.labSem.state'(X0,X1),X3) | (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3))))) & ((s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3)))) | s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3)))),
  inference(nnf_transformation,[],[f666])).
fof(f666,plain,(
  ! [X0,X1,X2,X3] : (s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3) <=> (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3)))))),
  inference(flattening,[],[f665])).
fof(f665,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3) <=> (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X10] : ! [X11,X12] : (s('type.labSem.state'(X6,X10),X11) = s('type.labSem.state'(X6,X10),X12) <=> (s(fun('type.num.num','type.wordSem.word_loc'(X6)),'const.labSem.state_regs_1'(s('type.labSem.state'(X6,X10),X11))) = s(fun('type.num.num','type.wordSem.word_loc'(X6)),'const.labSem.state_regs_1'(s('type.labSem.state'(X6,X10),X12))) & s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.labSem.state_mem_1'(s('type.labSem.state'(X6,X10),X11))) = s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.labSem.state_mem_1'(s('type.labSem.state'(X6,X10),X12))) & s(fun('type.fcp.cart'(bool,X6),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X6,X10),X11))) = s(fun('type.fcp.cart'(bool,X6),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X6,X10),X12))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X6,X10),X11))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X6,X10),X12))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X6,X10),X11))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X6,X10),X12))) & s('type.ffi.ffi_state'(X10),'const.labSem.state_ffi_1'(s('type.labSem.state'(X6,X10),X11))) = s('type.ffi.ffi_state'(X10),'const.labSem.state_ffi_1'(s('type.labSem.state'(X6,X10),X12))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X6)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X6,X10),X11))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X6)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X6,X10),X12))) & s('type.list.list'('type.labLang.sec'(X6)),'const.labSem.state_code_1'(s('type.labSem.state'(X6,X10),X11))) = s('type.list.list'('type.labLang.sec'(X6)),'const.labSem.state_code_1'(s('type.labSem.state'(X6,X10),X12))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X6,X10),X11))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X6,X10),X12))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X10),X11))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X10),X12))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X10),X11))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X10),X12))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X10),X11))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X10),X12))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X6,X10),X11))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X6,X10),X12)))))),
  file('thm.labProps.align_dm_const|split|10','thm.labSem.labSem_3|49|4_prove_ltb')).
fof(f909,plain,(
  ( ! [X2,X0,X1] : (s('type.labSem.state'(X0,X1),'const.labProps.align_dm_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.labSem.state'(X0,X1),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X0),bool),fun('type.fcp.cart'(bool,X0),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X0),bool),'const.pred_set.INTER_2'(s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))),s(fun('type.fcp.cart'(bool,X0),bool),'const.alignment.byte_aligned_0'))))),s('type.labSem.state'(X0,X1),X2)))) )),
  inference(cnf_transformation,[],[f332])).
fof(f332,plain,(
  ! [X0,X1,X2] : s('type.labSem.state'(X0,X1),'const.labProps.align_dm_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.labSem.state'(X0,X1),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X0),bool),fun('type.fcp.cart'(bool,X0),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X0),bool),'const.pred_set.INTER_2'(s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))),s(fun('type.fcp.cart'(bool,X0),bool),'const.alignment.byte_aligned_0'))))),s('type.labSem.state'(X0,X1),X2)))),
  inference(flattening,[],[f331])).
fof(f331,plain,(
  ! [X0,X1] : ! [X2] : s('type.labSem.state'(X0,X1),'const.labProps.align_dm_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.labSem.state'(X0,X1),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X0),bool),fun('type.fcp.cart'(bool,X0),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X0),bool),'const.pred_set.INTER_2'(s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))),s(fun('type.fcp.cart'(bool,X0),bool),'const.alignment.byte_aligned_0'))))),s('type.labSem.state'(X0,X1),X2)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6,X10] : ! [X8] : s('type.labSem.state'(X6,X10),'const.labProps.align_dm_1'(s('type.labSem.state'(X6,X10),X8))) = s('type.labSem.state'(X6,X10),'const.labSem.state_mem_domain_fupd_2'(s(fun(fun('type.fcp.cart'(bool,X6),bool),fun('type.fcp.cart'(bool,X6),bool)),'const.combin.K_1'(s(fun('type.fcp.cart'(bool,X6),bool),'const.pred_set.INTER_2'(s(fun('type.fcp.cart'(bool,X6),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X6,X10),X8))),s(fun('type.fcp.cart'(bool,X6),bool),'const.alignment.byte_aligned_0'))))),s('type.labSem.state'(X6,X10),X8)))),
  file('thm.labProps.align_dm_const|split|10','thm.labProps.align_dm_def')).
fof(f836,plain,(
  s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK4,sK5),sK6))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK4,sK5),'const.labProps.align_dm_1'(s('type.labSem.state'(sK4,sK5),sK6)))))),
  inference(cnf_transformation,[],[f788])).
fof(f788,plain,(
  s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK4,sK5),sK6))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK4,sK5),'const.labProps.align_dm_1'(s('type.labSem.state'(sK4,sK5),sK6)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5,sK6])],[f769])).
fof(f769,plain,(
  ? [X0,X1,X2] : s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),'const.labProps.align_dm_1'(s('type.labSem.state'(X0,X1),X2)))))),
  inference(ennf_transformation,[],[f264])).
fof(f264,plain,(
  ~! [X0,X1,X2] : s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),'const.labProps.align_dm_1'(s('type.labSem.state'(X0,X1),X2)))))),
  inference(flattening,[],[f263])).
fof(f263,plain,(
  ~! [X0,X1] : ! [X2] : s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),'const.labProps.align_dm_1'(s('type.labSem.state'(X0,X1),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X7),X8))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X7),'const.labProps.align_dm_1'(s('type.labSem.state'(X6,X7),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X7),X8))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X7),'const.labProps.align_dm_1'(s('type.labSem.state'(X6,X7),X8)))))),
  file('thm.labProps.align_dm_const|split|10','thm.labProps.align_dm_const|split|10')).
% SZS output end Proof for thm.labProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 671
% Passive clauses: 2611
% Generated clauses: 116548
% Final active clauses: 253
% Final passive clauses: 613
% Input formulas: 261
% Initial clauses: 343
% 
% Duplicate literals: 92
% Trivial inequalities: 1769
% Fw subsumption resolutions: 3984
% Fw demodulations: 33223
% Bw demodulations: 118
% Condensations: 340
% 
% Simple tautologies: 976
% Equational tautologies: 1508
% Forward subsumptions: 71820
% Fw demodulations to eq. taut.: 218
% Bw demodulations to eq. taut.: 1
% 
% Unit resulting resolution: 14410
% Factoring: 1
% Forward superposition: 31741
% Backward superposition: 30196
% Self superposition: 87
% Equality factoring: 4
% Equality resolution: 76
% 
% Split clauses: 3
% Split components: 6
% SAT solver clauses: 2620
% SAT solver unit clauses: 451
% SAT solver binary clauses: 1146
% 
% Sat splits: 3
% Sat splitting refutations: 1
% 
% Memory used [KB]: 89422
% Time elapsed: 3.215 s
% ------------------------------
% ------------------------------
% Success in time 4.571 s
