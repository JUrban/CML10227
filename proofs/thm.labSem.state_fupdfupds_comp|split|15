Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.labSem
% (138037)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 84
% Passive clauses: 2530
% Generated clauses: 10876
% Final active clauses: 64
% Final passive clauses: 2086
% Input formulas: 132
% Initial clauses: 141
% 
% Duplicate literals: 453
% Trivial inequalities: 85
% Fw subsumption resolutions: 1421
% Fw demodulations: 162
% Bw demodulations: 1
% 
% Simple tautologies: 176
% Equational tautologies: 73
% Forward subsumptions: 4884
% 
% Binary resolution: 193
% Factoring: 2
% Forward superposition: 3936
% Backward superposition: 3938
% Self superposition: 258
% Equality factoring: 179
% Equality resolution: 19
% 
% Split clauses: 679
% Split components: 1472
% SAT solver clauses: 1206
% SAT solver unit clauses: 16
% SAT solver binary clauses: 178
% 
% Sat splits: 679
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 1183
% TWLsolver calls for satisfiability: 123
% 
% Memory used [KB]: 7675
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.labSem
% (138053)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 95
% Passive clauses: 1097
% Generated clauses: 9180
% Final active clauses: 85
% Final passive clauses: 953
% Input formulas: 132
% Initial clauses: 141
% 
% Duplicate literals: 508
% Trivial inequalities: 69
% Fw subsumption resolutions: 470
% Fw demodulations: 446
% Bw demodulations: 47
% Condensations: 974
% 
% Simple tautologies: 102
% Equational tautologies: 42
% Forward subsumptions: 3909
% Bw demodulations to eq. taut.: 11
% 
% Binary resolution: 265
% Factoring: 1
% Forward superposition: 2600
% Backward superposition: 2442
% Self superposition: 192
% Equality factoring: 98
% Equality resolution: 7
% 
% Split clauses: 64
% Split components: 128
% SAT solver clauses: 1707
% SAT solver unit clauses: 258
% SAT solver binary clauses: 53
% 
% Sat splits: 64
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1707
% TWLsolver calls for satisfiability: 290
% 
% Memory used [KB]: 15607
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.labSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.labSem
% SZS output start Proof for thm.labSem
fof(f45432,plain,(
  $false),
  inference(subsumption_resolution,[],[f45431,f405])).
fof(f405,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.labSem.state_fupdfupds_comp|split|15',aHL_TRUTH)).
fof(f45431,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f45429,f1059])).
fof(f1059,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X1)))) )),
  inference(unit_resulting_resolution,[],[f1050,f550])).
fof(f550,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f407,f408])).
fof(f408,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.labSem.state_fupdfupds_comp|split|15',aHL_BOOL_CASES)).
fof(f407,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f136])).
fof(f136,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.labSem.state_fupdfupds_comp|split|15',aHL_FALSITY)).
fof(f1050,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X1))))) )),
  inference(equality_resolution,[],[f479])).
fof(f479,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f403])).
fof(f403,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2))))))),
  inference(nnf_transformation,[],[f255])).
fof(f255,plain,(
  ! [X0,X1,X2] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f82])).
fof(f82,axiom,(
  ! [X48,X49,X50] : (p(s(bool,happ(s(fun(X48,bool),happ(s(fun(X48,fun(X48,bool)),'=_0'),s(X48,X49))),s(X48,X50)))) <=> s(X48,X49) = s(X48,X50))),
  file('thm.labSem.state_fupdfupds_comp|split|15',arity_0_HL_EQ)).
fof(f45429,plain,(
  ~p(s(bool,happ(s(fun(fun(sK0,'type.labSem.state'(sK1,sK2)),bool),happ(s(fun(fun(sK0,'type.labSem.state'(sK1,sK2)),fun(fun(sK0,'type.labSem.state'(sK1,sK2)),bool)),'=_0'),s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),'const.combin.o_2'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),sK5),s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),sK4))))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3))))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),'const.combin.o_2'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),sK5),s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),sK4))))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3))))))),
  inference(backward_demodulation,[],[f45363,f14338])).
fof(f14338,plain,(
  ~p(s(bool,happ(s(fun(fun(sK0,'type.labSem.state'(sK1,sK2)),bool),happ(s(fun(fun(sK0,'type.labSem.state'(sK1,sK2)),fun(fun(sK0,'type.labSem.state'(sK1,sK2)),bool)),'=_0'),s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),sK5))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),sK4))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3))))))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),'const.combin.o_2'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),sK5),s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),sK4))))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3))))))),
  inference(unit_resulting_resolution,[],[f404,f478])).
fof(f478,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f403])).
fof(f404,plain,(
  s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),'const.combin.o_2'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),sK5),s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),sK4))))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3))) != s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),sK5))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),sK4))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3)))))),
  inference(cnf_transformation,[],[f391])).
fof(f391,plain,(
  s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),'const.combin.o_2'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),sK5),s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),sK4))))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3))) != s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),sK5))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),'const.combin.o_2'(s(fun('type.labSem.state'(sK1,sK2),'type.labSem.state'(sK1,sK2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(sK1)),'type.list.list'('type.labLang.sec'(sK1))),sK4))),s(fun(sK0,'type.labSem.state'(sK1,sK2)),sK3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f386])).
fof(f386,plain,(
  ? [X0,X1,X2,X3,X4,X5] : s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.o_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X5),s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X4))))),s(fun(X0,'type.labSem.state'(X1,X2)),X3))) != s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X5))),s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X4))),s(fun(X0,'type.labSem.state'(X1,X2)),X3)))))),
  inference(ennf_transformation,[],[f135])).
fof(f135,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.o_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X5),s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X4))))),s(fun(X0,'type.labSem.state'(X1,X2)),X3))) = s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X5))),s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X4))),s(fun(X0,'type.labSem.state'(X1,X2)),X3)))))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ~! [X0,X1,X2] : ! [X3,X4,X5] : s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.o_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X5),s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X4))))),s(fun(X0,'type.labSem.state'(X1,X2)),X3))) = s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X5))),s(fun(X0,'type.labSem.state'(X1,X2)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X2),'type.labSem.state'(X1,X2)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X4))),s(fun(X0,'type.labSem.state'(X1,X2)),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ! [X9,X10,X11] : s(fun(X6,'type.labSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),'const.combin.o_2'(s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),X11),s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),X10))))),s(fun(X6,'type.labSem.state'(X7,X8)),X9))) = s(fun(X6,'type.labSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),X11))),s(fun(X6,'type.labSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),X10))),s(fun(X6,'type.labSem.state'(X7,X8)),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ! [X9,X10,X11] : s(fun(X6,'type.labSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),'const.combin.o_2'(s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),X11),s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),X10))))),s(fun(X6,'type.labSem.state'(X7,X8)),X9))) = s(fun(X6,'type.labSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),X11))),s(fun(X6,'type.labSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),X10))),s(fun(X6,'type.labSem.state'(X7,X8)),X9)))))),
  file('thm.labSem.state_fupdfupds_comp|split|15','thm.labSem.state_fupdfupds_comp|split|15')).
fof(f45363,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(fun(X4,'type.labSem.state'(X0,X1)),'const.combin.o_2'(s(fun('type.labSem.state'(X0,X1),'type.labSem.state'(X0,X1)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X0)),'type.list.list'('type.labLang.sec'(X0))),'const.combin.o_2'(s(fun('type.list.list'('type.labLang.sec'(X0)),'type.list.list'('type.labLang.sec'(X0))),X2),s(fun('type.list.list'('type.labLang.sec'(X0)),'type.list.list'('type.labLang.sec'(X0))),X3))))),s(fun(X4,'type.labSem.state'(X0,X1)),X5))) = s(fun(X4,'type.labSem.state'(X0,X1)),'const.combin.o_2'(s(fun('type.labSem.state'(X0,X1),'type.labSem.state'(X0,X1)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X0)),'type.list.list'('type.labLang.sec'(X0))),X2))),s(fun(X4,'type.labSem.state'(X0,X1)),'const.combin.o_2'(s(fun('type.labSem.state'(X0,X1),'type.labSem.state'(X0,X1)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X0)),'type.list.list'('type.labLang.sec'(X0))),X3))),s(fun(X4,'type.labSem.state'(X0,X1)),X5)))))) )),
  inference(superposition,[],[f493,f434])).
fof(f434,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.o_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X3),s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X2))))) = s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X3))),s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X2)))))) )),
  inference(cnf_transformation,[],[f169])).
fof(f169,plain,(
  ! [X0,X1,X2,X3] : s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.o_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X3),s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X2))))) = s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X3))),s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X2)))))),
  inference(flattening,[],[f168])).
fof(f168,plain,(
  ! [X0,X1] : ! [X2,X3] : s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),'const.combin.o_2'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X3),s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X2))))) = s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.combin.o_2'(s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X3))),s(fun('type.labSem.state'(X1,X0),'type.labSem.state'(X1,X0)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X1)),'type.list.list'('type.labLang.sec'(X1))),X2)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8,X7] : ! [X10,X11] : s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),'const.combin.o_2'(s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),X11),s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),X10))))) = s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.combin.o_2'(s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),X11))),s(fun('type.labSem.state'(X7,X8),'type.labSem.state'(X7,X8)),'const.labSem.state_code_fupd_1'(s(fun('type.list.list'('type.labLang.sec'(X7)),'type.list.list'('type.labLang.sec'(X7))),X10)))))),
  file('thm.labSem.state_fupdfupds_comp|split|15','thm.labSem.state_fupdfupds_comp|split|14')).
fof(f493,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))) )),
  inference(cnf_transformation,[],[f283])).
fof(f283,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))),
  inference(flattening,[],[f282])).
fof(f282,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6] : s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6,X7,X22,X15] : ! [X11,X10,X9] : s(fun(X22,X6),'const.combin.o_2'(s(fun(X7,X6),X11),s(fun(X22,X7),'const.combin.o_2'(s(fun(X15,X7),X10),s(fun(X22,X15),X9))))) = s(fun(X22,X6),'const.combin.o_2'(s(fun(X15,X6),'const.combin.o_2'(s(fun(X7,X6),X11),s(fun(X15,X7),X10))),s(fun(X22,X15),X9)))),
  file('thm.labSem.state_fupdfupds_comp|split|15','thm.combin.o_ASSOC')).
% SZS output end Proof for thm.labSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 236
% Passive clauses: 3964
% Generated clauses: 46241
% Final active clauses: 158
% Final passive clauses: 2305
% Input formulas: 132
% Initial clauses: 141
% 
% Duplicate literals: 1951
% Trivial inequalities: 224
% Fw subsumption resolutions: 2247
% Fw demodulations: 3700
% Bw demodulations: 1255
% Condensations: 4277
% Global subsumptions: 61
% 
% Simple tautologies: 439
% Equational tautologies: 247
% Forward subsumptions: 28987
% Fw demodulations to eq. taut.: 1
% Bw demodulations to eq. taut.: 102
% 
% Unit resulting resolution: 1219
% Factoring: 3
% Forward superposition: 16412
% Backward superposition: 12546
% Self superposition: 447
% Equality factoring: 182
% Equality resolution: 23
% 
% Split clauses: 64
% Split components: 128
% SAT solver clauses: 4214
% SAT solver unit clauses: 651
% SAT solver binary clauses: 821
% 
% Sat splits: 64
% Sat splitting refutations: 59
% 
% Memory used [KB]: 54242
% Time elapsed: 2.934 s
% ------------------------------
% ------------------------------
% Success in time 4.27 s
