Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.wordSem
% (21744)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 165
% Passive clauses: 3325
% Generated clauses: 12532
% Final active clauses: 146
% Final passive clauses: 2970
% Input formulas: 18
% Initial clauses: 26
% 
% Duplicate literals: 333
% Trivial inequalities: 84
% Fw subsumption resolutions: 580
% Fw demodulations: 893
% Bw demodulations: 15
% 
% Simple tautologies: 178
% Equational tautologies: 22
% Forward subsumptions: 7058
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 104
% Forward superposition: 6190
% Backward superposition: 4052
% Self superposition: 228
% Equality factoring: 37
% Equality resolution: 21
% 
% Split clauses: 135
% Split components: 275
% SAT solver clauses: 220
% SAT solver unit clauses: 16
% SAT solver binary clauses: 66
% 
% Sat splits: 135
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 220
% TWLsolver calls for satisfiability: 64
% 
% Memory used [KB]: 22387
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.wordSem
% (21777)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit

% Active clauses: 84
% Passive clauses: 888
% Generated clauses: 6671
% Final active clauses: 72
% Final passive clauses: 773
% Input formulas: 18
% Initial clauses: 26
% 
% Duplicate literals: 232
% Trivial inequalities: 73
% Fw subsumption resolutions: 243
% Fw demodulations: 514
% Bw demodulations: 35
% Condensations: 691
% 
% Simple tautologies: 79
% Equational tautologies: 21
% Forward subsumptions: 2673
% Fw demodulations to eq. taut.: 1
% Bw demodulations to eq. taut.: 4
% 
% Binary resolution: 187
% Forward superposition: 2304
% Backward superposition: 1338
% Self superposition: 77
% Equality factoring: 40
% Equality resolution: 10
% 
% Split clauses: 15
% Split components: 30
% SAT solver clauses: 1276
% SAT solver unit clauses: 37
% SAT solver binary clauses: 30
% 
% Sat splits: 15
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 1276
% TWLsolver calls for satisfiability: 187
% 
% Memory used [KB]: 15095
% Time elapsed: 0.754 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.wordSem
% (21806)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 387
% Passive clauses: 9331
% Generated clauses: 100190
% Final active clauses: 66
% Final passive clauses: 513
% Input formulas: 18
% Initial clauses: 26
% Discarded non-redundant clauses: 1808
% 
% Duplicate literals: 5757
% Trivial inequalities: 503
% Fw subsumption resolutions: 7293
% Fw demodulations: 14352
% Bw demodulations: 5550
% Condensations: 9694
% Global subsumptions: 160
% 
% Simple tautologies: 711
% Equational tautologies: 545
% Forward subsumptions: 51210
% Fw demodulations to eq. taut.: 16
% Bw demodulations to eq. taut.: 661
% 
% Unit resulting resolution: 1909
% Forward superposition: 25333
% Backward superposition: 18550
% Self superposition: 543
% Equality factoring: 304
% Equality resolution: 50
% 
% Split clauses: 184
% Split components: 377
% SAT solver clauses: 10071
% SAT solver unit clauses: 84
% SAT solver binary clauses: 695
% 
% Sat splits: 184
% Sat splitting refutations: 209
% 
% Memory used [KB]: 130232
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.wordSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.wordSem
% SZS output start Proof for thm.wordSem
fof(f503,plain,(
  $false),
  inference(subsumption_resolution,[],[f496,f78])).
fof(f78,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.wordSem.add_ret_loc_ind',aHL_FALSITY)).
fof(f496,plain,(
  p(s(bool,'F_0'))),
  inference(superposition,[],[f472,f106])).
fof(f106,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool)),sK4),s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),sK5))),s('type.list.list'('type.wordSem.word_loc'(sK3)),sK6)))),
  inference(resolution,[],[f62,f73])).
fof(f73,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X19] : (s(bool,'F_0') = s(bool,X19) <=> ~p(s(bool,X19)))),
  file('thm.wordSem.add_ret_loc_ind','thm.bool.EQ_CLAUSES|split|2')).
fof(f62,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool)),sK4),s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),sK5))),s('type.list.list'('type.wordSem.word_loc'(sK3)),sK6))))),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X13] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool)),sK4),s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.NONE_0'))),s('type.list.list'('type.wordSem.word_loc'(sK3)),X13)))) & ! [X7,X8,X9,X10,X11,X12] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool)),sK4),s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.SOME_1'(s('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_2'(s(sK0,X7),s('type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s(sK1,X8),s('type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(sK2,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X11))))))))))))),s('type.list.list'('type.wordSem.word_loc'(sK3)),X12)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool)),sK4),s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),sK5))),s('type.list.list'('type.wordSem.word_loc'(sK3)),sK6))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6])],[f48])).
fof(f48,plain,(
  ? [X0,X1,X2,X3,X4] : (! [X13] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X3)),bool)),X4),s('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.NONE_0'))),s('type.list.list'('type.wordSem.word_loc'(X3)),X13)))) & ! [X7,X8,X9,X10,X11,X12] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X3)),bool)),X4),s('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.SOME_1'(s('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_2'(s(X0,X7),s('type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s(X1,X8),s('type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(X2,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X11))))))))))))),s('type.list.list'('type.wordSem.word_loc'(X3)),X12)))) & ? [X5,X6] : ~p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X3)),bool)),X4),s('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),X5))),s('type.list.list'('type.wordSem.word_loc'(X3)),X6)))))),
  inference(rectify,[],[f44])).
fof(f44,plain,(
  ? [X0,X1,X2,X3,X4] : (! [X11] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X3)),bool)),X4),s('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.NONE_0'))),s('type.list.list'('type.wordSem.word_loc'(X3)),X11)))) & ! [X5,X6,X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X3)),bool)),X4),s('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.SOME_1'(s('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_2'(s(X0,X5),s('type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s(X1,X6),s('type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(X2,X7),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X8),s('type.num.num',X9))))))))))))),s('type.list.list'('type.wordSem.word_loc'(X3)),X10)))) & ? [X12,X13] : ~p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X3)),bool)),X4),s('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),X12))),s('type.list.list'('type.wordSem.word_loc'(X3)),X13)))))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ? [X0,X1,X2,X3,X4] : ((! [X11] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X3)),bool)),X4),s('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.NONE_0'))),s('type.list.list'('type.wordSem.word_loc'(X3)),X11)))) & ! [X5,X6,X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X3)),bool)),X4),s('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.SOME_1'(s('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_2'(s(X0,X5),s('type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s(X1,X6),s('type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(X2,X7),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X8),s('type.num.num',X9))))))))))))),s('type.list.list'('type.wordSem.word_loc'(X3)),X10))))) & ? [X12,X13] : ~p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X3)),bool)),X4),s('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),X12))),s('type.list.list'('type.wordSem.word_loc'(X3)),X13)))))),
  inference(ennf_transformation,[],[f21])).
fof(f21,plain,(
  ~! [X0,X1,X2,X3,X4] : ((! [X11] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X3)),bool)),X4),s('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.NONE_0'))),s('type.list.list'('type.wordSem.word_loc'(X3)),X11)))) & ! [X5,X6,X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X3)),bool)),X4),s('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.SOME_1'(s('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_2'(s(X0,X5),s('type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s(X1,X6),s('type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(X2,X7),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X8),s('type.num.num',X9))))))))))))),s('type.list.list'('type.wordSem.word_loc'(X3)),X10))))) => ! [X12,X13] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X3)),bool)),X4),s('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),X12))),s('type.list.list'('type.wordSem.word_loc'(X3)),X13)))))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ~! [X0,X1,X2,X3] : ! [X4] : ((! [X11] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X3)),bool)),X4),s('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.NONE_0'))),s('type.list.list'('type.wordSem.word_loc'(X3)),X11)))) & ! [X5,X6,X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X3)),bool)),X4),s('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.SOME_1'(s('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_2'(s(X0,X5),s('type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s(X1,X6),s('type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(X2,X7),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X8),s('type.num.num',X9))))))))))))),s('type.list.list'('type.wordSem.word_loc'(X3)),X10))))) => ! [X12,X13] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X3)),bool)),X4),s('type.option.option'('type.pair.prod'(X0,'type.pair.prod'(X1,'type.pair.prod'(X2,'type.pair.prod'('type.num.num','type.num.num'))))),X12))),s('type.list.list'('type.wordSem.word_loc'(X3)),X13)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : ! [X10] : ((! [X11] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X9)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X9)),bool)),X10),s('type.option.option'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.NONE_0'))),s('type.list.list'('type.wordSem.word_loc'(X9)),X11)))) & ! [X12,X13,X14,X15,X16,X11] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X9)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X9)),bool)),X10),s('type.option.option'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.SOME_1'(s('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_2'(s(X6,X12),s('type.pair.prod'(X7,'type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s(X7,X13),s('type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(X8,X14),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X15),s('type.num.num',X16))))))))))))),s('type.list.list'('type.wordSem.word_loc'(X9)),X11))))) => ! [X17,X18] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X9)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X9)),bool)),X10),s('type.option.option'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num'))))),X17))),s('type.list.list'('type.wordSem.word_loc'(X9)),X18)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : ! [X10] : ((! [X11] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X9)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X9)),bool)),X10),s('type.option.option'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.NONE_0'))),s('type.list.list'('type.wordSem.word_loc'(X9)),X11)))) & ! [X12,X13,X14,X15,X16,X11] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X9)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X9)),bool)),X10),s('type.option.option'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.SOME_1'(s('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_2'(s(X6,X12),s('type.pair.prod'(X7,'type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s(X7,X13),s('type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(X8,X14),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X15),s('type.num.num',X16))))))))))))),s('type.list.list'('type.wordSem.word_loc'(X9)),X11))))) => ! [X17,X18] : p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(X9)),bool),happ(s(fun('type.option.option'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(X9)),bool)),X10),s('type.option.option'('type.pair.prod'(X6,'type.pair.prod'(X7,'type.pair.prod'(X8,'type.pair.prod'('type.num.num','type.num.num'))))),X17))),s('type.list.list'('type.wordSem.word_loc'(X9)),X18)))))),
  file('thm.wordSem.add_ret_loc_ind','thm.wordSem.add_ret_loc_ind')).
fof(f472,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool)),sK4),s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),sK5))),s('type.list.list'('type.wordSem.word_loc'(sK3)),X0))))) )),
  inference(superposition,[],[f450,f117])).
fof(f117,plain,(
  s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),sK5) = s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.SOME_1'(s('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num')))),sK14(sK5,'type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))))))),
  inference(subsumption_resolution,[],[f108,f60])).
fof(f60,plain,(
  ( ! [X13] : (p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool)),sK4),s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.NONE_0'))),s('type.list.list'('type.wordSem.word_loc'(sK3)),X13))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f108,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool)),sK4),s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.NONE_0'))),s('type.list.list'('type.wordSem.word_loc'(sK3)),sK6)))) | s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),sK5) = s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.SOME_1'(s('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num')))),sK14(sK5,'type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))))))),
  inference(superposition,[],[f62,f65])).
fof(f65,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK14(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK14(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK14])],[f25])).
fof(f25,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X9] : ! [X20] : (s('type.option.option'(X9),'const.option.NONE_0') = s('type.option.option'(X9),X20) | ? [X21] : s('type.option.option'(X9),X20) = s('type.option.option'(X9),'const.option.SOME_1'(s(X9,X21))))),
  file('thm.wordSem.add_ret_loc_ind','thm.option.option_nchotomy')).
fof(f450,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool)),sK4),s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.SOME_1'(s('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num')))),X0))))),s('type.list.list'('type.wordSem.word_loc'(sK3)),X1))))) )),
  inference(superposition,[],[f426,f67])).
fof(f67,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK15(X2,X1,X0)),s(X1,sK16(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK15(X2,X1,X0)),s(X1,sK16(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK15,sK16])],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X9,X6] : ! [X21] : ? [X22,X23] : s('type.pair.prod'(X9,X6),X21) = s('type.pair.prod'(X9,X6),'const.pair.,_2'(s(X9,X22),s(X6,X23)))),
  file('thm.wordSem.add_ret_loc_ind','thm.pair.ABS_PAIR_THM')).
fof(f426,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool)),sK4),s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.SOME_1'(s('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_2'(s(sK0,X1),s('type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))),X0))))))),s('type.list.list'('type.wordSem.word_loc'(sK3)),X2))))) )),
  inference(superposition,[],[f400,f67])).
fof(f400,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool)),sK4),s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.SOME_1'(s('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_2'(s(sK0,X1),s('type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s(sK1,X2),s('type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num')),X0))))))))),s('type.list.list'('type.wordSem.word_loc'(sK3)),X3))))) )),
  inference(superposition,[],[f236,f67])).
fof(f236,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool)),sK4),s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.SOME_1'(s('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_2'(s(sK0,X1),s('type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s(sK1,X2),s('type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(sK2,X3),s('type.pair.prod'('type.num.num','type.num.num'),X0))))))))))),s('type.list.list'('type.wordSem.word_loc'(sK3)),X4))))) )),
  inference(superposition,[],[f61,f67])).
fof(f61,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool),happ(s(fun('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),fun('type.list.list'('type.wordSem.word_loc'(sK3)),bool)),sK4),s('type.option.option'('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))))),'const.option.SOME_1'(s('type.pair.prod'(sK0,'type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num')))),'const.pair.,_2'(s(sK0,X7),s('type.pair.prod'(sK1,'type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s(sK1,X8),s('type.pair.prod'(sK2,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(sK2,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X11))))))))))))),s('type.list.list'('type.wordSem.word_loc'(sK3)),X12))))) )),
  inference(cnf_transformation,[],[f49])).
% SZS output end Proof for thm.wordSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 39
% Passive clauses: 95
% Generated clauses: 418
% Final active clauses: 36
% Final passive clauses: 65
% Input formulas: 18
% Initial clauses: 24
% 
% Selected by SInE selection: 16
% SInE iterations: 1
% 
% Trivial inequalities: 9
% Fw subsumption resolutions: 23
% Fw demodulations: 39
% Bw demodulations: 2
% 
% Simple tautologies: 2
% Forward subsumptions: 243
% 
% Binary resolution: 66
% Forward superposition: 195
% Backward superposition: 77
% 
% Split clauses: 6
% Split components: 12
% SAT solver clauses: 8
% SAT solver unit clauses: 1
% SAT solver binary clauses: 4
% 
% Sat splits: 6
% Sat splitting refutations: 1
% 
% Memory used [KB]: 2174
% Time elapsed: 0.017 s
% ------------------------------
% ------------------------------
% Success in time 11.796 s
