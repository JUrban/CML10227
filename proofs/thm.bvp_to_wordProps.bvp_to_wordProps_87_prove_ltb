Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% (136284)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 123
% Passive clauses: 2893
% Generated clauses: 26210
% Final active clauses: 118
% Final passive clauses: 2678
% Input formulas: 21
% Initial clauses: 40
% 
% Duplicate literals: 1692
% Trivial inequalities: 301
% Fw subsumption resolutions: 2130
% Fw demodulations: 2535
% Bw demodulations: 3
% 
% Simple tautologies: 423
% Equational tautologies: 26
% Forward subsumptions: 14529
% 
% Binary resolution: 15
% Forward superposition: 11639
% Backward superposition: 7185
% Self superposition: 235
% Equality factoring: 80
% Equality resolution: 9
% 
% Split clauses: 1079
% Split components: 2172
% SAT solver clauses: 1688
% SAT solver unit clauses: 39
% SAT solver binary clauses: 337
% 
% Sat splits: 1079
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1685
% TWLsolver calls for satisfiability: 141
% 
% Memory used [KB]: 16630
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f510,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f509,f74,f115,f498,f499,f75,f119,f112,f134,f144,f146,f73,f117,f77,f121,f79,f122])).
fof(f122,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f122_D])).
fof(f122_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f79,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_87_prove_ltb',aHL_BOOL_CASES)).
fof(f121,plain,(
  ~p(s(bool,'F_0')) | $spl7),
  inference(cnf_transformation,[],[f121_D])).
fof(f121_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f77,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_87_prove_ltb',aHL_FALSITY)).
fof(f117,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2)))))) | $spl2),
  inference(cnf_transformation,[],[f117_D])).
fof(f117_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2)))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f73,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))))),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2)))))) & s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK4)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f48])).
fof(f48,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2)))))) & s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))) != s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2)))))) => s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2)))))) => s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X8)))))) => s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X9),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X8))) = s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X9),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X8),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X10))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X8)))))) => s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X9),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X8))) = s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X9),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X8),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X10))))))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_87_prove_ltb','thm.bvp_to_wordProps.bvp_to_wordProps_87_prove_ltb')).
fof(f146,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | $spl22),
  inference(cnf_transformation,[],[f146_D])).
fof(f146_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f144,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | ($spl2 | $spl7 | $spl8)),
  inference(subsumption_resolution,[],[f139,f121])).
fof(f139,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))))) | ($spl2 | $spl8)),
  inference(superposition,[],[f117,f122])).
fof(f134,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2)))))) | s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4)))))) ) | $spl16),
  inference(cnf_transformation,[],[f134_D])).
fof(f134_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2)))))) | s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4)))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f112,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))))))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2)))))) | s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))))))),
  inference(ennf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2)))))) => s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))))))),
  inference(flattening,[],[f46])).
fof(f46,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2)))))) => s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2))) = s('type.option.option'('type.copying_gc.heap_element'(X0,X1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X3),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X2),s('type.list.list'('type.copying_gc.heap_element'(X0,X1)),X4))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : ! [X11,X12,X13] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num','const.copying_gc.heap_length_1'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X11)))))) => s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X12),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X11))) = s('type.option.option'('type.copying_gc.heap_element'(X6,X7)),'const.copying_gc.heap_lookup_2'(s('type.num.num',X12),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X11),s('type.list.list'('type.copying_gc.heap_element'(X6,X7)),X13))))))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_87_prove_ltb','thm.copying_gc.LESS_IMP_heap_lookup')).
fof(f119,plain,(
  p(s(bool,'T_0')) | $spl4),
  inference(cnf_transformation,[],[f119_D])).
fof(f119_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f75,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f22])).
fof(f22,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_87_prove_ltb','thm.bool.TRUTH')).
fof(f499,plain,(
  ( ! [X0] : (s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) = s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),X0)))))) ) | $spl70),
  inference(cnf_transformation,[],[f499_D])).
fof(f499_D,plain,(
  ( ! [X0] : (s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) = s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),X0)))))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f498,plain,(
  ( ! [X0] : (s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) = s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),X0)))))) ) | ($spl4 | $spl16 | $spl22)),
  inference(subsumption_resolution,[],[f487,f119])).
fof(f487,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) = s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),X0)))))) ) | ($spl16 | $spl22)),
  inference(superposition,[],[f134,f146])).
fof(f115,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK4))))) | $spl1),
  inference(cnf_transformation,[],[f115_D])).
fof(f115_D,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK4))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f74,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),'const.list.APPEND_2'(s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK4)))))),
  inference(cnf_transformation,[],[f52])).
fof(f509,plain,(
  $false | ($spl1 | $spl70)),
  inference(trivial_inequality_removal,[],[f504])).
fof(f504,plain,(
  s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) != s('type.option.option'('type.copying_gc.heap_element'(sK0,sK1)),'const.copying_gc.heap_lookup_2'(s('type.num.num',sK3),s('type.list.list'('type.copying_gc.heap_element'(sK0,sK1)),sK2))) | ($spl1 | $spl70)),
  inference(superposition,[],[f115,f499])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 15
% Passive clauses: 38
% Generated clauses: 422
% Final active clauses: 14
% Final passive clauses: 20
% Input formulas: 21
% Initial clauses: 40
% 
% Duplicate literals: 50
% Trivial inequalities: 3
% Fw subsumption resolutions: 5
% Fw demodulations: 8
% Bw demodulations: 3
% Condensations: 52
% Global subsumptions: 8
% 
% Simple tautologies: 38
% Equational tautologies: 14
% Forward subsumptions: 130
% 
% Binary resolution: 4
% Forward superposition: 68
% Backward superposition: 88
% Self superposition: 26
% Equality factoring: 26
% 
% Split clauses: 1
% Split components: 2
% SAT solver clauses: 132
% SAT solver unit clauses: 49
% SAT solver binary clauses: 17
% SAT solver learnt clauses: 17
% 
% Sat splits: 1
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 99
% TWLsolver calls for satisfiability: 78
% 
% Memory used [KB]: 1023
% Time elapsed: 0.012 s
% ------------------------------
% ------------------------------
% Success in time 0.634 s
