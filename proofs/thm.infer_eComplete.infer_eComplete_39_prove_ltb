Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.infer_eComplete
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.infer_eComplete
% SZS output start Proof for thm.infer_eComplete
fof(f2336,plain,(
  $false),
  inference(subsumption_resolution,[],[f2335,f150])).
fof(f150,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1] : s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0] : ! [X1] : ~s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6] : ! [X12] : ~s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X12)))),
  file('thm.infer_eComplete.infer_eComplete_39_prove_ltb','thm.option.NOT_NONE_SOME')).
fof(f2335,plain,(
  s('type.option.option'('type.ast.t'),'const.option.NONE_0') = s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',sK6('const.list.NIL_0','const.list.NIL_0',sK2,sK1,sK0))))),
  inference(forward_demodulation,[],[f2334,f165])).
fof(f165,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0'),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1,X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0'),s(X0,X2)))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ! [X0,X1] : ! [X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0'),s(X0,X2)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9,X6] : ! [X10] : s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X9,X6)),'const.list.NIL_0'),s(X9,X10)))),
  file('thm.infer_eComplete.infer_eComplete_39_prove_ltb','thm.alist.ALOOKUP_def|split|0')).
fof(f2334,plain,(
  s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',sK6('const.list.NIL_0','const.list.NIL_0',sK2,sK1,sK0)))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK0,'type.ast.t')),'const.list.NIL_0'),s(sK0,sK5('const.list.NIL_0','const.list.NIL_0',sK2,sK1,sK0))))),
  inference(subsumption_resolution,[],[f2333,f150])).
fof(f2333,plain,(
  s('type.option.option'('type.infer_t.infer_t'),'const.option.NONE_0') = s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',sK8('const.list.NIL_0','const.list.NIL_0',sK2,sK1,sK0)))) | s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',sK6('const.list.NIL_0','const.list.NIL_0',sK2,sK1,sK0)))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK0,'type.ast.t')),'const.list.NIL_0'),s(sK0,sK5('const.list.NIL_0','const.list.NIL_0',sK2,sK1,sK0))))),
  inference(forward_demodulation,[],[f2310,f165])).
fof(f2310,plain,(
  s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',sK8('const.list.NIL_0','const.list.NIL_0',sK2,sK1,sK0)))) = s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK0,'type.infer_t.infer_t')),'const.list.NIL_0'),s(sK0,sK7('const.list.NIL_0','const.list.NIL_0',sK2,sK1,sK0)))) | s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',sK6('const.list.NIL_0','const.list.NIL_0',sK2,sK1,sK0)))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(sK0,'type.ast.t')),'const.list.NIL_0'),s(sK0,sK5('const.list.NIL_0','const.list.NIL_0',sK2,sK1,sK0))))),
  inference(resolution,[],[f157,f112])).
fof(f112,plain,(
  ~p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),sK1),s('type.num.num',sK2),s('type.list.list'('type.pair.prod'(sK0,'type.infer_t.infer_t')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(sK0,'type.ast.t')),'const.list.NIL_0'))))),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ~p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),sK1),s('type.num.num',sK2),s('type.list.list'('type.pair.prod'(sK0,'type.infer_t.infer_t')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(sK0,'type.ast.t')),'const.list.NIL_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f61])).
fof(f61,plain,(
  ? [X0,X1,X2] : ~p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),'const.list.NIL_0'))))),
  inference(ennf_transformation,[],[f30])).
fof(f30,plain,(
  ~! [X0,X1,X2] : p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),'const.list.NIL_0'))))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ~! [X0] : ! [X1,X2] : p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),'const.list.NIL_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X7),s('type.num.num',X8),s('type.list.list'('type.pair.prod'(X6,'type.infer_t.infer_t')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X6,'type.ast.t')),'const.list.NIL_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X7),s('type.num.num',X8),s('type.list.list'('type.pair.prod'(X6,'type.infer_t.infer_t')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(X6,'type.ast.t')),'const.list.NIL_0'))))),
  file('thm.infer_eComplete.infer_eComplete_39_prove_ltb','thm.infer_eComplete.infer_eComplete_39_prove_ltb')).
fof(f157,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4)))) | s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',sK8(X4,X3,X2,X1,X0)))) = s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,sK7(X4,X3,X2,X1,X0)))) | s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',sK6(X4,X3,X2,X1,X0)))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,sK5(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4)))) | (! [X14,X15] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X15))) != s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X14))) | (p(s(bool,'const.typeSystem.check_freevars_3'(s('type.num.num',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'),s('type.ast.t',X15)))) & (s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X14))) = s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',sK3(X15,X14,X4,X3,X2,X1,X0)))) & s('type.infer_t.infer_t','const.inferProps.unconvert_t_1'(s('type.ast.t',X15))) = s('type.infer_t.infer_t','const.unify.t_walkstar_2'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.infer_t.infer_t',sK3(X15,X14,X4,X3,X2,X1,X0))))))) & ! [X11,X12] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X12))) != s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X11))) | s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X11))) = s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',sK4(X12,X11,X4,X3,X2,X1,X0))))))) & ((s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',sK6(X4,X3,X2,X1,X0)))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,sK5(X4,X3,X2,X1,X0)))) & (~p(s(bool,'const.typeSystem.check_freevars_3'(s('type.num.num',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'),s('type.ast.t',sK6(X4,X3,X2,X1,X0))))) | ! [X10] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X10))) != s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,sK5(X4,X3,X2,X1,X0)))) | s('type.infer_t.infer_t','const.unify.t_walkstar_2'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.infer_t.infer_t',X10))) != s('type.infer_t.infer_t','const.inferProps.unconvert_t_1'(s('type.ast.t',sK6(X4,X3,X2,X1,X0))))))) | (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',sK8(X4,X3,X2,X1,X0)))) = s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,sK7(X4,X3,X2,X1,X0)))) & ! [X7] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X7))) != s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,sK7(X4,X3,X2,X1,X0))))) | p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3,sK4,sK5,sK6,sK7,sK8])],[f102])).
fof(f102,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4)))) | (! [X14,X15] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X15))) != s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X14))) | (p(s(bool,'const.typeSystem.check_freevars_3'(s('type.num.num',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'),s('type.ast.t',X15)))) & ? [X16] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X16))) = s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X14))) & s('type.infer_t.infer_t','const.inferProps.unconvert_t_1'(s('type.ast.t',X15))) = s('type.infer_t.infer_t','const.unify.t_walkstar_2'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.infer_t.infer_t',X16)))))) & ! [X11,X12] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X12))) != s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X11))) | ? [X13] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X13))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X11)))))) & (? [X8,X9] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X9))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X8))) & (~p(s(bool,'const.typeSystem.check_freevars_3'(s('type.num.num',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'),s('type.ast.t',X9)))) | ! [X10] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X10))) != s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X8))) | s('type.infer_t.infer_t','const.inferProps.unconvert_t_1'(s('type.ast.t',X9))) != s('type.infer_t.infer_t','const.unify.t_walkstar_2'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.infer_t.infer_t',X10)))))) | ? [X5,X6] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X6))) = s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X5))) & ! [X7] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X7))) != s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X5)))) | p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4))))))),
  inference(rectify,[],[f101])).
fof(f101,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4)))) | (! [X8,X9] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X9))) != s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X8))) | (p(s(bool,'const.typeSystem.check_freevars_3'(s('type.num.num',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'),s('type.ast.t',X9)))) & ? [X10] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X10))) = s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X8))) & s('type.infer_t.infer_t','const.inferProps.unconvert_t_1'(s('type.ast.t',X9))) = s('type.infer_t.infer_t','const.unify.t_walkstar_2'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.infer_t.infer_t',X10)))))) & ! [X5,X6] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X6))) != s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X5))) | ? [X7] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X7))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X5)))))) & (? [X8,X9] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X9))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X8))) & (~p(s(bool,'const.typeSystem.check_freevars_3'(s('type.num.num',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'),s('type.ast.t',X9)))) | ! [X10] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X10))) != s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X8))) | s('type.infer_t.infer_t','const.inferProps.unconvert_t_1'(s('type.ast.t',X9))) != s('type.infer_t.infer_t','const.unify.t_walkstar_2'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.infer_t.infer_t',X10)))))) | ? [X5,X6] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X6))) = s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X5))) & ! [X7] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X7))) != s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X5)))) | p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4))))))),
  inference(flattening,[],[f100])).
fof(f100,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4)))) | (! [X8,X9] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X9))) != s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X8))) | (p(s(bool,'const.typeSystem.check_freevars_3'(s('type.num.num',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'),s('type.ast.t',X9)))) & ? [X10] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X10))) = s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X8))) & s('type.infer_t.infer_t','const.inferProps.unconvert_t_1'(s('type.ast.t',X9))) = s('type.infer_t.infer_t','const.unify.t_walkstar_2'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.infer_t.infer_t',X10)))))) & ! [X5,X6] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X6))) != s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X5))) | ? [X7] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X7))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X5)))))) & ((? [X8,X9] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X9))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X8))) & (~p(s(bool,'const.typeSystem.check_freevars_3'(s('type.num.num',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'),s('type.ast.t',X9)))) | ! [X10] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X10))) != s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X8))) | s('type.infer_t.infer_t','const.inferProps.unconvert_t_1'(s('type.ast.t',X9))) != s('type.infer_t.infer_t','const.unify.t_walkstar_2'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.infer_t.infer_t',X10)))))) | ? [X5,X6] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X6))) = s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X5))) & ! [X7] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X7))) != s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X5))))) | p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4))))))),
  inference(nnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4)))) <=> (! [X8,X9] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X9))) != s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X8))) | (p(s(bool,'const.typeSystem.check_freevars_3'(s('type.num.num',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'),s('type.ast.t',X9)))) & ? [X10] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X10))) = s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X8))) & s('type.infer_t.infer_t','const.inferProps.unconvert_t_1'(s('type.ast.t',X9))) = s('type.infer_t.infer_t','const.unify.t_walkstar_2'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.infer_t.infer_t',X10)))))) & ! [X5,X6] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X6))) != s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X5))) | ? [X7] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X7))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X5))))))),
  inference(ennf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4)))) <=> (! [X8,X9] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X9))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X8))) => (p(s(bool,'const.typeSystem.check_freevars_3'(s('type.num.num',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'),s('type.ast.t',X9)))) & ? [X10] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X10))) = s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X8))) & s('type.infer_t.infer_t','const.inferProps.unconvert_t_1'(s('type.ast.t',X9))) = s('type.infer_t.infer_t','const.unify.t_walkstar_2'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.infer_t.infer_t',X10)))))) & ! [X5,X6] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X6))) = s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X5))) => ? [X7] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X7))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X5))))))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0] : ! [X1,X2,X3,X4] : (p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.num.num',X2),s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4)))) <=> (! [X8,X9] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X9))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X8))) => (p(s(bool,'const.typeSystem.check_freevars_3'(s('type.num.num',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'),s('type.ast.t',X9)))) & ? [X10] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X10))) = s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X8))) & s('type.infer_t.infer_t','const.inferProps.unconvert_t_1'(s('type.ast.t',X9))) = s('type.infer_t.infer_t','const.unify.t_walkstar_2'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X1),s('type.infer_t.infer_t',X10)))))) & ! [X5,X6] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X6))) = s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.infer_t.infer_t')),X3),s(X0,X5))) => ? [X7] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X7))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X0,'type.ast.t')),X4),s(X0,X5))))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6] : ! [X7,X20,X21,X22] : (p(s(bool,'const.infer_eComplete.simp_tenv_invC_4'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X7),s('type.num.num',X20),s('type.list.list'('type.pair.prod'(X6,'type.infer_t.infer_t')),X21),s('type.list.list'('type.pair.prod'(X6,'type.ast.t')),X22)))) <=> (! [X8,X13] : (s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X13))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X6,'type.ast.t')),X22),s(X6,X8))) => (p(s(bool,'const.typeSystem.check_freevars_3'(s('type.num.num',X20),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'),s('type.ast.t',X13)))) & ? [X23] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X23))) = s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X6,'type.infer_t.infer_t')),X21),s(X6,X8))) & s('type.infer_t.infer_t','const.inferProps.unconvert_t_1'(s('type.ast.t',X13))) = s('type.infer_t.infer_t','const.unify.t_walkstar_2'(s('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'),X7),s('type.infer_t.infer_t',X23)))))) & ! [X8,X23] : (s('type.option.option'('type.infer_t.infer_t'),'const.option.SOME_1'(s('type.infer_t.infer_t',X23))) = s('type.option.option'('type.infer_t.infer_t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X6,'type.infer_t.infer_t')),X21),s(X6,X8))) => ? [X13] : s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',X13))) = s('type.option.option'('type.ast.t'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'(X6,'type.ast.t')),X22),s(X6,X8))))))),
  file('thm.infer_eComplete.infer_eComplete_39_prove_ltb','thm.infer_eComplete.simp_tenv_invC_def')).
% SZS output end Proof for thm.infer_eComplete
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 61
% Passive clauses: 568
% Generated clauses: 2164
% Final active clauses: 53
% Final passive clauses: 457
% Input formulas: 27
% Initial clauses: 73
% 
% Duplicate literals: 128
% Trivial inequalities: 38
% Fw subsumption resolutions: 303
% Fw demodulations: 90
% Bw demodulations: 1
% 
% Simple tautologies: 104
% Equational tautologies: 29
% Forward subsumptions: 788
% 
% Binary resolution: 199
% Factoring: 1
% Forward superposition: 674
% Backward superposition: 494
% Self superposition: 58
% Equality factoring: 52
% Equality resolution: 12
% 
% Split clauses: 81
% Split components: 166
% SAT solver clauses: 138
% SAT solver unit clauses: 5
% SAT solver binary clauses: 33
% 
% Sat splits: 81
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 138
% TWLsolver calls for satisfiability: 57
% 
% Memory used [KB]: 2558
% Time elapsed: 0.072 s
% ------------------------------
% ------------------------------
% Success in time 0.074 s
