Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.lab_filterProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.lab_filterProof
% SZS output start Proof for thm.lab_filterProof
fof(f1797,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f1796])).
fof(f1796,plain,(
  s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(sK6))),sK7) != s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(sK6))),sK7)),
  inference(superposition,[],[f133,f132])).
fof(f132,plain,(
  s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(sK6))),sK7) = s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(sK6))),'const.pair.,_2'(s('type.num.num',sK8),s('type.list.list'('type.labLang.sec'(sK6)),sK9)))),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(sK6))),sK7) = s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(sK6))),'const.pair.,_2'(s('type.num.num',sK8),s('type.list.list'('type.labLang.sec'(sK6)),sK9))) & ! [X2,X3] : s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(sK6))),sK7) != s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(sK6))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.labLang.sec'(sK6)),X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9])],[f89])).
fof(f89,plain,(
  ? [X0,X1] : (? [X4,X5] : s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X0))),X1) = s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X0))),'const.pair.,_2'(s('type.num.num',X4),s('type.list.list'('type.labLang.sec'(X0)),X5))) & ! [X2,X3] : s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X0))),X1) != s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.labLang.sec'(X0)),X3))))),
  inference(rectify,[],[f64])).
fof(f64,plain,(
  ? [X0,X1] : (? [X2,X3] : s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X0))),X1) = s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.labLang.sec'(X0)),X3))) & ! [X4,X5] : s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X0))),X1) != s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X0))),'const.pair.,_2'(s('type.num.num',X4),s('type.list.list'('type.labLang.sec'(X0)),X5))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1] : (? [X2,X3] : s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X0))),X1) = s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.labLang.sec'(X0)),X3))) => ? [X4,X5] : s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X0))),X1) = s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X0))),'const.pair.,_2'(s('type.num.num',X4),s('type.list.list'('type.labLang.sec'(X0)),X5))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ~! [X0] : ! [X1] : (? [X2,X3] : s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X0))),X1) = s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.labLang.sec'(X0)),X3))) => ? [X4,X5] : s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X0))),X1) = s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X0))),'const.pair.,_2'(s('type.num.num',X4),s('type.list.list'('type.labLang.sec'(X0)),X5))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (? [X8,X9] : s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X6))),X7) = s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X6))),'const.pair.,_2'(s('type.num.num',X8),s('type.list.list'('type.labLang.sec'(X6)),X9))) => ? [X8,X9] : s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X6))),X7) = s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X6))),'const.pair.,_2'(s('type.num.num',X8),s('type.list.list'('type.labLang.sec'(X6)),X9))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (? [X8,X9] : s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X6))),X7) = s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X6))),'const.pair.,_2'(s('type.num.num',X8),s('type.list.list'('type.labLang.sec'(X6)),X9))) => ? [X8,X9] : s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X6))),X7) = s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(X6))),'const.pair.,_2'(s('type.num.num',X8),s('type.list.list'('type.labLang.sec'(X6)),X9))))),
  file('thm.lab_filterProof.lab_filterProof_|49|_prove_ltb','thm.lab_filterProof.lab_filterProof_|49|_prove_ltb')).
fof(f133,plain,(
  ( ! [X2,X3] : (s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(sK6))),sK7) != s('type.pair.prod'('type.num.num','type.list.list'('type.labLang.sec'(sK6))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.labLang.sec'(sK6)),X3)))) )),
  inference(cnf_transformation,[],[f90])).
% SZS output end Proof for thm.lab_filterProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 167
% Passive clauses: 567
% Generated clauses: 1660
% Final active clauses: 167
% Final passive clauses: 349
% Input formulas: 26
% Initial clauses: 92
% 
% Duplicate literals: 37
% Trivial inequalities: 14
% Fw subsumption resolutions: 126
% 
% Simple tautologies: 58
% Equational tautologies: 11
% Forward subsumptions: 823
% 
% Binary resolution: 1039
% Factoring: 200
% Forward superposition: 73
% Backward superposition: 51
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 42
% Split components: 85
% SAT solver clauses: 74
% SAT solver unit clauses: 4
% SAT solver binary clauses: 29
% 
% Sat splits: 42
% 
% TWLsolver clauses: 74
% TWLsolver calls for satisfiability: 56
% 
% Memory used [KB]: 1151
% Time elapsed: 0.072 s
% ------------------------------
% ------------------------------
% Success in time 0.09 s
