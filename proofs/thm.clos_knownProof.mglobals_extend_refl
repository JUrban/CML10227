Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% (72239)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 171
% Passive clauses: 1867
% Generated clauses: 13490
% Final active clauses: 152
% Final passive clauses: 1420
% Input formulas: 29
% Initial clauses: 73
% 
% Duplicate literals: 789
% Trivial inequalities: 249
% Fw subsumption resolutions: 2082
% Fw demodulations: 1881
% Bw demodulations: 17
% 
% Simple tautologies: 301
% Equational tautologies: 24
% Forward subsumptions: 5473
% Fw demodulations to eq. taut.: 23
% 
% Binary resolution: 471
% Forward superposition: 4914
% Backward superposition: 2698
% Self superposition: 82
% Equality factoring: 40
% Equality resolution: 42
% 
% Split clauses: 424
% Split components: 863
% SAT solver clauses: 1020
% SAT solver unit clauses: 21
% SAT solver binary clauses: 103
% 
% Sat splits: 424
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1017
% TWLsolver calls for satisfiability: 253
% 
% Memory used [KB]: 6652
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_knownProof
% (72270)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 131
% Passive clauses: 646
% Generated clauses: 9244
% Final active clauses: 126
% Final passive clauses: 493
% Input formulas: 29
% Initial clauses: 73
% 
% Duplicate literals: 529
% Trivial inequalities: 231
% Fw subsumption resolutions: 923
% Fw demodulations: 1121
% Bw demodulations: 24
% Condensations: 454
% Global subsumptions: 8
% 
% Simple tautologies: 213
% Equational tautologies: 20
% Forward subsumptions: 4037
% Fw demodulations to eq. taut.: 9
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 288
% Forward superposition: 3306
% Backward superposition: 1500
% Self superposition: 60
% Equality factoring: 32
% Equality resolution: 45
% 
% Split clauses: 56
% Split components: 116
% SAT solver clauses: 1082
% SAT solver unit clauses: 78
% SAT solver binary clauses: 38
% SAT solver learnt clauses: 16
% 
% Sat splits: 56
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1050
% TWLsolver calls for satisfiability: 371
% 
% Memory used [KB]: 6524
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f50233,plain,(
  $false),
  inference(subsumption_resolution,[],[f50232,f121])).
fof(f121,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.clos_knownProof.mglobals_extend_refl',aHL_TRUTH)).
fof(f50232,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f50231,f658])).
fof(f658,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X1),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2)))))) )),
  inference(unit_resulting_resolution,[],[f167,f126])).
fof(f126,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X9] : (s(bool,'T_0') = s(bool,X9) <=> p(s(bool,X9)))),
  file('thm.clos_knownProof.mglobals_extend_refl','thm.bool.EQ_CLAUSES|split|0')).
fof(f167,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X1),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))))))) )),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0,X1,X2] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X1),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))))))),
  inference(flattening,[],[f54])).
fof(f54,plain,(
  ! [X0] : ! [X1,X2] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X1),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6] : ! [X7,X9] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X6,bool),X7),s(fun(X6,bool),'const.pred_set.UNION_2'(s(fun(X6,bool),X7),s(fun(X6,bool),X9))))))),
  file('thm.clos_knownProof.mglobals_extend_refl','thm.pred_set.SUBSET_UNION|split|0')).
fof(f50231,plain,(
  ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK1))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK1))),s(fun('type.num.num',bool),sK2))))))),
  inference(subsumption_resolution,[],[f50230,f123])).
fof(f123,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.clos_knownProof.mglobals_extend_refl',aHL_FALSITY)).
fof(f50230,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK1))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK1))),s(fun('type.num.num',bool),sK2))))))),
  inference(forward_demodulation,[],[f50229,f219])).
fof(f219,plain,(
  s(bool,'F_0') = s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK1),s(fun('type.num.num',bool),sK2),s('type.closSem.state'(sK0),sK1)))),
  inference(unit_resulting_resolution,[],[f120,f130])).
fof(f130,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X9] : (s(bool,'F_0') = s(bool,X9) <=> ~p(s(bool,X9)))),
  file('thm.clos_knownProof.mglobals_extend_refl','thm.bool.EQ_CLAUSES|split|2')).
fof(f120,plain,(
  ~p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK1),s(fun('type.num.num',bool),sK2),s('type.closSem.state'(sK0),sK1))))),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ~p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK1),s(fun('type.num.num',bool),sK2),s('type.closSem.state'(sK0),sK1))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f68])).
fof(f68,plain,(
  ? [X0,X1,X2] : ~p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X1),s(fun('type.num.num',bool),X2),s('type.closSem.state'(X0),X1))))),
  inference(ennf_transformation,[],[f32])).
fof(f32,plain,(
  ~! [X0,X1,X2] : p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X1),s(fun('type.num.num',bool),X2),s('type.closSem.state'(X0),X1))))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ~! [X0] : ! [X1,X2] : p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X1),s(fun('type.num.num',bool),X2),s('type.closSem.state'(X0),X1))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X6),X7),s(fun('type.num.num',bool),X8),s('type.closSem.state'(X6),X7))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X6),X7),s(fun('type.num.num',bool),X8),s('type.closSem.state'(X6),X7))))),
  file('thm.clos_knownProof.mglobals_extend_refl','thm.clos_knownProof.mglobals_extend_refl')).
fof(f50229,plain,(
  p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK1),s(fun('type.num.num',bool),sK2),s('type.closSem.state'(sK0),sK1)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK1))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK1))),s(fun('type.num.num',bool),sK2))))))),
  inference(trivial_inequality_removal,[],[f50223])).
fof(f50223,plain,(
  s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK5(sK1,sK2,sK1,sK0,sK0)))))) != s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK5(sK1,sK2,sK1,sK0,sK0)))))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK1),s(fun('type.num.num',bool),sK2),s('type.closSem.state'(sK0),sK1)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK1))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK1))),s(fun('type.num.num',bool),sK2))))))),
  inference(superposition,[],[f178,f38232])).
fof(f38232,plain,(
  s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK5(sK1,sK2,sK1,sK0,sK0)))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',sK4(sK1,sK2,sK1,sK0,sK0)),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK0),sK1)))))),
  inference(subsumption_resolution,[],[f38200,f123])).
fof(f38200,plain,(
  p(s(bool,'F_0')) | s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK5(sK1,sK2,sK1,sK0,sK0)))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',sK4(sK1,sK2,sK1,sK0,sK0)),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(sK0),sK1)))))),
  inference(superposition,[],[f3220,f219])).
fof(f3220,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X1),s(fun('type.num.num',bool),X2),s('type.closSem.state'(X0),X1)))) | s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK5(X1,X2,X1,X0,X0)))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',sK4(X1,X2,X1,X0,X0)),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1)))))) )),
  inference(subsumption_resolution,[],[f3173,f121])).
fof(f3173,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK5(X1,X2,X1,X0,X0)))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',sK4(X1,X2,X1,X0,X0)),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X1),s(fun('type.num.num',bool),X2),s('type.closSem.state'(X0),X1))))) )),
  inference(superposition,[],[f176,f658])).
fof(f176,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X2))),s(fun('type.num.num',bool),X3)))))) | s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK5(X4,X3,X2,X1,X0)))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',sK4(X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X4))))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X1),X2),s(fun('type.num.num',bool),X3),s('type.closSem.state'(X0),X4))))) )),
  inference(cnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X1),X2),s(fun('type.num.num',bool),X3),s('type.closSem.state'(X0),X4)))) | (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X2))),s(fun('type.num.num',bool),X3)))))) & ! [X7,X8] : (s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))))) != s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X7),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X4))))) | p(s(bool,'const.bool.IN_2'(s('type.num.num',X7),s(fun('type.num.num',bool),X3)))) | s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X7),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2)))))))) & (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X2))),s(fun('type.num.num',bool),X3)))))) | (s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK5(X4,X3,X2,X1,X0)))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',sK4(X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X4))))) & ~p(s(bool,'const.bool.IN_2'(s('type.num.num',sK4(X4,X3,X2,X1,X0)),s(fun('type.num.num',bool),X3)))) & s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK5(X4,X3,X2,X1,X0)))))) != s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',sK4(X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2)))))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X1),X2),s(fun('type.num.num',bool),X3),s('type.closSem.state'(X0),X4))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5])],[f114])).
fof(f114,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X1),X2),s(fun('type.num.num',bool),X3),s('type.closSem.state'(X0),X4)))) | (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X2))),s(fun('type.num.num',bool),X3)))))) & ! [X7,X8] : (s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))))) != s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X7),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X4))))) | p(s(bool,'const.bool.IN_2'(s('type.num.num',X7),s(fun('type.num.num',bool),X3)))) | s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X8))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X7),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2)))))))) & (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X2))),s(fun('type.num.num',bool),X3)))))) | ? [X5,X6] : (s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X4))))) & ~p(s(bool,'const.bool.IN_2'(s('type.num.num',X5),s(fun('type.num.num',bool),X3)))) & s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) != s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2)))))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X1),X2),s(fun('type.num.num',bool),X3),s('type.closSem.state'(X0),X4))))))),
  inference(rectify,[],[f113])).
fof(f113,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X1),X2),s(fun('type.num.num',bool),X3),s('type.closSem.state'(X0),X4)))) | (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X2))),s(fun('type.num.num',bool),X3)))))) & ! [X5,X6] : (s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) != s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X4))))) | p(s(bool,'const.bool.IN_2'(s('type.num.num',X5),s(fun('type.num.num',bool),X3)))) | s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2)))))))) & (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X2))),s(fun('type.num.num',bool),X3)))))) | ? [X5,X6] : (s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X4))))) & ~p(s(bool,'const.bool.IN_2'(s('type.num.num',X5),s(fun('type.num.num',bool),X3)))) & s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) != s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2)))))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X1),X2),s(fun('type.num.num',bool),X3),s('type.closSem.state'(X0),X4))))))),
  inference(flattening,[],[f112])).
fof(f112,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X1),X2),s(fun('type.num.num',bool),X3),s('type.closSem.state'(X0),X4)))) | (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X2))),s(fun('type.num.num',bool),X3)))))) & ! [X5,X6] : (s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) != s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X4))))) | p(s(bool,'const.bool.IN_2'(s('type.num.num',X5),s(fun('type.num.num',bool),X3)))) | s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2)))))))) & ((~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X2))),s(fun('type.num.num',bool),X3)))))) | ? [X5,X6] : (s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X4))))) & ~p(s(bool,'const.bool.IN_2'(s('type.num.num',X5),s(fun('type.num.num',bool),X3)))) & s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) != s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X1),X2),s(fun('type.num.num',bool),X3),s('type.closSem.state'(X0),X4))))))),
  inference(nnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X1),X2),s(fun('type.num.num',bool),X3),s('type.closSem.state'(X0),X4)))) <=> (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X2))),s(fun('type.num.num',bool),X3)))))) & ! [X5,X6] : (s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) != s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X4))))) | p(s(bool,'const.bool.IN_2'(s('type.num.num',X5),s(fun('type.num.num',bool),X3)))) | s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X1),X2),s(fun('type.num.num',bool),X3),s('type.closSem.state'(X0),X4)))) <=> (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X2))),s(fun('type.num.num',bool),X3)))))) & ! [X5,X6] : ((s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) != s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X4))))) | p(s(bool,'const.bool.IN_2'(s('type.num.num',X5),s(fun('type.num.num',bool),X3))))) | s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))))),
  inference(ennf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X1),X2),s(fun('type.num.num',bool),X3),s('type.closSem.state'(X0),X4)))) <=> (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X2))),s(fun('type.num.num',bool),X3)))))) & ! [X5,X6] : ((s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X4))))) & ~p(s(bool,'const.bool.IN_2'(s('type.num.num',X5),s(fun('type.num.num',bool),X3))))) => s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X1),X2),s(fun('type.num.num',bool),X3),s('type.closSem.state'(X0),X4)))) <=> (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X2))),s(fun('type.num.num',bool),X3)))))) & ! [X5,X6] : ((s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X4))))) & ~p(s(bool,'const.bool.IN_2'(s('type.num.num',X5),s(fun('type.num.num',bool),X3))))) => s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X6))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X5),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X17,X6] : ! [X18,X19,X20] : (p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X6),X18),s(fun('type.num.num',bool),X19),s('type.closSem.state'(X17),X20)))) <=> (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X17),X20))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X6),X18))),s(fun('type.num.num',bool),X19)))))) & ! [X21,X22] : ((s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X22))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X21),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X17),X20))))) & ~p(s(bool,'const.bool.IN_2'(s('type.num.num',X21),s(fun('type.num.num',bool),X19))))) => s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',X22))))) = s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',X21),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X6),X18))))))))),
  file('thm.clos_knownProof.mglobals_extend_refl','thm.clos_knownProof.mglobals_extend_def')).
fof(f178,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'('type.option.option'('type.closSem.v')),'const.option.SOME_1'(s('type.option.option'('type.closSem.v'),'const.option.SOME_1'(s('type.closSem.v',sK5(X4,X3,X2,X1,X0)))))) != s('type.option.option'('type.option.option'('type.closSem.v')),'const.closSem.get_global_2'(s('type.num.num',sK4(X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X1),X2),s(fun('type.num.num',bool),X3),s('type.closSem.state'(X0),X4)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X4))),s(fun('type.num.num',bool),'const.pred_set.UNION_2'(s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X2))),s(fun('type.num.num',bool),X3))))))) )),
  inference(cnf_transformation,[],[f115])).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 215
% Passive clauses: 1168
% Generated clauses: 50867
% Final active clauses: 111
% Final passive clauses: 376
% Input formulas: 29
% Initial clauses: 73
% 
% Duplicate literals: 3863
% Trivial inequalities: 935
% Fw subsumption resolutions: 4880
% Fw demodulations: 4150
% Bw demodulations: 354
% Condensations: 7215
% Global subsumptions: 54
% 
% Simple tautologies: 675
% Equational tautologies: 293
% Forward subsumptions: 27281
% Fw demodulations to eq. taut.: 241
% Bw demodulations to eq. taut.: 25
% 
% Unit resulting resolution: 1021
% Forward superposition: 13215
% Backward superposition: 12679
% Self superposition: 442
% Equality factoring: 285
% Equality resolution: 57
% 
% Split clauses: 203
% Split components: 411
% SAT solver clauses: 1682
% SAT solver unit clauses: 49
% SAT solver binary clauses: 98
% 
% Sat splits: 203
% Sat splitting refutations: 52
% 
% Memory used [KB]: 20596
% Time elapsed: 5.383 s
% ------------------------------
% ------------------------------
% Success in time 6.72 s
