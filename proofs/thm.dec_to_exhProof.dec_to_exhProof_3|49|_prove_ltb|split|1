Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.dec_to_exhProof
% (44993)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 115
% Passive clauses: 2335
% Generated clauses: 19252
% Final active clauses: 109
% Final passive clauses: 2054
% Input formulas: 37
% Initial clauses: 52
% 
% Duplicate literals: 856
% Trivial inequalities: 414
% Fw subsumption resolutions: 2744
% Fw demodulations: 2766
% Bw demodulations: 5
% 
% Simple tautologies: 427
% Equational tautologies: 46
% Forward subsumptions: 9305
% 
% Binary resolution: 100
% Factoring: 1
% Forward superposition: 5926
% Backward superposition: 5978
% Self superposition: 196
% Equality factoring: 114
% Equality resolution: 36
% 
% Split clauses: 217
% Split components: 438
% SAT solver clauses: 463
% SAT solver unit clauses: 23
% SAT solver binary clauses: 108
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 1
% 
% Sat splits: 217
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 462
% TWLsolver calls for satisfiability: 101
% 
% Memory used [KB]: 9850
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.dec_to_exhProof
% (45054)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 131
% Passive clauses: 764
% Generated clauses: 19096
% Final active clauses: 119
% Final passive clauses: 554
% Input formulas: 37
% Initial clauses: 52
% 
% Duplicate literals: 544
% Trivial inequalities: 262
% Fw subsumption resolutions: 1873
% Fw demodulations: 3248
% Bw demodulations: 57
% Condensations: 1764
% Global subsumptions: 5
% 
% Simple tautologies: 202
% Equational tautologies: 26
% Forward subsumptions: 8915
% Bw demodulations to eq. taut.: 31
% 
% Binary resolution: 134
% Factoring: 2
% Forward superposition: 4597
% Backward superposition: 5558
% Self superposition: 136
% Equality factoring: 50
% Equality resolution: 41
% 
% Split clauses: 54
% Split components: 115
% SAT solver clauses: 1281
% SAT solver unit clauses: 78
% SAT solver binary clauses: 39
% SAT solver learnt clauses: 11
% SAT solver learnt literals: 1
% 
% Sat splits: 54
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1260
% TWLsolver calls for satisfiability: 292
% 
% Memory used [KB]: 12792
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.dec_to_exhProof
% (45086)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 455
% Passive clauses: 9038
% Generated clauses: 156510
% Final active clauses: 91
% Final passive clauses: 861
% Input formulas: 37
% Initial clauses: 52
% Discarded non-redundant clauses: 3179
% 
% Duplicate literals: 4899
% Trivial inequalities: 1758
% Fw subsumption resolutions: 12443
% Fw demodulations: 29927
% Bw demodulations: 5538
% Condensations: 9085
% Global subsumptions: 1178
% 
% Simple tautologies: 1583
% Equational tautologies: 577
% Forward subsumptions: 83851
% Fw demodulations to eq. taut.: 184
% Bw demodulations to eq. taut.: 281
% 
% Unit resulting resolution: 5583
% Factoring: 1
% Forward superposition: 39143
% Backward superposition: 35558
% Self superposition: 575
% Equality factoring: 274
% Equality resolution: 89
% 
% Split clauses: 189
% Split components: 402
% SAT solver clauses: 11786
% SAT solver unit clauses: 121
% SAT solver binary clauses: 846
% 
% Sat splits: 189
% Sat splitting refutations: 1189
% 
% Memory used [KB]: 86096
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 31 next slice time: 31
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.dec_to_exhProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.dec_to_exhProof
% SZS output start Proof for thm.dec_to_exhProof
fof(f479,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f95,f141,f139,f94,f140,f138,f155,f158,f162,f215,f222,f217,f160,f237,f239,f453,f462])).
fof(f462,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f417,f370])).
fof(f370,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl0),
  inference(forward_demodulation,[],[f369,f163])).
fof(f163,plain,(
  s(bool,'T_0') = s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1))) | $spl0),
  inference(resolution,[],[f138,f116])).
fof(f116,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X24] : (s(bool,'T_0') = s(bool,X24) <=> p(s(bool,X24)))),
  file('thm.dec_to_exhProof.dec_to_exhProof_3|49|_prove_ltb|split|1','thm.bool.EQ_CLAUSES|split|0')).
fof(f369,plain,(
  s(bool,'F_0') != s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1))) | $spl0),
  inference(subsumption_resolution,[],[f328,f137])).
fof(f137,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f106])).
fof(f106,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X9] : ! [X13] : (s(X9,X13) = s(X9,X13) <=> p(s(bool,'T_0')))),
  file('thm.dec_to_exhProof.dec_to_exhProof_3|49|_prove_ltb|split|1','thm.bool.REFL_CLAUSE')).
fof(f328,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1))) | $spl0),
  inference(superposition,[],[f109,f163])).
fof(f109,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X24] : (s(bool,'F_0') = s(bool,X24) <=> ~p(s(bool,X24)))),
  file('thm.dec_to_exhProof.dec_to_exhProof_3|49|_prove_ltb|split|1','thm.bool.EQ_CLAUSES|split|3')).
fof(f417,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl0 | $spl6)),
  inference(superposition,[],[f163,f196])).
fof(f196,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1)))) ) | $spl6),
  inference(superposition,[],[f130,f162])).
fof(f130,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X0)))))) )),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1] : s(bool,'F_0') = s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X0)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X8,X6] : s(bool,'F_0') = s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)))))),
  file('thm.dec_to_exhProof.dec_to_exhProof_3|49|_prove_ltb|split|1','thm.dec_to_exhProof.match_result_rel_def|split|4')).
fof(f453,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f409,f370])).
fof(f409,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl0 | $spl6)),
  inference(superposition,[],[f196,f163])).
fof(f239,plain,(
  $false | ($spl0 | $spl4)),
  inference(subsumption_resolution,[],[f238,f123])).
fof(f123,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.dec_to_exhProof.dec_to_exhProof_3|49|_prove_ltb|split|1',aHL_FALSITY)).
fof(f238,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f224,f118])).
fof(f118,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) )),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0')))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : s(bool,'F_0') = s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0')))),
  file('thm.dec_to_exhProof.dec_to_exhProof_3|49|_prove_ltb|split|1','thm.dec_to_exhProof.match_result_rel_def|split|3')).
fof(f224,plain,(
  p(s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0')))) | ($spl0 | $spl4)),
  inference(backward_demodulation,[],[f160,f138])).
fof(f237,plain,(
  $false | ($spl4 | $spl6)),
  inference(subsumption_resolution,[],[f223,f136])).
fof(f136,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1] : s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') != s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X1)))),
  inference(flattening,[],[f74])).
fof(f74,plain,(
  ! [X0] : ! [X1] : ~s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X1)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X9] : ! [X15] : ~s('type.semanticPrimitives.match_result'(X9),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X9),'const.semanticPrimitives.Match_1'(s(X9,X15)))),
  file('thm.dec_to_exhProof.dec_to_exhProof_3|49|_prove_ltb|split|1','thm.semanticPrimitives.match_result_distinct|split|2')).
fof(f223,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | ($spl4 | $spl6)),
  inference(backward_demodulation,[],[f160,f162])).
fof(f160,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) | $spl4),
  inference(cnf_transformation,[],[f160_D])).
fof(f160_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f217,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | $spl8),
  inference(cnf_transformation,[],[f217_D])).
fof(f217_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f222,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) | $spl6),
  inference(forward_demodulation,[],[f221,f162])).
fof(f221,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | $spl6),
  inference(subsumption_resolution,[],[f201,f132])).
fof(f132,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1] : s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X1)))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0] : ! [X1] : ~s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X1)))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X9] : ! [X15] : ~s('type.semanticPrimitives.match_result'(X9),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X9),'const.semanticPrimitives.Match_1'(s(X9,X15)))),
  file('thm.dec_to_exhProof.dec_to_exhProof_3|49|_prove_ltb|split|1','thm.semanticPrimitives.match_result_distinct|split|1')).
fof(f201,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | $spl6),
  inference(superposition,[],[f133,f162])).
fof(f133,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.match_result'(X0),X1) = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,sK2(X1,X0)))) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),X1)) )),
  inference(cnf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0,X1] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),X1) = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,sK2(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2])],[f69])).
fof(f69,plain,(
  ! [X0,X1] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),X1) | ? [X2] : s('type.semanticPrimitives.match_result'(X0),X1) = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X2))))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0] : ! [X1] : (s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X0),X1) | s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X0),X1) | ? [X2] : s('type.semanticPrimitives.match_result'(X0),X1) = s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X2))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X9] : ! [X23] : (s('type.semanticPrimitives.match_result'(X9),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'(X9),X23) | s('type.semanticPrimitives.match_result'(X9),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'(X9),X23) | ? [X15] : s('type.semanticPrimitives.match_result'(X9),X23) = s('type.semanticPrimitives.match_result'(X9),'const.semanticPrimitives.Match_1'(s(X9,X15))))),
  file('thm.dec_to_exhProof.dec_to_exhProof_3|49|_prove_ltb|split|1','thm.semanticPrimitives.match_result_nchotomy')).
fof(f215,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) | $spl6),
  inference(forward_demodulation,[],[f214,f162])).
fof(f214,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | $spl6),
  inference(subsumption_resolution,[],[f195,f132])).
fof(f195,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2('const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | $spl6),
  inference(superposition,[],[f162,f133])).
fof(f162,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | $spl6),
  inference(cnf_transformation,[],[f162_D])).
fof(f162_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f158,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) | $spl3),
  inference(trivial_inequality_removal,[],[f156])).
fof(f156,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK2(sK1,'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) | $spl3),
  inference(superposition,[],[f141,f133])).
fof(f155,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f154,f129])).
fof(f129,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.dec_to_exhProof.dec_to_exhProof_3|49|_prove_ltb|split|1',aHL_TRUTH)).
fof(f154,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f153,f119])).
fof(f119,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0')))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0')))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : s(bool,'T_0') = s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0')))),
  file('thm.dec_to_exhProof.dec_to_exhProof_3|49|_prove_ltb|split|1','thm.dec_to_exhProof.match_result_rel_def|split|1')).
fof(f153,plain,(
  ~p(s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0')))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f139,f140])).
fof(f138,plain,(
  p(s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1)))) | $spl0),
  inference(cnf_transformation,[],[f138_D])).
fof(f138_D,plain,(
  p(s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f140,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) | $spl2),
  inference(cnf_transformation,[],[f140_D])).
fof(f140_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f94,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) | p(s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1))))),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  (p(s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1)))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1)) & (~p(s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1)))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f80])).
fof(f80,plain,(
  ? [X0,X1] : ((p(s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),X1)))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),X1)) & (~p(s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),X1)))) | s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),X1)))),
  inference(nnf_transformation,[],[f76])).
fof(f76,plain,(
  ? [X0,X1] : (p(s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),X1)))) <~> s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),X1))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1] : (p(s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),X1)))) <=> s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (p(s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),X7)))) <=> s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (p(s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),X7)))) <=> s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),X7))),
  file('thm.dec_to_exhProof.dec_to_exhProof_3|49|_prove_ltb|split|1','thm.dec_to_exhProof.dec_to_exhProof_3|49|_prove_ltb|split|1')).
fof(f139,plain,(
  ~p(s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1)))) | $spl1),
  inference(cnf_transformation,[],[f139_D])).
fof(f139_D,plain,(
  ~p(s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f141,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) | $spl3),
  inference(cnf_transformation,[],[f141_D])).
fof(f141_D,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f95,plain,(
  s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') != s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1) | ~p(s(bool,'const.dec_to_exhProof.match_result_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK0),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),sK1))))),
  inference(cnf_transformation,[],[f81])).
% SZS output end Proof for thm.dec_to_exhProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 45
% Passive clauses: 48
% Generated clauses: 342
% Final active clauses: 40
% Final passive clauses: 21
% Input formulas: 37
% Initial clauses: 43
% 
% Selected by SInE selection: 28
% SInE iterations: 1
% 
% Duplicate literals: 4
% Trivial inequalities: 9
% Fw subsumption resolutions: 53
% Fw demodulations: 48
% Bw demodulations: 3
% 
% Simple tautologies: 13
% Equational tautologies: 1
% Forward subsumptions: 178
% 
% Binary resolution: 12
% Forward superposition: 84
% Backward superposition: 118
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 11
% SAT solver binary clauses: 7
% 
% Sat splits: 5
% Sat splitting refutations: 5
% 
% Memory used [KB]: 1151
% Time elapsed: 0.009 s
% ------------------------------
% ------------------------------
% Success in time 11.851 s
