Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.conProps
% (119757)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 157
% Passive clauses: 2912
% Generated clauses: 25546
% Final active clauses: 155
% Final passive clauses: 2614
% Input formulas: 20
% Initial clauses: 27
% 
% Duplicate literals: 772
% Trivial inequalities: 797
% Fw subsumption resolutions: 2361
% Fw demodulations: 7290
% Bw demodulations: 2
% 
% Simple tautologies: 295
% Equational tautologies: 26
% Forward subsumptions: 9997
% 
% Binary resolution: 159
% Forward superposition: 8047
% Backward superposition: 5802
% Self superposition: 112
% Equality factoring: 58
% Equality resolution: 23
% 
% Split clauses: 539
% Split components: 1133
% SAT solver clauses: 1191
% SAT solver unit clauses: 24
% SAT solver binary clauses: 353
% 
% Sat splits: 539
% 
% TWLsolver clauses: 1147
% TWLsolver calls for satisfiability: 124
% 
% Memory used [KB]: 15607
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.conProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.conProps
% SZS output start Proof for thm.conProps
fof(f3803,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3802,f2612,f2640,f67,f94,f85,f107])).
fof(f107,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(X0),sK6(X3,X2,X1,X0)),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),sK7(X3,X2,X1,X0)))) = s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.evaluate_3'(s('type.conSem.environment','const.conSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.conSem.environment',X2))),s('type.conSem.state'(X0),X1),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp',X3),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))) ) | $spl22),
  inference(cnf_transformation,[],[f107_D])).
fof(f107_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(X0),sK6(X3,X2,X1,X0)),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),sK7(X3,X2,X1,X0)))) = s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.evaluate_3'(s('type.conSem.environment','const.conSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.conSem.environment',X2))),s('type.conSem.state'(X0),X1),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp',X3),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f85,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(X0),sK6(X3,X2,X1,X0)),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),sK7(X3,X2,X1,X0)))) = s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.evaluate_3'(s('type.conSem.environment','const.conSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.conSem.environment',X2))),s('type.conSem.state'(X0),X1),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp',X3),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(X0),sK6(X3,X2,X1,X0)),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),sK7(X3,X2,X1,X0)))) = s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.evaluate_3'(s('type.conSem.environment','const.conSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.conSem.environment',X2))),s('type.conSem.state'(X0),X1),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp',X3),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7])],[f40])).
fof(f40,plain,(
  ! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),X5))) = s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.evaluate_3'(s('type.conSem.environment','const.conSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.conSem.environment',X2))),s('type.conSem.state'(X0),X1),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp',X3),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ! [X0] : ! [X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),X5))) = s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.evaluate_3'(s('type.conSem.environment','const.conSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.conSem.environment',X2))),s('type.conSem.state'(X0),X1),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp',X3),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.conSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(X6),X11),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),X12))) = s('type.pair.prod'('type.conSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.evaluate_3'(s('type.conSem.environment','const.conSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.conSem.environment',X9))),s('type.conSem.state'(X6),X7),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp',X10),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))),
  file('thm.conProps.conProps_26_prove_ltb','thm.conProps.conProps_|49|8_prove_ltb')).
fof(f94,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(sK0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),X6))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.evaluate_3'(s('type.conSem.environment','const.conSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.conSem.environment',sK3))),s('type.conSem.state'(sK0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(sK0),sK1))),s('type.num.num',sK2))))),s('type.conSem.state'(sK0),sK1))),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp',sK4),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))) ) | $spl0),
  inference(cnf_transformation,[],[f94_D])).
fof(f94_D,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(sK0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),X6))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.evaluate_3'(s('type.conSem.environment','const.conSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.conSem.environment',sK3))),s('type.conSem.state'(sK0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(sK0),sK1))),s('type.num.num',sK2))))),s('type.conSem.state'(sK0),sK1))),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp',sK4),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f67,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(sK0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),X6))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.evaluate_3'(s('type.conSem.environment','const.conSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.conSem.environment',sK3))),s('type.conSem.state'(sK0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(sK0),sK1))),s('type.num.num',sK2))))),s('type.conSem.state'(sK0),sK1))),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp',sK4),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X5,X6] : s('type.pair.prod'('type.conSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(sK0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),X6))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.evaluate_3'(s('type.conSem.environment','const.conSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.conSem.environment',sK3))),s('type.conSem.state'(sK0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(sK0),sK1))),s('type.num.num',sK2))))),s('type.conSem.state'(sK0),sK1))),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp',sK4),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f52])).
fof(f52,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6] : s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),X6))) != s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.evaluate_3'(s('type.conSem.environment','const.conSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.conSem.environment',X3))),s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X1))),s('type.num.num',X2))))),s('type.conSem.state'(X0),X1))),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp',X4),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),X6))) = s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.evaluate_3'(s('type.conSem.environment','const.conSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.conSem.environment',X3))),s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X1))),s('type.num.num',X2))))),s('type.conSem.state'(X0),X1))),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp',X4),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))),
  inference(flattening,[],[f22])).
fof(f22,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),X6))) = s('type.pair.prod'('type.conSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.evaluate_3'(s('type.conSem.environment','const.conSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.conSem.environment',X3))),s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X1))),s('type.num.num',X2))))),s('type.conSem.state'(X0),X1))),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp',X4),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.conSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(X6),X11),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),X12))) = s('type.pair.prod'('type.conSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.evaluate_3'(s('type.conSem.environment','const.conSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.conSem.environment',X9))),s('type.conSem.state'(X6),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X6),X7))),s('type.num.num',X8))))),s('type.conSem.state'(X6),X7))),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp',X10),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.conSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(X6),X11),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),X12))) = s('type.pair.prod'('type.conSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.evaluate_3'(s('type.conSem.environment','const.conSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))),s('type.conSem.environment',X9))),s('type.conSem.state'(X6),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X6),X7))),s('type.num.num',X8))))),s('type.conSem.state'(X6),X7))),s('type.list.list'('type.conLang.exp'),'const.list.CONS_2'(s('type.conLang.exp',X10),s('type.list.list'('type.conLang.exp'),'const.list.NIL_0')))))),
  file('thm.conProps.conProps_26_prove_ltb','thm.conProps.conProps_26_prove_ltb')).
fof(f2640,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(sK0),X0),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),X1))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(sK0),sK6(sK4,sK3,'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(sK0),sK1))),s('type.num.num',sK2))))),s('type.conSem.state'(sK0),sK1)),sK0)),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),sK7(sK4,sK3,'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(sK0),sK1))),s('type.num.num',sK2))))),s('type.conSem.state'(sK0),sK1)),sK0))))) ) | $spl538),
  inference(cnf_transformation,[],[f2640_D])).
fof(f2640_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(sK0),X0),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),X1))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(sK0),sK6(sK4,sK3,'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(sK0),sK1))),s('type.num.num',sK2))))),s('type.conSem.state'(sK0),sK1)),sK0)),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),sK7(sK4,sK3,'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(sK0),sK1))),s('type.num.num',sK2))))),s('type.conSem.state'(sK0),sK1)),sK0))))) ) <=> ~$spl538),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl538])])).
fof(f2612,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.conSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(sK0),X0),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),X1))) != s('type.pair.prod'('type.conSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.pair.,_2'(s('type.conSem.state'(sK0),sK6(sK4,sK3,'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(sK0),sK1))),s('type.num.num',sK2))))),s('type.conSem.state'(sK0),sK1)),sK0)),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),'type.conSem.v'),sK7(sK4,sK3,'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(sK0),sK1))),s('type.num.num',sK2))))),s('type.conSem.state'(sK0),sK1)),sK0))))) ) | ($spl0 | $spl22)),
  inference(superposition,[],[f94,f107])).
fof(f3802,plain,(
  $false | $spl538),
  inference(equality_resolution,[],[f2640])).
% SZS output end Proof for thm.conProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 59
% Passive clauses: 385
% Generated clauses: 3722
% Final active clauses: 51
% Final passive clauses: 277
% Input formulas: 20
% Initial clauses: 27
% 
% Duplicate literals: 199
% Trivial inequalities: 91
% Fw subsumption resolutions: 152
% Fw demodulations: 574
% Bw demodulations: 56
% Condensations: 304
% 
% Simple tautologies: 117
% Equational tautologies: 18
% Forward subsumptions: 1336
% 
% Binary resolution: 42
% Forward superposition: 1025
% Backward superposition: 758
% Self superposition: 54
% Equality factoring: 40
% Equality resolution: 15
% 
% Split clauses: 11
% Split components: 22
% SAT solver clauses: 568
% SAT solver unit clauses: 37
% SAT solver binary clauses: 32
% SAT solver learnt clauses: 1
% 
% Sat splits: 11
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 567
% TWLsolver calls for satisfiability: 124
% 
% Memory used [KB]: 6908
% Time elapsed: 0.181 s
% ------------------------------
% ------------------------------
% Success in time 0.791 s
