Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (59888)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 65
% Passive clauses: 1243
% Generated clauses: 8878
% Final active clauses: 59
% Final passive clauses: 1052
% Input formulas: 7
% Initial clauses: 27
% 
% Duplicate literals: 683
% Trivial inequalities: 106
% Fw subsumption resolutions: 1465
% Fw demodulations: 32
% Bw demodulations: 3
% 
% Simple tautologies: 198
% Equational tautologies: 111
% Forward subsumptions: 3486
% 
% Binary resolution: 116
% Factoring: 2
% Forward superposition: 2625
% Backward superposition: 3026
% Self superposition: 362
% Equality factoring: 328
% Equality resolution: 11
% 
% Split clauses: 508
% Split components: 1017
% SAT solver clauses: 1543
% SAT solver unit clauses: 25
% SAT solver binary clauses: 218
% 
% Sat splits: 508
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1543
% TWLsolver calls for satisfiability: 128
% 
% Memory used [KB]: 4349
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% (59915)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 188
% Passive clauses: 1244
% Generated clauses: 11870
% Final active clauses: 170
% Final passive clauses: 1019
% Input formulas: 7
% Initial clauses: 27
% 
% Duplicate literals: 396
% Trivial inequalities: 84
% Fw subsumption resolutions: 1232
% Fw demodulations: 410
% Bw demodulations: 39
% Condensations: 1048
% 
% Simple tautologies: 138
% Equational tautologies: 22
% Forward subsumptions: 5081
% 
% Binary resolution: 783
% Factoring: 3
% Forward superposition: 3559
% Backward superposition: 2673
% Self superposition: 153
% Equality factoring: 44
% Equality resolution: 24
% 
% Split clauses: 131
% Split components: 266
% SAT solver clauses: 2243
% SAT solver unit clauses: 32
% SAT solver binary clauses: 31
% 
% Sat splits: 131
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 2243
% TWLsolver calls for satisfiability: 575
% 
% Memory used [KB]: 17782
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.mod_to_conProof
% (59930)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit

% Active clauses: 316
% Passive clauses: 3342
% Generated clauses: 136603
% Final active clauses: 70
% Final passive clauses: 500
% Input formulas: 7
% Initial clauses: 27
% 
% Duplicate literals: 6637
% Trivial inequalities: 1153
% Fw subsumption resolutions: 12322
% Fw demodulations: 10839
% Bw demodulations: 1782
% Condensations: 14836
% Global subsumptions: 128
% 
% Simple tautologies: 1281
% Equational tautologies: 447
% Forward subsumptions: 85192
% Fw demodulations to eq. taut.: 4
% Bw demodulations to eq. taut.: 43
% 
% Unit resulting resolution: 1211
% Factoring: 1
% Forward superposition: 26592
% Backward superposition: 21283
% Self superposition: 644
% Equality factoring: 376
% Equality resolution: 97
% 
% Split clauses: 523
% Split components: 1064
% SAT solver clauses: 4610
% SAT solver unit clauses: 34
% SAT solver binary clauses: 114
% 
% Sat splits: 523
% Sat splitting refutations: 92
% 
% Memory used [KB]: 44903
% Time elapsed: 10.414 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f10287,plain,(
  $false),
  inference(subsumption_resolution,[],[f10285,f61])).
fof(f61,plain,(
  ~sP1(sK3,sK2,sK5,'const.semanticPrimitives.Rval_1'(s(sK2,sK6)),'const.semanticPrimitives.Rval_1'(s(sK3,sK7)),sK4)),
  inference(resolution,[],[f35,f52])).
fof(f52,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | ~sP1(X1,X0,X3,X4,X5,X2)) )),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) | sP1(X1,X0,X3,X4,X5,X2)) & (~sP1(X1,X0,X3,X4,X5,X2) | p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  inference(nnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) <=> sP1(X1,X0,X3,X4,X5,X2))),
  inference(definition_folding,[],[f18,f23,f22])).
fof(f22,plain,(
  ! [X1,X0,X2,X7,X9,X8] : (sP0(X1,X0,X2,X7,X9,X8) <=> ? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s(X0,X13))),s(X1,X14))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f23,plain,(
  ! [X1,X0,X3,X4,X5,X2] : (sP1(X1,X0,X3,X4,X5,X2) <=> ! [X6] : (? [X7,X8,X9] : ((sP0(X1,X0,X2,X7,X9,X8) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f18,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) <=> ! [X6] : (? [X7,X8,X9] : ((? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s(X0,X13))),s(X1,X14))))) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  inference(ennf_transformation,[],[f12])).
fof(f12,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) <=> ! [X6] : (! [X7,X8,X9] : ((? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s(X0,X13))),s(X1,X14))))) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  inference(flattening,[],[f11])).
fof(f11,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))) <=> ! [X6] : (! [X7,X8,X9] : ((? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s(X0,X13))),s(X1,X14))))) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X7] : ! [X5,X14,X15,X16] : (p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X15),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X16)))) <=> ! [X17] : (! [X18,X19,X20] : ((? [X10,X11] : (s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X19) = s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X6,X10))) & s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X20) = s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X7,X11))) & p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18))),s(X6,X10))),s(X7,X11))))) | ? [X10,X11] : (s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X19) = s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X10))))) & s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X20) = s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X11))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18),s('type.modSem.v',X10),s('type.conSem.v',X11))))) | ? [X21] : (s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X19) = s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X21))))) & s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X20) = s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X21))))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X6,'type.modSem.v'),fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X6,'type.modSem.v'),fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18))),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X19))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X20))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X6,'type.modSem.v'),fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X6,'type.modSem.v'),fun('type.semanticPrimitives.result'(X7,'type.conSem.v'),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),X15))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),X16))))))),
  file('thm.mod_to_conProof.result_rel_rules|split|0','thm.mod_to_conProof.result_rel_def')).
fof(f35,plain,(
  ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK2,fun(sK3,bool))),sK4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK5),s('type.semanticPrimitives.result'(sK2,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(sK2,sK6))),s('type.semanticPrimitives.result'(sK3,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(sK3,sK7))))))),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  p(s(bool,happ(s(fun(sK3,bool),happ(s(fun(sK2,fun(sK3,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK2,fun(sK3,bool))),sK4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK5))),s(sK2,sK6))),s(sK3,sK7)))) & ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK2,fun(sK3,bool))),sK4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK5),s('type.semanticPrimitives.result'(sK2,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(sK2,sK6))),s('type.semanticPrimitives.result'(sK3,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(sK3,sK7))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3,sK4,sK5,sK6,sK7])],[f17])).
fof(f17,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,X5)))) & ~p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X5)))))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,X5)))) => p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X5)))))))),
  inference(flattening,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X0,X4))),s(X1,X5)))) => p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X5)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11] : (p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s(X6,X10))),s(X7,X11)))) => p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X6,X10))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X7,X11)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11] : (p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s(X6,X10))),s(X7,X11)))) => p(s(bool,'const.mod_to_conProof.result_rel_4'(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X6,fun(X7,bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.semanticPrimitives.result'(X6,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X6,X10))),s('type.semanticPrimitives.result'(X7,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X7,X11)))))))),
  file('thm.mod_to_conProof.result_rel_rules|split|0','thm.mod_to_conProof.result_rel_rules|split|0')).
fof(f10285,plain,(
  sP1(sK3,sK2,sK5,'const.semanticPrimitives.Rval_1'(s(sK2,sK6)),'const.semanticPrimitives.Rval_1'(s(sK3,sK7)),sK4)),
  inference(equality_resolution,[],[f10277])).
fof(f10277,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(sK2,'type.modSem.v'),X0) != s('type.semanticPrimitives.result'(sK2,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(sK2,sK6))) | sP1(sK3,sK2,sK5,X0,'const.semanticPrimitives.Rval_1'(s(sK3,sK7)),sK4)) )),
  inference(equality_resolution,[],[f1993])).
fof(f1993,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(sK3,'type.conSem.v'),X1) != s('type.semanticPrimitives.result'(sK3,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(sK3,sK7))) | sP1(sK3,sK2,sK5,X0,X1,sK4) | s('type.semanticPrimitives.result'(sK2,'type.modSem.v'),X0) != s('type.semanticPrimitives.result'(sK2,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(sK2,sK6)))) )),
  inference(resolution,[],[f1953,f75])).
fof(f75,plain,(
  ( ! [X0,X1] : (sP0(sK3,sK2,sK4,sK5,X0,X1) | s('type.semanticPrimitives.result'(sK3,'type.conSem.v'),X0) != s('type.semanticPrimitives.result'(sK3,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(sK3,sK7))) | s('type.semanticPrimitives.result'(sK2,'type.modSem.v'),X1) != s('type.semanticPrimitives.result'(sK2,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(sK2,sK6)))) )),
  inference(resolution,[],[f34,f50])).
fof(f50,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP0(X0,X1,X2,X3,X4,X5) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,X6))),s(X0,X7)))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6)))) )),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP0(X0,X1,X2,X3,X4,X5) | (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK15(X5,X4,X3,X2,X1,X0)))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,sK16(X5,X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,sK15(X5,X4,X3,X2,X1,X0)))),s(X0,sK16(X5,X4,X3,X2,X1,X0))))))) & (! [X6,X7] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,X6))),s(X0,X7))))) | sP0(X0,X1,X2,X3,X4,X5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK15,sK16])],[f30])).
fof(f30,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP0(X0,X1,X2,X3,X4,X5) | ? [X8,X9] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X8))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X9))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,X8))),s(X0,X9)))))) & (! [X6,X7] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X1,fun(X0,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s(X1,X6))),s(X0,X7))))) | sP0(X0,X1,X2,X3,X4,X5)))),
  inference(rectify,[],[f29])).
fof(f29,plain,(
  ! [X1,X0,X2,X7,X9,X8] : ((~sP0(X1,X0,X2,X7,X9,X8) | ? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s(X0,X13))),s(X1,X14)))))) & (! [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) | ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(X0,fun(X1,bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s(X0,X13))),s(X1,X14))))) | sP0(X1,X0,X2,X7,X9,X8)))),
  inference(nnf_transformation,[],[f22])).
fof(f34,plain,(
  p(s(bool,happ(s(fun(sK3,bool),happ(s(fun(sK2,fun(sK3,bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun(sK2,fun(sK3,bool))),sK4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK5))),s(sK2,sK6))),s(sK3,sK7))))),
  inference(cnf_transformation,[],[f25])).
fof(f1953,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP0(X0,X1,X5,X2,X4,X3) | sP1(X0,X1,X2,X3,X4,X5)) )),
  inference(duplicate_literal_removal,[],[f1921])).
fof(f1921,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP1(X0,X1,X2,X3,X4,X5) | ~sP0(X0,X1,X5,X2,X4,X3) | sP1(X0,X1,X2,X3,X4,X5)) )),
  inference(resolution,[],[f43,f46])).
fof(f46,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP1(X0,X1,X2,X3,X4,X5) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),sK14(X5,X4,X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP1(X0,X1,X2,X3,X4,X5) | ! [X13] : (((sP0(X0,X1,X5,sK8(X13,X5,X4,X3,X2,X1,X0),sK10(X13,X5,X4,X3,X2,X1,X0),sK9(X13,X5,X4,X3,X2,X1,X0)) | (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),sK9(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK11(X13,X5,X4,X3,X2,X1,X0)))))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),sK10(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',sK12(X13,X5,X4,X3,X2,X1,X0)))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X13,X5,X4,X3,X2,X1,X0)),s('type.modSem.v',sK11(X13,X5,X4,X3,X2,X1,X0)),s('type.conSem.v',sK12(X13,X5,X4,X3,X2,X1,X0)))))) | (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),sK9(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK13(X13,X5,X4,X3,X2,X1,X0)))))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),sK10(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK13(X13,X5,X4,X3,X2,X1,X0)))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X13,X5,X4,X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),sK9(X13,X5,X4,X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),sK10(X13,X5,X4,X3,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4)))))) & ((! [X7,X8,X9] : ((~sP0(X0,X1,X5,X7,X9,X8) & ! [X11,X12] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12))))) & ! [X10] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),sK14(X5,X4,X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),sK14(X5,X4,X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4))))) | sP1(X0,X1,X2,X3,X4,X5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9,sK10,sK11,sK12,sK13,sK14])],[f27])).
fof(f27,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP1(X0,X1,X2,X3,X4,X5) | ! [X13] : (? [X14,X15,X16] : ((sP0(X0,X1,X5,X14,X16,X15) | ? [X18,X19] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X15) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X18))))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X16) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X19))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14),s('type.modSem.v',X18),s('type.conSem.v',X19))))) | ? [X17] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X15) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X17))))) & s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X16) = s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X17))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X15))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X16))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4)))))) & (? [X6] : (! [X7,X8,X9] : ((~sP0(X0,X1,X5,X7,X9,X8) & ! [X11,X12] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12))))) & ! [X10] : (s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) | s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X4))))) | sP1(X0,X1,X2,X3,X4,X5)))),
  inference(rectify,[],[f26])).
fof(f26,plain,(
  ! [X1,X0,X3,X4,X5,X2] : ((~sP1(X1,X0,X3,X4,X5,X2) | ! [X6] : (? [X7,X8,X9] : ((sP0(X1,X0,X2,X7,X9,X8) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5)))))) & (? [X6] : (! [X7,X8,X9] : ((~sP0(X1,X0,X2,X7,X9,X8) & ! [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X12))))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.modSem.v',X11),s('type.conSem.v',X12))))) & ! [X10] : (s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) | s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9) != s('type.semanticPrimitives.result'(X1,'type.conSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X9))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),fun('type.semanticPrimitives.result'(X1,'type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.conSem.v'),X5))))) | sP1(X1,X0,X3,X4,X5,X2)))),
  inference(nnf_transformation,[],[f23])).
fof(f43,plain,(
  ( ! [X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP1(X0,X1,X2,X3,X4,X5) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),fun('type.semanticPrimitives.result'(X0,'type.conSem.v'),bool))),sK14(X5,X4,X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X8))),s('type.semanticPrimitives.result'(X0,'type.conSem.v'),X9)))) | ~sP0(X0,X1,X5,X7,X9,X8)) )),
  inference(cnf_transformation,[],[f28])).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 169
% Passive clauses: 3415
% Generated clauses: 10011
% Final active clauses: 137
% Final passive clauses: 2920
% Input formulas: 7
% Initial clauses: 27
% 
% Selected by SInE selection: 7
% SInE iterations: 1
% 
% Duplicate literals: 514
% Trivial inequalities: 199
% Fw subsumption resolutions: 1643
% Fw demodulations: 79
% Bw demodulations: 24
% 
% Simple tautologies: 374
% Equational tautologies: 39
% Forward subsumptions: 3454
% 
% Binary resolution: 1753
% Forward superposition: 3934
% Backward superposition: 1475
% Self superposition: 118
% Equality factoring: 100
% Equality resolution: 38
% 
% Split clauses: 466
% Split components: 940
% SAT solver clauses: 477
% SAT solver unit clauses: 7
% SAT solver binary clauses: 65
% 
% Sat splits: 466
% Sat splitting refutations: 8
% 
% Memory used [KB]: 7931
% Time elapsed: 0.406 s
% ------------------------------
% ------------------------------
% Success in time 12.17 s
