Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.BottomUpMergeSort
% (28248)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 667
% Passive clauses: 7047
% Generated clauses: 15924
% Final active clauses: 608
% Final passive clauses: 5896
% Input formulas: 44
% Initial clauses: 192
% 
% Duplicate literals: 336
% Trivial inequalities: 21
% Fw subsumption resolutions: 1608
% Fw demodulations: 321
% Bw demodulations: 55
% 
% Simple tautologies: 216
% Equational tautologies: 63
% Forward subsumptions: 5984
% 
% Binary resolution: 8307
% Factoring: 1179
% Forward superposition: 2052
% Backward superposition: 1622
% Self superposition: 27
% Equality factoring: 26
% Equality resolution: 7
% 
% Split clauses: 402
% Split components: 821
% SAT solver clauses: 703
% SAT solver unit clauses: 15
% SAT solver binary clauses: 109
% 
% Sat splits: 402
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 701
% TWLsolver calls for satisfiability: 394
% 
% Memory used [KB]: 7547
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.BottomUpMergeSort
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BottomUpMergeSort
% SZS output start Proof for thm.BottomUpMergeSort
fof(f3278,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3252,f255,f472,f3232,f3233,f336,f513,f687,f690,f253,f468,f335,f514,f3182,f3202,f313,f500,f3178,f3180,f473,f475,f295,f488,f602,f603,f297,f490,f312,f499,f607,f610,f252,f470,f269,f480,f618,f622,f273,f482,f604,f606,f254,f466,f345,f517])).
fof(f517,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X1),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X1,fun(X1,bool)),X2),s('type.list.list'(X1),'const.list.NIL_0'),s('type.list.list'('type.list.list'(X1)),X4))) = s('type.list.list'(X1),'const.BottomUpMergeSort.sort_2'(s(fun(X1,fun(X1,bool)),X2),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.list.list'(X1)),X4)))))) ) | $spl68),
  inference(cnf_transformation,[],[f517_D])).
fof(f517_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X1),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X1,fun(X1,bool)),X2),s('type.list.list'(X1),'const.list.NIL_0'),s('type.list.list'('type.list.list'(X1)),X4))) = s('type.list.list'(X1),'const.BottomUpMergeSort.sort_2'(s(fun(X1,fun(X1,bool)),X2),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.list.list'(X1)),X4)))))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f345,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X1),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X1,fun(X1,bool)),X2),s('type.list.list'(X1),'const.list.NIL_0'),s('type.list.list'('type.list.list'(X1)),X4))) = s('type.list.list'(X1),'const.BottomUpMergeSort.sort_2'(s(fun(X1,fun(X1,bool)),X2),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.list.list'(X1)),X4)))))) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.list.list'(X1),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X1,fun(X1,bool)),X2),s('type.list.list'(X1),'const.list.NIL_0'),s('type.list.list'('type.list.list'(X1)),X4))) = s('type.list.list'(X1),'const.BottomUpMergeSort.sort_2'(s(fun(X1,fun(X1,bool)),X2),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.list.list'(X1)),X4)))))),
  inference(flattening,[],[f102])).
fof(f102,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.list.list'(X1),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X1,fun(X1,bool)),X2),s('type.list.list'(X1),'const.list.NIL_0'),s('type.list.list'('type.list.list'(X1)),X4))) = s('type.list.list'(X1),'const.BottomUpMergeSort.sort_2'(s(fun(X1,fun(X1,bool)),X2),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.list.list'(X1)),X4)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X10,X6] : ! [X7,X8,X9] : s('type.list.list'(X6),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X6,fun(X6,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'('type.list.list'(X6)),X9))) = s('type.list.list'(X6),'const.BottomUpMergeSort.sort_2'(s(fun(X6,fun(X6,bool)),X7),s('type.pair.prod'(X10,'type.list.list'('type.list.list'(X6))),'const.pair.,_2'(s(X10,X8),s('type.list.list'('type.list.list'(X6)),X9)))))),
  file('thm.BottomUpMergeSort.sort_sorted','thm.BottomUpMergeSort.sort_def')).
fof(f466,plain,(
  ~p(s(bool,'const.sorting.SORTED_2'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.BottomUpMergeSort.sort_2'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.list.list'(sK13)),sK16)))))))) | $spl1),
  inference(cnf_transformation,[],[f466_D])).
fof(f466_D,plain,(
  ~p(s(bool,'const.sorting.SORTED_2'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.BottomUpMergeSort.sort_2'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.list.list'(sK13)),sK16)))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f254,plain,(
  ~p(s(bool,'const.sorting.SORTED_2'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.BottomUpMergeSort.sort_2'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.list.list'(sK13)),sK16))))))))),
  inference(cnf_transformation,[],[f163])).
fof(f163,plain,(
  p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(sK13,fun(sK13,bool)),sK14)))) & p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.list.list'(sK13)),sK16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & ~p(s(bool,'const.sorting.SORTED_2'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.BottomUpMergeSort.sort_2'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.list.list'(sK13)),sK16))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14,sK15,sK16])],[f116])).
fof(f116,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X0,fun(X0,bool)),X1)))) & p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.list.list'(X0)),X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & ~p(s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),'const.BottomUpMergeSort.sort_2'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.list.list'(X0)),X3)))))))))),
  inference(flattening,[],[f115])).
fof(f115,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X0,fun(X0,bool)),X1)))) & p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.list.list'(X0)),X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & ~p(s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),'const.BottomUpMergeSort.sort_2'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.list.list'(X0)),X3)))))))))),
  inference(ennf_transformation,[],[f47])).
fof(f47,plain,(
  ~! [X0,X1,X2,X3] : ((p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X0,fun(X0,bool)),X1)))) & p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.list.list'(X0)),X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) => p(s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),'const.BottomUpMergeSort.sort_2'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.list.list'(X0)),X3)))))))))),
  inference(flattening,[],[f46])).
fof(f46,plain,(
  ~! [X0] : ! [X1,X2,X3] : ((p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X0,fun(X0,bool)),X1)))) & p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.list.list'(X0)),X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) => p(s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),'const.BottomUpMergeSort.sort_2'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.list.list'(X0)),X3)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : ((p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X6,fun(X6,bool)),X7)))) & p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(X6,fun(X6,bool)),X7),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X6))),'const.pair.,_2'(s('type.num.num',X8),s('type.list.list'('type.list.list'(X6)),X9))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) => p(s(bool,'const.sorting.SORTED_2'(s(fun(X6,fun(X6,bool)),X7),s('type.list.list'(X6),'const.BottomUpMergeSort.sort_2'(s(fun(X6,fun(X6,bool)),X7),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X6))),'const.pair.,_2'(s('type.num.num',X8),s('type.list.list'('type.list.list'(X6)),X9)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : ((p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X6,fun(X6,bool)),X7)))) & p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(X6,fun(X6,bool)),X7),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X6))),'const.pair.,_2'(s('type.num.num',X8),s('type.list.list'('type.list.list'(X6)),X9))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) => p(s(bool,'const.sorting.SORTED_2'(s(fun(X6,fun(X6,bool)),X7),s('type.list.list'(X6),'const.BottomUpMergeSort.sort_2'(s(fun(X6,fun(X6,bool)),X7),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X6))),'const.pair.,_2'(s('type.num.num',X8),s('type.list.list'('type.list.list'(X6)),X9)))))))))),
  file('thm.BottomUpMergeSort.sort_sorted','thm.BottomUpMergeSort.sort_sorted')).
fof(f606,plain,(
  ~p(s(bool,'const.sorting.SORTED_2'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.BottomUpMergeSort.mrg_all_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'('type.list.list'(sK13)),sK16)))))) | $spl229),
  inference(cnf_transformation,[],[f606_D])).
fof(f606_D,plain,(
  ~p(s(bool,'const.sorting.SORTED_2'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.BottomUpMergeSort.mrg_all_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'('type.list.list'(sK13)),sK16)))))) <=> ~$spl229),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl229])])).
fof(f604,plain,(
  ~p(s(bool,'const.sorting.SORTED_2'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.BottomUpMergeSort.mrg_all_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'('type.list.list'(sK13)),sK16)))))) | ($spl1 | $spl68)),
  inference(forward_demodulation,[],[f466,f517])).
fof(f482,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl16),
  inference(cnf_transformation,[],[f482_D])).
fof(f482_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f273,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f168])).
fof(f168,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f57])).
fof(f57,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X13] : (s(bool,'F_0') = s(bool,X13) <=> ~p(s(bool,X13)))),
  file('thm.BottomUpMergeSort.sort_sorted','thm.bool.EQ_CLAUSES|split|2')).
fof(f622,plain,(
  s(bool,'F_0') = s(bool,'const.sorting.SORTED_2'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.BottomUpMergeSort.mrg_all_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'('type.list.list'(sK13)),sK16))))) | $spl232),
  inference(cnf_transformation,[],[f622_D])).
fof(f622_D,plain,(
  s(bool,'F_0') = s(bool,'const.sorting.SORTED_2'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.BottomUpMergeSort.mrg_all_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'('type.list.list'(sK13)),sK16))))) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f618,plain,(
  s(bool,'F_0') = s(bool,'const.sorting.SORTED_2'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.BottomUpMergeSort.mrg_all_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'('type.list.list'(sK13)),sK16))))) | ($spl16 | $spl229)),
  inference(resolution,[],[f482,f606])).
fof(f480,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f480_D])).
fof(f480_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f269,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f166])).
fof(f166,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X13] : (s(bool,'T_0') = s(bool,X13) <=> p(s(bool,X13)))),
  file('thm.BottomUpMergeSort.sort_sorted','thm.bool.EQ_CLAUSES|split|1')).
fof(f470,plain,(
  p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(sK13,fun(sK13,bool)),sK14)))) | $spl4),
  inference(cnf_transformation,[],[f470_D])).
fof(f470_D,plain,(
  p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(sK13,fun(sK13,bool)),sK14)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f252,plain,(
  p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(sK13,fun(sK13,bool)),sK14))))),
  inference(cnf_transformation,[],[f163])).
fof(f610,plain,(
  s(bool,'T_0') = s(bool,'const.relation.WeakLinearOrder_1'(s(fun(sK13,fun(sK13,bool)),sK14))) | $spl230),
  inference(cnf_transformation,[],[f610_D])).
fof(f610_D,plain,(
  s(bool,'T_0') = s(bool,'const.relation.WeakLinearOrder_1'(s(fun(sK13,fun(sK13,bool)),sK14))) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f607,plain,(
  s(bool,'T_0') = s(bool,'const.relation.WeakLinearOrder_1'(s(fun(sK13,fun(sK13,bool)),sK14))) | ($spl4 | $spl12)),
  inference(resolution,[],[f480,f470])).
fof(f499,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2),s('type.list.list'('type.list.list'(X0)),X3)))))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))) | ~p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X0,fun(X0,bool)),X1))))) ) | $spl42),
  inference(cnf_transformation,[],[f499_D])).
fof(f499_D,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2),s('type.list.list'('type.list.list'(X0)),X3)))))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))) | ~p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X0,fun(X0,bool)),X1))))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f312,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2),s('type.list.list'('type.list.list'(X0)),X3)))))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))) | ~p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X0,fun(X0,bool)),X1))))) )),
  inference(cnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X0,fun(X0,bool)),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),X2)))) | p(s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2),s('type.list.list'('type.list.list'(X0)),X3)))))))),
  inference(flattening,[],[f126])).
fof(f126,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X0,fun(X0,bool)),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),X2))))) | p(s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2),s('type.list.list'('type.list.list'(X0)),X3)))))))),
  inference(ennf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0,X1,X2,X3] : ((p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X0,fun(X0,bool)),X1)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))) & p(s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),X2))))) => p(s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2),s('type.list.list'('type.list.list'(X0)),X3)))))))),
  inference(flattening,[],[f85])).
fof(f85,plain,(
  ! [X0] : ! [X1,X2,X3] : ((p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X0,fun(X0,bool)),X1)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))) & p(s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),X2))))) => p(s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2),s('type.list.list'('type.list.list'(X0)),X3)))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X7,X12,X9] : ((p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X6,fun(X6,bool)),X7)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X6),bool),'const.sorting.SORTED_1'(s(fun(X6,fun(X6,bool)),X7))),s('type.list.list'('type.list.list'(X6)),X9)))) & p(s(bool,happ(s(fun('type.list.list'(X6),bool),'const.sorting.SORTED_1'(s(fun(X6,fun(X6,bool)),X7))),s('type.list.list'(X6),X12))))) => p(s(bool,happ(s(fun('type.list.list'(X6),bool),'const.sorting.SORTED_1'(s(fun(X6,fun(X6,bool)),X7))),s('type.list.list'(X6),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X6,fun(X6,bool)),X7),s('type.list.list'(X6),X12),s('type.list.list'('type.list.list'(X6)),X9)))))))),
  file('thm.BottomUpMergeSort.sort_sorted','thm.BottomUpMergeSort.BottomUpMergeSort_6|49|_prove_ltb')).
fof(f490,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2))) = s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),X2)))) ) | $spl24),
  inference(cnf_transformation,[],[f490_D])).
fof(f490_D,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2))) = s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),X2)))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f297,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2))) = s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1,X2] : s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2))) = s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ! [X0] : ! [X1,X2] : s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2))) = s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X6] : ! [X29,X30] : s(bool,'const.sorting.SORTED_2'(s(fun(X6,fun(X6,bool)),X29),s('type.list.list'(X6),X30))) = s(bool,happ(s(fun('type.list.list'(X6),bool),'const.sorting.SORTED_1'(s(fun(X6,fun(X6,bool)),X29))),s('type.list.list'(X6),X30)))),
  file('thm.BottomUpMergeSort.sort_sorted','ARITY_1_2_const.sorting.SORTED')).
fof(f603,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2),s('type.list.list'('type.list.list'(X0)),X3)))))) | ~p(s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))) | ~p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X0,fun(X0,bool)),X1))))) ) | $spl226),
  inference(cnf_transformation,[],[f603_D])).
fof(f603_D,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2),s('type.list.list'('type.list.list'(X0)),X3)))))) | ~p(s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))) | ~p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X0,fun(X0,bool)),X1))))) ) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f602,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2)))) | p(s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2),s('type.list.list'('type.list.list'(X0)),X3)))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))) | ~p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X0,fun(X0,bool)),X1))))) ) | ($spl24 | $spl42)),
  inference(forward_demodulation,[],[f601,f490])).
fof(f601,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),'const.BottomUpMergeSort.mrg_all_3'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),X2),s('type.list.list'('type.list.list'(X0)),X3)))))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'(X0),X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))) | ~p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(X0,fun(X0,bool)),X1))))) ) | ($spl24 | $spl42)),
  inference(backward_demodulation,[],[f490,f499])).
fof(f488,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl20),
  inference(cnf_transformation,[],[f488_D])).
fof(f488_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),'const.list.NIL_0')))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f295,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.sorting.SORTED_2'(s(fun(X0,fun(X0,bool)),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X6] : ! [X27] : s(bool,'T_0') = s(bool,'const.sorting.SORTED_2'(s(fun(X6,fun(X6,bool)),X27),s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.BottomUpMergeSort.sort_sorted','thm.sorting.SORTED_DEF|split|0')).
fof(f475,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f475_D])).
fof(f475_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f473,plain,(
  ~p(s(bool,'F_0'))),
  inference(global_subsumption,[],[f258,f255])).
fof(f258,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f164])).
fof(f164,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f48])).
fof(f48,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f18])).
fof(f18,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.BottomUpMergeSort.sort_sorted','thm.bool.NOT_CLAUSES|split|2')).
fof(f3180,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(sK13),bool),'const.sorting.SORTED_1'(s(fun(sK13,fun(sK13,bool)),sK14))),s('type.list.list'('type.list.list'(sK13)),sK16)))) | $spl1343),
  inference(cnf_transformation,[],[f3180_D])).
fof(f3180_D,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(sK13),bool),'const.sorting.SORTED_1'(s(fun(sK13,fun(sK13,bool)),sK14))),s('type.list.list'('type.list.list'(sK13)),sK16)))) <=> ~$spl1343),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1343])])).
fof(f3178,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(sK13),bool),'const.sorting.SORTED_1'(s(fun(sK13,fun(sK13,bool)),sK14))),s('type.list.list'('type.list.list'(sK13)),sK16)))) | ($spl6 | $spl9 | $spl20 | $spl226 | $spl230 | $spl232)),
  inference(subsumption_resolution,[],[f3177,f472])).
fof(f3177,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(sK13),bool),'const.sorting.SORTED_1'(s(fun(sK13,fun(sK13,bool)),sK14))),s('type.list.list'('type.list.list'(sK13)),sK16)))) | ($spl6 | $spl9 | $spl20 | $spl226 | $spl230 | $spl232)),
  inference(forward_demodulation,[],[f3176,f610])).
fof(f3176,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(sK13),bool),'const.sorting.SORTED_1'(s(fun(sK13,fun(sK13,bool)),sK14))),s('type.list.list'('type.list.list'(sK13)),sK16)))) | ~p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(sK13,fun(sK13,bool)),sK14)))) | ($spl6 | $spl9 | $spl20 | $spl226 | $spl232)),
  inference(subsumption_resolution,[],[f3175,f472])).
fof(f3175,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(sK13),bool),'const.sorting.SORTED_1'(s(fun(sK13,fun(sK13,bool)),sK14))),s('type.list.list'('type.list.list'(sK13)),sK16)))) | ~p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(sK13,fun(sK13,bool)),sK14)))) | ($spl9 | $spl20 | $spl226 | $spl232)),
  inference(forward_demodulation,[],[f3174,f488])).
fof(f3174,plain,(
  ~p(s(bool,'const.sorting.SORTED_2'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.list.NIL_0')))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(sK13),bool),'const.sorting.SORTED_1'(s(fun(sK13,fun(sK13,bool)),sK14))),s('type.list.list'('type.list.list'(sK13)),sK16)))) | ~p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(sK13,fun(sK13,bool)),sK14)))) | ($spl9 | $spl226 | $spl232)),
  inference(subsumption_resolution,[],[f3155,f475])).
fof(f3155,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.sorting.SORTED_2'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),'const.list.NIL_0')))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(sK13),bool),'const.sorting.SORTED_1'(s(fun(sK13,fun(sK13,bool)),sK14))),s('type.list.list'('type.list.list'(sK13)),sK16)))) | ~p(s(bool,'const.relation.WeakLinearOrder_1'(s(fun(sK13,fun(sK13,bool)),sK14)))) | ($spl226 | $spl232)),
  inference(superposition,[],[f603,f622])).
fof(f500,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))) | ~p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.list.list'(X0)),X3))),s('type.num.num',X4))))) ) | $spl44),
  inference(cnf_transformation,[],[f500_D])).
fof(f500_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))) | ~p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.list.list'(X0)),X3))),s('type.num.num',X4))))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f313,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))) | ~p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.list.list'(X0)),X3))),s('type.num.num',X4))))) )),
  inference(cnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.list.list'(X0)),X3))),s('type.num.num',X4)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))))),
  inference(ennf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.list.list'(X0)),X3))),s('type.num.num',X4)))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))))),
  inference(flattening,[],[f87])).
fof(f87,plain,(
  ! [X0] : ! [X1,X2,X3,X4] : (p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X0))),'const.pair.,_2'(s('type.num.num',X2),s('type.list.list'('type.list.list'(X0)),X3))),s('type.num.num',X4)))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X0),bool),'const.sorting.SORTED_1'(s(fun(X0,fun(X0,bool)),X1))),s('type.list.list'('type.list.list'(X0)),X3)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X7,X8,X9,X11] : (p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(X6,fun(X6,bool)),X7),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(X6))),'const.pair.,_2'(s('type.num.num',X8),s('type.list.list'('type.list.list'(X6)),X9))),s('type.num.num',X11)))) => p(s(bool,'const.list.EVERY_2'(s(fun('type.list.list'(X6),bool),'const.sorting.SORTED_1'(s(fun(X6,fun(X6,bool)),X7))),s('type.list.list'('type.list.list'(X6)),X9)))))),
  file('thm.BottomUpMergeSort.sort_sorted','thm.BottomUpMergeSort.BottomUpMergeSort_52_prove_ltb')).
fof(f3202,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'(sK13)),sK16))),s('type.num.num',X1))))) ) | $spl1344),
  inference(cnf_transformation,[],[f3202_D])).
fof(f3202_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'(sK13)),sK16))),s('type.num.num',X1))))) ) <=> ~$spl1344),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1344])])).
fof(f3182,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s('type.num.num',X0),s('type.list.list'('type.list.list'(sK13)),sK16))),s('type.num.num',X1))))) ) | ($spl44 | $spl1343)),
  inference(resolution,[],[f3180,f500])).
fof(f514,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | ~sP1(X0,X1)) ) | $spl62),
  inference(cnf_transformation,[],[f514_D])).
fof(f514_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | ~sP1(X0,X1)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f335,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | ~sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f205])).
fof(f205,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | ((p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | ~p(s(bool,X0))))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & p(s(bool,X0))) | sP1(X0,X1)))),
  inference(rectify,[],[f204])).
fof(f204,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1))) | sP1(X1,X0)))),
  inference(flattening,[],[f203])).
fof(f203,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & (((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1)))) | sP1(X1,X0)))),
  inference(nnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X1,X0] : (sP1(X1,X0) <=> ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f468,plain,(
  p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.list.list'(sK13)),sK16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl2),
  inference(cnf_transformation,[],[f468_D])).
fof(f468_D,plain,(
  p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.list.list'(sK13)),sK16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f253,plain,(
  p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.list.list'(sK13)),sK16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(cnf_transformation,[],[f163])).
fof(f690,plain,(
  ( ! [X0] : (~sP1(X0,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.list.list'(sK13)),sK16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ~p(s(bool,X0))) ) | $spl272),
  inference(cnf_transformation,[],[f690_D])).
fof(f690_D,plain,(
  ( ! [X0] : (~sP1(X0,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.list.list'(sK13)),sK16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ~p(s(bool,X0))) ) <=> ~$spl272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl272])])).
fof(f687,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | ~sP1(X0,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.list.list'(sK13)),sK16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl2 | $spl62)),
  inference(resolution,[],[f468,f514])).
fof(f513,plain,(
  ( ! [X0,X1] : (sP1(X0,X1) | p(s(bool,X1)) | ~p(s(bool,X0))) ) | $spl60),
  inference(cnf_transformation,[],[f513_D])).
fof(f513_D,plain,(
  ( ! [X0,X1] : (sP1(X0,X1) | p(s(bool,X1)) | ~p(s(bool,X0))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f336,plain,(
  ( ! [X0,X1] : (sP1(X0,X1) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f205])).
fof(f3233,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl1378),
  inference(cnf_transformation,[],[f3233_D])).
fof(f3233_D,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) <=> ~$spl1378),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1378])])).
fof(f3232,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl60 | $spl272 | $spl1344)),
  inference(subsumption_resolution,[],[f3231,f3202])).
fof(f3231,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.list.list'(sK13)),sK16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | ($spl60 | $spl272)),
  inference(duplicate_literal_removal,[],[f3229])).
fof(f3229,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | p(s(bool,'const.BottomUpMergeSort.sortable_inv_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.pair.prod'('type.num.num','type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.list.list'(sK13)),sK16))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ~p(s(bool,X0))) ) | ($spl60 | $spl272)),
  inference(resolution,[],[f690,f513])).
fof(f472,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f472_D])).
fof(f472_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f255,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.BottomUpMergeSort.sort_sorted',aHL_TRUTH)).
fof(f3252,plain,(
  $false | ($spl6 | $spl1378)),
  inference(resolution,[],[f3233,f472])).
% SZS output end Proof for thm.BottomUpMergeSort
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 234
% Passive clauses: 691
% Generated clauses: 3015
% Final active clauses: 229
% Final passive clauses: 441
% Input formulas: 44
% Initial clauses: 192
% 
% Duplicate literals: 82
% Trivial inequalities: 6
% Fw subsumption resolutions: 253
% Fw demodulations: 104
% Bw demodulations: 19
% Condensations: 51
% Global subsumptions: 13
% 
% Simple tautologies: 166
% Equational tautologies: 3
% Forward subsumptions: 873
% 
% Binary resolution: 1074
% Factoring: 72
% Forward superposition: 222
% Backward superposition: 217
% Self superposition: 5
% Equality factoring: 2
% Equality resolution: 3
% 
% Split clauses: 3
% Split components: 6
% SAT solver clauses: 973
% SAT solver unit clauses: 203
% SAT solver binary clauses: 63
% SAT solver learnt clauses: 27
% SAT solver learnt literals: 10
% 
% Sat splits: 3
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 920
% TWLsolver calls for satisfiability: 1868
% 
% Memory used [KB]: 3965
% Time elapsed: 0.101 s
% ------------------------------
% ------------------------------
% Success in time 0.72 s
