Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bigClock
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bigClock
% SZS output start Proof for thm.bigClock
fof(f439,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f425])).
fof(f425,plain,(
  s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),sK0))) != s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),sK0)))),
  inference(superposition,[],[f46,f423])).
fof(f423,plain,(
  ( ! [X9] : (s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),X9))) = s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),X9)))))) )),
  inference(forward_demodulation,[],[f422,f381])).
fof(f381,plain,(
  ( ! [X0] : (s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.SUM_1'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.ast.exp','type.num.num'),'const.ast.exp_size_0'),s('type.list.list'('type.ast.exp'),X0))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.exp'),X0)))))) )),
  inference(forward_demodulation,[],[f55,f109])).
fof(f109,plain,(
  ( ! [X0] : (s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),X0))) = s('type.num.num','const.termination.exps_size_1'(s('type.list.list'('type.ast.exp'),X0)))) )),
  inference(backward_demodulation,[],[f106,f54])).
fof(f54,plain,(
  ( ! [X0] : (s('type.num.num','const.termination.exps_size_1'(s('type.list.list'('type.ast.exp'),X0))) = s('type.num.num',happ(s(fun('type.list.list'('type.ast.exp'),'type.num.num'),'const.termination.exps_size_0'),s('type.list.list'('type.ast.exp'),X0)))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : s('type.num.num','const.termination.exps_size_1'(s('type.list.list'('type.ast.exp'),X0))) = s('type.num.num',happ(s(fun('type.list.list'('type.ast.exp'),'type.num.num'),'const.termination.exps_size_0'),s('type.list.list'('type.ast.exp'),X0)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X17] : s('type.num.num','const.termination.exps_size_1'(s('type.list.list'('type.ast.exp'),X17))) = s('type.num.num',happ(s(fun('type.list.list'('type.ast.exp'),'type.num.num'),'const.termination.exps_size_0'),s('type.list.list'('type.ast.exp'),X17)))),
  file('thm.bigClock.bigClock_|49|7_prove_ltb','ARITY_0_1_const.termination.exps_size')).
fof(f106,plain,(
  ( ! [X0] : (s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),X0))) = s('type.num.num',happ(s(fun('type.list.list'('type.ast.exp'),'type.num.num'),'const.termination.exps_size_0'),s('type.list.list'('type.ast.exp'),X0)))) )),
  inference(forward_demodulation,[],[f53,f49])).
fof(f49,plain,(
  s(fun('type.list.list'('type.ast.exp'),'type.num.num'),'const.termination.exps_size_0') = s(fun('type.list.list'('type.ast.exp'),'type.num.num'),'const.ast.exp6_size_0')),
  inference(cnf_transformation,[],[f15])).
fof(f15,axiom,(
  s(fun('type.list.list'('type.ast.exp'),'type.num.num'),'const.termination.exps_size_0') = s(fun('type.list.list'('type.ast.exp'),'type.num.num'),'const.ast.exp6_size_0')),
  file('thm.bigClock.bigClock_|49|7_prove_ltb','thm.termination.exps_size_def')).
fof(f53,plain,(
  ( ! [X0] : (s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),X0))) = s('type.num.num',happ(s(fun('type.list.list'('type.ast.exp'),'type.num.num'),'const.ast.exp6_size_0'),s('type.list.list'('type.ast.exp'),X0)))) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),X0))) = s('type.num.num',happ(s(fun('type.list.list'('type.ast.exp'),'type.num.num'),'const.ast.exp6_size_0'),s('type.list.list'('type.ast.exp'),X0)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X17] : s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),X17))) = s('type.num.num',happ(s(fun('type.list.list'('type.ast.exp'),'type.num.num'),'const.ast.exp6_size_0'),s('type.list.list'('type.ast.exp'),X17)))),
  file('thm.bigClock.bigClock_|49|7_prove_ltb','ARITY_0_1_const.ast.exp6_size')).
fof(f55,plain,(
  ( ! [X0] : (s('type.num.num','const.termination.exps_size_1'(s('type.list.list'('type.ast.exp'),X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.SUM_1'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.ast.exp','type.num.num'),'const.ast.exp_size_0'),s('type.list.list'('type.ast.exp'),X0))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.exp'),X0)))))) )),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0] : s('type.num.num','const.termination.exps_size_1'(s('type.list.list'('type.ast.exp'),X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.SUM_1'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.ast.exp','type.num.num'),'const.ast.exp_size_0'),s('type.list.list'('type.ast.exp'),X0))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.exp'),X0)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X16] : s('type.num.num','const.termination.exps_size_1'(s('type.list.list'('type.ast.exp'),X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.SUM_1'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.ast.exp','type.num.num'),'const.ast.exp_size_0'),s('type.list.list'('type.ast.exp'),X16))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.exp'),X16)))))),
  file('thm.bigClock.bigClock_|49|7_prove_ltb','thm.termination.exps_size_thm')).
fof(f422,plain,(
  ( ! [X9] : (s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.SUM_1'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.ast.exp','type.num.num'),'const.ast.exp_size_0'),s('type.list.list'('type.ast.exp'),X9))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.exp'),X9)))))) )),
  inference(forward_demodulation,[],[f421,f52])).
fof(f52,plain,(
  ( ! [X0] : (s('type.num.num','const.list.SUM_1'(s('type.list.list'('type.num.num'),X0))) = s('type.num.num','const.list.SUM_1'(s('type.list.list'('type.num.num'),'const.list.REVERSE_1'(s('type.list.list'('type.num.num'),X0)))))) )),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0] : s('type.num.num','const.list.SUM_1'(s('type.list.list'('type.num.num'),X0))) = s('type.num.num','const.list.SUM_1'(s('type.list.list'('type.num.num'),'const.list.REVERSE_1'(s('type.list.list'('type.num.num'),X0)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X13] : s('type.num.num','const.list.SUM_1'(s('type.list.list'('type.num.num'),X13))) = s('type.num.num','const.list.SUM_1'(s('type.list.list'('type.num.num'),'const.list.REVERSE_1'(s('type.list.list'('type.num.num'),X13)))))),
  file('thm.bigClock.bigClock_|49|7_prove_ltb','thm.rich_list.SUM_REVERSE')).
fof(f421,plain,(
  ( ! [X9] : (s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.SUM_1'(s('type.list.list'('type.num.num'),'const.list.REVERSE_1'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.ast.exp','type.num.num'),'const.ast.exp_size_0'),s('type.list.list'('type.ast.exp'),X9))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.exp'),X9)))))) )),
  inference(forward_demodulation,[],[f418,f57])).
fof(f57,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0] : ! [X1] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X10] : ! [X13] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X13))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),'const.list.REVERSE_1'(s('type.list.list'(X10),X13)))))),
  file('thm.bigClock.bigClock_|49|7_prove_ltb','thm.list.LENGTH_REVERSE')).
fof(f418,plain,(
  ( ! [X9] : (s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.SUM_1'(s('type.list.list'('type.num.num'),'const.list.REVERSE_1'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.ast.exp','type.num.num'),'const.ast.exp_size_0'),s('type.list.list'('type.ast.exp'),X9))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),X9)))))))) )),
  inference(superposition,[],[f381,f63])).
fof(f63,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X3)))))) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X3)))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X3)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X14,X10] : ! [X15,X13] : s('type.list.list'(X14),'const.list.REVERSE_1'(s('type.list.list'(X14),'const.list.MAP_2'(s(fun(X10,X14),X15),s('type.list.list'(X10),X13))))) = s('type.list.list'(X14),'const.list.MAP_2'(s(fun(X10,X14),X15),s('type.list.list'(X10),'const.list.REVERSE_1'(s('type.list.list'(X10),X13)))))),
  file('thm.bigClock.bigClock_|49|7_prove_ltb','thm.rich_list.MAP_REVERSE')).
fof(f46,plain,(
  s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),sK0))) != s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),sK0)))))),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),sK0))) != s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),sK0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f39])).
fof(f39,plain,(
  ? [X0] : s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),X0))) != s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),X0)))))),
  inference(ennf_transformation,[],[f20])).
fof(f20,plain,(
  ~! [X0] : s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),X0))) = s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),X0)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),X6))) = s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),X6)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),X6))) = s('type.num.num','const.ast.exp6_size_1'(s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),X6)))))),
  file('thm.bigClock.bigClock_|49|7_prove_ltb','thm.bigClock.bigClock_|49|7_prove_ltb')).
% SZS output end Proof for thm.bigClock
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 26
% Passive clauses: 102
% Generated clauses: 380
% Final active clauses: 23
% Final passive clauses: 64
% Input formulas: 18
% Initial clauses: 21
% 
% Duplicate literals: 37
% Trivial inequalities: 4
% Fw demodulations: 35
% Bw demodulations: 1
% 
% Simple tautologies: 18
% Equational tautologies: 19
% Forward subsumptions: 158
% 
% Binary resolution: 4
% Forward superposition: 136
% Backward superposition: 79
% Self superposition: 32
% Equality factoring: 26
% Equality resolution: 4
% 
% Split clauses: 1
% Split components: 2
% SAT solver clauses: 2
% SAT solver unit clauses: 1
% SAT solver binary clauses: 1
% 
% Sat splits: 1
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 2
% TWLsolver calls for satisfiability: 2
% 
% Memory used [KB]: 1023
% Time elapsed: 0.020 s
% ------------------------------
% ------------------------------
% Success in time 0.03 s
