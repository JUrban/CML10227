Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f1966,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1965,f223,f514,f512,f510,f508,f506,f504,f502,f500,f498,f496,f494,f492,f490,f488,f486,f484,f482,f480,f478,f476,f474,f472,f470,f468,f466,f464,f462,f460,f458,f456,f454,f452,f450,f448,f446,f444,f442,f440,f438,f436,f1963,f1962,f226,f439,f227,f441,f228,f443,f1961,f230,f447,f231,f449,f232,f451,f233,f453,f234,f455,f235,f457,f236,f459,f237,f461,f256,f499,f239,f465,f1960,f1959,f242,f471,f243,f473,f258,f503,f245,f477,f246,f479,f1958,f1101,f249,f485,f253,f493,f251,f489,f252,f491,f1100,f526,f255,f497,f259,f505,f257,f501,f262,f511,f263,f513,f254,f495,f244,f475,f1964])).
fof(f1964,plain,(
  $false | $spl46),
  inference(subsumption_resolution,[],[f482,f247])).
fof(f247,plain,(
  ( ! [X8] : (s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',X8)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  (s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',sK13))) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',sK14))) | s('type.closLang.op','const.closLang.AllocGlobal_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.GlobalsPtr_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.SetGlobalsPtr_0') = s('type.closLang.op',sK12) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',sK15))) | s('type.closLang.op','const.closLang.El_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.LengthBlock_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Length_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.LengthByte_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.RefByte_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.RefArray_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.DerefByte_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.UpdateByte_0') = s('type.closLang.op',sK12) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',sK16))) | s('type.closLang.op','const.closLang.ToList_0') = s('type.closLang.op',sK12) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',sK17),s('type.num.num',sK18))) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',sK19))) | s('type.closLang.op','const.closLang.BlockCmp_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.IsBlock_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Ref_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Deref_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Update_0') = s('type.closLang.op',sK12) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',sK20))) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',sK21))) | s('type.closLang.op','const.closLang.Equal_0') = s('type.closLang.op',sK12) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',sK22))) | s('type.closLang.op','const.closLang.Add_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Sub_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Mult_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Div_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Mod_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Less_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.LessEq_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Greater_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.GreaterEq_0') = s('type.closLang.op',sK12) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',sK23),s('type.ast.opw',sK24))) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',sK25),s('type.ast.shift',sK26),s('type.num.num',sK27))) | s('type.closLang.op','const.closLang.WordFromInt_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.WordToInt_0') = s('type.closLang.op',sK12)) & ! [X15] : s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',X15))) & ! [X14] : s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',X14))) & s('type.closLang.op','const.closLang.AllocGlobal_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.GlobalsPtr_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.SetGlobalsPtr_0') != s('type.closLang.op',sK12) & ! [X13] : s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',X13))) & s('type.closLang.op','const.closLang.El_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.LengthBlock_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.Length_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.LengthByte_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.RefByte_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.RefArray_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.DerefByte_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.UpdateByte_0') != s('type.closLang.op',sK12) & ! [X12] : s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',X12))) & s('type.closLang.op','const.closLang.ToList_0') != s('type.closLang.op',sK12) & ! [X10,X11] : s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',X10),s('type.num.num',X11))) & ! [X9] : s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',X9))) & s('type.closLang.op','const.closLang.BlockCmp_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.IsBlock_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.Ref_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.Deref_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.Update_0') != s('type.closLang.op',sK12) & ! [X8] : s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',X8))) & ! [X7] : s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',X7))) & s('type.closLang.op','const.closLang.Equal_0') != s('type.closLang.op',sK12) & ! [X6] : s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',X6))) & s('type.closLang.op','const.closLang.Add_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.Sub_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.Mult_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.Div_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.Mod_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.Less_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.LessEq_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.Greater_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.GreaterEq_0') != s('type.closLang.op',sK12) & ! [X4,X5] : s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',X4),s('type.ast.opw',X5))) & ! [X1,X2,X3] : s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',X1),s('type.ast.shift',X2),s('type.num.num',X3))) & s('type.closLang.op','const.closLang.WordFromInt_0') != s('type.closLang.op',sK12) & s('type.closLang.op','const.closLang.WordToInt_0') != s('type.closLang.op',sK12)),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27])],[f137])).
fof(f137,plain,(
  ? [X0] : ((? [X30] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',X30))) | ? [X29] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',X29))) | s('type.closLang.op','const.closLang.AllocGlobal_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.GlobalsPtr_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.SetGlobalsPtr_0') = s('type.closLang.op',X0) | ? [X28] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',X28))) | s('type.closLang.op','const.closLang.El_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.LengthBlock_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Length_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.LengthByte_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.RefByte_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.RefArray_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.DerefByte_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.UpdateByte_0') = s('type.closLang.op',X0) | ? [X27] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',X27))) | s('type.closLang.op','const.closLang.ToList_0') = s('type.closLang.op',X0) | ? [X25,X26] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',X25),s('type.num.num',X26))) | ? [X24] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',X24))) | s('type.closLang.op','const.closLang.BlockCmp_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.IsBlock_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Ref_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Deref_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Update_0') = s('type.closLang.op',X0) | ? [X23] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',X23))) | ? [X22] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',X22))) | s('type.closLang.op','const.closLang.Equal_0') = s('type.closLang.op',X0) | ? [X21] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',X21))) | s('type.closLang.op','const.closLang.Add_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Sub_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Mult_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Div_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Mod_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Less_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.LessEq_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Greater_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.GreaterEq_0') = s('type.closLang.op',X0) | ? [X19,X20] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',X19),s('type.ast.opw',X20))) | ? [X16,X17,X18] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',X16),s('type.ast.shift',X17),s('type.num.num',X18))) | s('type.closLang.op','const.closLang.WordFromInt_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.WordToInt_0') = s('type.closLang.op',X0)) & ! [X15] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',X15))) & ! [X14] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',X14))) & s('type.closLang.op','const.closLang.AllocGlobal_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.GlobalsPtr_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.SetGlobalsPtr_0') != s('type.closLang.op',X0) & ! [X13] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',X13))) & s('type.closLang.op','const.closLang.El_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.LengthBlock_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Length_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.LengthByte_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.RefByte_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.RefArray_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.DerefByte_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.UpdateByte_0') != s('type.closLang.op',X0) & ! [X12] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',X12))) & s('type.closLang.op','const.closLang.ToList_0') != s('type.closLang.op',X0) & ! [X10,X11] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',X10),s('type.num.num',X11))) & ! [X9] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',X9))) & s('type.closLang.op','const.closLang.BlockCmp_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.IsBlock_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Ref_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Deref_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Update_0') != s('type.closLang.op',X0) & ! [X8] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',X8))) & ! [X7] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',X7))) & s('type.closLang.op','const.closLang.Equal_0') != s('type.closLang.op',X0) & ! [X6] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',X6))) & s('type.closLang.op','const.closLang.Add_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Sub_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Mult_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Div_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Mod_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Less_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.LessEq_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Greater_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.GreaterEq_0') != s('type.closLang.op',X0) & ! [X4,X5] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',X4),s('type.ast.opw',X5))) & ! [X1,X2,X3] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',X1),s('type.ast.shift',X2),s('type.num.num',X3))) & s('type.closLang.op','const.closLang.WordFromInt_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.WordToInt_0') != s('type.closLang.op',X0))),
  inference(rectify,[],[f97])).
fof(f97,plain,(
  ? [X0] : ((? [X15] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',X15))) | ? [X14] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',X14))) | s('type.closLang.op','const.closLang.AllocGlobal_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.GlobalsPtr_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.SetGlobalsPtr_0') = s('type.closLang.op',X0) | ? [X13] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',X13))) | s('type.closLang.op','const.closLang.El_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.LengthBlock_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Length_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.LengthByte_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.RefByte_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.RefArray_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.DerefByte_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.UpdateByte_0') = s('type.closLang.op',X0) | ? [X12] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',X12))) | s('type.closLang.op','const.closLang.ToList_0') = s('type.closLang.op',X0) | ? [X10,X11] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',X10),s('type.num.num',X11))) | ? [X9] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',X9))) | s('type.closLang.op','const.closLang.BlockCmp_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.IsBlock_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Ref_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Deref_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Update_0') = s('type.closLang.op',X0) | ? [X8] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',X8))) | ? [X7] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',X7))) | s('type.closLang.op','const.closLang.Equal_0') = s('type.closLang.op',X0) | ? [X6] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',X6))) | s('type.closLang.op','const.closLang.Add_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Sub_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Mult_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Div_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Mod_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Less_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.LessEq_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Greater_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.GreaterEq_0') = s('type.closLang.op',X0) | ? [X4,X5] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',X4),s('type.ast.opw',X5))) | ? [X1,X2,X3] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',X1),s('type.ast.shift',X2),s('type.num.num',X3))) | s('type.closLang.op','const.closLang.WordFromInt_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.WordToInt_0') = s('type.closLang.op',X0)) & ! [X30] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',X30))) & ! [X29] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',X29))) & s('type.closLang.op','const.closLang.AllocGlobal_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.GlobalsPtr_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.SetGlobalsPtr_0') != s('type.closLang.op',X0) & ! [X28] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',X28))) & s('type.closLang.op','const.closLang.El_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.LengthBlock_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Length_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.LengthByte_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.RefByte_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.RefArray_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.DerefByte_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.UpdateByte_0') != s('type.closLang.op',X0) & ! [X27] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',X27))) & s('type.closLang.op','const.closLang.ToList_0') != s('type.closLang.op',X0) & ! [X25,X26] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',X25),s('type.num.num',X26))) & ! [X24] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',X24))) & s('type.closLang.op','const.closLang.BlockCmp_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.IsBlock_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Ref_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Deref_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Update_0') != s('type.closLang.op',X0) & ! [X23] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',X23))) & ! [X22] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',X22))) & s('type.closLang.op','const.closLang.Equal_0') != s('type.closLang.op',X0) & ! [X21] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',X21))) & s('type.closLang.op','const.closLang.Add_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Sub_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Mult_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Div_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Mod_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Less_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.LessEq_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Greater_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.GreaterEq_0') != s('type.closLang.op',X0) & ! [X19,X20] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',X19),s('type.ast.opw',X20))) & ! [X16,X17,X18] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',X16),s('type.ast.shift',X17),s('type.num.num',X18))) & s('type.closLang.op','const.closLang.WordFromInt_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.WordToInt_0') != s('type.closLang.op',X0))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ? [X0] : ((? [X15] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',X15))) | ? [X14] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',X14))) | s('type.closLang.op','const.closLang.AllocGlobal_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.GlobalsPtr_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.SetGlobalsPtr_0') = s('type.closLang.op',X0) | ? [X13] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',X13))) | s('type.closLang.op','const.closLang.El_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.LengthBlock_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Length_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.LengthByte_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.RefByte_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.RefArray_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.DerefByte_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.UpdateByte_0') = s('type.closLang.op',X0) | ? [X12] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',X12))) | s('type.closLang.op','const.closLang.ToList_0') = s('type.closLang.op',X0) | ? [X10,X11] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',X10),s('type.num.num',X11))) | ? [X9] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',X9))) | s('type.closLang.op','const.closLang.BlockCmp_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.IsBlock_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Ref_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Deref_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Update_0') = s('type.closLang.op',X0) | ? [X8] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',X8))) | ? [X7] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',X7))) | s('type.closLang.op','const.closLang.Equal_0') = s('type.closLang.op',X0) | ? [X6] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',X6))) | s('type.closLang.op','const.closLang.Add_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Sub_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Mult_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Div_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Mod_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Less_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.LessEq_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Greater_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.GreaterEq_0') = s('type.closLang.op',X0) | ? [X4,X5] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',X4),s('type.ast.opw',X5))) | ? [X1,X2,X3] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',X1),s('type.ast.shift',X2),s('type.num.num',X3))) | s('type.closLang.op','const.closLang.WordFromInt_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.WordToInt_0') = s('type.closLang.op',X0)) & (! [X30] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',X30))) & ! [X29] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',X29))) & s('type.closLang.op','const.closLang.AllocGlobal_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.GlobalsPtr_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.SetGlobalsPtr_0') != s('type.closLang.op',X0) & ! [X28] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',X28))) & s('type.closLang.op','const.closLang.El_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.LengthBlock_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Length_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.LengthByte_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.RefByte_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.RefArray_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.DerefByte_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.UpdateByte_0') != s('type.closLang.op',X0) & ! [X27] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',X27))) & s('type.closLang.op','const.closLang.ToList_0') != s('type.closLang.op',X0) & ! [X25,X26] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',X25),s('type.num.num',X26))) & ! [X24] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',X24))) & s('type.closLang.op','const.closLang.BlockCmp_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.IsBlock_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Ref_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Deref_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Update_0') != s('type.closLang.op',X0) & ! [X23] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',X23))) & ! [X22] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',X22))) & s('type.closLang.op','const.closLang.Equal_0') != s('type.closLang.op',X0) & ! [X21] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',X21))) & s('type.closLang.op','const.closLang.Add_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Sub_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Mult_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Div_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Mod_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Less_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.LessEq_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.Greater_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.GreaterEq_0') != s('type.closLang.op',X0) & ! [X19,X20] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',X19),s('type.ast.opw',X20))) & ! [X16,X17,X18] : s('type.closLang.op',X0) != s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',X16),s('type.ast.shift',X17),s('type.num.num',X18))) & s('type.closLang.op','const.closLang.WordFromInt_0') != s('type.closLang.op',X0) & s('type.closLang.op','const.closLang.WordToInt_0') != s('type.closLang.op',X0)))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ((? [X15] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',X15))) | ? [X14] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',X14))) | s('type.closLang.op','const.closLang.AllocGlobal_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.GlobalsPtr_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.SetGlobalsPtr_0') = s('type.closLang.op',X0) | ? [X13] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',X13))) | s('type.closLang.op','const.closLang.El_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.LengthBlock_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Length_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.LengthByte_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.RefByte_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.RefArray_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.DerefByte_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.UpdateByte_0') = s('type.closLang.op',X0) | ? [X12] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',X12))) | s('type.closLang.op','const.closLang.ToList_0') = s('type.closLang.op',X0) | ? [X10,X11] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',X10),s('type.num.num',X11))) | ? [X9] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',X9))) | s('type.closLang.op','const.closLang.BlockCmp_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.IsBlock_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Ref_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Deref_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Update_0') = s('type.closLang.op',X0) | ? [X8] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',X8))) | ? [X7] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',X7))) | s('type.closLang.op','const.closLang.Equal_0') = s('type.closLang.op',X0) | ? [X6] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',X6))) | s('type.closLang.op','const.closLang.Add_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Sub_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Mult_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Div_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Mod_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Less_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.LessEq_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Greater_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.GreaterEq_0') = s('type.closLang.op',X0) | ? [X4,X5] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',X4),s('type.ast.opw',X5))) | ? [X1,X2,X3] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',X1),s('type.ast.shift',X2),s('type.num.num',X3))) | s('type.closLang.op','const.closLang.WordFromInt_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.WordToInt_0') = s('type.closLang.op',X0)) => (? [X30] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',X30))) | ? [X29] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',X29))) | s('type.closLang.op','const.closLang.AllocGlobal_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.GlobalsPtr_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.SetGlobalsPtr_0') = s('type.closLang.op',X0) | ? [X28] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',X28))) | s('type.closLang.op','const.closLang.El_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.LengthBlock_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Length_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.LengthByte_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.RefByte_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.RefArray_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.DerefByte_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.UpdateByte_0') = s('type.closLang.op',X0) | ? [X27] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',X27))) | s('type.closLang.op','const.closLang.ToList_0') = s('type.closLang.op',X0) | ? [X25,X26] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',X25),s('type.num.num',X26))) | ? [X24] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',X24))) | s('type.closLang.op','const.closLang.BlockCmp_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.IsBlock_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Ref_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Deref_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Update_0') = s('type.closLang.op',X0) | ? [X23] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',X23))) | ? [X22] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',X22))) | s('type.closLang.op','const.closLang.Equal_0') = s('type.closLang.op',X0) | ? [X21] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',X21))) | s('type.closLang.op','const.closLang.Add_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Sub_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Mult_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Div_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Mod_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Less_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.LessEq_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.Greater_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.GreaterEq_0') = s('type.closLang.op',X0) | ? [X19,X20] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',X19),s('type.ast.opw',X20))) | ? [X16,X17,X18] : s('type.closLang.op',X0) = s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',X16),s('type.ast.shift',X17),s('type.num.num',X18))) | s('type.closLang.op','const.closLang.WordFromInt_0') = s('type.closLang.op',X0) | s('type.closLang.op','const.closLang.WordToInt_0') = s('type.closLang.op',X0)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',X7))) | ? [X8] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',X8))) | s('type.closLang.op','const.closLang.AllocGlobal_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.GlobalsPtr_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.SetGlobalsPtr_0') = s('type.closLang.op',X6) | ? [X9] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',X9))) | s('type.closLang.op','const.closLang.El_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.LengthBlock_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Length_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.LengthByte_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.RefByte_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.RefArray_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.DerefByte_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.UpdateByte_0') = s('type.closLang.op',X6) | ? [X10] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',X10))) | s('type.closLang.op','const.closLang.ToList_0') = s('type.closLang.op',X6) | ? [X11,X12] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',X11),s('type.num.num',X12))) | ? [X13] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',X13))) | s('type.closLang.op','const.closLang.BlockCmp_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.IsBlock_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Ref_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Deref_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Update_0') = s('type.closLang.op',X6) | ? [X14] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',X14))) | ? [X15] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',X15))) | s('type.closLang.op','const.closLang.Equal_0') = s('type.closLang.op',X6) | ? [X16] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',X16))) | s('type.closLang.op','const.closLang.Add_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Sub_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Mult_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Div_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Mod_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Less_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.LessEq_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Greater_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.GreaterEq_0') = s('type.closLang.op',X6) | ? [X17,X18] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',X17),s('type.ast.opw',X18))) | ? [X19,X20,X21] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',X19),s('type.ast.shift',X20),s('type.num.num',X21))) | s('type.closLang.op','const.closLang.WordFromInt_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.WordToInt_0') = s('type.closLang.op',X6)) => (? [X8] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',X8))) | ? [X7] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',X7))) | s('type.closLang.op','const.closLang.AllocGlobal_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.GlobalsPtr_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.SetGlobalsPtr_0') = s('type.closLang.op',X6) | ? [X9] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',X9))) | s('type.closLang.op','const.closLang.El_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.LengthBlock_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Length_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.LengthByte_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.RefByte_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.RefArray_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.DerefByte_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.UpdateByte_0') = s('type.closLang.op',X6) | ? [X10] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',X10))) | s('type.closLang.op','const.closLang.ToList_0') = s('type.closLang.op',X6) | ? [X11,X12] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',X11),s('type.num.num',X12))) | ? [X13] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',X13))) | s('type.closLang.op','const.closLang.BlockCmp_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.IsBlock_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Ref_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Deref_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Update_0') = s('type.closLang.op',X6) | ? [X14] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',X14))) | ? [X15] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',X15))) | s('type.closLang.op','const.closLang.Equal_0') = s('type.closLang.op',X6) | ? [X16] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',X16))) | s('type.closLang.op','const.closLang.Add_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Sub_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Mult_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Div_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Mod_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Less_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.LessEq_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Greater_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.GreaterEq_0') = s('type.closLang.op',X6) | ? [X17,X18] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',X17),s('type.ast.opw',X18))) | ? [X19,X20,X21] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',X19),s('type.ast.shift',X20),s('type.num.num',X21))) | s('type.closLang.op','const.closLang.WordFromInt_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.WordToInt_0') = s('type.closLang.op',X6)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',X7))) | ? [X8] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',X8))) | s('type.closLang.op','const.closLang.AllocGlobal_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.GlobalsPtr_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.SetGlobalsPtr_0') = s('type.closLang.op',X6) | ? [X9] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',X9))) | s('type.closLang.op','const.closLang.El_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.LengthBlock_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Length_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.LengthByte_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.RefByte_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.RefArray_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.DerefByte_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.UpdateByte_0') = s('type.closLang.op',X6) | ? [X10] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',X10))) | s('type.closLang.op','const.closLang.ToList_0') = s('type.closLang.op',X6) | ? [X11,X12] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',X11),s('type.num.num',X12))) | ? [X13] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',X13))) | s('type.closLang.op','const.closLang.BlockCmp_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.IsBlock_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Ref_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Deref_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Update_0') = s('type.closLang.op',X6) | ? [X14] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',X14))) | ? [X15] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',X15))) | s('type.closLang.op','const.closLang.Equal_0') = s('type.closLang.op',X6) | ? [X16] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',X16))) | s('type.closLang.op','const.closLang.Add_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Sub_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Mult_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Div_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Mod_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Less_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.LessEq_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Greater_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.GreaterEq_0') = s('type.closLang.op',X6) | ? [X17,X18] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',X17),s('type.ast.opw',X18))) | ? [X19,X20,X21] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',X19),s('type.ast.shift',X20),s('type.num.num',X21))) | s('type.closLang.op','const.closLang.WordFromInt_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.WordToInt_0') = s('type.closLang.op',X6)) => (? [X8] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',X8))) | ? [X7] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',X7))) | s('type.closLang.op','const.closLang.AllocGlobal_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.GlobalsPtr_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.SetGlobalsPtr_0') = s('type.closLang.op',X6) | ? [X9] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',X9))) | s('type.closLang.op','const.closLang.El_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.LengthBlock_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Length_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.LengthByte_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.RefByte_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.RefArray_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.DerefByte_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.UpdateByte_0') = s('type.closLang.op',X6) | ? [X10] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',X10))) | s('type.closLang.op','const.closLang.ToList_0') = s('type.closLang.op',X6) | ? [X11,X12] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',X11),s('type.num.num',X12))) | ? [X13] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',X13))) | s('type.closLang.op','const.closLang.BlockCmp_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.IsBlock_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Ref_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Deref_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Update_0') = s('type.closLang.op',X6) | ? [X14] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',X14))) | ? [X15] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',X15))) | s('type.closLang.op','const.closLang.Equal_0') = s('type.closLang.op',X6) | ? [X16] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',X16))) | s('type.closLang.op','const.closLang.Add_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Sub_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Mult_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Div_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Mod_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Less_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.LessEq_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.Greater_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.GreaterEq_0') = s('type.closLang.op',X6) | ? [X17,X18] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',X17),s('type.ast.opw',X18))) | ? [X19,X20,X21] : s('type.closLang.op',X6) = s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',X19),s('type.ast.shift',X20),s('type.num.num',X21))) | s('type.closLang.op','const.closLang.WordFromInt_0') = s('type.closLang.op',X6) | s('type.closLang.op','const.closLang.WordToInt_0') = s('type.closLang.op',X6)))),
  file('thm.clos_knownProof.clos_knownProof_68_prove_ltb','thm.clos_knownProof.clos_knownProof_68_prove_ltb')).
fof(f475,plain,(
  s('type.closLang.op','const.closLang.Ref_0') != s('type.closLang.op',sK12) | $spl41),
  inference(cnf_transformation,[],[f475_D])).
fof(f475_D,plain,(
  s('type.closLang.op','const.closLang.Ref_0') != s('type.closLang.op',sK12) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f244,plain,(
  s('type.closLang.op','const.closLang.Ref_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f495,plain,(
  s('type.closLang.op','const.closLang.Div_0') != s('type.closLang.op',sK12) | $spl61),
  inference(cnf_transformation,[],[f495_D])).
fof(f495_D,plain,(
  s('type.closLang.op','const.closLang.Div_0') != s('type.closLang.op',sK12) <=> ~$spl61),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl61])])).
fof(f254,plain,(
  s('type.closLang.op','const.closLang.Div_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f513,plain,(
  s('type.closLang.op','const.closLang.WordToInt_0') != s('type.closLang.op',sK12) | $spl79),
  inference(cnf_transformation,[],[f513_D])).
fof(f513_D,plain,(
  s('type.closLang.op','const.closLang.WordToInt_0') != s('type.closLang.op',sK12) <=> ~$spl79),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl79])])).
fof(f263,plain,(
  s('type.closLang.op','const.closLang.WordToInt_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f511,plain,(
  s('type.closLang.op','const.closLang.WordFromInt_0') != s('type.closLang.op',sK12) | $spl77),
  inference(cnf_transformation,[],[f511_D])).
fof(f511_D,plain,(
  s('type.closLang.op','const.closLang.WordFromInt_0') != s('type.closLang.op',sK12) <=> ~$spl77),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl77])])).
fof(f262,plain,(
  s('type.closLang.op','const.closLang.WordFromInt_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f501,plain,(
  s('type.closLang.op','const.closLang.LessEq_0') != s('type.closLang.op',sK12) | $spl67),
  inference(cnf_transformation,[],[f501_D])).
fof(f501_D,plain,(
  s('type.closLang.op','const.closLang.LessEq_0') != s('type.closLang.op',sK12) <=> ~$spl67),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl67])])).
fof(f257,plain,(
  s('type.closLang.op','const.closLang.LessEq_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f505,plain,(
  s('type.closLang.op','const.closLang.GreaterEq_0') != s('type.closLang.op',sK12) | $spl71),
  inference(cnf_transformation,[],[f505_D])).
fof(f505_D,plain,(
  s('type.closLang.op','const.closLang.GreaterEq_0') != s('type.closLang.op',sK12) <=> ~$spl71),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl71])])).
fof(f259,plain,(
  s('type.closLang.op','const.closLang.GreaterEq_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f497,plain,(
  s('type.closLang.op','const.closLang.Mod_0') != s('type.closLang.op',sK12) | $spl63),
  inference(cnf_transformation,[],[f497_D])).
fof(f497_D,plain,(
  s('type.closLang.op','const.closLang.Mod_0') != s('type.closLang.op',sK12) <=> ~$spl63),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl63])])).
fof(f255,plain,(
  s('type.closLang.op','const.closLang.Mod_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f526,plain,(
  $false | $spl52),
  inference(subsumption_resolution,[],[f488,f250])).
fof(f250,plain,(
  ( ! [X6] : (s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',X6)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f1100,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f468,f240])).
fof(f240,plain,(
  ( ! [X10,X11] : (s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',X10),s('type.num.num',X11)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f491,plain,(
  s('type.closLang.op','const.closLang.Sub_0') != s('type.closLang.op',sK12) | $spl57),
  inference(cnf_transformation,[],[f491_D])).
fof(f491_D,plain,(
  s('type.closLang.op','const.closLang.Sub_0') != s('type.closLang.op',sK12) <=> ~$spl57),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl57])])).
fof(f252,plain,(
  s('type.closLang.op','const.closLang.Sub_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f489,plain,(
  s('type.closLang.op','const.closLang.Add_0') != s('type.closLang.op',sK12) | $spl55),
  inference(cnf_transformation,[],[f489_D])).
fof(f489_D,plain,(
  s('type.closLang.op','const.closLang.Add_0') != s('type.closLang.op',sK12) <=> ~$spl55),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl55])])).
fof(f251,plain,(
  s('type.closLang.op','const.closLang.Add_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f493,plain,(
  s('type.closLang.op','const.closLang.Mult_0') != s('type.closLang.op',sK12) | $spl59),
  inference(cnf_transformation,[],[f493_D])).
fof(f493_D,plain,(
  s('type.closLang.op','const.closLang.Mult_0') != s('type.closLang.op',sK12) <=> ~$spl59),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl59])])).
fof(f253,plain,(
  s('type.closLang.op','const.closLang.Mult_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f485,plain,(
  s('type.closLang.op','const.closLang.Equal_0') != s('type.closLang.op',sK12) | $spl51),
  inference(cnf_transformation,[],[f485_D])).
fof(f485_D,plain,(
  s('type.closLang.op','const.closLang.Equal_0') != s('type.closLang.op',sK12) <=> ~$spl51),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl51])])).
fof(f249,plain,(
  s('type.closLang.op','const.closLang.Equal_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f1101,plain,(
  $false | $spl34),
  inference(subsumption_resolution,[],[f470,f241])).
fof(f241,plain,(
  ( ! [X9] : (s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',X9)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f1958,plain,(
  $false | $spl74),
  inference(subsumption_resolution,[],[f510,f261])).
fof(f261,plain,(
  ( ! [X2,X3,X1] : (s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',X1),s('type.ast.shift',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f479,plain,(
  s('type.closLang.op','const.closLang.Update_0') != s('type.closLang.op',sK12) | $spl45),
  inference(cnf_transformation,[],[f479_D])).
fof(f479_D,plain,(
  s('type.closLang.op','const.closLang.Update_0') != s('type.closLang.op',sK12) <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f246,plain,(
  s('type.closLang.op','const.closLang.Update_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f477,plain,(
  s('type.closLang.op','const.closLang.Deref_0') != s('type.closLang.op',sK12) | $spl43),
  inference(cnf_transformation,[],[f477_D])).
fof(f477_D,plain,(
  s('type.closLang.op','const.closLang.Deref_0') != s('type.closLang.op',sK12) <=> ~$spl43),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl43])])).
fof(f245,plain,(
  s('type.closLang.op','const.closLang.Deref_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f503,plain,(
  s('type.closLang.op','const.closLang.Greater_0') != s('type.closLang.op',sK12) | $spl69),
  inference(cnf_transformation,[],[f503_D])).
fof(f503_D,plain,(
  s('type.closLang.op','const.closLang.Greater_0') != s('type.closLang.op',sK12) <=> ~$spl69),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl69])])).
fof(f258,plain,(
  s('type.closLang.op','const.closLang.Greater_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f473,plain,(
  s('type.closLang.op','const.closLang.IsBlock_0') != s('type.closLang.op',sK12) | $spl39),
  inference(cnf_transformation,[],[f473_D])).
fof(f473_D,plain,(
  s('type.closLang.op','const.closLang.IsBlock_0') != s('type.closLang.op',sK12) <=> ~$spl39),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl39])])).
fof(f243,plain,(
  s('type.closLang.op','const.closLang.IsBlock_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f471,plain,(
  s('type.closLang.op','const.closLang.BlockCmp_0') != s('type.closLang.op',sK12) | $spl37),
  inference(cnf_transformation,[],[f471_D])).
fof(f471_D,plain,(
  s('type.closLang.op','const.closLang.BlockCmp_0') != s('type.closLang.op',sK12) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f242,plain,(
  s('type.closLang.op','const.closLang.BlockCmp_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f1959,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f438,f224])).
fof(f224,plain,(
  ( ! [X15] : (s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',X15)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f1960,plain,(
  $false | $spl28),
  inference(subsumption_resolution,[],[f464,f238])).
fof(f238,plain,(
  ( ! [X12] : (s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',X12)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f465,plain,(
  s('type.closLang.op','const.closLang.ToList_0') != s('type.closLang.op',sK12) | $spl31),
  inference(cnf_transformation,[],[f465_D])).
fof(f465_D,plain,(
  s('type.closLang.op','const.closLang.ToList_0') != s('type.closLang.op',sK12) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f239,plain,(
  s('type.closLang.op','const.closLang.ToList_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f499,plain,(
  s('type.closLang.op','const.closLang.Less_0') != s('type.closLang.op',sK12) | $spl65),
  inference(cnf_transformation,[],[f499_D])).
fof(f499_D,plain,(
  s('type.closLang.op','const.closLang.Less_0') != s('type.closLang.op',sK12) <=> ~$spl65),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl65])])).
fof(f256,plain,(
  s('type.closLang.op','const.closLang.Less_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f461,plain,(
  s('type.closLang.op','const.closLang.UpdateByte_0') != s('type.closLang.op',sK12) | $spl27),
  inference(cnf_transformation,[],[f461_D])).
fof(f461_D,plain,(
  s('type.closLang.op','const.closLang.UpdateByte_0') != s('type.closLang.op',sK12) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f237,plain,(
  s('type.closLang.op','const.closLang.UpdateByte_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f459,plain,(
  s('type.closLang.op','const.closLang.DerefByte_0') != s('type.closLang.op',sK12) | $spl25),
  inference(cnf_transformation,[],[f459_D])).
fof(f459_D,plain,(
  s('type.closLang.op','const.closLang.DerefByte_0') != s('type.closLang.op',sK12) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f236,plain,(
  s('type.closLang.op','const.closLang.DerefByte_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f457,plain,(
  s('type.closLang.op','const.closLang.RefArray_0') != s('type.closLang.op',sK12) | $spl23),
  inference(cnf_transformation,[],[f457_D])).
fof(f457_D,plain,(
  s('type.closLang.op','const.closLang.RefArray_0') != s('type.closLang.op',sK12) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f235,plain,(
  s('type.closLang.op','const.closLang.RefArray_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f455,plain,(
  s('type.closLang.op','const.closLang.RefByte_0') != s('type.closLang.op',sK12) | $spl21),
  inference(cnf_transformation,[],[f455_D])).
fof(f455_D,plain,(
  s('type.closLang.op','const.closLang.RefByte_0') != s('type.closLang.op',sK12) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f234,plain,(
  s('type.closLang.op','const.closLang.RefByte_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f453,plain,(
  s('type.closLang.op','const.closLang.LengthByte_0') != s('type.closLang.op',sK12) | $spl19),
  inference(cnf_transformation,[],[f453_D])).
fof(f453_D,plain,(
  s('type.closLang.op','const.closLang.LengthByte_0') != s('type.closLang.op',sK12) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f233,plain,(
  s('type.closLang.op','const.closLang.LengthByte_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f451,plain,(
  s('type.closLang.op','const.closLang.Length_0') != s('type.closLang.op',sK12) | $spl17),
  inference(cnf_transformation,[],[f451_D])).
fof(f451_D,plain,(
  s('type.closLang.op','const.closLang.Length_0') != s('type.closLang.op',sK12) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f232,plain,(
  s('type.closLang.op','const.closLang.Length_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f449,plain,(
  s('type.closLang.op','const.closLang.LengthBlock_0') != s('type.closLang.op',sK12) | $spl15),
  inference(cnf_transformation,[],[f449_D])).
fof(f449_D,plain,(
  s('type.closLang.op','const.closLang.LengthBlock_0') != s('type.closLang.op',sK12) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f231,plain,(
  s('type.closLang.op','const.closLang.LengthBlock_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f447,plain,(
  s('type.closLang.op','const.closLang.El_0') != s('type.closLang.op',sK12) | $spl13),
  inference(cnf_transformation,[],[f447_D])).
fof(f447_D,plain,(
  s('type.closLang.op','const.closLang.El_0') != s('type.closLang.op',sK12) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f230,plain,(
  s('type.closLang.op','const.closLang.El_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f1961,plain,(
  $false | $spl48),
  inference(subsumption_resolution,[],[f484,f248])).
fof(f248,plain,(
  ( ! [X7] : (s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',X7)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f443,plain,(
  s('type.closLang.op','const.closLang.SetGlobalsPtr_0') != s('type.closLang.op',sK12) | $spl9),
  inference(cnf_transformation,[],[f443_D])).
fof(f443_D,plain,(
  s('type.closLang.op','const.closLang.SetGlobalsPtr_0') != s('type.closLang.op',sK12) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f228,plain,(
  s('type.closLang.op','const.closLang.SetGlobalsPtr_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f441,plain,(
  s('type.closLang.op','const.closLang.GlobalsPtr_0') != s('type.closLang.op',sK12) | $spl7),
  inference(cnf_transformation,[],[f441_D])).
fof(f441_D,plain,(
  s('type.closLang.op','const.closLang.GlobalsPtr_0') != s('type.closLang.op',sK12) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f227,plain,(
  s('type.closLang.op','const.closLang.GlobalsPtr_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f439,plain,(
  s('type.closLang.op','const.closLang.AllocGlobal_0') != s('type.closLang.op',sK12) | $spl5),
  inference(cnf_transformation,[],[f439_D])).
fof(f439_D,plain,(
  s('type.closLang.op','const.closLang.AllocGlobal_0') != s('type.closLang.op',sK12) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f226,plain,(
  s('type.closLang.op','const.closLang.AllocGlobal_0') != s('type.closLang.op',sK12)),
  inference(cnf_transformation,[],[f138])).
fof(f1962,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f436,f225])).
fof(f225,plain,(
  ( ! [X14] : (s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',X14)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f1963,plain,(
  $false | $spl72),
  inference(subsumption_resolution,[],[f508,f260])).
fof(f260,plain,(
  ( ! [X4,X5] : (s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',X4),s('type.ast.opw',X5)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f436,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',sK13))) | $spl0),
  inference(cnf_transformation,[],[f436_D])).
fof(f436_D,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',sK13))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f438,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',sK14))) | $spl2),
  inference(cnf_transformation,[],[f438_D])).
fof(f438_D,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',sK14))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f440,plain,(
  s('type.closLang.op','const.closLang.AllocGlobal_0') = s('type.closLang.op',sK12) | $spl4),
  inference(cnf_transformation,[],[f440_D])).
fof(f440_D,plain,(
  s('type.closLang.op','const.closLang.AllocGlobal_0') = s('type.closLang.op',sK12) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f442,plain,(
  s('type.closLang.op','const.closLang.GlobalsPtr_0') = s('type.closLang.op',sK12) | $spl6),
  inference(cnf_transformation,[],[f442_D])).
fof(f442_D,plain,(
  s('type.closLang.op','const.closLang.GlobalsPtr_0') = s('type.closLang.op',sK12) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f444,plain,(
  s('type.closLang.op','const.closLang.SetGlobalsPtr_0') = s('type.closLang.op',sK12) | $spl8),
  inference(cnf_transformation,[],[f444_D])).
fof(f444_D,plain,(
  s('type.closLang.op','const.closLang.SetGlobalsPtr_0') = s('type.closLang.op',sK12) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f446,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',sK15))) | $spl10),
  inference(cnf_transformation,[],[f446_D])).
fof(f446_D,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',sK15))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f448,plain,(
  s('type.closLang.op','const.closLang.El_0') = s('type.closLang.op',sK12) | $spl12),
  inference(cnf_transformation,[],[f448_D])).
fof(f448_D,plain,(
  s('type.closLang.op','const.closLang.El_0') = s('type.closLang.op',sK12) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f450,plain,(
  s('type.closLang.op','const.closLang.LengthBlock_0') = s('type.closLang.op',sK12) | $spl14),
  inference(cnf_transformation,[],[f450_D])).
fof(f450_D,plain,(
  s('type.closLang.op','const.closLang.LengthBlock_0') = s('type.closLang.op',sK12) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f452,plain,(
  s('type.closLang.op','const.closLang.Length_0') = s('type.closLang.op',sK12) | $spl16),
  inference(cnf_transformation,[],[f452_D])).
fof(f452_D,plain,(
  s('type.closLang.op','const.closLang.Length_0') = s('type.closLang.op',sK12) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f454,plain,(
  s('type.closLang.op','const.closLang.LengthByte_0') = s('type.closLang.op',sK12) | $spl18),
  inference(cnf_transformation,[],[f454_D])).
fof(f454_D,plain,(
  s('type.closLang.op','const.closLang.LengthByte_0') = s('type.closLang.op',sK12) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f456,plain,(
  s('type.closLang.op','const.closLang.RefByte_0') = s('type.closLang.op',sK12) | $spl20),
  inference(cnf_transformation,[],[f456_D])).
fof(f456_D,plain,(
  s('type.closLang.op','const.closLang.RefByte_0') = s('type.closLang.op',sK12) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f458,plain,(
  s('type.closLang.op','const.closLang.RefArray_0') = s('type.closLang.op',sK12) | $spl22),
  inference(cnf_transformation,[],[f458_D])).
fof(f458_D,plain,(
  s('type.closLang.op','const.closLang.RefArray_0') = s('type.closLang.op',sK12) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f460,plain,(
  s('type.closLang.op','const.closLang.DerefByte_0') = s('type.closLang.op',sK12) | $spl24),
  inference(cnf_transformation,[],[f460_D])).
fof(f460_D,plain,(
  s('type.closLang.op','const.closLang.DerefByte_0') = s('type.closLang.op',sK12) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f462,plain,(
  s('type.closLang.op','const.closLang.UpdateByte_0') = s('type.closLang.op',sK12) | $spl26),
  inference(cnf_transformation,[],[f462_D])).
fof(f462_D,plain,(
  s('type.closLang.op','const.closLang.UpdateByte_0') = s('type.closLang.op',sK12) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f464,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',sK16))) | $spl28),
  inference(cnf_transformation,[],[f464_D])).
fof(f464_D,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',sK16))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f466,plain,(
  s('type.closLang.op','const.closLang.ToList_0') = s('type.closLang.op',sK12) | $spl30),
  inference(cnf_transformation,[],[f466_D])).
fof(f466_D,plain,(
  s('type.closLang.op','const.closLang.ToList_0') = s('type.closLang.op',sK12) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f468,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',sK17),s('type.num.num',sK18))) | $spl32),
  inference(cnf_transformation,[],[f468_D])).
fof(f468_D,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',sK17),s('type.num.num',sK18))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f470,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',sK19))) | $spl34),
  inference(cnf_transformation,[],[f470_D])).
fof(f470_D,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',sK19))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f472,plain,(
  s('type.closLang.op','const.closLang.BlockCmp_0') = s('type.closLang.op',sK12) | $spl36),
  inference(cnf_transformation,[],[f472_D])).
fof(f472_D,plain,(
  s('type.closLang.op','const.closLang.BlockCmp_0') = s('type.closLang.op',sK12) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f474,plain,(
  s('type.closLang.op','const.closLang.IsBlock_0') = s('type.closLang.op',sK12) | $spl38),
  inference(cnf_transformation,[],[f474_D])).
fof(f474_D,plain,(
  s('type.closLang.op','const.closLang.IsBlock_0') = s('type.closLang.op',sK12) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f476,plain,(
  s('type.closLang.op','const.closLang.Ref_0') = s('type.closLang.op',sK12) | $spl40),
  inference(cnf_transformation,[],[f476_D])).
fof(f476_D,plain,(
  s('type.closLang.op','const.closLang.Ref_0') = s('type.closLang.op',sK12) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f478,plain,(
  s('type.closLang.op','const.closLang.Deref_0') = s('type.closLang.op',sK12) | $spl42),
  inference(cnf_transformation,[],[f478_D])).
fof(f478_D,plain,(
  s('type.closLang.op','const.closLang.Deref_0') = s('type.closLang.op',sK12) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f480,plain,(
  s('type.closLang.op','const.closLang.Update_0') = s('type.closLang.op',sK12) | $spl44),
  inference(cnf_transformation,[],[f480_D])).
fof(f480_D,plain,(
  s('type.closLang.op','const.closLang.Update_0') = s('type.closLang.op',sK12) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f482,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',sK20))) | $spl46),
  inference(cnf_transformation,[],[f482_D])).
fof(f482_D,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',sK20))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f484,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',sK21))) | $spl48),
  inference(cnf_transformation,[],[f484_D])).
fof(f484_D,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',sK21))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f486,plain,(
  s('type.closLang.op','const.closLang.Equal_0') = s('type.closLang.op',sK12) | $spl50),
  inference(cnf_transformation,[],[f486_D])).
fof(f486_D,plain,(
  s('type.closLang.op','const.closLang.Equal_0') = s('type.closLang.op',sK12) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f488,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',sK22))) | $spl52),
  inference(cnf_transformation,[],[f488_D])).
fof(f488_D,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',sK22))) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f490,plain,(
  s('type.closLang.op','const.closLang.Add_0') = s('type.closLang.op',sK12) | $spl54),
  inference(cnf_transformation,[],[f490_D])).
fof(f490_D,plain,(
  s('type.closLang.op','const.closLang.Add_0') = s('type.closLang.op',sK12) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f492,plain,(
  s('type.closLang.op','const.closLang.Sub_0') = s('type.closLang.op',sK12) | $spl56),
  inference(cnf_transformation,[],[f492_D])).
fof(f492_D,plain,(
  s('type.closLang.op','const.closLang.Sub_0') = s('type.closLang.op',sK12) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f494,plain,(
  s('type.closLang.op','const.closLang.Mult_0') = s('type.closLang.op',sK12) | $spl58),
  inference(cnf_transformation,[],[f494_D])).
fof(f494_D,plain,(
  s('type.closLang.op','const.closLang.Mult_0') = s('type.closLang.op',sK12) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f496,plain,(
  s('type.closLang.op','const.closLang.Div_0') = s('type.closLang.op',sK12) | $spl60),
  inference(cnf_transformation,[],[f496_D])).
fof(f496_D,plain,(
  s('type.closLang.op','const.closLang.Div_0') = s('type.closLang.op',sK12) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f498,plain,(
  s('type.closLang.op','const.closLang.Mod_0') = s('type.closLang.op',sK12) | $spl62),
  inference(cnf_transformation,[],[f498_D])).
fof(f498_D,plain,(
  s('type.closLang.op','const.closLang.Mod_0') = s('type.closLang.op',sK12) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f500,plain,(
  s('type.closLang.op','const.closLang.Less_0') = s('type.closLang.op',sK12) | $spl64),
  inference(cnf_transformation,[],[f500_D])).
fof(f500_D,plain,(
  s('type.closLang.op','const.closLang.Less_0') = s('type.closLang.op',sK12) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f502,plain,(
  s('type.closLang.op','const.closLang.LessEq_0') = s('type.closLang.op',sK12) | $spl66),
  inference(cnf_transformation,[],[f502_D])).
fof(f502_D,plain,(
  s('type.closLang.op','const.closLang.LessEq_0') = s('type.closLang.op',sK12) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f504,plain,(
  s('type.closLang.op','const.closLang.Greater_0') = s('type.closLang.op',sK12) | $spl68),
  inference(cnf_transformation,[],[f504_D])).
fof(f504_D,plain,(
  s('type.closLang.op','const.closLang.Greater_0') = s('type.closLang.op',sK12) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f506,plain,(
  s('type.closLang.op','const.closLang.GreaterEq_0') = s('type.closLang.op',sK12) | $spl70),
  inference(cnf_transformation,[],[f506_D])).
fof(f506_D,plain,(
  s('type.closLang.op','const.closLang.GreaterEq_0') = s('type.closLang.op',sK12) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f508,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',sK23),s('type.ast.opw',sK24))) | $spl72),
  inference(cnf_transformation,[],[f508_D])).
fof(f508_D,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',sK23),s('type.ast.opw',sK24))) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f510,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',sK25),s('type.ast.shift',sK26),s('type.num.num',sK27))) | $spl74),
  inference(cnf_transformation,[],[f510_D])).
fof(f510_D,plain,(
  s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',sK25),s('type.ast.shift',sK26),s('type.num.num',sK27))) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f512,plain,(
  s('type.closLang.op','const.closLang.WordFromInt_0') = s('type.closLang.op',sK12) | $spl76),
  inference(cnf_transformation,[],[f512_D])).
fof(f512_D,plain,(
  s('type.closLang.op','const.closLang.WordFromInt_0') = s('type.closLang.op',sK12) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f514,plain,(
  s('type.closLang.op','const.closLang.WordToInt_0') = s('type.closLang.op',sK12) | $spl78),
  inference(cnf_transformation,[],[f514_D])).
fof(f514_D,plain,(
  s('type.closLang.op','const.closLang.WordToInt_0') = s('type.closLang.op',sK12) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f223,plain,(
  s('type.closLang.op','const.closLang.WordToInt_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.WordFromInt_0') = s('type.closLang.op',sK12) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.WordShift_3'(s('type.ast.word_size',sK25),s('type.ast.shift',sK26),s('type.num.num',sK27))) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.WordOp_2'(s('type.ast.word_size',sK23),s('type.ast.opw',sK24))) | s('type.closLang.op','const.closLang.GreaterEq_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Greater_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.LessEq_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Less_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Mod_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Div_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Mult_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Sub_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Add_0') = s('type.closLang.op',sK12) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.Const_1'(s('type.integer.int',sK22))) | s('type.closLang.op','const.closLang.Equal_0') = s('type.closLang.op',sK12) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.FFI_1'(s('type.num.num',sK21))) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.Label_1'(s('type.num.num',sK20))) | s('type.closLang.op','const.closLang.Update_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Deref_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Ref_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.IsBlock_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.BlockCmp_0') = s('type.closLang.op',sK12) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.TagEq_1'(s('type.num.num',sK19))) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.TagLenEq_2'(s('type.num.num',sK17),s('type.num.num',sK18))) | s('type.closLang.op','const.closLang.ToList_0') = s('type.closLang.op',sK12) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.FromList_1'(s('type.num.num',sK16))) | s('type.closLang.op','const.closLang.UpdateByte_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.DerefByte_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.RefArray_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.RefByte_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.LengthByte_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.Length_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.LengthBlock_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.El_0') = s('type.closLang.op',sK12) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',sK15))) | s('type.closLang.op','const.closLang.SetGlobalsPtr_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.GlobalsPtr_0') = s('type.closLang.op',sK12) | s('type.closLang.op','const.closLang.AllocGlobal_0') = s('type.closLang.op',sK12) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.SetGlobal_1'(s('type.num.num',sK14))) | s('type.closLang.op',sK12) = s('type.closLang.op','const.closLang.Global_1'(s('type.num.num',sK13)))),
  inference(cnf_transformation,[],[f138])).
fof(f1965,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f446,f229])).
fof(f229,plain,(
  ( ! [X13] : (s('type.closLang.op',sK12) != s('type.closLang.op','const.closLang.Cons_1'(s('type.num.num',X13)))) )),
  inference(cnf_transformation,[],[f138])).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 213
% Passive clauses: 622
% Generated clauses: 1708
% Final active clauses: 213
% Final passive clauses: 331
% Input formulas: 37
% Initial clauses: 208
% 
% Duplicate literals: 45
% Trivial inequalities: 13
% Fw subsumption resolutions: 132
% 
% Simple tautologies: 78
% Equational tautologies: 8
% Forward subsumptions: 780
% 
% Binary resolution: 928
% Factoring: 197
% Forward superposition: 50
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 39
% Split components: 117
% SAT solver clauses: 108
% SAT solver unit clauses: 44
% SAT solver binary clauses: 25
% SAT solver learnt clauses: 1
% 
% Sat splits: 39
% Sat splitting refutations: 11
% 
% TWLsolver clauses: 107
% TWLsolver calls for satisfiability: 87
% 
% Memory used [KB]: 1407
% Time elapsed: 0.039 s
% ------------------------------
% ------------------------------
% Success in time 0.041 s
