Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.BankersQueue
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BankersQueue
% SZS output start Proof for thm.BankersQueue
fof(f4016,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4015,f224,f401,f399,f4014])).
fof(f4014,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f401,f225])).
fof(f225,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.BankersQueue.queue'(sK12),sK13) != s('type.BankersQueue.queue'(sK12),'const.BankersQueue.QUEUE_4'(s('type.num.num',X5),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X6),s('type.list.list'(sK12),X7))),s('type.num.num',X8),s('type.list.list'(sK12),X9)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.BankersQueue.queue'(sK12),sK13) = s('type.BankersQueue.queue'(sK12),'const.BankersQueue.QUEUE_4'(s('type.num.num',sK14),s('type.list.list'(sK12),'const.list.NIL_0'),s('type.num.num',sK15),s('type.list.list'(sK12),sK16))) | s('type.BankersQueue.queue'(sK12),sK13) = s('type.BankersQueue.queue'(sK12),'const.BankersQueue.QUEUE_4'(s('type.num.num',sK17),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK18),s('type.list.list'(sK12),sK19))),s('type.num.num',sK20),s('type.list.list'(sK12),sK21)))) & ! [X5,X6,X7,X8,X9] : s('type.BankersQueue.queue'(sK12),sK13) != s('type.BankersQueue.queue'(sK12),'const.BankersQueue.QUEUE_4'(s('type.num.num',X5),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X6),s('type.list.list'(sK12),X7))),s('type.num.num',X8),s('type.list.list'(sK12),X9))) & ! [X2,X3,X4] : s('type.BankersQueue.queue'(sK12),sK13) != s('type.BankersQueue.queue'(sK12),'const.BankersQueue.QUEUE_4'(s('type.num.num',X2),s('type.list.list'(sK12),'const.list.NIL_0'),s('type.num.num',X3),s('type.list.list'(sK12),X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21])],[f138])).
fof(f138,plain,(
  ? [X0,X1] : ((? [X15,X16,X17] : s('type.BankersQueue.queue'(X0),X1) = s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X15),s('type.list.list'(X0),'const.list.NIL_0'),s('type.num.num',X16),s('type.list.list'(X0),X17))) | ? [X10,X11,X12,X13,X14] : s('type.BankersQueue.queue'(X0),X1) = s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X12))),s('type.num.num',X13),s('type.list.list'(X0),X14)))) & ! [X5,X6,X7,X8,X9] : s('type.BankersQueue.queue'(X0),X1) != s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X7))),s('type.num.num',X8),s('type.list.list'(X0),X9))) & ! [X2,X3,X4] : s('type.BankersQueue.queue'(X0),X1) != s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X2),s('type.list.list'(X0),'const.list.NIL_0'),s('type.num.num',X3),s('type.list.list'(X0),X4))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1] : ((? [X7,X8,X9] : s('type.BankersQueue.queue'(X0),X1) = s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X7),s('type.list.list'(X0),'const.list.NIL_0'),s('type.num.num',X8),s('type.list.list'(X0),X9))) | ? [X2,X3,X4,X5,X6] : s('type.BankersQueue.queue'(X0),X1) = s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s('type.num.num',X5),s('type.list.list'(X0),X6)))) & ! [X13,X14,X15,X16,X17] : s('type.BankersQueue.queue'(X0),X1) != s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),X15))),s('type.num.num',X16),s('type.list.list'(X0),X17))) & ! [X10,X11,X12] : s('type.BankersQueue.queue'(X0),X1) != s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X10),s('type.list.list'(X0),'const.list.NIL_0'),s('type.num.num',X11),s('type.list.list'(X0),X12))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ? [X0,X1] : ((? [X7,X8,X9] : s('type.BankersQueue.queue'(X0),X1) = s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X7),s('type.list.list'(X0),'const.list.NIL_0'),s('type.num.num',X8),s('type.list.list'(X0),X9))) | ? [X2,X3,X4,X5,X6] : s('type.BankersQueue.queue'(X0),X1) = s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s('type.num.num',X5),s('type.list.list'(X0),X6)))) & (! [X13,X14,X15,X16,X17] : s('type.BankersQueue.queue'(X0),X1) != s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),X15))),s('type.num.num',X16),s('type.list.list'(X0),X17))) & ! [X10,X11,X12] : s('type.BankersQueue.queue'(X0),X1) != s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X10),s('type.list.list'(X0),'const.list.NIL_0'),s('type.num.num',X11),s('type.list.list'(X0),X12)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((? [X7,X8,X9] : s('type.BankersQueue.queue'(X0),X1) = s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X7),s('type.list.list'(X0),'const.list.NIL_0'),s('type.num.num',X8),s('type.list.list'(X0),X9))) | ? [X2,X3,X4,X5,X6] : s('type.BankersQueue.queue'(X0),X1) = s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s('type.num.num',X5),s('type.list.list'(X0),X6)))) => (? [X13,X14,X15,X16,X17] : s('type.BankersQueue.queue'(X0),X1) = s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),X15))),s('type.num.num',X16),s('type.list.list'(X0),X17))) | ? [X10,X11,X12] : s('type.BankersQueue.queue'(X0),X1) = s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X10),s('type.list.list'(X0),'const.list.NIL_0'),s('type.num.num',X11),s('type.list.list'(X0),X12)))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((? [X7,X8,X9] : s('type.BankersQueue.queue'(X0),X1) = s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X7),s('type.list.list'(X0),'const.list.NIL_0'),s('type.num.num',X8),s('type.list.list'(X0),X9))) | ? [X2,X3,X4,X5,X6] : s('type.BankersQueue.queue'(X0),X1) = s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s('type.num.num',X5),s('type.list.list'(X0),X6)))) => (? [X13,X14,X15,X16,X17] : s('type.BankersQueue.queue'(X0),X1) = s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),X15))),s('type.num.num',X16),s('type.list.list'(X0),X17))) | ? [X10,X11,X12] : s('type.BankersQueue.queue'(X0),X1) = s('type.BankersQueue.queue'(X0),'const.BankersQueue.QUEUE_4'(s('type.num.num',X10),s('type.list.list'(X0),'const.list.NIL_0'),s('type.num.num',X11),s('type.list.list'(X0),X12)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((? [X8,X9,X10] : s('type.BankersQueue.queue'(X6),X7) = s('type.BankersQueue.queue'(X6),'const.BankersQueue.QUEUE_4'(s('type.num.num',X8),s('type.list.list'(X6),'const.list.NIL_0'),s('type.num.num',X9),s('type.list.list'(X6),X10))) | ? [X11,X12,X13,X14,X15] : s('type.BankersQueue.queue'(X6),X7) = s('type.BankersQueue.queue'(X6),'const.BankersQueue.QUEUE_4'(s('type.num.num',X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),X13))),s('type.num.num',X14),s('type.list.list'(X6),X15)))) => (? [X11,X12,X13,X14,X15] : s('type.BankersQueue.queue'(X6),X7) = s('type.BankersQueue.queue'(X6),'const.BankersQueue.QUEUE_4'(s('type.num.num',X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),X13))),s('type.num.num',X14),s('type.list.list'(X6),X15))) | ? [X8,X9,X10] : s('type.BankersQueue.queue'(X6),X7) = s('type.BankersQueue.queue'(X6),'const.BankersQueue.QUEUE_4'(s('type.num.num',X8),s('type.list.list'(X6),'const.list.NIL_0'),s('type.num.num',X9),s('type.list.list'(X6),X10)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((? [X8,X9,X10] : s('type.BankersQueue.queue'(X6),X7) = s('type.BankersQueue.queue'(X6),'const.BankersQueue.QUEUE_4'(s('type.num.num',X8),s('type.list.list'(X6),'const.list.NIL_0'),s('type.num.num',X9),s('type.list.list'(X6),X10))) | ? [X11,X12,X13,X14,X15] : s('type.BankersQueue.queue'(X6),X7) = s('type.BankersQueue.queue'(X6),'const.BankersQueue.QUEUE_4'(s('type.num.num',X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),X13))),s('type.num.num',X14),s('type.list.list'(X6),X15)))) => (? [X11,X12,X13,X14,X15] : s('type.BankersQueue.queue'(X6),X7) = s('type.BankersQueue.queue'(X6),'const.BankersQueue.QUEUE_4'(s('type.num.num',X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),X13))),s('type.num.num',X14),s('type.list.list'(X6),X15))) | ? [X8,X9,X10] : s('type.BankersQueue.queue'(X6),X7) = s('type.BankersQueue.queue'(X6),'const.BankersQueue.QUEUE_4'(s('type.num.num',X8),s('type.list.list'(X6),'const.list.NIL_0'),s('type.num.num',X9),s('type.list.list'(X6),X10)))))),
  file('thm.BankersQueue.BankersQueue_43_prove_ltb','thm.BankersQueue.BankersQueue_43_prove_ltb')).
fof(f399,plain,(
  s('type.BankersQueue.queue'(sK12),sK13) = s('type.BankersQueue.queue'(sK12),'const.BankersQueue.QUEUE_4'(s('type.num.num',sK14),s('type.list.list'(sK12),'const.list.NIL_0'),s('type.num.num',sK15),s('type.list.list'(sK12),sK16))) | $spl0),
  inference(cnf_transformation,[],[f399_D])).
fof(f399_D,plain,(
  s('type.BankersQueue.queue'(sK12),sK13) = s('type.BankersQueue.queue'(sK12),'const.BankersQueue.QUEUE_4'(s('type.num.num',sK14),s('type.list.list'(sK12),'const.list.NIL_0'),s('type.num.num',sK15),s('type.list.list'(sK12),sK16))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f401,plain,(
  s('type.BankersQueue.queue'(sK12),sK13) = s('type.BankersQueue.queue'(sK12),'const.BankersQueue.QUEUE_4'(s('type.num.num',sK17),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK18),s('type.list.list'(sK12),sK19))),s('type.num.num',sK20),s('type.list.list'(sK12),sK21))) | $spl2),
  inference(cnf_transformation,[],[f401_D])).
fof(f401_D,plain,(
  s('type.BankersQueue.queue'(sK12),sK13) = s('type.BankersQueue.queue'(sK12),'const.BankersQueue.QUEUE_4'(s('type.num.num',sK17),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK18),s('type.list.list'(sK12),sK19))),s('type.num.num',sK20),s('type.list.list'(sK12),sK21))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f224,plain,(
  s('type.BankersQueue.queue'(sK12),sK13) = s('type.BankersQueue.queue'(sK12),'const.BankersQueue.QUEUE_4'(s('type.num.num',sK17),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK18),s('type.list.list'(sK12),sK19))),s('type.num.num',sK20),s('type.list.list'(sK12),sK21))) | s('type.BankersQueue.queue'(sK12),sK13) = s('type.BankersQueue.queue'(sK12),'const.BankersQueue.QUEUE_4'(s('type.num.num',sK14),s('type.list.list'(sK12),'const.list.NIL_0'),s('type.num.num',sK15),s('type.list.list'(sK12),sK16)))),
  inference(cnf_transformation,[],[f139])).
fof(f4015,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f399,f226])).
fof(f226,plain,(
  ( ! [X4,X2,X3] : (s('type.BankersQueue.queue'(sK12),sK13) != s('type.BankersQueue.queue'(sK12),'const.BankersQueue.QUEUE_4'(s('type.num.num',X2),s('type.list.list'(sK12),'const.list.NIL_0'),s('type.num.num',X3),s('type.list.list'(sK12),X4)))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.BankersQueue
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 304
% Passive clauses: 1208
% Generated clauses: 3785
% Final active clauses: 304
% Final passive clauses: 758
% Input formulas: 37
% Initial clauses: 170
% 
% Duplicate literals: 139
% Trivial inequalities: 13
% Fw subsumption resolutions: 248
% 
% Simple tautologies: 129
% Equational tautologies: 20
% Forward subsumptions: 2027
% 
% Binary resolution: 2299
% Factoring: 706
% Forward superposition: 108
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 78
% Split components: 157
% SAT solver clauses: 154
% SAT solver unit clauses: 8
% SAT solver binary clauses: 30
% SAT solver learnt clauses: 1
% 
% Sat splits: 78
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 153
% TWLsolver calls for satisfiability: 133
% 
% Memory used [KB]: 1918
% Time elapsed: 0.057 s
% ------------------------------
% ------------------------------
% Success in time 0.07 s
