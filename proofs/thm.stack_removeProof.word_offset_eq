Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.stack_removeProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.stack_removeProof
% SZS output start Proof for thm.stack_removeProof
fof(f8540,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f8539])).
fof(f8539,plain,(
  s('type.fcp.cart'(bool,sK0),'const.stack_remove.word_offset_1'(s('type.num.num',sK1))) != s('type.fcp.cart'(bool,sK0),'const.stack_remove.word_offset_1'(s('type.num.num',sK1)))),
  inference(superposition,[],[f33,f6494])).
fof(f6494,plain,(
  ( ! [X0,X1] : (s('type.fcp.cart'(bool,X0),'const.stack_remove.word_offset_1'(s('type.num.num',X1))) = s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f1972,f39])).
fof(f39,plain,(
  ( ! [X0,X1] : (s('type.fcp.cart'(bool,X0),'const.stack_remove.word_offset_1'(s('type.num.num',X1))) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0,X1] : s('type.fcp.cart'(bool,X0),'const.stack_remove.word_offset_1'(s('type.num.num',X1))) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num',X1)))))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ! [X0] : ! [X1] : s('type.fcp.cart'(bool,X0),'const.stack_remove.word_offset_1'(s('type.num.num',X1))) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num',X1)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X7] : s('type.fcp.cart'(bool,X6),'const.stack_remove.word_offset_1'(s('type.num.num',X7))) = s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num',X7)))))),
  file('thm.stack_removeProof.word_offset_eq','thm.stack_remove.word_offset_def')).
fof(f1972,plain,(
  ( ! [X0,X1] : (s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))))) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num',X1)))))) )),
  inference(superposition,[],[f42,f37])).
fof(f37,plain,(
  ( ! [X0] : (s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0') = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) )),
  inference(cnf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0] : s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0') = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : s('type.fcp.cart'(bool,X6),'const.misc.bytes_in_word_0') = s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  file('thm.stack_removeProof.word_offset_eq','thm.misc.bytes_in_word_def')).
fof(f42,plain,(
  ( ! [X2,X0,X1] : (s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0,X1,X2] : s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X2)))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0] : ! [X1,X2] : s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X2)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X9,X7] : s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X7))))) = s('type.fcp.cart'(bool,X6),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num',X9))),s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num',X7)))))),
  file('thm.stack_removeProof.word_offset_eq','thm.words.word_mul_n2w')).
fof(f33,plain,(
  s('type.fcp.cart'(bool,sK0),'const.stack_remove.word_offset_1'(s('type.num.num',sK1))) != s('type.fcp.cart'(bool,sK0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,sK0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1)))))),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  s('type.fcp.cart'(bool,sK0),'const.stack_remove.word_offset_1'(s('type.num.num',sK1))) != s('type.fcp.cart'(bool,sK0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,sK0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f27])).
fof(f27,plain,(
  ? [X0,X1] : s('type.fcp.cart'(bool,X0),'const.stack_remove.word_offset_1'(s('type.num.num',X1))) != s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1)))))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ~! [X0,X1] : s('type.fcp.cart'(bool,X0),'const.stack_remove.word_offset_1'(s('type.num.num',X1))) = s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1)))))),
  inference(flattening,[],[f13])).
fof(f13,plain,(
  ~! [X0] : ! [X1] : s('type.fcp.cart'(bool,X0),'const.stack_remove.word_offset_1'(s('type.num.num',X1))) = s('type.fcp.cart'(bool,X0),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X0),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : s('type.fcp.cart'(bool,X6),'const.stack_remove.word_offset_1'(s('type.num.num',X7))) = s('type.fcp.cart'(bool,X6),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X6),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num',X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : s('type.fcp.cart'(bool,X6),'const.stack_remove.word_offset_1'(s('type.num.num',X7))) = s('type.fcp.cart'(bool,X6),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X6),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num',X7)))))),
  file('thm.stack_removeProof.word_offset_eq','thm.stack_removeProof.word_offset_eq')).
% SZS output end Proof for thm.stack_removeProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 45
% Passive clauses: 1001
% Generated clauses: 8196
% Final active clauses: 43
% Final passive clauses: 924
% Input formulas: 11
% Initial clauses: 13
% 
% Duplicate literals: 727
% Trivial inequalities: 121
% Fw subsumption resolutions: 1125
% Fw demodulations: 134
% 
% Simple tautologies: 200
% Equational tautologies: 100
% Forward subsumptions: 3491
% 
% Binary resolution: 20
% Forward superposition: 2980
% Backward superposition: 2388
% Self superposition: 335
% Equality factoring: 281
% Equality resolution: 10
% 
% Split clauses: 421
% Split components: 848
% SAT solver clauses: 1329
% SAT solver unit clauses: 243
% SAT solver binary clauses: 440
% 
% Sat splits: 421
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1325
% TWLsolver calls for satisfiability: 35
% 
% Memory used [KB]: 3454
% Time elapsed: 0.254 s
% ------------------------------
% ------------------------------
% Success in time 0.26 s
