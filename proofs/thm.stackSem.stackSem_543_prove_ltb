Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.stackSem
% (110113)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 279
% Passive clauses: 2112
% Generated clauses: 27298
% Final active clauses: 278
% Final passive clauses: 1620
% Input formulas: 21
% Initial clauses: 367
% 
% Duplicate literals: 1124
% Trivial inequalities: 1311
% Fw subsumption resolutions: 4352
% Fw demodulations: 3273
% 
% Simple tautologies: 850
% Equational tautologies: 28
% Forward subsumptions: 13053
% 
% Binary resolution: 60
% Forward superposition: 9131
% Backward superposition: 7302
% Self superposition: 134
% Equality factoring: 87
% Equality resolution: 59
% 
% Split clauses: 479
% Split components: 958
% SAT solver clauses: 1401
% SAT solver unit clauses: 25
% SAT solver binary clauses: 210
% 
% Sat splits: 479
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1401
% TWLsolver calls for satisfiability: 138
% 
% Memory used [KB]: 9210
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.stackSem
% (110151)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 240
% Passive clauses: 780
% Generated clauses: 21293
% Final active clauses: 231
% Final passive clauses: 450
% Input formulas: 21
% Initial clauses: 367
% 
% Duplicate literals: 1152
% Trivial inequalities: 783
% Fw subsumption resolutions: 2369
% Fw demodulations: 1893
% Bw demodulations: 98
% Condensations: 1792
% Global subsumptions: 5
% 
% Simple tautologies: 634
% Equational tautologies: 28
% Forward subsumptions: 10795
% 
% Binary resolution: 21
% Forward superposition: 6117
% Backward superposition: 5928
% Self superposition: 126
% Equality factoring: 82
% Equality resolution: 48
% 
% Split clauses: 35
% Split components: 70
% SAT solver clauses: 1386
% SAT solver unit clauses: 365
% SAT solver binary clauses: 193
% SAT solver learnt clauses: 10
% SAT solver learnt literals: 22
% 
% Sat splits: 35
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1374
% TWLsolver calls for satisfiability: 10056
% 
% Memory used [KB]: 11641
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.stackSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.stackSem
% SZS output start Proof for thm.stackSem
fof(f109052,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f250,f271])).
fof(f271,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(X0),X3),s('type.num.num',X1),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))) = s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(X0),sK47(X3,X2,X1,X0)),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK48(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(X0),X3),s('type.num.num',X1),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))) = s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(X0),sK47(X3,X2,X1,X0)),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK48(X3,X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK47,sK48])],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(X0),X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X5))) = s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(X0),X3),s('type.num.num',X1),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2)))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0] : ! [X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(X0),X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X5))) = s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(X0),X3),s('type.num.num',X1),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X23] : ! [X20,X8,X24] : ? [X11,X12] : s('type.pair.prod'('type.ffi.ffi_state'(X23),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(X23),X11),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X12))) = s('type.pair.prod'('type.ffi.ffi_state'(X23),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(X23),X24),s('type.num.num',X20),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8)))),
  file('thm.stackSem.stackSem_543_prove_ltb','thm.targetProps.targetProps_8_prove_ltb')).
fof(f250,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.ffi.ffi_state'(sK42),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(sK42),X5),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) != s('type.pair.prod'('type.ffi.ffi_state'(sK42),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(sK42),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK41,sK42),sK44))),s('type.num.num',sK45),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK43)))) )),
  inference(cnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X5,X6] : s('type.pair.prod'('type.ffi.ffi_state'(sK42),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(sK42),X5),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) != s('type.pair.prod'('type.ffi.ffi_state'(sK42),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(sK42),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK41,sK42),sK44))),s('type.num.num',sK45),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK43)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK41,sK42,sK43,sK44,sK45])],[f54])).
fof(f54,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6] : s('type.pair.prod'('type.ffi.ffi_state'(X1),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(X1),X5),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) != s('type.pair.prod'('type.ffi.ffi_state'(X1),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2)))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.ffi.ffi_state'(X1),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(X1),X5),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) = s('type.pair.prod'('type.ffi.ffi_state'(X1),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2)))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.ffi.ffi_state'(X1),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(X1),X5),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) = s('type.pair.prod'('type.ffi.ffi_state'(X1),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(X1),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X0,X1),X3))),s('type.num.num',X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.ffi.ffi_state'(X7),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(X7),X11),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X12))) = s('type.pair.prod'('type.ffi.ffi_state'(X7),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(X7),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X6,X7),X9))),s('type.num.num',X10),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.ffi.ffi_state'(X7),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.pair.,_2'(s('type.ffi.ffi_state'(X7),X11),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X12))) = s('type.pair.prod'('type.ffi.ffi_state'(X7),'type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),'const.ffi.call_FFI_3'(s('type.ffi.ffi_state'(X7),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X6,X7),X9))),s('type.num.num',X10),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8)))),
  file('thm.stackSem.stackSem_543_prove_ltb','thm.stackSem.stackSem_543_prove_ltb')).
% SZS output end Proof for thm.stackSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 557
% Passive clauses: 2034
% Generated clauses: 108450
% Final active clauses: 478
% Final passive clauses: 1202
% Input formulas: 21
% Initial clauses: 367
% 
% Duplicate literals: 3061
% Trivial inequalities: 3118
% Fw subsumption resolutions: 13428
% Fw demodulations: 16304
% Bw demodulations: 346
% Condensations: 6962
% Global subsumptions: 116
% 
% Simple tautologies: 2235
% Equational tautologies: 1085
% Forward subsumptions: 59952
% Bw demodulations to eq. taut.: 2
% 
% Unit resulting resolution: 13471
% Forward superposition: 29927
% Backward superposition: 20493
% Self superposition: 218
% Equality factoring: 123
% Equality resolution: 160
% 
% Split clauses: 28
% Split components: 56
% SAT solver clauses: 2332
% SAT solver unit clauses: 199
% SAT solver binary clauses: 602
% 
% Sat splits: 28
% Sat splitting refutations: 124
% 
% Memory used [KB]: 18293
% Time elapsed: 4.717 s
% ------------------------------
% ------------------------------
% Success in time 6.06 s
