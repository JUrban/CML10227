Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.exh_to_patProof
% (113779)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 855
% Passive clauses: 5420
% Generated clauses: 29851
% Final active clauses: 701
% Final passive clauses: 3666
% Input formulas: 132
% Initial clauses: 283
% 
% Duplicate literals: 246
% Trivial inequalities: 40
% Fw subsumption resolutions: 1416
% Fw demodulations: 2933
% Bw demodulations: 71
% 
% Simple tautologies: 220
% Equational tautologies: 47
% Forward subsumptions: 19400
% Fw demodulations to eq. taut.: 23
% 
% Binary resolution: 5916
% Factoring: 1131
% Forward superposition: 7856
% Backward superposition: 9624
% Self superposition: 63
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 336
% Split components: 673
% SAT solver clauses: 525
% SAT solver unit clauses: 17
% SAT solver binary clauses: 73
% 
% Sat splits: 336
% Sat splitting refutations: 13
% 
% TWLsolver clauses: 521
% TWLsolver calls for satisfiability: 371
% 
% Memory used [KB]: 16630
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.exh_to_patProof
% (113793)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 413
% Passive clauses: 2293
% Generated clauses: 18448
% Final active clauses: 369
% Final passive clauses: 1716
% Input formulas: 132
% Initial clauses: 283
% 
% Duplicate literals: 79
% Trivial inequalities: 25
% Fw subsumption resolutions: 531
% Fw demodulations: 1879
% Bw demodulations: 165
% Condensations: 85
% Global subsumptions: 19
% 
% Simple tautologies: 177
% Equational tautologies: 7
% Forward subsumptions: 10513
% Fw demodulations to eq. taut.: 23
% 
% Binary resolution: 1736
% Factoring: 162
% Forward superposition: 5624
% Backward superposition: 5153
% Self superposition: 112
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 20
% Split components: 40
% SAT solver clauses: 3016
% SAT solver unit clauses: 353
% SAT solver binary clauses: 92
% SAT solver learnt clauses: 38
% SAT solver learnt literals: 12
% 
% Sat splits: 20
% Sat splitting refutations: 14
% 
% TWLsolver clauses: 2940
% TWLsolver calls for satisfiability: 1806
% 
% Memory used [KB]: 26097
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.exh_to_patProof
% (113814)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1025
% Passive clauses: 12409
% Generated clauses: 77790
% Final active clauses: 887
% Final passive clauses: 2160
% Input formulas: 132
% Initial clauses: 283
% Discarded non-redundant clauses: 12559
% 
% Duplicate literals: 326
% Trivial inequalities: 65
% Fw subsumption resolutions: 2137
% Fw demodulations: 10697
% Bw demodulations: 4863
% Condensations: 480
% Global subsumptions: 2392
% 
% Simple tautologies: 102
% Equational tautologies: 89
% Forward subsumptions: 44063
% Fw demodulations to eq. taut.: 277
% Bw demodulations to eq. taut.: 67
% 
% Unit resulting resolution: 8856
% Factoring: 1
% Forward superposition: 25037
% Backward superposition: 17515
% Self superposition: 276
% Equality factoring: 26
% Equality resolution: 14
% 
% Split clauses: 45
% Split components: 90
% SAT solver clauses: 17785
% SAT solver unit clauses: 7446
% SAT solver binary clauses: 7047
% 
% Sat splits: 44
% Sat splitting refutations: 2893
% 
% Memory used [KB]: 272874
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.exh_to_patProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.exh_to_patProof
% SZS output start Proof for thm.exh_to_patProof
fof(f434,plain,(
  $false),
  inference(equality_resolution,[],[f426])).
fof(f426,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp'))),X2) != s('type.pair.prod'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp'))),'const.exh_to_pat.compile_row_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK10))))),s('type.exhLang.pat',sK9)))) )),
  inference(superposition,[],[f412,f302])).
fof(f302,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK11(X2,X1,X0)),s(X1,sK12(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f217])).
fof(f217,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK11(X2,X1,X0)),s(X1,sK12(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11,sK12])],[f152])).
fof(f152,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f151])).
fof(f151,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f106])).
fof(f106,axiom,(
  ! [X15,X14] : ! [X11] : ? [X41,X40] : s('type.pair.prod'(X15,X14),X11) = s('type.pair.prod'(X15,X14),'const.pair.,_2'(s(X15,X41),s(X14,X40)))),
  file('thm.exh_to_patProof.exh_to_patProof_|49|49_prove_ltb','thm.pair.ABS_PAIR_THM')).
fof(f412,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),X1),s('type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp')),X0))) != s('type.pair.prod'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp'))),'const.exh_to_pat.compile_row_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK10))))),s('type.exhLang.pat',sK9)))) )),
  inference(superposition,[],[f252,f302])).
fof(f252,plain,(
  ( ! [X4,X2,X3] : (s('type.pair.prod'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),X2),s('type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp')),'const.pair.,_2'(s('type.num.num',X3),s(fun('type.patLang.exp','type.patLang.exp'),X4))))) != s('type.pair.prod'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp'))),'const.exh_to_pat.compile_row_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK10))))),s('type.exhLang.pat',sK9)))) )),
  inference(cnf_transformation,[],[f198])).
fof(f198,plain,(
  ! [X2,X3,X4] : s('type.pair.prod'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),X2),s('type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp')),'const.pair.,_2'(s('type.num.num',X3),s(fun('type.patLang.exp','type.patLang.exp'),X4))))) != s('type.pair.prod'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp'))),'const.exh_to_pat.compile_row_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK10))))),s('type.exhLang.pat',sK9)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10])],[f176])).
fof(f176,plain,(
  ? [X0,X1] : ! [X2,X3,X4] : s('type.pair.prod'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),X2),s('type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp')),'const.pair.,_2'(s('type.num.num',X3),s(fun('type.patLang.exp','type.patLang.exp'),X4))))) != s('type.pair.prod'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp'))),'const.exh_to_pat.compile_row_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1))))),s('type.exhLang.pat',X0)))),
  inference(ennf_transformation,[],[f134])).
fof(f134,plain,(
  ~! [X0,X1] : ? [X2,X3,X4] : s('type.pair.prod'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),X2),s('type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp')),'const.pair.,_2'(s('type.num.num',X3),s(fun('type.patLang.exp','type.patLang.exp'),X4))))) = s('type.pair.prod'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp'))),'const.exh_to_pat.compile_row_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1))))),s('type.exhLang.pat',X0)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ? [X8,X9,X10] : s('type.pair.prod'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),X8),s('type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp')),'const.pair.,_2'(s('type.num.num',X9),s(fun('type.patLang.exp','type.patLang.exp'),X10))))) = s('type.pair.prod'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp'))),'const.exh_to_pat.compile_row_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))))),s('type.exhLang.pat',X6)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ? [X8,X9,X10] : s('type.pair.prod'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),X8),s('type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp')),'const.pair.,_2'(s('type.num.num',X9),s(fun('type.patLang.exp','type.patLang.exp'),X10))))) = s('type.pair.prod'('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'type.pair.prod'('type.num.num',fun('type.patLang.exp','type.patLang.exp'))),'const.exh_to_pat.compile_row_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))))),s('type.exhLang.pat',X6)))),
  file('thm.exh_to_patProof.exh_to_patProof_|49|49_prove_ltb','thm.exh_to_patProof.exh_to_patProof_|49|49_prove_ltb')).
% SZS output end Proof for thm.exh_to_patProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 93
% Passive clauses: 5
% Generated clauses: 41
% Final active clauses: 93
% Final passive clauses: 2
% Input formulas: 132
% Initial clauses: 131
% 
% Selected by SInE selection: 29
% SInE iterations: 1
% 
% Duplicate literals: 5
% 
% Simple tautologies: 40
% Forward subsumptions: 35
% 
% Forward superposition: 46
% Equality resolution: 1
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 1279
% Time elapsed: 0.007 s
% ------------------------------
% ------------------------------
% Success in time 11.773 s
