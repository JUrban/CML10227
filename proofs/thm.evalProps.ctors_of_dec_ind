Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.evalProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.evalProps
% SZS output start Proof for thm.evalProps
fof(f4682,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4645,f623,f4372,f4380,f4378,f4376,f4374,f692,f691,f669,f671,f4542,f4481,f4594,f554])).
fof(f554,plain,(
  ( ! [X15] : (s(bool,'T_0') = s(bool,X15)) ) | $spl8),
  inference(cnf_transformation,[],[f554_D])).
fof(f554_D,plain,(
  ( ! [X15] : (s(bool,'T_0') = s(bool,X15)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f4594,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1)) ) | $spl126),
  inference(subsumption_resolution,[],[f4585,f308])).
fof(f308,plain,(
  ( ! [X27] : (s(bool,X27) = s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',sK1))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(trivial_inequality_removal,[],[f276])).
fof(f276,plain,(
  ( ! [X27] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X27) = s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',sK1))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f89,f90])).
fof(f90,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f62,f62])).
fof(f62,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.evalProps.ctors_of_dec_ind',aHL_BOOL_CASES)).
fof(f89,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',sK1)))),
  inference(resolution,[],[f57,f69])).
fof(f69,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X20] : (s(bool,'T_0') = s(bool,X20) <=> p(s(bool,X20)))),
  file('thm.evalProps.ctors_of_dec_ind','thm.bool.EQ_CLAUSES|split|0')).
fof(f57,plain,(
  ~p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',sK1))))),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X10] : p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X10)))))) & ! [X8,X9] : p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X8),s('type.list.list'('type.ast.t'),X9)))))) & ! [X6,X7] : p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X6),s('type.ast.exp',X7)))))) & ! [X5] : p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X5)))))) & ! [X2,X3,X4] : p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X2),s('type.list.list'('type.string.char'),X3),s('type.ast.t',X4)))))) & ~p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',sK1))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f40])).
fof(f40,plain,(
  ? [X0] : (! [X10] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X10)))))) & ! [X8,X9] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X8),s('type.list.list'('type.ast.t'),X9)))))) & ! [X6,X7] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X6),s('type.ast.exp',X7)))))) & ! [X5] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X5)))))) & ! [X2,X3,X4] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X2),s('type.list.list'('type.string.char'),X3),s('type.ast.t',X4)))))) & ? [X1] : ~p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec',X1)))))),
  inference(rectify,[],[f35])).
fof(f35,plain,(
  ? [X0] : (! [X9] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X9)))))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X7),s('type.list.list'('type.ast.t'),X8)))))) & ! [X5,X6] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X5),s('type.ast.exp',X6)))))) & ! [X4] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X4)))))) & ! [X1,X2,X3] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.string.char'),X2),s('type.ast.t',X3)))))) & ? [X10] : ~p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec',X10)))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ? [X0] : ((! [X9] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X9)))))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X7),s('type.list.list'('type.ast.t'),X8)))))) & ! [X5,X6] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X5),s('type.ast.exp',X6)))))) & ! [X4] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X4)))))) & ! [X1,X2,X3] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.string.char'),X2),s('type.ast.t',X3))))))) & ? [X10] : ~p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec',X10)))))),
  inference(ennf_transformation,[],[f17])).
fof(f17,plain,(
  ~! [X0] : ((! [X9] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X9)))))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X7),s('type.list.list'('type.ast.t'),X8)))))) & ! [X5,X6] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X5),s('type.ast.exp',X6)))))) & ! [X4] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X4)))))) & ! [X1,X2,X3] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.string.char'),X2),s('type.ast.t',X3))))))) => ! [X10] : p(s(bool,happ(s(fun('type.ast.dec',bool),X0),s('type.ast.dec',X10)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((! [X7] : p(s(bool,happ(s(fun('type.ast.dec',bool),X6),s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X7)))))) & ! [X8,X9] : p(s(bool,happ(s(fun('type.ast.dec',bool),X6),s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X8),s('type.list.list'('type.ast.t'),X9)))))) & ! [X10,X11] : p(s(bool,happ(s(fun('type.ast.dec',bool),X6),s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X10),s('type.ast.exp',X11)))))) & ! [X12] : p(s(bool,happ(s(fun('type.ast.dec',bool),X6),s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X12)))))) & ! [X13,X14,X15] : p(s(bool,happ(s(fun('type.ast.dec',bool),X6),s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X13),s('type.list.list'('type.string.char'),X14),s('type.ast.t',X15))))))) => ! [X10] : p(s(bool,happ(s(fun('type.ast.dec',bool),X6),s('type.ast.dec',X10)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((! [X7] : p(s(bool,happ(s(fun('type.ast.dec',bool),X6),s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X7)))))) & ! [X8,X9] : p(s(bool,happ(s(fun('type.ast.dec',bool),X6),s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X8),s('type.list.list'('type.ast.t'),X9)))))) & ! [X10,X11] : p(s(bool,happ(s(fun('type.ast.dec',bool),X6),s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X10),s('type.ast.exp',X11)))))) & ! [X12] : p(s(bool,happ(s(fun('type.ast.dec',bool),X6),s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X12)))))) & ! [X13,X14,X15] : p(s(bool,happ(s(fun('type.ast.dec',bool),X6),s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X13),s('type.list.list'('type.string.char'),X14),s('type.ast.t',X15))))))) => ! [X10] : p(s(bool,happ(s(fun('type.ast.dec',bool),X6),s('type.ast.dec',X10)))))),
  file('thm.evalProps.ctors_of_dec_ind','thm.evalProps.ctors_of_dec_ind')).
fof(f4585,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',sK1))) | s(bool,'T_0') = s(bool,X1)) ) | $spl126),
  inference(superposition,[],[f156,f4376])).
fof(f156,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(resolution,[],[f55,f92])).
fof(f92,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f73,f62])).
fof(f73,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X20] : (s(bool,'F_0') = s(bool,X20) <=> ~p(s(bool,X20)))),
  file('thm.evalProps.ctors_of_dec_ind','thm.bool.EQ_CLAUSES|split|3')).
fof(f55,plain,(
  ( ! [X5] : (p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X5))))))) )),
  inference(cnf_transformation,[],[f41])).
fof(f4481,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1)) ) | $spl130),
  inference(subsumption_resolution,[],[f4471,f308])).
fof(f4471,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',sK1))) | s(bool,'T_0') = s(bool,X1)) ) | $spl130),
  inference(superposition,[],[f389,f4380])).
fof(f389,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.string.char'),X2),s('type.ast.t',X3))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(resolution,[],[f56,f92])).
fof(f56,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X2),s('type.list.list'('type.string.char'),X3),s('type.ast.t',X4))))))) )),
  inference(cnf_transformation,[],[f41])).
fof(f4542,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1)) ) | $spl128),
  inference(subsumption_resolution,[],[f4533,f308])).
fof(f4533,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',sK1))) | s(bool,'T_0') = s(bool,X1)) ) | $spl128),
  inference(superposition,[],[f143,f4378])).
fof(f143,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X1),s('type.list.list'('type.ast.t'),X2))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(resolution,[],[f53,f92])).
fof(f53,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X8),s('type.list.list'('type.ast.t'),X9))))))) )),
  inference(cnf_transformation,[],[f41])).
fof(f671,plain,(
  ~p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',sK1)))) | $spl13),
  inference(cnf_transformation,[],[f671_D])).
fof(f671_D,plain,(
  ~p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',sK1)))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f669,plain,(
  ( ! [X13] : (~p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',sK1)))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f661,f62])).
fof(f661,plain,(
  ( ! [X13] : (s(bool,'F_0') != s(bool,X13) | ~p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',sK1)))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f73,f308])).
fof(f691,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',sK1))) | $spl14),
  inference(cnf_transformation,[],[f691_D])).
fof(f691_D,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',sK1))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f692,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',sK1))) | $spl13),
  inference(resolution,[],[f671,f74])).
fof(f74,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f47])).
fof(f4374,plain,(
  s('type.ast.dec',sK1) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',sK2(sK1)),s('type.ast.exp',sK3(sK1)))) | $spl124),
  inference(cnf_transformation,[],[f4374_D])).
fof(f4374_D,plain,(
  s('type.ast.dec',sK1) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',sK2(sK1)),s('type.ast.exp',sK3(sK1)))) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f4376,plain,(
  s('type.ast.dec',sK1) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK4(sK1)))) | $spl126),
  inference(cnf_transformation,[],[f4376_D])).
fof(f4376_D,plain,(
  s('type.ast.dec',sK1) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK4(sK1)))) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f4378,plain,(
  s('type.ast.dec',sK1) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),sK9(sK1)),s('type.list.list'('type.ast.t'),sK10(sK1)))) | $spl128),
  inference(cnf_transformation,[],[f4378_D])).
fof(f4378_D,plain,(
  s('type.ast.dec',sK1) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),sK9(sK1)),s('type.list.list'('type.ast.t'),sK10(sK1)))) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f4380,plain,(
  s('type.ast.dec',sK1) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK1)),s('type.list.list'('type.string.char'),sK7(sK1)),s('type.ast.t',sK8(sK1)))) | $spl130),
  inference(cnf_transformation,[],[f4380_D])).
fof(f4380_D,plain,(
  s('type.ast.dec',sK1) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK1)),s('type.list.list'('type.string.char'),sK7(sK1)),s('type.ast.t',sK8(sK1)))) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f4372,plain,(
  s('type.ast.dec',sK1) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK1)),s('type.list.list'('type.string.char'),sK7(sK1)),s('type.ast.t',sK8(sK1)))) | s('type.ast.dec',sK1) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),sK9(sK1)),s('type.list.list'('type.ast.t'),sK10(sK1)))) | s('type.ast.dec',sK1) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK4(sK1)))) | s('type.ast.dec',sK1) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',sK2(sK1)),s('type.ast.exp',sK3(sK1)))) | $spl14),
  inference(subsumption_resolution,[],[f4347,f60])).
fof(f60,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.evalProps.ctors_of_dec_ind',aHL_FALSITY)).
fof(f4347,plain,(
  p(s(bool,'F_0')) | s('type.ast.dec',sK1) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK1)),s('type.list.list'('type.string.char'),sK7(sK1)),s('type.ast.t',sK8(sK1)))) | s('type.ast.dec',sK1) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),sK9(sK1)),s('type.list.list'('type.ast.t'),sK10(sK1)))) | s('type.ast.dec',sK1) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK4(sK1)))) | s('type.ast.dec',sK1) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',sK2(sK1)),s('type.ast.exp',sK3(sK1)))) | $spl14),
  inference(superposition,[],[f1264,f691])).
fof(f1264,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',X0)))) | s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),sK6(X0)),s('type.list.list'('type.string.char'),sK7(X0)),s('type.ast.t',sK8(X0)))) | s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),sK9(X0)),s('type.list.list'('type.ast.t'),sK10(X0)))) | s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK4(X0)))) | s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',sK2(X0)),s('type.ast.exp',sK3(X0))))) )),
  inference(superposition,[],[f52,f63])).
fof(f63,plain,(
  ( ! [X0] : (s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),sK6(X0)),s('type.list.list'('type.string.char'),sK7(X0)),s('type.ast.t',sK8(X0)))) | s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),sK5(X0)))) | s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),sK9(X0)),s('type.list.list'('type.ast.t'),sK10(X0)))) | s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK4(X0)))) | s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',sK2(X0)),s('type.ast.exp',sK3(X0))))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0] : (s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',sK2(X0)),s('type.ast.exp',sK3(X0)))) | s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK4(X0)))) | s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),sK5(X0)))) | s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),sK6(X0)),s('type.list.list'('type.string.char'),sK7(X0)),s('type.ast.t',sK8(X0)))) | s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),sK9(X0)),s('type.list.list'('type.ast.t'),sK10(X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3,sK4,sK5,sK6,sK7,sK8,sK9,sK10])],[f20])).
fof(f20,plain,(
  ! [X0] : (? [X8,X9] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X8),s('type.ast.exp',X9))) | ? [X7] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X7))) | ? [X6] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X6))) | ? [X3,X4,X5] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.string.char'),X4),s('type.ast.t',X5))) | ? [X1,X2] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X1),s('type.list.list'('type.ast.t'),X2))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X16] : (? [X17,X18] : s('type.ast.dec',X16) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X17),s('type.ast.exp',X18))) | ? [X19] : s('type.ast.dec',X16) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X19))) | ? [X19] : s('type.ast.dec',X16) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X19))) | ? [X19,X8,X20] : s('type.ast.dec',X16) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X19),s('type.list.list'('type.string.char'),X8),s('type.ast.t',X20))) | ? [X8,X19] : s('type.ast.dec',X16) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X8),s('type.list.list'('type.ast.t'),X19))))),
  file('thm.evalProps.ctors_of_dec_ind','thm.ast.dec_nchotomy')).
fof(f52,plain,(
  ( ! [X10] : (p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X10))))))) )),
  inference(cnf_transformation,[],[f41])).
fof(f623,plain,(
  $false | $spl8),
  inference(trivial_inequality_removal,[],[f621])).
fof(f621,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl8),
  inference(superposition,[],[f89,f554])).
fof(f4645,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1)) ) | $spl124),
  inference(subsumption_resolution,[],[f4637,f308])).
fof(f4637,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec',sK1))) | s(bool,'T_0') = s(bool,X1)) ) | $spl124),
  inference(superposition,[],[f137,f4374])).
fof(f137,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X6),s('type.ast.exp',X7))))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(resolution,[],[f92,f54])).
fof(f54,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.ast.dec',bool),sK0),s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X6),s('type.ast.exp',X7))))))) )),
  inference(cnf_transformation,[],[f41])).
% SZS output end Proof for thm.evalProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 114
% Passive clauses: 633
% Generated clauses: 4463
% Final active clauses: 92
% Final passive clauses: 420
% Input formulas: 15
% Initial clauses: 29
% 
% Duplicate literals: 290
% Trivial inequalities: 86
% Fw subsumption resolutions: 544
% Fw demodulations: 518
% Bw demodulations: 18
% 
% Simple tautologies: 154
% Equational tautologies: 19
% Forward subsumptions: 2032
% 
% Binary resolution: 196
% Forward superposition: 1714
% Backward superposition: 916
% Self superposition: 40
% Equality factoring: 33
% Equality resolution: 23
% 
% Split clauses: 127
% Split components: 334
% SAT solver clauses: 282
% SAT solver unit clauses: 24
% SAT solver binary clauses: 101
% SAT solver learnt clauses: 1
% 
% Sat splits: 127
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 277
% TWLsolver calls for satisfiability: 80
% 
% Memory used [KB]: 3326
% Time elapsed: 0.112 s
% ------------------------------
% ------------------------------
% Success in time 0.12 s
