Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 148 next slice time: 5
dis+11_7_3 on thm.inferProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.inferProps
% SZS output start Proof for thm.inferProps
fof(f2202,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1431,f2189,f1548,f2188,f2186,f1441,f2187])).
fof(f2187,plain,(
  ~p(s(bool,'F_0')) | $spl1),
  inference(cnf_transformation,[],[f2187_D])).
fof(f2187_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f1441,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f440])).
fof(f440,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.inferProps.infer_e_check_t|split|2',aHL_FALSITY)).
fof(f2186,plain,(
  p(s(bool,'F_0')) | $spl0),
  inference(cnf_transformation,[],[f2186_D])).
fof(f2186_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f2188,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f2188_D])).
fof(f2188_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f1548,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f1226])).
fof(f1226,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f1225])).
fof(f1225,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f1108])).
fof(f1108,plain,(
  ! [X0] : ((~p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f519])).
fof(f519,plain,(
  ! [X0] : ((p(s(bool,'F_0')) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f80])).
fof(f80,axiom,(
  ! [X54] : ((p(s(bool,'F_0')) => p(s(bool,X54))) <=> p(s(bool,'T_0')))),
  file('thm.inferProps.infer_e_check_t|split|2','thm.bool.IMP_CLAUSES|split|2')).
fof(f2189,plain,(
  ~p(s(bool,'T_0')) | $spl3),
  inference(cnf_transformation,[],[f2189_D])).
fof(f2189_D,plain,(
  ~p(s(bool,'T_0')) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f1431,plain,(
  ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1191])).
fof(f1191,plain,(
  s('type.pair.prod'('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'))),'const.pair.,_2'(s('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.one.one','const.one.one_0'))),s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),sK30))) = s('type.pair.prod'('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'))),'const.infer.infer_pes_5'(s('type.infer.inf_environment',sK25),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK26),s('type.infer_t.infer_t',sK27),s('type.infer_t.infer_t',sK28),s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),sK29))) & p(s(bool,'const.infer.check_menv_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t')))),'const.infer.inf_environment_inf_m_1'(s('type.infer.inf_environment',sK25)))))) & p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.count_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),sK29))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),'const.infer.inf_environment_inf_v_1'(s('type.infer.inf_environment',sK25)))))) & ~p(s(bool,'T_0'))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK25,sK26,sK27,sK28,sK29,sK30])],[f1100])).
fof(f1100,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'))),'const.pair.,_2'(s('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.one.one','const.one.one_0'))),s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),X5))) = s('type.pair.prod'('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'))),'const.infer.infer_pes_5'(s('type.infer.inf_environment',X0),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X1),s('type.infer_t.infer_t',X2),s('type.infer_t.infer_t',X3),s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),X4))) & p(s(bool,'const.infer.check_menv_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t')))),'const.infer.inf_environment_inf_m_1'(s('type.infer.inf_environment',X0)))))) & p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.count_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),X4))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),'const.infer.inf_environment_inf_v_1'(s('type.infer.inf_environment',X0)))))) & ~p(s(bool,'T_0')))),
  inference(flattening,[],[f1099])).
fof(f1099,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'))),'const.pair.,_2'(s('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.one.one','const.one.one_0'))),s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),X5))) = s('type.pair.prod'('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'))),'const.infer.infer_pes_5'(s('type.infer.inf_environment',X0),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X1),s('type.infer_t.infer_t',X2),s('type.infer_t.infer_t',X3),s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),X4))) & p(s(bool,'const.infer.check_menv_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t')))),'const.infer.inf_environment_inf_m_1'(s('type.infer.inf_environment',X0)))))) & p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.count_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),X4))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),'const.infer.inf_environment_inf_v_1'(s('type.infer.inf_environment',X0))))))) & ~p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f437])).
fof(f437,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'))),'const.pair.,_2'(s('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.one.one','const.one.one_0'))),s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),X5))) = s('type.pair.prod'('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'))),'const.infer.infer_pes_5'(s('type.infer.inf_environment',X0),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X1),s('type.infer_t.infer_t',X2),s('type.infer_t.infer_t',X3),s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),X4))) & p(s(bool,'const.infer.check_menv_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t')))),'const.infer.inf_environment_inf_m_1'(s('type.infer.inf_environment',X0)))))) & p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.count_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),X4))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),'const.infer.inf_environment_inf_v_1'(s('type.infer.inf_environment',X0))))))) => p(s(bool,'T_0')))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10,X11] : ((s('type.pair.prod'('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'))),'const.pair.,_2'(s('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.one.one','const.one.one_0'))),s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),X11))) = s('type.pair.prod'('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'))),'const.infer.infer_pes_5'(s('type.infer.inf_environment',X6),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X7),s('type.infer_t.infer_t',X8),s('type.infer_t.infer_t',X9),s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),X10))) & p(s(bool,'const.infer.check_menv_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t')))),'const.infer.inf_environment_inf_m_1'(s('type.infer.inf_environment',X6)))))) & p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.count_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),X10))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),'const.infer.inf_environment_inf_v_1'(s('type.infer.inf_environment',X6))))))) => p(s(bool,'T_0')))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10,X11] : ((s('type.pair.prod'('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'))),'const.pair.,_2'(s('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.one.one','const.one.one_0'))),s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),X11))) = s('type.pair.prod'('type.infer.exc'('type.one.one','type.list.list'('type.string.char')),'type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t'))),'const.infer.infer_pes_5'(s('type.infer.inf_environment',X6),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X7),s('type.infer_t.infer_t',X8),s('type.infer_t.infer_t',X9),s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),X10))) & p(s(bool,'const.infer.check_menv_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t')))),'const.infer.inf_environment_inf_m_1'(s('type.infer.inf_environment',X6)))))) & p(s(bool,'const.infer.check_env_2'(s(fun('type.num.num',bool),'const.pred_set.count_1'(s('type.num.num','const.infer.infer_st_next_uvar_1'(s('type.infer.infer_st'('type.finite_map.fmap'('type.num.num','type.infer_t.infer_t')),X10))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.infer_t.infer_t'))),'const.infer.inf_environment_inf_v_1'(s('type.infer.inf_environment',X6))))))) => p(s(bool,'T_0')))),
  file('thm.inferProps.infer_e_check_t|split|2','thm.inferProps.infer_e_check_t|split|2')).
% SZS output end Proof for thm.inferProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Passive clauses: 612
% Generated clauses: 765
% Final passive clauses: 611
% Input formulas: 435
% Initial clauses: 748
% 
% Duplicate literals: 9
% Trivial inequalities: 1
% 
% Simple tautologies: 101
% Equational tautologies: 4
% 
% Split clauses: 36
% Split components: 74
% SAT solver clauses: 40
% SAT solver unit clauses: 3
% SAT solver binary clauses: 34
% SAT solver learnt clauses: 1
% 
% Sat splits: 36
% 
% TWLsolver clauses: 39
% TWLsolver calls for satisfiability: 1
% 
% Memory used [KB]: 2558
% Time elapsed: 0.055 s
% ------------------------------
% ------------------------------
% Success in time 0.241 s
