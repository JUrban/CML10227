Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.wordProps
% SZS output start Proof for thm.wordProps
fof(f13258,plain,(
  $false),
  inference(equality_resolution,[],[f2973])).
fof(f2973,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(sK2)),X5),s('type.wordSem.state'(sK2,sK3),X6))) != s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(sK2)),sK66(sK6,sK5,sK4,sK3,sK2)),s('type.wordSem.state'(sK2,sK3),sK67(sK6,sK5,sK4,sK3,sK2))))) )),
  inference(superposition,[],[f87,f130])).
fof(f130,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),sK66(X4,X3,X2,X1,X0)),s('type.wordSem.state'(X0,X1),sK67(X4,X3,X2,X1,X0)))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X0,X1),X2)))))))))) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),sK66(X4,X3,X2,X1,X0)),s('type.wordSem.state'(X0,X1),sK67(X4,X3,X2,X1,X0)))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X0,X1),X2)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK66,sK67])],[f51])).
fof(f51,plain,(
  ! [X0,X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X5),s('type.wordSem.state'(X0,X1),X6))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X0,X1),X2)))))))))),
  inference(flattening,[],[f50])).
fof(f50,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X5),s('type.wordSem.state'(X0,X1),X6))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X0,X1),X2)))))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X7] : ! [X8,X9,X10] : ? [X11,X15] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X6)),X11),s('type.wordSem.state'(X6,X7),X15))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X6),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.wordLang.prog'(X6),X9),s('type.wordSem.state'(X6,X7),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.wordSem.state'(X6,X7),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X7),X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X6,X7),X8)))))))))),
  file('thm.wordProps.wordProps_|49|89_prove_ltb','thm.wordProps.wordProps_|49|88_prove_ltb')).
fof(f87,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(sK2)),X5),s('type.wordSem.state'(sK2,sK3),X6))) != s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(sK2),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.wordLang.prog'(sK2),sK5),s('type.wordSem.state'(sK2,sK3),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK6))),s('type.wordSem.state'(sK2,sK3),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK2,sK3),sK4))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(sK2,sK3),sK4)))))))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X5,X6] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(sK2)),X5),s('type.wordSem.state'(sK2,sK3),X6))) != s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(sK2),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.wordLang.prog'(sK2),sK5),s('type.wordSem.state'(sK2,sK3),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK6))),s('type.wordSem.state'(sK2,sK3),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(sK2,sK3),sK4))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(sK2,sK3),sK4)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3,sK4,sK5,sK6])],[f54])).
fof(f54,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X5),s('type.wordSem.state'(X0,X1),X6))) != s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X0,X1),X2)))))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X5),s('type.wordSem.state'(X0,X1),X6))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X0,X1),X2)))))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X5),s('type.wordSem.state'(X0,X1),X6))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X0,X1),X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X0,X1),X2)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X6)),X11),s('type.wordSem.state'(X6,X7),X12))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X6),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.wordLang.prog'(X6),X9),s('type.wordSem.state'(X6,X7),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.wordSem.state'(X6,X7),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X7),X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X6,X7),X8)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X6)),X11),s('type.wordSem.state'(X6,X7),X12))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X6),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.wordLang.prog'(X6),X9),s('type.wordSem.state'(X6,X7),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.wordSem.state'(X6,X7),'const.wordSem.state_termdep_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.wordSem.state_termdep_1'(s('type.wordSem.state'(X6,X7),X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.wordSem.state'(X6,X7),X8)))))))))),
  file('thm.wordProps.wordProps_|49|89_prove_ltb','thm.wordProps.wordProps_|49|89_prove_ltb')).
% SZS output end Proof for thm.wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 155
% Passive clauses: 1119
% Generated clauses: 12955
% Final active clauses: 153
% Final passive clauses: 829
% Input formulas: 21
% Initial clauses: 45
% 
% Duplicate literals: 558
% Trivial inequalities: 749
% Fw subsumption resolutions: 1626
% Fw demodulations: 1605
% Bw demodulations: 2
% 
% Simple tautologies: 341
% Equational tautologies: 24
% Forward subsumptions: 6380
% 
% Binary resolution: 66
% Forward superposition: 4611
% Backward superposition: 3442
% Self superposition: 81
% Equality factoring: 58
% Equality resolution: 33
% 
% Split clauses: 274
% Split components: 561
% SAT solver clauses: 689
% SAT solver unit clauses: 17
% SAT solver binary clauses: 131
% 
% Sat splits: 274
% 
% TWLsolver clauses: 687
% TWLsolver calls for satisfiability: 95
% 
% Memory used [KB]: 7803
% Time elapsed: 0.303 s
% ------------------------------
% ------------------------------
% Success in time 0.32 s
