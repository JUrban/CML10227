Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.con_to_decProof
% (70787)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 82
% Passive clauses: 1354
% Generated clauses: 10944
% Final active clauses: 79
% Final passive clauses: 1197
% Input formulas: 36
% Initial clauses: 37
% 
% Duplicate literals: 771
% Trivial inequalities: 85
% Fw subsumption resolutions: 1115
% Fw demodulations: 141
% Bw demodulations: 1
% 
% Simple tautologies: 176
% Equational tautologies: 96
% Forward subsumptions: 5667
% Fw demodulations to eq. taut.: 1
% 
% Binary resolution: 36
% Forward superposition: 4870
% Backward superposition: 3142
% Self superposition: 387
% Equality factoring: 256
% Equality resolution: 8
% 
% Split clauses: 505
% Split components: 1017
% SAT solver clauses: 1600
% SAT solver unit clauses: 246
% SAT solver binary clauses: 571
% 
% Sat splits: 505
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1596
% TWLsolver calls for satisfiability: 74
% 
% Memory used [KB]: 8187
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.con_to_decProof
% (70834)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 46
% Passive clauses: 153
% Generated clauses: 4257
% Final active clauses: 43
% Final passive clauses: 105
% Input formulas: 36
% Initial clauses: 37
% 
% Duplicate literals: 749
% Trivial inequalities: 52
% Fw subsumption resolutions: 127
% Fw demodulations: 5
% Bw demodulations: 1
% Condensations: 1243
% 
% Simple tautologies: 86
% Equational tautologies: 58
% Forward subsumptions: 1494
% 
% Binary resolution: 16
% Forward superposition: 822
% Backward superposition: 731
% Self superposition: 204
% Equality factoring: 174
% Equality resolution: 4
% 
% Split clauses: 27
% Split components: 54
% SAT solver clauses: 367
% SAT solver unit clauses: 70
% SAT solver binary clauses: 76
% 
% Sat splits: 27
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 367
% TWLsolver calls for satisfiability: 68
% 
% Memory used [KB]: 4093
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.con_to_decProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.con_to_decProof
% SZS output start Proof for thm.con_to_decProof
fof(f102452,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f102415])).
fof(f102415,plain,(
  s('type.decSem.state'(sK0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(sK0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK2),s('type.conSem.state'(sK0),sK1))))) != s('type.decSem.state'(sK0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(sK0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK2),s('type.conSem.state'(sK0),sK1)))))),
  inference(superposition,[],[f108,f30185])).
fof(f30185,plain,(
  ( ! [X45,X43,X44] : (s('type.decSem.state'(X43),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X43),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X45),s('type.conSem.state'(X43),X44))))) = s('type.decSem.state'(X43),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X45),s('type.decSem.state'(X43),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X43),X44)))))) )),
  inference(forward_demodulation,[],[f30184,f10819])).
fof(f10819,plain,(
  ( ! [X2,X0,X1] : (s('type.decSem.state'(X0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.conSem.state'(X0),X2))))) = s('type.decSem.state'(X0),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X2))))),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X1),s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X2))))))),s('type.decSem.state'(X0),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X2))))),s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X2))))),s('type.decSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(forward_demodulation,[],[f10818,f123])).
fof(f123,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X1))))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.conSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0,X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X1))))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.conSem.state'(X0),X1)))))),
  inference(flattening,[],[f59])).
fof(f59,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X1))))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.conSem.state'(X0),X1)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X16] : ! [X7,X8] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X8),s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X16),X7))))) = s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X16),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X8),s('type.conSem.state'(X16),X7)))))),
  file('thm.con_to_decProof.compile_state_with_clock','thm.conSem.conSem_|49||48|8_prove_ltb')).
fof(f10818,plain,(
  ( ! [X2,X0,X1] : (s('type.decSem.state'(X0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.conSem.state'(X0),X2))))) = s('type.decSem.state'(X0),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X2))))),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.conSem.state'(X0),X2))))))),s('type.decSem.state'(X0),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X2))))),s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X2))))),s('type.decSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(forward_demodulation,[],[f10817,f118])).
fof(f118,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.conSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.conSem.state'(X0),X1)))))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.conSem.state'(X0),X1)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X16] : ! [X7,X8] : s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X16),X7))) = s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X16),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X8),s('type.conSem.state'(X16),X7)))))),
  file('thm.con_to_decProof.compile_state_with_clock','thm.conSem.conSem_|49||48|2_prove_ltb')).
fof(f10817,plain,(
  ( ! [X2,X0,X1] : (s('type.decSem.state'(X0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.conSem.state'(X0),X2))))) = s('type.decSem.state'(X0),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X2))))),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.conSem.state'(X0),X2))))))),s('type.decSem.state'(X0),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.conSem.state'(X0),X2))))))),s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X2))))),s('type.decSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(forward_demodulation,[],[f10784,f120])).
fof(f120,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.conSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.conSem.state'(X0),X1)))))),
  inference(flattening,[],[f53])).
fof(f53,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.conSem.state'(X0),X1)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X16] : ! [X7,X8] : s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X16),X7))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X16),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X8),s('type.conSem.state'(X16),X7)))))),
  file('thm.con_to_decProof.compile_state_with_clock','thm.conSem.conSem_99_prove_ltb')).
fof(f10784,plain,(
  ( ! [X2,X0,X1] : (s('type.decSem.state'(X0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.conSem.state'(X0),X2))))) = s('type.decSem.state'(X0),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X2))))),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.conSem.state'(X0),X2))))))),s('type.decSem.state'(X0),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.conSem.state'(X0),X2))))))),s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.conSem.state'(X0),X2))))))),s('type.decSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(superposition,[],[f147,f116])).
fof(f116,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.conSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.conSem.state'(X0),X1)))))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.conSem.state'(X0),X1)))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X16] : ! [X7,X8] : s('type.ffi.ffi_state'(X16),'const.conSem.state_ffi_1'(s('type.conSem.state'(X16),X7))) = s('type.ffi.ffi_state'(X16),'const.conSem.state_ffi_1'(s('type.conSem.state'(X16),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X8),s('type.conSem.state'(X16),X7)))))),
  file('thm.con_to_decProof.compile_state_with_clock','thm.conSem.conSem_|49||48|5_prove_ltb')).
fof(f147,plain,(
  ( ! [X0,X1] : (s('type.decSem.state'(X0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X0),X1))) = s('type.decSem.state'(X0),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(backward_demodulation,[],[f131,f146])).
fof(f146,plain,(
  ( ! [X0,X1] : (s('type.decSem.state'(X0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X0),X1))) = s('type.decSem.state'(X0),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(backward_demodulation,[],[f130,f113])).
fof(f113,plain,(
  ( ! [X0,X1] : (s('type.decSem.state'(X0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X0),X1))) = s('type.decSem.state'(X0),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1] : s('type.decSem.state'(X0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X0),X1))) = s('type.decSem.state'(X0),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.bool.ARB_0')))))))))),
  inference(flattening,[],[f41])).
fof(f41,plain,(
  ! [X0] : ! [X1] : s('type.decSem.state'(X0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X0),X1))) = s('type.decSem.state'(X0),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.conSem.state_ffi_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X0),X1))))),s('type.decSem.state'(X0),'const.bool.ARB_0')))))))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X16] : ! [X7] : s('type.decSem.state'(X16),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X16),X7))) = s('type.decSem.state'(X16),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X16),'type.ffi.ffi_state'(X16)),'const.combin.K_1'(s('type.ffi.ffi_state'(X16),'const.conSem.state_ffi_1'(s('type.conSem.state'(X16),X7))))),s('type.decSem.state'(X16),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X16),X7))))),s('type.decSem.state'(X16),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X16),X7))))),s('type.decSem.state'(X16),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X16),X7))))),s('type.decSem.state'(X16),'const.bool.ARB_0')))))))))),
  file('thm.con_to_decProof.compile_state_with_clock','thm.con_to_decProof.compile_state_def')).
fof(f130,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),X3),s('type.decSem.state'(X0),X1))))) = s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),X3),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1,X2,X3] : s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),X3),s('type.decSem.state'(X0),X1))))) = s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),X3),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1)))))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),X3),s('type.decSem.state'(X0),X1))))) = s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),X3),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X16] : ! [X7,X18,X8] : s('type.decSem.state'(X16),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X18),s('type.decSem.state'(X16),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),X8),s('type.decSem.state'(X16),X7))))) = s('type.decSem.state'(X16),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),X8),s('type.decSem.state'(X16),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X18),s('type.decSem.state'(X16),X7)))))),
  file('thm.con_to_decProof.compile_state_with_clock','thm.decSem.decSem_39_prove_ltb')).
fof(f131,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.decSem.state'(X0),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),X3),s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),X2),s('type.decSem.state'(X0),X1))))) = s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),X2),s('type.decSem.state'(X0),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),X3),s('type.decSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1,X2,X3] : s('type.decSem.state'(X0),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),X3),s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),X2),s('type.decSem.state'(X0),X1))))) = s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),X2),s('type.decSem.state'(X0),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),X3),s('type.decSem.state'(X0),X1)))))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.decSem.state'(X0),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),X3),s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),X2),s('type.decSem.state'(X0),X1))))) = s('type.decSem.state'(X0),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),X2),s('type.decSem.state'(X0),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),X3),s('type.decSem.state'(X0),X1)))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X16] : ! [X7,X18,X8] : s('type.decSem.state'(X16),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),X8),s('type.decSem.state'(X16),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),X18),s('type.decSem.state'(X16),X7))))) = s('type.decSem.state'(X16),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),X18),s('type.decSem.state'(X16),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),X8),s('type.decSem.state'(X16),X7)))))),
  file('thm.con_to_decProof.compile_state_with_clock','thm.decSem.decSem_43_prove_ltb')).
fof(f30184,plain,(
  ( ! [X45,X43,X44] : (s('type.decSem.state'(X43),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X45),s('type.decSem.state'(X43),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X43),X44))))) = s('type.decSem.state'(X43),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X43),'type.ffi.ffi_state'(X43)),'const.combin.K_1'(s('type.ffi.ffi_state'(X43),'const.conSem.state_ffi_1'(s('type.conSem.state'(X43),X44))))),s('type.decSem.state'(X43),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X45),s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X43),X44))))))),s('type.decSem.state'(X43),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X43),X44))))),s('type.decSem.state'(X43),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X43),X44))))),s('type.decSem.state'(X43),'const.bool.ARB_0')))))))))) )),
  inference(forward_demodulation,[],[f30004,f143])).
fof(f143,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(X0,X1),'const.combin.K_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(X0,X1),'const.combin.o_2'(s(fun(X2,X1),X3),s(fun(X0,X2),'const.combin.K_1'(s(X2,X4)))))) )),
  inference(cnf_transformation,[],[f100])).
fof(f100,plain,(
  ! [X0,X1,X2,X3,X4] : s(fun(X0,X1),'const.combin.K_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(X0,X1),'const.combin.o_2'(s(fun(X2,X1),X3),s(fun(X0,X2),'const.combin.K_1'(s(X2,X4)))))),
  inference(flattening,[],[f99])).
fof(f99,plain,(
  ! [X0,X1,X2] : ! [X3,X4] : s(fun(X0,X1),'const.combin.K_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(X0,X1),'const.combin.o_2'(s(fun(X2,X1),X3),s(fun(X0,X2),'const.combin.K_1'(s(X2,X4)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X13,X14,X15] : ! [X8,X12] : s(fun(X13,X14),'const.combin.K_1'(s(X14,happ(s(fun(X15,X14),X8),s(X15,X12))))) = s(fun(X13,X14),'const.combin.o_2'(s(fun(X15,X14),X8),s(fun(X13,X15),'const.combin.K_1'(s(X15,X12)))))),
  file('thm.con_to_decProof.compile_state_with_clock','thm.combin.K_o_THM|split|1')).
fof(f30004,plain,(
  ( ! [X45,X43,X44] : (s('type.decSem.state'(X43),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X45),s('type.decSem.state'(X43),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X43),X44))))) = s('type.decSem.state'(X43),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X43),'type.ffi.ffi_state'(X43)),'const.combin.K_1'(s('type.ffi.ffi_state'(X43),'const.conSem.state_ffi_1'(s('type.conSem.state'(X43),X44))))),s('type.decSem.state'(X43),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X45),s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.conSem.state_clock_1'(s('type.conSem.state'(X43),X44))))))),s('type.decSem.state'(X43),'const.decSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.conSem.v')),'type.list.list'('type.option.option'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.conSem.v')),'const.conSem.state_globals_1'(s('type.conSem.state'(X43),X44))))),s('type.decSem.state'(X43),'const.decSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.conSem.v')),'const.conSem.state_refs_1'(s('type.conSem.state'(X43),X44))))),s('type.decSem.state'(X43),'const.bool.ARB_0')))))))))) )),
  inference(superposition,[],[f3616,f147])).
fof(f3616,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.decSem.state'(X4),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.decSem.state'(X4),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X4)),X5),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X3))))))) = s('type.decSem.state'(X4),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X4)),X5),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X1),s(fun('type.num.num','type.num.num'),X2))),s('type.decSem.state'(X0),X3)))))) )),
  inference(superposition,[],[f139,f128])).
fof(f128,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1))))) = s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X3),s(fun('type.num.num','type.num.num'),X2))),s('type.decSem.state'(X0),X1)))) )),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2,X3] : s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1))))) = s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X3),s(fun('type.num.num','type.num.num'),X2))),s('type.decSem.state'(X0),X1)))),
  inference(flattening,[],[f69])).
fof(f69,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),X1))))) = s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X3),s(fun('type.num.num','type.num.num'),X2))),s('type.decSem.state'(X0),X1)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X16] : ! [X7,X18,X8] : s('type.decSem.state'(X16),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X8),s('type.decSem.state'(X16),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X18),s('type.decSem.state'(X16),X7))))) = s('type.decSem.state'(X16),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X8),s(fun('type.num.num','type.num.num'),X18))),s('type.decSem.state'(X16),X7)))),
  file('thm.con_to_decProof.compile_state_with_clock','thm.decSem.decSem_33_prove_ltb')).
fof(f139,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.decSem.state'(X0),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.decSem.state'(X1),X2))))) = s('type.decSem.state'(X0),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.decSem.state'(X1),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.decSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.decSem.state'(X0),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.decSem.state'(X1),X2))))) = s('type.decSem.state'(X0),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.decSem.state'(X1),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.decSem.state'(X1),X2)))))),
  inference(flattening,[],[f91])).
fof(f91,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.decSem.state'(X0),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.decSem.state'(X1),X2))))) = s('type.decSem.state'(X0),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X4),s('type.decSem.state'(X1),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.decSem.state'(X1),X2)))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X17,X16] : ! [X7,X18,X8] : s('type.decSem.state'(X17),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X18),s('type.decSem.state'(X17),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X16),'type.ffi.ffi_state'(X17)),X8),s('type.decSem.state'(X16),X7))))) = s('type.decSem.state'(X17),'const.decSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X16),'type.ffi.ffi_state'(X17)),X8),s('type.decSem.state'(X16),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X18),s('type.decSem.state'(X16),X7)))))),
  file('thm.con_to_decProof.compile_state_with_clock','thm.decSem.decSem_4|48|_prove_ltb')).
fof(f108,plain,(
  s('type.decSem.state'(sK0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(sK0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK2),s('type.conSem.state'(sK0),sK1))))) != s('type.decSem.state'(sK0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK2),s('type.decSem.state'(sK0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(sK0),sK1)))))),
  inference(cnf_transformation,[],[f105])).
fof(f105,plain,(
  s('type.decSem.state'(sK0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(sK0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK2),s('type.conSem.state'(sK0),sK1))))) != s('type.decSem.state'(sK0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),sK2),s('type.decSem.state'(sK0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(sK0),sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f103])).
fof(f103,plain,(
  ? [X0,X1,X2] : s('type.decSem.state'(X0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.conSem.state'(X0),X1))))) != s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X0),X1)))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2] : s('type.decSem.state'(X0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.conSem.state'(X0),X1))))) = s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X0),X1)))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ~! [X0] : ! [X1,X2] : s('type.decSem.state'(X0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X0),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.conSem.state'(X0),X1))))) = s('type.decSem.state'(X0),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.decSem.state'(X0),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X0),X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s('type.decSem.state'(X6),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X6),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X8),s('type.conSem.state'(X6),X7))))) = s('type.decSem.state'(X6),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X8),s('type.decSem.state'(X6),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X6),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s('type.decSem.state'(X6),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X6),'const.conSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X8),s('type.conSem.state'(X6),X7))))) = s('type.decSem.state'(X6),'const.decSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X8),s('type.decSem.state'(X6),'const.con_to_decProof.compile_state_1'(s('type.conSem.state'(X6),X7)))))),
  file('thm.con_to_decProof.compile_state_with_clock','thm.con_to_decProof.compile_state_with_clock')).
% SZS output end Proof for thm.con_to_decProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 305
% Passive clauses: 3030
% Generated clauses: 102892
% Final active clauses: 196
% Final passive clauses: 619
% Input formulas: 36
% Initial clauses: 37
% Discarded non-redundant clauses: 9019
% 
% Duplicate literals: 8303
% Trivial inequalities: 737
% Fw subsumption resolutions: 8371
% Fw demodulations: 5252
% Bw demodulations: 534
% Condensations: 17021
% Global subsumptions: 12
% 
% Simple tautologies: 1173
% Equational tautologies: 943
% Forward subsumptions: 58092
% Fw demodulations to eq. taut.: 85
% Bw demodulations to eq. taut.: 18
% 
% Unit resulting resolution: 1859
% Forward superposition: 31761
% Backward superposition: 25560
% Self superposition: 977
% Equality factoring: 495
% Equality resolution: 48
% 
% Split clauses: 273
% Split components: 548
% SAT solver clauses: 3629
% SAT solver unit clauses: 1491
% SAT solver binary clauses: 209
% 
% Sat splits: 273
% Sat splitting refutations: 39
% 
% Memory used [KB]: 69977
% Time elapsed: 10.394 s
% ------------------------------
% ------------------------------
% Success in time 11.76 s
