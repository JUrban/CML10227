Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.HoodMelvilleQueue
% (52461)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 112
% Passive clauses: 2884
% Generated clauses: 14782
% Final active clauses: 105
% Final passive clauses: 2651
% Input formulas: 37
% Initial clauses: 65
% 
% Duplicate literals: 429
% Trivial inequalities: 234
% Fw subsumption resolutions: 1414
% Fw demodulations: 1948
% Bw demodulations: 6
% 
% Simple tautologies: 206
% Equational tautologies: 41
% Forward subsumptions: 7425
% 
% Binary resolution: 198
% Factoring: 1
% Forward superposition: 5542
% Backward superposition: 4641
% Self superposition: 213
% Equality factoring: 94
% Equality resolution: 27
% 
% Split clauses: 152
% Split components: 306
% SAT solver clauses: 317
% SAT solver unit clauses: 13
% SAT solver binary clauses: 89
% 
% Sat splits: 152
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 317
% TWLsolver calls for satisfiability: 97
% 
% Memory used [KB]: 21875
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.HoodMelvilleQueue
% (52484)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 127
% Passive clauses: 718
% Generated clauses: 11398
% Final active clauses: 122
% Final passive clauses: 590
% Input formulas: 37
% Initial clauses: 65
% 
% Duplicate literals: 41
% Trivial inequalities: 143
% Fw subsumption resolutions: 546
% Fw demodulations: 2295
% Bw demodulations: 6
% Condensations: 147
% Global subsumptions: 4
% 
% Simple tautologies: 48
% Equational tautologies: 7
% Forward subsumptions: 6458
% 
% Binary resolution: 68
% Factoring: 1
% Forward superposition: 4214
% Backward superposition: 3019
% Self superposition: 102
% Equality factoring: 6
% Equality resolution: 49
% 
% SAT solver clauses: 1070
% SAT solver unit clauses: 103
% SAT solver binary clauses: 33
% SAT solver learnt clauses: 8
% 
% TWLsolver clauses: 1054
% TWLsolver calls for satisfiability: 737
% 
% Memory used [KB]: 26865
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.HoodMelvilleQueue
% (52515)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 556
% Passive clauses: 10165
% Generated clauses: 121844
% Final active clauses: 215
% Final passive clauses: 1136
% Input formulas: 37
% Initial clauses: 65
% Discarded non-redundant clauses: 7014
% 
% Duplicate literals: 2774
% Trivial inequalities: 976
% Fw subsumption resolutions: 5021
% Fw demodulations: 17759
% Bw demodulations: 4053
% Condensations: 5670
% Global subsumptions: 1563
% 
% Simple tautologies: 694
% Equational tautologies: 355
% Forward subsumptions: 74441
% Fw demodulations to eq. taut.: 49
% Bw demodulations to eq. taut.: 370
% 
% Unit resulting resolution: 4855
% Factoring: 2
% Forward superposition: 36434
% Backward superposition: 31660
% Self superposition: 358
% Equality factoring: 143
% Equality resolution: 58
% 
% Split clauses: 193
% Split components: 395
% SAT solver clauses: 13734
% SAT solver unit clauses: 927
% SAT solver binary clauses: 5458
% 
% Sat splits: 193
% Sat splitting refutations: 1618
% 
% Memory used [KB]: 185114
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.HoodMelvilleQueue
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.HoodMelvilleQueue
% SZS output start Proof for thm.HoodMelvilleQueue
fof(f3258,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f193,f369,f424,f897,f907,f916,f926,f199,f992,f998,f996,f930,f999,f1001,f1124,f1130,f1128,f1126,f1062,f1132,f1195,f994,f1193,f1201,f1199,f1197,f1194,f993,f1131,f1206,f197,f195,f1564,f1567,f1565,f1559,f1558,f1570,f1900,f1901,f1891,f1902,f1903,f2065,f2067,f1566,f2066,f2060,f1569,f2059,f2069,f1571,f2082,f2079,f2076,f2075,f2134,f2135,f2190,f2191,f2192,f2193,f2194,f2428,f2560,f2561,f2581,f2562,f2563,f2583,f2564,f2565,f2580,f2566,f2582,f2567,f2587,f2588,f2568,f2585,f2589,f3190,f3194,f3192,f3196])).
fof(f3196,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f3127,f175])).
fof(f175,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),sK3)))),
  inference(resolution,[],[f104,f141])).
fof(f141,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f97])).
fof(f97,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X28] : (s(bool,'T_0') = s(bool,X28) <=> p(s(bool,X28)))),
  file('thm.HoodMelvilleQueue.status_induction','thm.bool.EQ_CLAUSES|split|0')).
fof(f104,plain,(
  ~p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),sK3))))),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0')))) & ! [X7,X8,X9,X10,X11] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X7),s('type.list.list'(sK1),X8),s('type.list.list'(sK1),X9),s('type.list.list'(sK1),X10),s('type.list.list'(sK1),X11)))))) & ! [X4,X5,X6] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X4),s('type.list.list'(sK1),X5),s('type.list.list'(sK1),X6)))))) & ! [X3] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),X3)))))) & ~p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),sK3))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3])],[f85])).
fof(f85,plain,(
  ? [X0,X1] : (p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0')))) & ! [X7,X8,X9,X10,X11] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10),s('type.list.list'(X0),X11)))))) & ! [X4,X5,X6] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X4),s('type.list.list'(X0),X5),s('type.list.list'(X0),X6)))))) & ! [X3] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(X0),X3)))))) & ? [X2] : ~p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),X2)))))),
  inference(rectify,[],[f78])).
fof(f78,plain,(
  ? [X0,X1] : (p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0')))) & ! [X6,X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10)))))) & ! [X3,X4,X5] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))) & ! [X2] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(X0),X2)))))) & ? [X11] : ~p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),X11)))))),
  inference(flattening,[],[f77])).
fof(f77,plain,(
  ? [X0,X1] : ((p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0')))) & ! [X6,X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10)))))) & ! [X3,X4,X5] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))) & ! [X2] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(X0),X2))))))) & ? [X11] : ~p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),X11)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0')))) & ! [X6,X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10)))))) & ! [X3,X4,X5] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))) & ! [X2] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(X0),X2))))))) => ! [X11] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),X11)))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0')))) & ! [X6,X7,X8,X9,X10] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10)))))) & ! [X3,X4,X5] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))) & ! [X2] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(X0),X2))))))) => ! [X11] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X0),bool),X1),s('type.HoodMelvilleQueue.status'(X0),X11)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X6),bool),X7),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Idle_0')))) & ! [X8,X9,X10,X11,X12] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X6),bool),X7),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X8),s('type.list.list'(X6),X9),s('type.list.list'(X6),X10),s('type.list.list'(X6),X11),s('type.list.list'(X6),X12)))))) & ! [X8,X9,X10] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X6),bool),X7),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X8),s('type.list.list'(X6),X9),s('type.list.list'(X6),X10)))))) & ! [X9] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X6),bool),X7),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(X6),X9))))))) => ! [X13] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X6),bool),X7),s('type.HoodMelvilleQueue.status'(X6),X13)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X6),bool),X7),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Idle_0')))) & ! [X8,X9,X10,X11,X12] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X6),bool),X7),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X8),s('type.list.list'(X6),X9),s('type.list.list'(X6),X10),s('type.list.list'(X6),X11),s('type.list.list'(X6),X12)))))) & ! [X8,X9,X10] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X6),bool),X7),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X8),s('type.list.list'(X6),X9),s('type.list.list'(X6),X10)))))) & ! [X9] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X6),bool),X7),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(X6),X9))))))) => ! [X13] : p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(X6),bool),X7),s('type.HoodMelvilleQueue.status'(X6),X13)))))),
  file('thm.HoodMelvilleQueue.status_induction','thm.HoodMelvilleQueue.status_induction')).
fof(f3127,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),sK3))) | $spl0),
  inference(superposition,[],[f561,f195])).
fof(f561,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X0),s('type.list.list'(sK1),X1),s('type.list.list'(sK1),X2),s('type.list.list'(sK1),X3),s('type.list.list'(sK1),X4)))))) )),
  inference(resolution,[],[f101,f142])).
fof(f142,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f97])).
fof(f101,plain,(
  ( ! [X10,X8,X7,X11,X9] : (p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X7),s('type.list.list'(sK1),X8),s('type.list.list'(sK1),X9),s('type.list.list'(sK1),X10),s('type.list.list'(sK1),X11))))))) )),
  inference(cnf_transformation,[],[f86])).
fof(f3192,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)))) | $spl68),
  inference(cnf_transformation,[],[f3192_D])).
fof(f3192_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)))) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f3194,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)))) | $spl70),
  inference(cnf_transformation,[],[f3194_D])).
fof(f3194_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)))) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f3190,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)))) | ($spl0 | $spl11)),
  inference(forward_demodulation,[],[f3189,f195])).
fof(f3189,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)))) | ($spl0 | $spl11)),
  inference(forward_demodulation,[],[f3188,f195])).
fof(f3188,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)))) | ($spl0 | $spl11)),
  inference(subsumption_resolution,[],[f3187,f123])).
fof(f123,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X7),s('type.list.list'(X0),X5),s('type.list.list'(X0),X3))) != s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X8),s('type.list.list'(X0),X6),s('type.list.list'(X0),X4),s('type.list.list'(X0),X2),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8] : s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X7),s('type.list.list'(X0),X5),s('type.list.list'(X0),X3))) != s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X8),s('type.list.list'(X0),X6),s('type.list.list'(X0),X4),s('type.list.list'(X0),X2),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f53])).
fof(f53,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8] : ~s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X7),s('type.list.list'(X0),X5),s('type.list.list'(X0),X3))) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X8),s('type.list.list'(X0),X6),s('type.list.list'(X0),X4),s('type.list.list'(X0),X2),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6] : ! [X24,X23,X54,X22,X55,X21,X56,X20] : ~s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X56),s('type.list.list'(X6),X55),s('type.list.list'(X6),X54))) = s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X20),s('type.list.list'(X6),X21),s('type.list.list'(X6),X22),s('type.list.list'(X6),X23),s('type.list.list'(X6),X24)))),
  file('thm.HoodMelvilleQueue.status_induction','thm.HoodMelvilleQueue.status_distinct|split|3')).
fof(f3187,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)))) | ($spl0 | $spl11)),
  inference(subsumption_resolution,[],[f3125,f993])).
fof(f3125,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK1),sK3) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))),sK1)))) | $spl0),
  inference(superposition,[],[f195,f120])).
fof(f120,plain,(
  ( ! [X0,X1] : (s('type.HoodMelvilleQueue.status'(X0),X1) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(X0),sK22(X1,X0)))) | s('type.HoodMelvilleQueue.status'(X0),X1) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(X1,X0)),s('type.list.list'(X0),sK20(X1,X0)),s('type.list.list'(X0),sK21(X1,X0)))) | s('type.HoodMelvilleQueue.status'(X0),X1) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(X1,X0)),s('type.list.list'(X0),sK15(X1,X0)),s('type.list.list'(X0),sK16(X1,X0)),s('type.list.list'(X0),sK17(X1,X0)),s('type.list.list'(X0),sK18(X1,X0)))) | s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(X0),X1)) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0,X1] : (s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(X0),X1) | s('type.HoodMelvilleQueue.status'(X0),X1) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(X1,X0)),s('type.list.list'(X0),sK15(X1,X0)),s('type.list.list'(X0),sK16(X1,X0)),s('type.list.list'(X0),sK17(X1,X0)),s('type.list.list'(X0),sK18(X1,X0)))) | s('type.HoodMelvilleQueue.status'(X0),X1) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(X1,X0)),s('type.list.list'(X0),sK20(X1,X0)),s('type.list.list'(X0),sK21(X1,X0)))) | s('type.HoodMelvilleQueue.status'(X0),X1) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(X0),sK22(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22])],[f48])).
fof(f48,plain,(
  ! [X0,X1] : (s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(X0),X1) | ? [X6,X7,X8,X9,X10] : s('type.HoodMelvilleQueue.status'(X0),X1) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10))) | ? [X3,X4,X5] : s('type.HoodMelvilleQueue.status'(X0),X1) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | ? [X2] : s('type.HoodMelvilleQueue.status'(X0),X1) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(X0),X2))))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ! [X0] : ! [X1] : (s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(X0),X1) | ? [X6,X7,X8,X9,X10] : s('type.HoodMelvilleQueue.status'(X0),X1) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X6),s('type.list.list'(X0),X7),s('type.list.list'(X0),X8),s('type.list.list'(X0),X9),s('type.list.list'(X0),X10))) | ? [X3,X4,X5] : s('type.HoodMelvilleQueue.status'(X0),X1) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X3),s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | ? [X2] : s('type.HoodMelvilleQueue.status'(X0),X1) = s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(X0),X2))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X38] : (s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(X6),X38) | ? [X8,X9,X10,X11,X12] : s('type.HoodMelvilleQueue.status'(X6),X38) = s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',X8),s('type.list.list'(X6),X9),s('type.list.list'(X6),X10),s('type.list.list'(X6),X11),s('type.list.list'(X6),X12))) | ? [X8,X9,X10] : s('type.HoodMelvilleQueue.status'(X6),X38) = s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X8),s('type.list.list'(X6),X9),s('type.list.list'(X6),X10))) | ? [X9] : s('type.HoodMelvilleQueue.status'(X6),X38) = s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(X6),X9))))),
  file('thm.HoodMelvilleQueue.status_induction','thm.HoodMelvilleQueue.status_nchotomy')).
fof(f2589,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') = s(bool,happ(s(fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X20),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool)))),X21),s('type.HoodMelvilleQueue.status'(X20),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),'const.HoodMelvilleQueue.Finished_0')))) ) | $spl66),
  inference(cnf_transformation,[],[f2589_D])).
fof(f2589_D,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') = s(bool,happ(s(fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X20),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool)))),X21),s('type.HoodMelvilleQueue.status'(X20),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),'const.HoodMelvilleQueue.Finished_0')))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f2585,plain,(
  p(s(bool,'const.bool.DATATYPE_1'(s(bool,'F_0')))) | $spl60),
  inference(cnf_transformation,[],[f2585_D])).
fof(f2585_D,plain,(
  p(s(bool,'const.bool.DATATYPE_1'(s(bool,'F_0')))) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f2568,plain,(
  ( ! [X21,X20] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X20),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),fun(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),fun(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),bool)))),X21),s('type.HoodMelvilleQueue.status'(X20),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X20),fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X20),'type.HoodMelvilleQueue.status'(X20)),'const.HoodMelvilleQueue.Finished_0')))) )),
  inference(superposition,[],[f150,f151])).
fof(f151,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.HoodMelvilleQueue.status_induction',aHL_BOOL_CASES)).
fof(f150,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X0),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)))),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),'const.HoodMelvilleQueue.Finished_0'))))))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X0),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)))),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),'const.HoodMelvilleQueue.Finished_0'))))))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ! [X0] : ! [X1] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X0),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)))),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),'const.HoodMelvilleQueue.Finished_0'))))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X39] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X6),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)))),X39),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),'const.HoodMelvilleQueue.Finished_0'))))))),
  file('thm.HoodMelvilleQueue.status_induction','thm.HoodMelvilleQueue.datatype_status')).
fof(f2588,plain,(
  ( ! [X19,X18] : (s(bool,'F_0') = s(bool,happ(s(fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X18),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool)))),X19),s('type.HoodMelvilleQueue.status'(X18),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),'const.HoodMelvilleQueue.Finished_0')))) ) | $spl64),
  inference(cnf_transformation,[],[f2588_D])).
fof(f2588_D,plain,(
  ( ! [X19,X18] : (s(bool,'F_0') = s(bool,happ(s(fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X18),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool)))),X19),s('type.HoodMelvilleQueue.status'(X18),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),'const.HoodMelvilleQueue.Finished_0')))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f2587,plain,(
  p(s(bool,'const.bool.DATATYPE_1'(s(bool,'T_0')))) | $spl62),
  inference(cnf_transformation,[],[f2587_D])).
fof(f2587_D,plain,(
  p(s(bool,'const.bool.DATATYPE_1'(s(bool,'T_0')))) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f2567,plain,(
  ( ! [X19,X18] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,'T_0')))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X18),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),fun(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),fun(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),bool)))),X19),s('type.HoodMelvilleQueue.status'(X18),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X18),fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X18),'type.HoodMelvilleQueue.status'(X18)),'const.HoodMelvilleQueue.Finished_0')))) )),
  inference(superposition,[],[f150,f151])).
fof(f2582,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X6),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)))),X7),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),'const.HoodMelvilleQueue.Finished_0'))))) ) | $spl56),
  inference(cnf_transformation,[],[f2582_D])).
fof(f2582_D,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X6),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)))),X7),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),'const.HoodMelvilleQueue.Finished_0'))))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f2566,plain,(
  ( ! [X17,X16] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)))),fun(fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)))))),fun(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)))),fun(fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X16),fun(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)))))),fun(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)))),fun(fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)),bool)))),X17),s('type.HoodMelvilleQueue.status'(X16),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X16),fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X16),'type.HoodMelvilleQueue.status'(X16)),'const.HoodMelvilleQueue.Finished_0'))))) )),
  inference(superposition,[],[f150,f142])).
fof(f2580,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X0),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)))),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),'const.HoodMelvilleQueue.Finished_0'))))) ) | $spl52),
  inference(cnf_transformation,[],[f2580_D])).
fof(f2580_D,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X0),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)))),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),'const.HoodMelvilleQueue.Finished_0'))))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f2565,plain,(
  ( ! [X14,X15] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,'F_0')))) | p(s(bool,happ(s(fun(fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X14),fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)))),fun(fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X14),fun('type.list.list'(X14),fun('type.list.list'(X14),fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)))))),fun(fun('type.num.num',fun('type.list.list'(X14),fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)))),fun(fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X14),fun(fun('type.num.num',fun('type.list.list'(X14),fun('type.list.list'(X14),fun('type.list.list'(X14),fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)))))),fun(fun('type.num.num',fun('type.list.list'(X14),fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)))),fun(fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)),bool)))),X15),s('type.HoodMelvilleQueue.status'(X14),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X14),fun('type.list.list'(X14),fun('type.list.list'(X14),fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X14),fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X14),'type.HoodMelvilleQueue.status'(X14)),'const.HoodMelvilleQueue.Finished_0'))))) )),
  inference(superposition,[],[f150,f140])).
fof(f140,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f69])).
fof(f69,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X28] : (s(bool,'F_0') = s(bool,X28) <=> ~p(s(bool,X28)))),
  file('thm.HoodMelvilleQueue.status_induction','thm.bool.EQ_CLAUSES|split|3')).
fof(f2564,plain,(
  ( ! [X12,X13] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,'F_0')))) | p(s(bool,happ(s(fun(fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X12),fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)))),fun(fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X12),fun('type.list.list'(X12),fun('type.list.list'(X12),fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)))))),fun(fun('type.num.num',fun('type.list.list'(X12),fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)))),fun(fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X12),fun(fun('type.num.num',fun('type.list.list'(X12),fun('type.list.list'(X12),fun('type.list.list'(X12),fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)))))),fun(fun('type.num.num',fun('type.list.list'(X12),fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)))),fun(fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)),bool)))),X13),s('type.HoodMelvilleQueue.status'(X12),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X12),fun('type.list.list'(X12),fun('type.list.list'(X12),fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X12),fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X12),'type.HoodMelvilleQueue.status'(X12)),'const.HoodMelvilleQueue.Finished_0'))))) )),
  inference(superposition,[],[f150,f138])).
fof(f138,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f67])).
fof(f67,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X28] : (s(bool,'F_0') = s(bool,X28) <=> ~p(s(bool,X28)))),
  file('thm.HoodMelvilleQueue.status_induction','thm.bool.EQ_CLAUSES|split|2')).
fof(f2583,plain,(
  ( ! [X8] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X8)))) | ~p(s(bool,X8))) ) | $spl58),
  inference(cnf_transformation,[],[f2583_D])).
fof(f2583_D,plain,(
  ( ! [X8] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X8)))) | ~p(s(bool,X8))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f2563,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X11)))) | ~p(s(bool,X11)) | ~p(s(bool,happ(s(fun(fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X9),fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)))),fun(fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X9),fun('type.list.list'(X9),fun('type.list.list'(X9),fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)))))),fun(fun('type.num.num',fun('type.list.list'(X9),fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)))),fun(fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X9),fun(fun('type.num.num',fun('type.list.list'(X9),fun('type.list.list'(X9),fun('type.list.list'(X9),fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)))))),fun(fun('type.num.num',fun('type.list.list'(X9),fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)))),fun(fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)),bool)))),X10),s('type.HoodMelvilleQueue.status'(X9),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X9),fun('type.list.list'(X9),fun('type.list.list'(X9),fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X9),fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X9),'type.HoodMelvilleQueue.status'(X9)),'const.HoodMelvilleQueue.Finished_0'))))) )),
  inference(superposition,[],[f150,f131])).
fof(f131,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f81])).
fof(f81,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X26,X27] : ((p(s(bool,X26)) => p(s(bool,X27))) => ((p(s(bool,X27)) => p(s(bool,X26))) => s(bool,X26) = s(bool,X27)))),
  file('thm.HoodMelvilleQueue.status_induction','thm.bool.IMP_ANTISYM_AX')).
fof(f2562,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X8)))) | ~p(s(bool,happ(s(fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X6),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)))),X7),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),'const.HoodMelvilleQueue.Finished_0')))) | ~p(s(bool,X8))) )),
  inference(superposition,[],[f150,f131])).
fof(f2581,plain,(
  ( ! [X2] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X2)))) | p(s(bool,X2))) ) | $spl54),
  inference(cnf_transformation,[],[f2581_D])).
fof(f2581_D,plain,(
  ( ! [X2] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X2)))) | p(s(bool,X2))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f2561,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X5)))) | p(s(bool,happ(s(fun(fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X3),fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)))),fun(fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X3),fun('type.list.list'(X3),fun('type.list.list'(X3),fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)))))),fun(fun('type.num.num',fun('type.list.list'(X3),fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)))),fun(fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X3),fun(fun('type.num.num',fun('type.list.list'(X3),fun('type.list.list'(X3),fun('type.list.list'(X3),fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)))))),fun(fun('type.num.num',fun('type.list.list'(X3),fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)))),fun(fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)),bool)))),X4),s('type.HoodMelvilleQueue.status'(X3),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X3),fun('type.list.list'(X3),fun('type.list.list'(X3),fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X3),fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X3),'type.HoodMelvilleQueue.status'(X3)),'const.HoodMelvilleQueue.Finished_0')))) | p(s(bool,X5))) )),
  inference(superposition,[],[f150,f128])).
fof(f128,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f82])).
fof(f2560,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.bool.DATATYPE_1'(s(bool,X2)))) | p(s(bool,X2)) | p(s(bool,happ(s(fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X0),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)))),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),'const.HoodMelvilleQueue.Finished_0'))))) )),
  inference(superposition,[],[f150,f128])).
fof(f2428,plain,(
  $false | $spl36),
  inference(subsumption_resolution,[],[f2427,f143])).
fof(f143,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.HoodMelvilleQueue.status_induction',aHL_FALSITY)).
fof(f2427,plain,(
  p(s(bool,'F_0')) | $spl36),
  inference(forward_demodulation,[],[f2201,f1569])).
fof(f2201,plain,(
  p(s(bool,'const.bool.DATATYPE_1'(s(bool,'F_0')))) | $spl36),
  inference(backward_demodulation,[],[f1569,f150])).
fof(f2194,plain,(
  $false | $spl34),
  inference(trivial_inequality_removal,[],[f2158])).
fof(f2158,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl34),
  inference(superposition,[],[f1566,f154])).
fof(f154,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0')))),
  inference(resolution,[],[f100,f142])).
fof(f100,plain,(
  p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0'))))),
  inference(cnf_transformation,[],[f86])).
fof(f2193,plain,(
  $false | $spl34),
  inference(trivial_inequality_removal,[],[f2159])).
fof(f2159,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl34),
  inference(superposition,[],[f1566,f561])).
fof(f2192,plain,(
  $false | $spl34),
  inference(trivial_inequality_removal,[],[f2160])).
fof(f2160,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl34),
  inference(superposition,[],[f1566,f443])).
fof(f443,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X0),s('type.list.list'(sK1),X1),s('type.list.list'(sK1),X2)))))) )),
  inference(resolution,[],[f102,f142])).
fof(f102,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X4),s('type.list.list'(sK1),X5),s('type.list.list'(sK1),X6))))))) )),
  inference(cnf_transformation,[],[f86])).
fof(f2191,plain,(
  $false | $spl34),
  inference(trivial_inequality_removal,[],[f2161])).
fof(f2161,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl34),
  inference(superposition,[],[f1566,f302])).
fof(f302,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),X0)))))) )),
  inference(resolution,[],[f103,f142])).
fof(f103,plain,(
  ( ! [X3] : (p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),X3))))))) )),
  inference(cnf_transformation,[],[f86])).
fof(f2190,plain,(
  $false | $spl34),
  inference(equality_resolution,[],[f1566])).
fof(f2135,plain,(
  $false | $spl40),
  inference(subsumption_resolution,[],[f2078,f143])).
fof(f2078,plain,(
  p(s(bool,'F_0')) | $spl40),
  inference(resolution,[],[f1571,f144])).
fof(f144,plain,(
  p(s(bool,'F_0')) | p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f98])).
fof(f98,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f73])).
fof(f73,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f36])).
fof(f36,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.HoodMelvilleQueue.status_induction','thm.bool.NOT_CLAUSES|split|1')).
fof(f2134,plain,(
  $false | $spl40),
  inference(subsumption_resolution,[],[f2077,f143])).
fof(f2077,plain,(
  p(s(bool,'F_0')) | $spl40),
  inference(resolution,[],[f1571,f146])).
fof(f146,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f99])).
fof(f99,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f74])).
fof(f74,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f34])).
fof(f34,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.HoodMelvilleQueue.status_induction','thm.bool.NOT_CLAUSES|split|2')).
fof(f2075,plain,(
  $false | $spl40),
  inference(resolution,[],[f1571,f149])).
fof(f149,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.HoodMelvilleQueue.status_induction',aHL_TRUTH)).
fof(f2076,plain,(
  $false | $spl40),
  inference(resolution,[],[f1571,f148])).
fof(f148,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f23])).
fof(f23,axiom,(
  p(s(bool,'T_0'))),
  file('thm.HoodMelvilleQueue.status_induction','thm.bool.TRUTH')).
fof(f2079,plain,(
  $false | $spl40),
  inference(resolution,[],[f1571,f152])).
fof(f152,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f132])).
fof(f132,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6] : ! [X29] : (s(X6,X29) = s(X6,X29) <=> p(s(bool,'T_0')))),
  file('thm.HoodMelvilleQueue.status_induction','thm.bool.REFL_CLAUSE')).
fof(f2082,plain,(
  $false | $spl40),
  inference(resolution,[],[f1571,f150])).
fof(f1571,plain,(
  ( ! [X64] : (~p(s(bool,X64))) ) | $spl40),
  inference(cnf_transformation,[],[f1571_D])).
fof(f1571_D,plain,(
  ( ! [X64] : (~p(s(bool,X64))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f2069,plain,(
  ( ! [X61,X59,X62,X60,X63] : (~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X59),s('type.list.list'(sK1),X60),s('type.list.list'(sK1),X61)))),'T_0',X62,X63)) ) | $spl50),
  inference(cnf_transformation,[],[f2069_D])).
fof(f2069_D,plain,(
  ( ! [X61,X59,X62,X60,X63] : (~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X59),s('type.list.list'(sK1),X60),s('type.list.list'(sK1),X61)))),'T_0',X62,X63)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f2059,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X65),s('type.list.list'(sK1),X66),s('type.list.list'(sK1),X67)))),'T_0',X68,X69) | ~p(s(bool,X64))) )),
  inference(trivial_inequality_removal,[],[f2018])).
fof(f2018,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s(bool,X64) != s(bool,X64) | ~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X65),s('type.list.list'(sK1),X66),s('type.list.list'(sK1),X67)))),'T_0',X68,X69) | ~p(s(bool,X64))) )),
  inference(superposition,[],[f1430,f142])).
fof(f1430,plain,(
  ( ! [X80,X85,X83,X81,X84,X82] : (s(bool,'T_0') != s(bool,X83) | ~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X80),s('type.list.list'(sK1),X81),s('type.list.list'(sK1),X82)))),X83,X84,X85)) )),
  inference(superposition,[],[f106,f443])).
fof(f106,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X1) != s(X0,X2) | ~sP0(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0,X1,X2,X3,X4] : (~sP0(X0,X1,X2,X3,X4) | (s('type.HoodMelvilleQueue.status'(X3),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(X3),X4) & s(X0,X1) != s(X0,X2)))),
  inference(rectify,[],[f87])).
fof(f87,plain,(
  ! [X1,X2,X8,X0,X7] : (~sP0(X1,X2,X8,X0,X7) | (s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(X0),X7) & s(X1,X2) != s(X1,X8)))),
  inference(nnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X1,X2,X8,X0,X7] : (~sP0(X1,X2,X8,X0,X7) | (s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(X0),X7) & s(X1,X2) != s(X1,X8)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f1569,plain,(
  ( ! [X58] : (s(bool,'F_0') = s(bool,X58)) ) | $spl36),
  inference(cnf_transformation,[],[f1569_D])).
fof(f1569_D,plain,(
  ( ! [X58] : (s(bool,'F_0') = s(bool,X58)) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f2060,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X59),s('type.list.list'(sK1),X60),s('type.list.list'(sK1),X61)))),'T_0',X62,X63) | s(bool,'F_0') = s(bool,X58)) )),
  inference(trivial_inequality_removal,[],[f2017])).
fof(f2017,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (s(bool,X58) != s(bool,X58) | ~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X59),s('type.list.list'(sK1),X60),s('type.list.list'(sK1),X61)))),'T_0',X62,X63) | s(bool,'F_0') = s(bool,X58)) )),
  inference(superposition,[],[f1430,f151])).
fof(f2066,plain,(
  ( ! [X14,X19,X17,X20,X18,X16] : (~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X16),s('type.list.list'(sK1),X17),s('type.list.list'(sK1),X18)))),X14,X19,X20) | ~p(s(bool,X14))) ) | $spl48),
  inference(cnf_transformation,[],[f2066_D])).
fof(f2066_D,plain,(
  ( ! [X14,X19,X17,X20,X18,X16] : (~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X16),s('type.list.list'(sK1),X17),s('type.list.list'(sK1),X18)))),X14,X19,X20) | ~p(s(bool,X14))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f1566,plain,(
  ( ! [X15] : (s(bool,'T_0') != s(bool,X15)) ) | $spl34),
  inference(cnf_transformation,[],[f1566_D])).
fof(f1566_D,plain,(
  ( ! [X15] : (s(bool,'T_0') != s(bool,X15)) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f2067,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22] : (s(bool,'T_0') != s(bool,X22) | ~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X23),s('type.list.list'(sK1),X24),s('type.list.list'(sK1),X25)))),X21,X26,X27) | ~p(s(bool,X21))) )),
  inference(subsumption_resolution,[],[f2011,f141])).
fof(f2011,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22] : (s(bool,'T_0') != s(bool,X22) | ~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X23),s('type.list.list'(sK1),X24),s('type.list.list'(sK1),X25)))),X21,X26,X27) | ~p(s(bool,X22)) | ~p(s(bool,X21))) )),
  inference(superposition,[],[f1430,f131])).
fof(f2065,plain,(
  ( ! [X14,X19,X17,X15,X20,X18,X16] : (s(bool,'T_0') != s(bool,X15) | ~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X16),s('type.list.list'(sK1),X17),s('type.list.list'(sK1),X18)))),X14,X19,X20) | ~p(s(bool,X14))) )),
  inference(subsumption_resolution,[],[f2010,f141])).
fof(f2010,plain,(
  ( ! [X14,X19,X17,X15,X20,X18,X16] : (s(bool,'T_0') != s(bool,X15) | ~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X16),s('type.list.list'(sK1),X17),s('type.list.list'(sK1),X18)))),X14,X19,X20) | ~p(s(bool,X14)) | ~p(s(bool,X15))) )),
  inference(superposition,[],[f1430,f131])).
fof(f1903,plain,(
  ( ! [X61,X66,X62,X60,X67,X65] : (~sP0(X65,X66,X67,sK1,'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X60),s('type.list.list'(sK1),X61),s('type.list.list'(sK1),X62)))) ) | $spl46),
  inference(cnf_transformation,[],[f1903_D])).
fof(f1903_D,plain,(
  ( ! [X61,X66,X62,X60,X67,X65] : (~sP0(X65,X66,X67,sK1,'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X60),s('type.list.list'(sK1),X61),s('type.list.list'(sK1),X62)))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f1902,plain,(
  ( ! [X59,X58] : (~sP0(bool,'T_0',happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0')),X58,X59)) ) | $spl44),
  inference(cnf_transformation,[],[f1902_D])).
fof(f1902_D,plain,(
  ( ! [X59,X58] : (~sP0(bool,'T_0',happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0')),X58,X59)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f1891,plain,(
  ( ! [X61,X66,X64,X62,X60,X67,X65,X63] : (~sP0(bool,'T_0',happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0')),X63,X64) | ~sP0(X65,X66,X67,sK1,'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X60),s('type.list.list'(sK1),X61),s('type.list.list'(sK1),X62)))) )),
  inference(superposition,[],[f1554,f105])).
fof(f105,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.HoodMelvilleQueue.status'(X3),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(X3),X4) | ~sP0(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f88])).
fof(f1554,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP0(bool,'T_0',happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X0),s('type.list.list'(sK1),X1),s('type.list.list'(sK1),X2)))),X3,X4)) )),
  inference(equality_resolution,[],[f1429])).
fof(f1429,plain,(
  ( ! [X78,X76,X74,X79,X77,X75] : (s(bool,'T_0') != s(bool,X77) | ~sP0(bool,X77,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X74),s('type.list.list'(sK1),X75),s('type.list.list'(sK1),X76)))),X78,X79)) )),
  inference(superposition,[],[f106,f443])).
fof(f1901,plain,(
  ( ! [X57,X56,X55] : (s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1))))) ) | $spl42),
  inference(cnf_transformation,[],[f1901_D])).
fof(f1901_D,plain,(
  ( ! [X57,X56,X55] : (s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1))))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f1900,plain,(
  ( ! [X59,X57,X58,X56,X55] : (~sP0(bool,'T_0',happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0')),X58,X59) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1))))) )),
  inference(subsumption_resolution,[],[f1890,f123])).
fof(f1890,plain,(
  ( ! [X59,X57,X58,X56,X55] : (~sP0(bool,'T_0',happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0')),X58,X59) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X55),s('type.list.list'(sK1),X56),s('type.list.list'(sK1),X57)),sK1))))) )),
  inference(superposition,[],[f1554,f120])).
fof(f1570,plain,(
  ( ! [X61,X59,X62,X60,X63] : (~sP0(bool,'T_0',happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X59),s('type.list.list'(sK1),X60),s('type.list.list'(sK1),X61)))),X62,X63)) ) | $spl38),
  inference(cnf_transformation,[],[f1570_D])).
fof(f1570_D,plain,(
  ( ! [X61,X59,X62,X60,X63] : (~sP0(bool,'T_0',happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X59),s('type.list.list'(sK1),X60),s('type.list.list'(sK1),X61)))),X62,X63)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f1558,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (~sP0(bool,'T_0',happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X65),s('type.list.list'(sK1),X66),s('type.list.list'(sK1),X67)))),X68,X69) | ~p(s(bool,X64))) )),
  inference(trivial_inequality_removal,[],[f1519])).
fof(f1519,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s(bool,X64) != s(bool,X64) | ~sP0(bool,'T_0',happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X65),s('type.list.list'(sK1),X66),s('type.list.list'(sK1),X67)))),X68,X69) | ~p(s(bool,X64))) )),
  inference(superposition,[],[f1429,f142])).
fof(f1559,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (~sP0(bool,'T_0',happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X59),s('type.list.list'(sK1),X60),s('type.list.list'(sK1),X61)))),X62,X63) | s(bool,'F_0') = s(bool,X58)) )),
  inference(trivial_inequality_removal,[],[f1518])).
fof(f1518,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (s(bool,X58) != s(bool,X58) | ~sP0(bool,'T_0',happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X59),s('type.list.list'(sK1),X60),s('type.list.list'(sK1),X61)))),X62,X63) | s(bool,'F_0') = s(bool,X58)) )),
  inference(superposition,[],[f1429,f151])).
fof(f1565,plain,(
  ( ! [X14,X19,X17,X20,X18,X16] : (~sP0(bool,X14,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X16),s('type.list.list'(sK1),X17),s('type.list.list'(sK1),X18)))),X19,X20) | ~p(s(bool,X14))) ) | $spl32),
  inference(cnf_transformation,[],[f1565_D])).
fof(f1565_D,plain,(
  ( ! [X14,X19,X17,X20,X18,X16] : (~sP0(bool,X14,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X16),s('type.list.list'(sK1),X17),s('type.list.list'(sK1),X18)))),X19,X20) | ~p(s(bool,X14))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f1567,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22] : (s(bool,'T_0') != s(bool,X22) | ~sP0(bool,X21,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X23),s('type.list.list'(sK1),X24),s('type.list.list'(sK1),X25)))),X26,X27) | ~p(s(bool,X21))) )),
  inference(subsumption_resolution,[],[f1512,f141])).
fof(f1512,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22] : (s(bool,'T_0') != s(bool,X22) | ~sP0(bool,X21,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X23),s('type.list.list'(sK1),X24),s('type.list.list'(sK1),X25)))),X26,X27) | ~p(s(bool,X22)) | ~p(s(bool,X21))) )),
  inference(superposition,[],[f1429,f131])).
fof(f1564,plain,(
  ( ! [X14,X19,X17,X15,X20,X18,X16] : (s(bool,'T_0') != s(bool,X15) | ~sP0(bool,X14,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X16),s('type.list.list'(sK1),X17),s('type.list.list'(sK1),X18)))),X19,X20) | ~p(s(bool,X14))) )),
  inference(subsumption_resolution,[],[f1511,f141])).
fof(f1511,plain,(
  ( ! [X14,X19,X17,X15,X20,X18,X16] : (s(bool,'T_0') != s(bool,X15) | ~sP0(bool,X14,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',X16),s('type.list.list'(sK1),X17),s('type.list.list'(sK1),X18)))),X19,X20) | ~p(s(bool,X14)) | ~p(s(bool,X15))) )),
  inference(superposition,[],[f1429,f131])).
fof(f195,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1)))) | $spl0),
  inference(cnf_transformation,[],[f195_D])).
fof(f195_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f197,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) | $spl2),
  inference(cnf_transformation,[],[f197_D])).
fof(f197_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f1206,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1)))) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1205,f198])).
fof(f198,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) != s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) | $spl5),
  inference(cnf_transformation,[],[f198_D])).
fof(f198_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) != s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f1205,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1)))) | $spl11),
  inference(trivial_inequality_removal,[],[f1202])).
fof(f1202,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1)))) | $spl11),
  inference(superposition,[],[f993,f120])).
fof(f1131,plain,(
  ( ! [X2,X0,X1] : (~sP0(X0,X1,X2,sK1,'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))))) ) | $spl24),
  inference(cnf_transformation,[],[f1131_D])).
fof(f1131_D,plain,(
  ( ! [X2,X0,X1] : (~sP0(X0,X1,X2,sK1,'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f993,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK1),sK3) | $spl11),
  inference(cnf_transformation,[],[f993_D])).
fof(f993_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK1),sK3) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f1194,plain,(
  ( ! [X2,X0,X1] : (s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK1),sK3) | ~sP0(X0,X1,X2,sK1,'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))))) ) | $spl5),
  inference(superposition,[],[f198,f105])).
fof(f1197,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | $spl26),
  inference(cnf_transformation,[],[f1197_D])).
fof(f1197_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f1199,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | $spl28),
  inference(cnf_transformation,[],[f1199_D])).
fof(f1199_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f1201,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | $spl30),
  inference(cnf_transformation,[],[f1201_D])).
fof(f1201_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f1193,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') != s('type.HoodMelvilleQueue.status'(sK1),sK3) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | $spl5),
  inference(superposition,[],[f198,f120])).
fof(f994,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK1),sK3) | $spl10),
  inference(cnf_transformation,[],[f994_D])).
fof(f994_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK1),sK3) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f1195,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK1),sK3) | $spl5),
  inference(trivial_inequality_removal,[],[f1192])).
fof(f1192,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) != s('type.HoodMelvilleQueue.status'(sK1),sK3) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK1),sK3) | $spl5),
  inference(superposition,[],[f198,f120])).
fof(f1132,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f1063,f175])).
fof(f1063,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),sK3))) | $spl4),
  inference(superposition,[],[f302,f199])).
fof(f1062,plain,(
  ( ! [X2,X0,X1] : (s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK1),sK3) | ~sP0(X0,X1,X2,sK1,'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))))) ) | $spl4),
  inference(superposition,[],[f199,f105])).
fof(f1126,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | $spl18),
  inference(cnf_transformation,[],[f1126_D])).
fof(f1126_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f1128,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | $spl20),
  inference(cnf_transformation,[],[f1128_D])).
fof(f1128_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f1130,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | $spl22),
  inference(cnf_transformation,[],[f1130_D])).
fof(f1130_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f1124,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK1),sK3) | $spl4),
  inference(forward_demodulation,[],[f1123,f199])).
fof(f1123,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK1),sK3) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | $spl4),
  inference(forward_demodulation,[],[f1122,f199])).
fof(f1122,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK1),sK3) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | $spl4),
  inference(forward_demodulation,[],[f1061,f199])).
fof(f1061,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK1),sK3) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1))),sK1)))) | $spl4),
  inference(superposition,[],[f199,f120])).
fof(f1001,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f1000,f143])).
fof(f1000,plain,(
  p(s(bool,'F_0')) | $spl2),
  inference(forward_demodulation,[],[f931,f176])).
fof(f176,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),sK3)))),
  inference(resolution,[],[f104,f140])).
fof(f931,plain,(
  p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),sK3)))) | $spl2),
  inference(superposition,[],[f102,f197])).
fof(f999,plain,(
  ( ! [X2,X0,X1] : (~sP0(X0,X1,X2,sK1,'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))))) ) | $spl16),
  inference(cnf_transformation,[],[f999_D])).
fof(f999_D,plain,(
  ( ! [X2,X0,X1] : (~sP0(X0,X1,X2,sK1,'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f930,plain,(
  ( ! [X2,X0,X1] : (s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK1),sK3) | ~sP0(X0,X1,X2,sK1,'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))))) ) | $spl2),
  inference(superposition,[],[f197,f105])).
fof(f996,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)))) | $spl12),
  inference(cnf_transformation,[],[f996_D])).
fof(f996_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f998,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)))) | $spl14),
  inference(cnf_transformation,[],[f998_D])).
fof(f998_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f992,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK1),sK3) | $spl2),
  inference(forward_demodulation,[],[f991,f197])).
fof(f991,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK1),sK3) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)))) | $spl2),
  inference(forward_demodulation,[],[f990,f197])).
fof(f990,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK1),sK3) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)))) | $spl2),
  inference(subsumption_resolution,[],[f929,f123])).
fof(f929,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0') = s('type.HoodMelvilleQueue.status'(sK1),sK3) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK20('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK21('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK15('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK16('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK17('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)),s('type.list.list'(sK1),sK18('const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1))),sK1)))) | $spl2),
  inference(superposition,[],[f197,f120])).
fof(f199,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) | $spl4),
  inference(cnf_transformation,[],[f199_D])).
fof(f199_D,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f926,plain,(
  ( ! [X2,X0,X1] : (~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0')),X0,X1,X2) | s(bool,'F_0') != s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f926_D])).
fof(f926_D,plain,(
  ( ! [X2,X0,X1] : (~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0')),X0,X1,X2) | s(bool,'F_0') != s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f916,plain,(
  ( ! [X2,X0,X1] : (~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0')),X0,X1,X2) | s(bool,'F_0') != s(bool,X0) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))))) )),
  inference(superposition,[],[f400,f120])).
fof(f400,plain,(
  ( ! [X12,X13,X11] : (~sP0(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),sK3)),X11,X12,X13) | s(bool,'F_0') != s(bool,X11)) )),
  inference(superposition,[],[f106,f176])).
fof(f907,plain,(
  ( ! [X2,X0,X1] : (~sP0(bool,X0,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0')),X1,X2) | s(bool,'F_0') != s(bool,X0)) ) | $spl6),
  inference(cnf_transformation,[],[f907_D])).
fof(f907_D,plain,(
  ( ! [X2,X0,X1] : (~sP0(bool,X0,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0')),X1,X2) | s(bool,'F_0') != s(bool,X0)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f897,plain,(
  ( ! [X2,X0,X1] : (~sP0(bool,X0,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0')),X1,X2) | s(bool,'F_0') != s(bool,X0) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))))) )),
  inference(superposition,[],[f399,f120])).
fof(f399,plain,(
  ( ! [X10,X8,X9] : (~sP0(bool,X8,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),sK3)),X9,X10) | s(bool,'F_0') != s(bool,X8)) )),
  inference(superposition,[],[f106,f176])).
fof(f424,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))))),
  inference(subsumption_resolution,[],[f423,f281])).
fof(f281,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(forward_demodulation,[],[f280,f154])).
fof(f280,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0')))),
  inference(subsumption_resolution,[],[f231,f152])).
fof(f231,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0')))),
  inference(superposition,[],[f137,f154])).
fof(f137,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f95])).
fof(f423,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))))),
  inference(forward_demodulation,[],[f371,f154])).
fof(f371,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0'))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))))),
  inference(superposition,[],[f176,f120])).
fof(f369,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))))),
  inference(subsumption_resolution,[],[f356,f154])).
fof(f356,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0'))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))))),
  inference(superposition,[],[f175,f120])).
fof(f193,plain,(
  s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))))),
  inference(subsumption_resolution,[],[f180,f100])).
fof(f180,plain,(
  ~p(s(bool,happ(s(fun('type.HoodMelvilleQueue.status'(sK1),bool),sK2),s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Idle_0')))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Finished_1'(s('type.list.list'(sK1),sK22(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Appending_3'(s('type.num.num',sK19(sK3,sK1)),s('type.list.list'(sK1),sK20(sK3,sK1)),s('type.list.list'(sK1),sK21(sK3,sK1)))) | s('type.HoodMelvilleQueue.status'(sK1),sK3) = s('type.HoodMelvilleQueue.status'(sK1),'const.HoodMelvilleQueue.Reversing_5'(s('type.num.num',sK14(sK3,sK1)),s('type.list.list'(sK1),sK15(sK3,sK1)),s('type.list.list'(sK1),sK16(sK3,sK1)),s('type.list.list'(sK1),sK17(sK3,sK1)),s('type.list.list'(sK1),sK18(sK3,sK1))))),
  inference(superposition,[],[f104,f120])).
% SZS output end Proof for thm.HoodMelvilleQueue
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 90
% Passive clauses: 577
% Generated clauses: 3070
% Final active clauses: 73
% Final passive clauses: 491
% Input formulas: 37
% Initial clauses: 52
% 
% Selected by SInE selection: 25
% SInE iterations: 1
% 
% Duplicate literals: 33
% Trivial inequalities: 59
% Fw subsumption resolutions: 216
% Fw demodulations: 416
% Bw demodulations: 12
% 
% Simple tautologies: 41
% Equational tautologies: 1
% Forward subsumptions: 1515
% 
% Binary resolution: 201
% Forward superposition: 1462
% Backward superposition: 642
% Self superposition: 2
% Equality resolution: 3
% 
% Split clauses: 33
% Split components: 79
% SAT solver clauses: 49
% SAT solver unit clauses: 15
% SAT solver binary clauses: 19
% 
% Sat splits: 33
% Sat splitting refutations: 15
% 
% Memory used [KB]: 9083
% Time elapsed: 0.498 s
% ------------------------------
% ------------------------------
% Success in time 12.28 s
