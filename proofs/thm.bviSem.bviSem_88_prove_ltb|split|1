Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bviSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bviSem
% SZS output start Proof for thm.bviSem
fof(f16682,plain,(
  $false),
  inference(subsumption_resolution,[],[f16681,f191])).
fof(f191,plain,(
  s('type.bviSem.state'(sK0),sK2) != s('type.bviSem.state'(sK0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK0),sK2),s('type.bviSem.state'(sK0),sK1)))),
  inference(cnf_transformation,[],[f168])).
fof(f168,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK2))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1)))))) & s('type.bviSem.state'(sK0),sK2) != s('type.bviSem.state'(sK0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK0),sK2),s('type.bviSem.state'(sK0),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f152])).
fof(f152,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1)))))) & s('type.bviSem.state'(X0),X2) != s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X2),s('type.bviSem.state'(X0),X1))))),
  inference(ennf_transformation,[],[f59])).
fof(f59,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1)))))) => s('type.bviSem.state'(X0),X2) = s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X2),s('type.bviSem.state'(X0),X1))))),
  inference(flattening,[],[f58])).
fof(f58,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1)))))) => s('type.bviSem.state'(X0),X2) = s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X2),s('type.bviSem.state'(X0),X1))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),X8))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),X7)))))) => s('type.bviSem.state'(X6),X8) = s('type.bviSem.state'(X6),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X6),X8),s('type.bviSem.state'(X6),X7))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),X8))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),X7)))))) => s('type.bviSem.state'(X6),X8) = s('type.bviSem.state'(X6),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X6),X8),s('type.bviSem.state'(X6),X7))))),
  file('thm.bviSem.bviSem_88_prove_ltb|split|1','thm.bviSem.bviSem_88_prove_ltb|split|1')).
fof(f16681,plain,(
  s('type.bviSem.state'(sK0),sK2) = s('type.bviSem.state'(sK0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK0),sK2),s('type.bviSem.state'(sK0),sK1)))),
  inference(forward_demodulation,[],[f16590,f224])).
fof(f224,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f79])).
fof(f79,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X10,X11] : s(X6,X10) = s(X6,'const.bool.COND_3'(s(bool,'T_0'),s(X6,X10),s(X6,X11)))),
  file('thm.bviSem.bviSem_88_prove_ltb|split|1','thm.bool.COND_CLAUSES|split|0')).
fof(f16590,plain,(
  s('type.bviSem.state'(sK0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(sK0),sK2),s('type.bviSem.state'(sK0),sK1))) = s('type.bviSem.state'(sK0),'const.bool.COND_3'(s(bool,'T_0'),s('type.bviSem.state'(sK0),sK2),s('type.bviSem.state'(sK0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1))))),s('type.bviSem.state'(sK0),sK2)))))),
  inference(superposition,[],[f248,f459])).
fof(f459,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK2))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1)))))),
  inference(resolution,[],[f190,f200])).
fof(f200,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f169])).
fof(f169,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X12] : (s(bool,'T_0') = s(bool,X12) <=> p(s(bool,X12)))),
  file('thm.bviSem.bviSem_88_prove_ltb|split|1','thm.bool.EQ_CLAUSES|split|1')).
fof(f190,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK2))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1))))))),
  inference(cnf_transformation,[],[f168])).
fof(f248,plain,(
  ( ! [X2,X0,X1] : (s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X1),s('type.bviSem.state'(X0),X2))) = s('type.bviSem.state'(X0),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))))),s('type.bviSem.state'(X0),X1),s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))))),s('type.bviSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1,X2] : s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X1),s('type.bviSem.state'(X0),X2))) = s('type.bviSem.state'(X0),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))))),s('type.bviSem.state'(X0),X1),s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))))),s('type.bviSem.state'(X0),X1)))))),
  inference(flattening,[],[f127])).
fof(f127,plain,(
  ! [X0] : ! [X1,X2] : s('type.bviSem.state'(X0),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X0),X1),s('type.bviSem.state'(X0),X2))) = s('type.bviSem.state'(X0),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))))),s('type.bviSem.state'(X0),X1),s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))))),s('type.bviSem.state'(X0),X1)))))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X20] : ! [X8,X7] : s('type.bviSem.state'(X20),'const.bviSem.check_clock_2'(s('type.bviSem.state'(X20),X8),s('type.bviSem.state'(X20),X7))) = s('type.bviSem.state'(X20),'const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X20),X8))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X20),X7))))),s('type.bviSem.state'(X20),X8),s('type.bviSem.state'(X20),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X20),X7))))),s('type.bviSem.state'(X20),X8)))))),
  file('thm.bviSem.bviSem_88_prove_ltb|split|1','thm.bviSem.check_clock_def')).
% SZS output end Proof for thm.bviSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 171
% Passive clauses: 2404
% Generated clauses: 16109
% Final active clauses: 137
% Final passive clauses: 2060
% Input formulas: 56
% Initial clauses: 91
% 
% Duplicate literals: 607
% Trivial inequalities: 503
% Fw subsumption resolutions: 1625
% Fw demodulations: 1248
% Bw demodulations: 32
% 
% Simple tautologies: 432
% Equational tautologies: 38
% Forward subsumptions: 8743
% 
% Binary resolution: 387
% Factoring: 1
% Forward superposition: 6717
% Backward superposition: 4538
% Self superposition: 151
% Equality factoring: 71
% Equality resolution: 44
% 
% Split clauses: 266
% Split components: 551
% SAT solver clauses: 535
% SAT solver unit clauses: 27
% SAT solver binary clauses: 135
% 
% Sat splits: 266
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 527
% TWLsolver calls for satisfiability: 108
% 
% Memory used [KB]: 9210
% Time elapsed: 0.463 s
% ------------------------------
% ------------------------------
% Success in time 0.47 s
