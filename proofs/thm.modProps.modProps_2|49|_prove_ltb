Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.modProps
% (35218)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 106
% Passive clauses: 2430
% Generated clauses: 13883
% Final active clauses: 105
% Final passive clauses: 2226
% Input formulas: 36
% Initial clauses: 43
% 
% Duplicate literals: 377
% Trivial inequalities: 463
% Fw subsumption resolutions: 717
% Fw demodulations: 2256
% 
% Simple tautologies: 181
% Equational tautologies: 22
% Forward subsumptions: 7188
% 
% Binary resolution: 25
% Forward superposition: 4896
% Backward superposition: 4806
% Self superposition: 204
% Equality factoring: 54
% Equality resolution: 16
% 
% Split clauses: 75
% Split components: 150
% SAT solver clauses: 239
% SAT solver unit clauses: 13
% SAT solver binary clauses: 68
% 
% Sat splits: 75
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 239
% TWLsolver calls for satisfiability: 35
% 
% Memory used [KB]: 19317
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.modProps
% (35236)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 77
% Passive clauses: 983
% Generated clauses: 8516
% Final active clauses: 71
% Final passive clauses: 871
% Input formulas: 36
% Initial clauses: 43
% 
% Duplicate literals: 267
% Trivial inequalities: 150
% Fw subsumption resolutions: 302
% Fw demodulations: 642
% Bw demodulations: 40
% Condensations: 657
% 
% Simple tautologies: 159
% Equational tautologies: 19
% Forward subsumptions: 3698
% 
% Binary resolution: 28
% Forward superposition: 2940
% Backward superposition: 2233
% Self superposition: 165
% Equality factoring: 42
% Equality resolution: 22
% 
% Split clauses: 26
% Split components: 52
% SAT solver clauses: 1514
% SAT solver unit clauses: 68
% SAT solver binary clauses: 60
% 
% Sat splits: 26
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1514
% TWLsolver calls for satisfiability: 155
% 
% Memory used [KB]: 23155
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 135 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.modProps
% (35275)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 530
% Passive clauses: 7928
% Generated clauses: 184244
% Final active clauses: 272
% Final passive clauses: 1079
% Input formulas: 36
% Initial clauses: 43
% Discarded non-redundant clauses: 36619
% 
% Duplicate literals: 2015
% Trivial inequalities: 3158
% Fw subsumption resolutions: 7304
% Fw demodulations: 74935
% Bw demodulations: 2855
% Condensations: 3256
% Global subsumptions: 332
% 
% Simple tautologies: 989
% Equational tautologies: 752
% Forward subsumptions: 80698
% Fw demodulations to eq. taut.: 18
% Bw demodulations to eq. taut.: 105
% 
% Unit resulting resolution: 14675
% Forward superposition: 44763
% Backward superposition: 27507
% Self superposition: 326
% Equality factoring: 67
% Equality resolution: 100
% 
% Split clauses: 73
% Split components: 166
% SAT solver clauses: 8921
% SAT solver unit clauses: 1791
% SAT solver binary clauses: 3989
% 
% Sat splits: 73
% Sat splitting refutations: 513
% 
% Memory used [KB]: 155690
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 31 next slice time: 31
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.modProps
% Refutation not found, incomplete strategy
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation not found, incomplete strategy

% Active clauses: 11
% Passive clauses: 2
% Generated clauses: 18
% Final active clauses: 11
% Input formulas: 36
% Initial clauses: 12
% 
% Selected by SInE selection: 10
% SInE iterations: 1
% 
% Simple tautologies: 2
% Forward subsumptions: 16
% 
% Forward superposition: 17
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 1279
% Time elapsed: 0.006 s
% ------------------------------
% ------------------------------
% remaining time: 31 next slice time: 6
lrs+1002_2:3_br=off:fde=unused:gs=on:gsaa=from_current:gsem=on:gsssp=full:nwc=1:sas=minisat:stl=30:sac=on:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none:sp=reverse_arity:urr=on_4 on thm.modProps
% (35717)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 66
% Passive clauses: 1349
% Generated clauses: 9371
% Final active clauses: 63
% Final passive clauses: 1257
% Input formulas: 36
% Initial clauses: 43
% 
% Duplicate literals: 153
% Trivial inequalities: 96
% Fw subsumption resolutions: 498
% Fw demodulations: 1334
% Bw demodulations: 28
% 
% Simple tautologies: 165
% Equational tautologies: 69
% Forward subsumptions: 5338
% 
% Unit resulting resolution: 491
% Forward superposition: 3819
% Backward superposition: 2709
% Self superposition: 173
% Equality factoring: 20
% Equality resolution: 6
% 
% Split clauses: 1
% Split components: 2
% SAT solver clauses: 1352
% SAT solver unit clauses: 455
% SAT solver binary clauses: 291
% 
% Sat splits: 1
% 
% Memory used [KB]: 23794
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 24 next slice time: 15
lrs+1011_12_bs=on:bsr=unit_only:cond=on:gs=on:gsaa=from_current:gsssp=full:nwc=1.1:sas=minisat:stl=60:sos=all:sac=on:sdd=off:sser=off:sfr=on:ssfp=100000:ssfq=1.2:ssnc=none:sp=reverse_arity:updr=off_14 on thm.modProps
% (35738)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 162
% Passive clauses: 3765
% Generated clauses: 13022
% Final active clauses: 110
% Final passive clauses: 2286
% Input formulas: 36
% Initial clauses: 43
% 
% Duplicate literals: 247
% Trivial inequalities: 359
% Fw subsumption resolutions: 429
% Bw subsumption resolutions: 262
% Fw demodulations: 1975
% Bw demodulations: 276
% Condensations: 150
% 
% Simple tautologies: 227
% Equational tautologies: 8
% Forward subsumptions: 5863
% Backward subsumptions: 1328
% 
% Binary resolution: 873
% Forward superposition: 5493
% Backward superposition: 3163
% Self superposition: 16
% Equality factoring: 13
% Equality resolution: 25
% 
% Split clauses: 2
% Split components: 4
% SAT solver clauses: 3770
% SAT solver unit clauses: 3
% SAT solver binary clauses: 467
% 
% Sat splits: 2
% 
% Memory used [KB]: 24306
% Time elapsed: 1.600 s
% ------------------------------
% ------------------------------
% remaining time: 8 next slice time: 8
lrs+10_8:1_bd=preordered:bs=on:ccuc=first:fsr=off:fde=unused:gs=on:gsaa=from_current:gsem=on:gsssp=full:nwc=1:nicw=on:sas=minisat:stl=120:sos=on:sscc=on:sser=off:sfr=on:ssfp=4000:ssfq=1.0:ssnc=none:sp=reverse_arity:urr=on_7 on thm.modProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modProps
% SZS output start Proof for thm.modProps
fof(f427,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f128,f292,f142])).
fof(f142,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f114])).
fof(f114,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2))))))),
  inference(nnf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1,X2] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X42,X43,X44] : (p(s(bool,happ(s(fun(X42,bool),happ(s(fun(X42,fun(X42,bool)),'=_0'),s(X42,X43))),s(X42,X44)))) <=> s(X42,X43) = s(X42,X44))),
  file('thm.modProps.modProps_2|49|_prove_ltb',arity_0_HL_EQ)).
fof(f292,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.pair.prod'('type.modSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),bool),happ(s(fun('type.pair.prod'('type.modSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),fun('type.pair.prod'('type.modSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),bool)),'=_0'),s('type.pair.prod'('type.modSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',sK2))),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',sK3),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0'))))))),s('type.pair.prod'('type.modSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),X0))))) )),
  inference(unit_resulting_resolution,[],[f159,f138])).
fof(f138,plain,(
  ( ! [X2,X0,X8,X1] : (~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X8)))) | p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK7(X2,X1,X0)),s(X1,sK8(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1,X2] : ((! [X8] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X8)))) | p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK7(X2,X1,X0)),s(X1,sK8(X2,X1,X0)))))))) & (! [X4,X5] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))) | p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),sK9(X2,X1,X0)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7,sK8,sK9])],[f111])).
fof(f111,plain,(
  ! [X0,X1,X2] : ((! [X8] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X8)))) | ? [X6,X7] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X6),s(X1,X7))))))) & (! [X4,X5] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))) | ? [X3] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X3))))))),
  inference(rectify,[],[f110])).
fof(f110,plain,(
  ! [X0,X1,X2] : ((! [X3] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X3)))) | ? [X4,X5] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))))))) & (! [X4,X5] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))) | ? [X3] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X3))))))),
  inference(nnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1,X2] : (? [X3] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X3)))) <=> ? [X4,X5] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))))),
  inference(flattening,[],[f65])).
fof(f65,plain,(
  ! [X0,X1] : ! [X2] : (? [X3] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X3)))) <=> ? [X4,X5] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6,X17] : ! [X18] : (? [X19] : p(s(bool,happ(s(fun('type.pair.prod'(X6,X17),bool),X18),s('type.pair.prod'(X6,X17),X19)))) <=> ? [X20,X21] : p(s(bool,happ(s(fun('type.pair.prod'(X6,X17),bool),X18),s('type.pair.prod'(X6,X17),'const.pair.,_2'(s(X6,X20),s(X17,X21)))))))),
  file('thm.modProps.modProps_2|49|_prove_ltb','thm.pair.EXISTS_PROD')).
fof(f159,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.pair.prod'('type.modSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),bool),happ(s(fun('type.pair.prod'('type.modSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),fun('type.pair.prod'('type.modSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),bool)),'=_0'),s('type.pair.prod'('type.modSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',sK2))),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',sK3),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0'))))))),s('type.pair.prod'('type.modSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK0),X0),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X1))))))) )),
  inference(unit_resulting_resolution,[],[f115,f141])).
fof(f141,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f114])).
fof(f115,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.modSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X5))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',sK2))),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',sK3),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X4,X5] : s('type.pair.prod'('type.modSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X5))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',sK2))),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',sK3),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0')))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f100])).
fof(f100,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5] : s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X5))) != s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',X2))),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',X3),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0')))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X5))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',X2))),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',X3),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0')))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ~! [X0] : ! [X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X5))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',X2))),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',X3),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0')))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X6),X10),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X11))) = s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',X8))),s('type.modSem.state'(X6),X7),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',X9),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0')))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X6),X10),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X11))) = s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',X8))),s('type.modSem.state'(X6),X7),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',X9),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0')))))),
  file('thm.modProps.modProps_2|49|_prove_ltb','thm.modProps.modProps_2|49|_prove_ltb')).
fof(f128,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1] : s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ! [X0] : ! [X1] : s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X27] : ! [X29] : s(X27,X29) = s(X27,happ(s(fun(X27,X27),'_i_0_0'),s(X27,X29)))),
  file('thm.modProps.modProps_2|49|_prove_ltb','_i0_ax')).
% SZS output end Proof for thm.modProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 45
% Passive clauses: 12
% Generated clauses: 298
% Final active clauses: 43
% Final passive clauses: 7
% Input formulas: 36
% Initial clauses: 43
% 
% Fw demodulations: 40
% Bw demodulations: 2
% 
% Simple tautologies: 2
% Forward subsumptions: 215
% 
% Binary resolution: 6
% Unit resulting resolution: 23
% Forward superposition: 230
% 
% SAT solver clauses: 14
% SAT solver unit clauses: 12
% 
% Memory used [KB]: 2814
% Time elapsed: 0.024 s
% ------------------------------
% ------------------------------
% Success in time 14.147 s
