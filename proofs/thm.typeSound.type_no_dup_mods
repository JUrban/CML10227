Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.typeSound
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.typeSound
% SZS output start Proof for thm.typeSound
fof(f20746,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f20669,f239,f395,f397,f221,f398,f5866,f399,f5868,f407])).
fof(f407,plain,(
  $false | ($spl3 | $spl4)),
  inference(resolution,[],[f399,f398])).
fof(f5868,plain,(
  s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),sK16))))) | $spl134),
  inference(cnf_transformation,[],[f5868_D])).
fof(f5868_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),sK16))))) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f399,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl4),
  inference(cnf_transformation,[],[f399_D])).
fof(f399_D,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f5866,plain,(
  ( ! [X338] : (p(s(bool,X338)) | s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),sK16)))))) )),
  inference(subsumption_resolution,[],[f5260,f228])).
fof(f228,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X15] : (s(bool,'T_0') = s(bool,X15) <=> p(s(bool,X15)))),
  file('thm.typeSound.type_no_dup_mods','thm.bool.EQ_CLAUSES|split|1')).
fof(f5260,plain,(
  ( ! [X338] : (p(s(bool,X338)) | s(bool,'T_0') = s(bool,X338) | s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),sK16)))))) )),
  inference(superposition,[],[f4377,f797])).
fof(f797,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f222,f222])).
fof(f222,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.typeSound.type_no_dup_mods',aHL_BOOL_CASES)).
fof(f4377,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),sK16))))))),
  inference(resolution,[],[f213,f387])).
fof(f387,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.typeSystem.type_prog_6'(s(bool,X0),s('type.typeSystem.decls',X1),s('type.typeSystem.type_environment',X2),s('type.list.list'('type.ast.top'),X3),s('type.typeSystem.decls',X4),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))))),X5)))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X3))))))) )),
  inference(cnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (~p(s(bool,'const.typeSystem.type_prog_6'(s(bool,X0),s('type.typeSystem.decls',X1),s('type.typeSystem.type_environment',X2),s('type.list.list'('type.ast.top'),X3),s('type.typeSystem.decls',X4),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))))),X5)))) | (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X3)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.typeSystem.decls_defined_mods_1'(s('type.typeSystem.decls',X1))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X3))))))))))),
  inference(ennf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.typeSystem.type_prog_6'(s(bool,X0),s('type.typeSystem.decls',X1),s('type.typeSystem.type_environment',X2),s('type.list.list'('type.ast.top'),X3),s('type.typeSystem.decls',X4),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))))),X5)))) => (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X3)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.typeSystem.decls_defined_mods_1'(s('type.typeSystem.decls',X1))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X3))))))))))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X6,X7,X8,X9,X10,X32] : (p(s(bool,'const.typeSystem.type_prog_6'(s(bool,X6),s('type.typeSystem.decls',X7),s('type.typeSystem.type_environment',X8),s('type.list.list'('type.ast.top'),X9),s('type.typeSystem.decls',X10),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))))),X32)))) => (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X9)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.typeSystem.decls_defined_mods_1'(s('type.typeSystem.decls',X7))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X9))))))))))),
  file('thm.typeSound.type_no_dup_mods','thm.typeSound.typeSound_69_prove_ltb')).
fof(f213,plain,(
  p(s(bool,'const.typeSystem.type_prog_6'(s(bool,sK13),s('type.typeSystem.decls',sK14),s('type.typeSystem.type_environment',sK15),s('type.list.list'('type.ast.top'),sK16),s('type.typeSystem.decls',sK17),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),sK18),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),sK19),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),sK20),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),sK21))))))))))),
  inference(cnf_transformation,[],[f136])).
fof(f136,plain,(
  p(s(bool,'const.typeSystem.type_prog_6'(s(bool,sK13),s('type.typeSystem.decls',sK14),s('type.typeSystem.type_environment',sK15),s('type.list.list'('type.ast.top'),sK16),s('type.typeSystem.decls',sK17),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),sK18),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),sK19),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),sK20),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),sK21)))))))))) & ~p(s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),sK16),s(fun('type.list.list'('type.string.char'),bool),'const.typeSystem.decls_defined_mods_1'(s('type.typeSystem.decls',sK14))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21])],[f91])).
fof(f91,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8] : (p(s(bool,'const.typeSystem.type_prog_6'(s(bool,X0),s('type.typeSystem.decls',X1),s('type.typeSystem.type_environment',X2),s('type.list.list'('type.ast.top'),X3),s('type.typeSystem.decls',X4),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X6),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),X8)))))))))) & ~p(s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),X3),s(fun('type.list.list'('type.string.char'),bool),'const.typeSystem.decls_defined_mods_1'(s('type.typeSystem.decls',X1)))))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7,X8] : (p(s(bool,'const.typeSystem.type_prog_6'(s(bool,X0),s('type.typeSystem.decls',X1),s('type.typeSystem.type_environment',X2),s('type.list.list'('type.ast.top'),X3),s('type.typeSystem.decls',X4),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X6),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),X8)))))))))) => p(s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),X3),s(fun('type.list.list'('type.string.char'),bool),'const.typeSystem.decls_defined_mods_1'(s('type.typeSystem.decls',X1)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10,X11,X12,X13,X14] : (p(s(bool,'const.typeSystem.type_prog_6'(s(bool,X6),s('type.typeSystem.decls',X7),s('type.typeSystem.type_environment',X8),s('type.list.list'('type.ast.top'),X9),s('type.typeSystem.decls',X10),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X12),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),X13),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),X14)))))))))) => p(s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),X9),s(fun('type.list.list'('type.string.char'),bool),'const.typeSystem.decls_defined_mods_1'(s('type.typeSystem.decls',X7)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10,X11,X12,X13,X14] : (p(s(bool,'const.typeSystem.type_prog_6'(s(bool,X6),s('type.typeSystem.decls',X7),s('type.typeSystem.type_environment',X8),s('type.list.list'('type.ast.top'),X9),s('type.typeSystem.decls',X10),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),X12),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),X13),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),X14)))))))))) => p(s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),X9),s(fun('type.list.list'('type.string.char'),bool),'const.typeSystem.decls_defined_mods_1'(s('type.typeSystem.decls',X7)))))))),
  file('thm.typeSound.type_no_dup_mods','thm.typeSound.type_no_dup_mods')).
fof(f398,plain,(
  ~p(s(bool,'F_0')) | $spl3),
  inference(cnf_transformation,[],[f398_D])).
fof(f398_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f221,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.typeSound.type_no_dup_mods',aHL_FALSITY)).
fof(f397,plain,(
  p(s(bool,'F_0')) | $spl2),
  inference(cnf_transformation,[],[f397_D])).
fof(f397_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f395,plain,(
  p(s(bool,'T_0')) | $spl0),
  inference(cnf_transformation,[],[f395_D])).
fof(f395_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f239,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f145])).
fof(f145,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f97])).
fof(f97,plain,(
  ! [X0] : ((~p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : ((p(s(bool,'F_0')) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X15] : ((p(s(bool,'F_0')) => p(s(bool,X15))) <=> p(s(bool,'T_0')))),
  file('thm.typeSound.type_no_dup_mods','thm.bool.IMP_CLAUSES|split|2')).
fof(f20669,plain,(
  $false | ($spl0 | $spl3 | $spl134)),
  inference(subsumption_resolution,[],[f20668,f412])).
fof(f412,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl0),
  inference(resolution,[],[f232,f395])).
fof(f232,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X15] : (s(bool,'F_0') = s(bool,X15) <=> ~p(s(bool,X15)))),
  file('thm.typeSound.type_no_dup_mods','thm.bool.EQ_CLAUSES|split|2')).
fof(f20668,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl0 | $spl3 | $spl134)),
  inference(forward_demodulation,[],[f20667,f5868])).
fof(f20667,plain,(
  s(bool,'F_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),sK16))))) | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f20666,f398])).
fof(f20666,plain,(
  p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),sK16))))) | $spl0),
  inference(forward_demodulation,[],[f20665,f3413])).
fof(f3413,plain,(
  s(bool,'F_0') = s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),sK16),s(fun('type.list.list'('type.string.char'),bool),'const.typeSystem.decls_defined_mods_1'(s('type.typeSystem.decls',sK14)))))),
  inference(resolution,[],[f214,f233])).
fof(f233,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f141])).
fof(f214,plain,(
  ~p(s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),sK16),s(fun('type.list.list'('type.string.char'),bool),'const.typeSystem.decls_defined_mods_1'(s('type.typeSystem.decls',sK14))))))),
  inference(cnf_transformation,[],[f136])).
fof(f20665,plain,(
  p(s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),sK16),s(fun('type.list.list'('type.string.char'),bool),'const.typeSystem.decls_defined_mods_1'(s('type.typeSystem.decls',sK14)))))) | s(bool,'F_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),sK16))))) | $spl0),
  inference(subsumption_resolution,[],[f20480,f395])).
fof(f20480,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),sK16),s(fun('type.list.list'('type.string.char'),bool),'const.typeSystem.decls_defined_mods_1'(s('type.typeSystem.decls',sK14)))))) | s(bool,'F_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),sK16)))))),
  inference(superposition,[],[f4187,f6996])).
fof(f6996,plain,(
  s(bool,'T_0') = s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),sK16))))),s(fun('type.list.list'('type.string.char'),bool),'const.typeSystem.decls_defined_mods_1'(s('type.typeSystem.decls',sK14)))))),
  inference(resolution,[],[f3991,f4376])).
fof(f4376,plain,(
  p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.typeSystem.decls_defined_mods_1'(s('type.typeSystem.decls',sK14))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),sK16))))))))),
  inference(resolution,[],[f213,f388])).
fof(f388,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.typeSystem.type_prog_6'(s(bool,X0),s('type.typeSystem.decls',X1),s('type.typeSystem.type_environment',X2),s('type.list.list'('type.ast.top'),X3),s('type.typeSystem.decls',X4),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')))))),X5)))) | p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.typeSystem.decls_defined_mods_1'(s('type.typeSystem.decls',X1))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X3))))))))) )),
  inference(cnf_transformation,[],[f115])).
fof(f3991,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X6,bool),X8),s(fun(X6,bool),X7)))) | s(bool,'T_0') = s(bool,'const.pred_set.DISJOINT_2'(s(fun(X6,bool),X7),s(fun(X6,bool),X8)))) )),
  inference(superposition,[],[f229,f255])).
fof(f255,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))) = s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X1)))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1,X2] : s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))) = s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X1)))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0] : ! [X1,X2] : s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))) = s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X1)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X16] : ! [X26,X15] : s(bool,'const.pred_set.DISJOINT_2'(s(fun(X16,bool),X15),s(fun(X16,bool),X26))) = s(bool,'const.pred_set.DISJOINT_2'(s(fun(X16,bool),X26),s(fun(X16,bool),X15)))),
  file('thm.typeSound.type_no_dup_mods','thm.pred_set.DISJOINT_SYM')).
fof(f229,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f139])).
fof(f4187,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X0))))),s(fun('type.list.list'('type.string.char'),bool),X1)))) | p(s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),X0),s(fun('type.list.list'('type.string.char'),bool),X1)))) | s(bool,'F_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X0)))))) )),
  inference(resolution,[],[f262,f233])).
fof(f262,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X0)))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X0))))),s(fun('type.list.list'('type.string.char'),bool),X1)))) | p(s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),X0),s(fun('type.list.list'('type.string.char'),bool),X1))))) )),
  inference(cnf_transformation,[],[f157])).
fof(f157,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),X0),s(fun('type.list.list'('type.string.char'),bool),X1)))) | (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X0)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X0))))),s(fun('type.list.list'('type.string.char'),bool),X1)))))) & (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X0)))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X0))))),s(fun('type.list.list'('type.string.char'),bool),X1)))) | p(s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),X0),s(fun('type.list.list'('type.string.char'),bool),X1))))))),
  inference(flattening,[],[f156])).
fof(f156,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),X0),s(fun('type.list.list'('type.string.char'),bool),X1)))) | (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X0)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X0))))),s(fun('type.list.list'('type.string.char'),bool),X1)))))) & ((~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X0)))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X0))))),s(fun('type.list.list'('type.string.char'),bool),X1))))) | p(s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),X0),s(fun('type.list.list'('type.string.char'),bool),X1))))))),
  inference(nnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1] : (p(s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),X0),s(fun('type.list.list'('type.string.char'),bool),X1)))) <=> (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X0)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X0))))),s(fun('type.list.list'('type.string.char'),bool),X1))))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X30,X31] : (p(s(bool,'const.semanticPrimitives.no_dup_mods_2'(s('type.list.list'('type.ast.top'),X30),s(fun('type.list.list'('type.string.char'),bool),X31)))) <=> (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X30)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.semanticPrimitives.prog_to_mods_1'(s('type.list.list'('type.ast.top'),X30))))),s(fun('type.list.list'('type.string.char'),bool),X31))))))),
  file('thm.typeSound.type_no_dup_mods','thm.semanticPrimitives.no_dup_mods_def')).
% SZS output end Proof for thm.typeSound
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 918
% Passive clauses: 5808
% Generated clauses: 20183
% Final active clauses: 902
% Final passive clauses: 4366
% Input formulas: 37
% Initial clauses: 176
% 
% Duplicate literals: 720
% Trivial inequalities: 104
% Fw subsumption resolutions: 2358
% Fw demodulations: 875
% Bw demodulations: 13
% 
% Simple tautologies: 232
% Equational tautologies: 65
% Forward subsumptions: 9220
% 
% Binary resolution: 8148
% Factoring: 2125
% Forward superposition: 3010
% Backward superposition: 2292
% Self superposition: 26
% Equality factoring: 30
% Equality resolution: 28
% 
% Split clauses: 756
% Split components: 1521
% SAT solver clauses: 1336
% SAT solver unit clauses: 20
% SAT solver binary clauses: 159
% SAT solver learnt clauses: 1
% 
% Sat splits: 756
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1334
% TWLsolver calls for satisfiability: 624
% 
% Memory used [KB]: 8187
% Time elapsed: 0.498 s
% ------------------------------
% ------------------------------
% Success in time 0.5 s
