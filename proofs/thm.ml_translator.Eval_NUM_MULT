Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.ml_translator
% (23993)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 78
% Passive clauses: 1941
% Generated clauses: 13465
% Final active clauses: 72
% Final passive clauses: 1732
% Input formulas: 11
% Initial clauses: 14
% 
% Duplicate literals: 922
% Trivial inequalities: 181
% Fw subsumption resolutions: 1592
% Fw demodulations: 847
% Bw demodulations: 2
% 
% Simple tautologies: 293
% Equational tautologies: 93
% Forward subsumptions: 5898
% 
% Binary resolution: 39
% Forward superposition: 5821
% Backward superposition: 3325
% Self superposition: 344
% Equality factoring: 260
% Equality resolution: 10
% 
% Split clauses: 732
% Split components: 1482
% SAT solver clauses: 1782
% SAT solver unit clauses: 263
% SAT solver binary clauses: 558
% 
% Sat splits: 732
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1774
% TWLsolver calls for satisfiability: 83
% 
% Memory used [KB]: 5628
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.ml_translator
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.ml_translator
% SZS output start Proof for thm.ml_translator
fof(f543,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f530,f35,f53,f36,f55,f73,f75,f33,f49,f40,f59,f76,f78,f32,f51,f356,f363,f361,f286,f287,f34,f47,f63,f71,f371,f461,f462,f37,f56,f43,f60,f45,f62])).
fof(f62,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3))))))) ) | $spl22),
  inference(cnf_transformation,[],[f62_D])).
fof(f62_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3))))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f45,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3))))))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3)))))) | (~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X4))))))))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X4))))))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6,X7,X10,X9,X8] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X7),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X9)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X6),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X8)))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X7),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X6),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X9),s('type.integer.int',X8))))))))))),
  file('thm.ml_translator.Eval_NUM_MULT','thm.ml_translator.Eval_INT_MULT')).
fof(f60,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) ) | $spl18),
  inference(cnf_transformation,[],[f60_D])).
fof(f60_D,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f43,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0,X1] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X14,X15] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15))))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X14))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X15)))))),
  file('thm.ml_translator.Eval_NUM_MULT','thm.integer.INT_MUL')).
fof(f56,plain,(
  ( ! [X0] : (s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0))) = s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) ) | $spl10),
  inference(cnf_transformation,[],[f56_D])).
fof(f56_D,plain,(
  ( ! [X0] : (s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0))) = s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f37,plain,(
  ( ! [X0] : (s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0))) = s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0] : s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0))) = s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X15] : s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X15))) = s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X15)))))),
  file('thm.ml_translator.Eval_NUM_MULT','thm.ml_translator.NUM_def')).
fof(f462,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X3),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X4),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X4),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X1)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X3),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0))))))) ) | $spl66),
  inference(cnf_transformation,[],[f462_D])).
fof(f462_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X3),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X4),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X4),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X1)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X3),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0))))))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f461,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X3),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X4),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X1)))))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X3),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X4),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))))))) ) | ($spl10 | $spl18 | $spl22)),
  inference(forward_demodulation,[],[f460,f56])).
fof(f460,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X4),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X1)))))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X3),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X4),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X3),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))))) ) | ($spl10 | $spl18 | $spl22)),
  inference(forward_demodulation,[],[f459,f56])).
fof(f459,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X3),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X4),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X4),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X3),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))))) ) | ($spl10 | $spl18 | $spl22)),
  inference(forward_demodulation,[],[f449,f56])).
fof(f449,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X3),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X4),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X4),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X3),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))))) ) | ($spl18 | $spl22)),
  inference(superposition,[],[f62,f60])).
fof(f371,plain,(
  $false | ($spl6 | $spl9 | $spl42)),
  inference(subsumption_resolution,[],[f367,f53])).
fof(f367,plain,(
  ~p(s(bool,'T_0')) | ($spl9 | $spl42)),
  inference(backward_demodulation,[],[f361,f55])).
fof(f71,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl24),
  inference(cnf_transformation,[],[f71_D])).
fof(f71_D,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f63,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(superposition,[],[f59,f59])).
fof(f47,plain,(
  ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2)))))))) | $spl1),
  inference(cnf_transformation,[],[f47_D])).
fof(f47_D,plain,(
  ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2)))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f34,plain,(
  ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))))))))),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))) & p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2)))))) & ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f25])).
fof(f25,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X3)))))) & p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X2)))))) & ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2)))))))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X3)))))) & (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X2)))))) & ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))))))))))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X3)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X2)))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X7),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X9)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X6),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X8)))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X7),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X6),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X8))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X7),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X9)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X6),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X8)))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X7),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X6),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X8))))))))))),
  file('thm.ml_translator.Eval_NUM_MULT','thm.ml_translator.Eval_NUM_MULT')).
fof(f287,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl40),
  inference(cnf_transformation,[],[f287_D])).
fof(f287_D,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))))))) | s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f286,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))))))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl1 | $spl6 | $spl24)),
  inference(subsumption_resolution,[],[f172,f53])).
fof(f172,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s(bool,X9) = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))))))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl1 | $spl24)),
  inference(superposition,[],[f47,f71])).
fof(f361,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl42),
  inference(cnf_transformation,[],[f361_D])).
fof(f361_D,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f363,plain,(
  s(bool,'F_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))))))) | $spl44),
  inference(cnf_transformation,[],[f363_D])).
fof(f363_D,plain,(
  s(bool,'F_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))))))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f356,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))))))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl16 | $spl40)),
  inference(duplicate_literal_removal,[],[f316])).
fof(f316,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Times_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | ($spl16 | $spl40)),
  inference(superposition,[],[f287,f59])).
fof(f51,plain,(
  p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))) | $spl4),
  inference(cnf_transformation,[],[f51_D])).
fof(f51_D,plain,(
  p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f32,plain,(
  p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3))))))),
  inference(cnf_transformation,[],[f29])).
fof(f78,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3))))) | $spl30),
  inference(cnf_transformation,[],[f78_D])).
fof(f78_D,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3))))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f76,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3))))) | ($spl4 | $spl9 | $spl16)),
  inference(subsumption_resolution,[],[f68,f55])).
fof(f68,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3))))) | ($spl4 | $spl16)),
  inference(superposition,[],[f51,f59])).
fof(f59,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(cnf_transformation,[],[f59_D])).
fof(f59_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f40,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.ml_translator.Eval_NUM_MULT',aHL_BOOL_CASES)).
fof(f49,plain,(
  p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2)))))) | $spl2),
  inference(cnf_transformation,[],[f49_D])).
fof(f49_D,plain,(
  p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2)))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f33,plain,(
  p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2))))))),
  inference(cnf_transformation,[],[f29])).
fof(f75,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2))))) | $spl28),
  inference(cnf_transformation,[],[f75_D])).
fof(f75_D,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2))))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f73,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2))))) | ($spl2 | $spl9 | $spl16)),
  inference(subsumption_resolution,[],[f67,f55])).
fof(f67,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2))))) | ($spl2 | $spl16)),
  inference(superposition,[],[f49,f59])).
fof(f55,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f55_D])).
fof(f55_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f36,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f14])).
fof(f14,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.ml_translator.Eval_NUM_MULT',aHL_FALSITY)).
fof(f53,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f53_D])).
fof(f53_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f35,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.ml_translator.Eval_NUM_MULT',aHL_TRUTH)).
fof(f530,plain,(
  $false | ($spl6 | $spl9 | $spl28 | $spl30 | $spl44 | $spl66)),
  inference(subsumption_resolution,[],[f529,f53])).
fof(f529,plain,(
  ~p(s(bool,'T_0')) | ($spl6 | $spl9 | $spl28 | $spl30 | $spl44 | $spl66)),
  inference(forward_demodulation,[],[f528,f78])).
fof(f528,plain,(
  ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))) | ($spl6 | $spl9 | $spl28 | $spl44 | $spl66)),
  inference(subsumption_resolution,[],[f527,f53])).
fof(f527,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))) | ($spl9 | $spl28 | $spl44 | $spl66)),
  inference(forward_demodulation,[],[f526,f75])).
fof(f526,plain,(
  ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))) | ($spl9 | $spl44 | $spl66)),
  inference(subsumption_resolution,[],[f517,f55])).
fof(f517,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))) | ($spl44 | $spl66)),
  inference(superposition,[],[f462,f363])).
% SZS output end Proof for thm.ml_translator
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 26
% Passive clauses: 46
% Generated clauses: 491
% Final active clauses: 21
% Final passive clauses: 11
% Input formulas: 11
% Initial clauses: 14
% 
% Duplicate literals: 65
% Trivial inequalities: 6
% Fw subsumption resolutions: 29
% Fw demodulations: 14
% Bw demodulations: 11
% Condensations: 58
% 
% Simple tautologies: 24
% Equational tautologies: 15
% Forward subsumptions: 159
% 
% Binary resolution: 7
% Forward superposition: 116
% Backward superposition: 69
% Self superposition: 24
% Equality factoring: 28
% 
% Split clauses: 9
% Split components: 28
% SAT solver clauses: 79
% SAT solver unit clauses: 21
% SAT solver binary clauses: 7
% SAT solver learnt clauses: 1
% 
% Sat splits: 9
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 78
% TWLsolver calls for satisfiability: 43
% 
% Memory used [KB]: 1279
% Time elapsed: 0.017 s
% ------------------------------
% ------------------------------
% Success in time 0.644 s
