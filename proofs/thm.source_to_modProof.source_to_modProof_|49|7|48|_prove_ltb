Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (34769)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 721
% Passive clauses: 6926
% Generated clauses: 21610
% Final active clauses: 719
% Final passive clauses: 5884
% Input formulas: 69
% Initial clauses: 227
% 
% Duplicate literals: 290
% Trivial inequalities: 123
% Fw subsumption resolutions: 2074
% Fw demodulations: 2184
% Bw demodulations: 1
% 
% Simple tautologies: 248
% Equational tautologies: 35
% Forward subsumptions: 8808
% 
% Binary resolution: 4905
% Factoring: 686
% Forward superposition: 3017
% Backward superposition: 7722
% Self superposition: 82
% Equality factoring: 26
% Equality resolution: 14
% 
% Split clauses: 923
% Split components: 1848
% SAT solver clauses: 1223
% SAT solver unit clauses: 10
% SAT solver binary clauses: 118
% 
% Sat splits: 923
% 
% TWLsolver clauses: 1223
% TWLsolver calls for satisfiability: 387
% 
% Memory used [KB]: 16375
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (34784)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 422
% Passive clauses: 2722
% Generated clauses: 13593
% Final active clauses: 414
% Final passive clauses: 2253
% Input formulas: 69
% Initial clauses: 227
% 
% Duplicate literals: 224
% Trivial inequalities: 38
% Fw subsumption resolutions: 878
% Fw demodulations: 788
% Bw demodulations: 51
% Condensations: 372
% Global subsumptions: 18
% 
% Simple tautologies: 292
% Equational tautologies: 23
% Forward subsumptions: 4943
% 
% Binary resolution: 2767
% Factoring: 328
% Forward superposition: 2285
% Backward superposition: 2732
% Self superposition: 84
% Equality factoring: 26
% Equality resolution: 12
% 
% Split clauses: 36
% Split components: 72
% SAT solver clauses: 3507
% SAT solver unit clauses: 233
% SAT solver binary clauses: 87
% SAT solver learnt clauses: 36
% SAT solver learnt literals: 10
% 
% Sat splits: 36
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 3435
% TWLsolver calls for satisfiability: 1915
% 
% Memory used [KB]: 19317
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f23976,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f459,f3324])).
fof(f3324,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),sK14),s('type.semanticPrimitives.state'(sK12),sK13),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK15),s('type.list.list'('type.ast.dec'),sK16))) != s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK12),X1),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v')),X0)))) )),
  inference(superposition,[],[f337,f459])).
fof(f337,plain,(
  ( ! [X6,X7,X5] : (s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),sK14),s('type.semanticPrimitives.state'(sK12),sK13),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK15),s('type.list.list'('type.ast.dec'),sK16))) != s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK12),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X6),s('type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'),X7)))))) )),
  inference(cnf_transformation,[],[f238])).
fof(f238,plain,(
  ! [X5,X6,X7] : s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),sK14),s('type.semanticPrimitives.state'(sK12),sK13),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK15),s('type.list.list'('type.ast.dec'),sK16))) != s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK12),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X6),s('type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'),X7)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16])],[f179])).
fof(f179,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6,X7] : s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.dec'),X4))) != s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X6),s('type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'),X7)))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6,X7] : s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.dec'),X4))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X6),s('type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'),X7)))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : ? [X5,X6,X7] : s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.dec'),X4))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X6),s('type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'),X7)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12,X13] : s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),X8),s('type.semanticPrimitives.state'(X6),X7),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9),s('type.list.list'('type.ast.dec'),X10))) = s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.semanticPrimitives.state'(X6),X11),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X12),s('type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'),X13)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12,X13] : s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),X8),s('type.semanticPrimitives.state'(X6),X7),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9),s('type.list.list'('type.ast.dec'),X10))) = s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.semanticPrimitives.state'(X6),X11),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X12),s('type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'),X13)))))),
  file('thm.source_to_modProof.source_to_modProof_|49|7|48|_prove_ltb','thm.source_to_modProof.source_to_modProof_|49|7|48|_prove_ltb')).
fof(f459,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK20(X2,X1,X0)),s(X1,sK21(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f291])).
fof(f291,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK20(X2,X1,X0)),s(X1,sK21(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK20,sK21])],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f150])).
fof(f150,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X6,X24] : ! [X25] : ? [X39,X13] : s('type.pair.prod'(X6,X24),X25) = s('type.pair.prod'(X6,X24),'const.pair.,_2'(s(X6,X39),s(X24,X13)))),
  file('thm.source_to_modProof.source_to_modProof_|49|7|48|_prove_ltb','thm.pair.ABS_PAIR_THM')).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 659
% Passive clauses: 4862
% Generated clauses: 24478
% Final active clauses: 615
% Final passive clauses: 3262
% Input formulas: 69
% Initial clauses: 227
% 
% Duplicate literals: 186
% Trivial inequalities: 24
% Fw subsumption resolutions: 804
% Fw demodulations: 4273
% Bw demodulations: 863
% Condensations: 462
% Global subsumptions: 274
% 
% Simple tautologies: 102
% Equational tautologies: 81
% Forward subsumptions: 11975
% Fw demodulations to eq. taut.: 726
% Bw demodulations to eq. taut.: 61
% 
% Unit resulting resolution: 6701
% Factoring: 1
% Forward superposition: 6199
% Backward superposition: 3389
% Self superposition: 93
% Equality factoring: 26
% Equality resolution: 17
% 
% Split clauses: 68
% Split components: 141
% SAT solver clauses: 5889
% SAT solver unit clauses: 2244
% SAT solver binary clauses: 1852
% 
% Sat splits: 68
% Sat splitting refutations: 615
% 
% Memory used [KB]: 38634
% Time elapsed: 1.608 s
% ------------------------------
% ------------------------------
% Success in time 2.95 s
