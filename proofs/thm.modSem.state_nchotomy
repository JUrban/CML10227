Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.modSem
% (77773)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 181
% Passive clauses: 3533
% Generated clauses: 23272
% Final active clauses: 178
% Final passive clauses: 3225
% Input formulas: 69
% Initial clauses: 116
% 
% Duplicate literals: 709
% Trivial inequalities: 434
% Fw subsumption resolutions: 2057
% Fw demodulations: 2653
% Bw demodulations: 1
% 
% Simple tautologies: 404
% Equational tautologies: 43
% Forward subsumptions: 13018
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 537
% Factoring: 2
% Forward superposition: 9569
% Backward superposition: 6934
% Self superposition: 147
% Equality factoring: 67
% Equality resolution: 33
% 
% Split clauses: 248
% Split components: 506
% SAT solver clauses: 548
% SAT solver unit clauses: 23
% SAT solver binary clauses: 110
% 
% Sat splits: 248
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 548
% TWLsolver calls for satisfiability: 148
% 
% Memory used [KB]: 14456
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.modSem
% (77800)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 135
% Passive clauses: 1085
% Generated clauses: 16675
% Final active clauses: 127
% Final passive clauses: 934
% Input formulas: 69
% Initial clauses: 116
% 
% Duplicate literals: 647
% Trivial inequalities: 303
% Fw subsumption resolutions: 1119
% Fw demodulations: 1666
% Bw demodulations: 15
% Condensations: 1163
% Global subsumptions: 4
% 
% Simple tautologies: 266
% Equational tautologies: 45
% Forward subsumptions: 8468
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 116
% Factoring: 1
% Forward superposition: 4911
% Backward superposition: 5261
% Self superposition: 148
% Equality factoring: 81
% Equality resolution: 27
% 
% Split clauses: 45
% Split components: 90
% SAT solver clauses: 1961
% SAT solver unit clauses: 161
% SAT solver binary clauses: 74
% SAT solver learnt clauses: 8
% 
% Sat splits: 45
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1945
% TWLsolver calls for satisfiability: 791
% 
% Memory used [KB]: 16247
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.modSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modSem
% SZS output start Proof for thm.modSem
fof(f29414,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f233,f302,f303,f304,f306,f305,f307,f288])).
fof(f288,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))) | s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f219])).
fof(f219,plain,(
  ! [X0,X1,X2] : ((s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))) & (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))) | s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2)))),
  inference(flattening,[],[f218])).
fof(f218,plain,(
  ! [X0,X1,X2] : ((s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))) & ((s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))) | s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2)))),
  inference(nnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1,X2] : (s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2) <=> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))))),
  inference(flattening,[],[f120])).
fof(f120,plain,(
  ! [X0] : ! [X1,X2] : (s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2) <=> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X38,X39] : (s('type.modSem.state'(X6),X38) = s('type.modSem.state'(X6),X39) <=> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X38))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X39))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X38))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X39))) & s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X38))) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X39))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X38))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X39))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X38))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X39))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X38))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X39)))))),
  file('thm.modSem.state_nchotomy','thm.modSem.modSem_|49|25_prove_ltb')).
fof(f307,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun('type.list.list'('type.string.char'),bool),X5) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) )),
  inference(cnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s(fun('type.list.list'('type.string.char'),bool),X5) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(flattening,[],[f142])).
fof(f142,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : s(fun('type.list.list'('type.string.char'),bool),X5) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6] : ! [X8,X9,X10,X11,X12,X13] : s(fun('type.list.list'('type.string.char'),bool),X12) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X8),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9),s('type.ffi.ffi_state'(X6),X10),s(fun('type.semanticPrimitives.tid_or_exn',bool),X11),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.option.option'('type.modSem.v')),X13)))))),
  file('thm.modSem.state_nchotomy','thm.modSem.state_defined_mods')).
fof(f305,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.option.option'('type.modSem.v')),X6) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s('type.list.list'('type.option.option'('type.modSem.v')),X6) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(flattening,[],[f138])).
fof(f138,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : s('type.list.list'('type.option.option'('type.modSem.v')),X6) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6] : ! [X8,X9,X10,X11,X12,X13] : s('type.list.list'('type.option.option'('type.modSem.v')),X13) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X8),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9),s('type.ffi.ffi_state'(X6),X10),s(fun('type.semanticPrimitives.tid_or_exn',bool),X11),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.option.option'('type.modSem.v')),X13)))))),
  file('thm.modSem.state_nchotomy','thm.modSem.state_globals')).
fof(f306,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),X4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) )),
  inference(cnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s(fun('type.semanticPrimitives.tid_or_exn',bool),X4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(flattening,[],[f140])).
fof(f140,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : s(fun('type.semanticPrimitives.tid_or_exn',bool),X4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6] : ! [X8,X9,X10,X11,X12,X13] : s(fun('type.semanticPrimitives.tid_or_exn',bool),X11) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X8),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9),s('type.ffi.ffi_state'(X6),X10),s(fun('type.semanticPrimitives.tid_or_exn',bool),X11),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.option.option'('type.modSem.v')),X13)))))),
  file('thm.modSem.state_nchotomy','thm.modSem.state_defined_types')).
fof(f304,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(flattening,[],[f136])).
fof(f136,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6] : ! [X8,X9,X10,X11,X12,X13] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X8),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9),s('type.ffi.ffi_state'(X6),X10),s(fun('type.semanticPrimitives.tid_or_exn',bool),X11),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.option.option'('type.modSem.v')),X13)))))),
  file('thm.modSem.state_nchotomy','thm.modSem.state_refs')).
fof(f303,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.ffi.ffi_state'(X0),X3) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) )),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s('type.ffi.ffi_state'(X0),X3) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : s('type.ffi.ffi_state'(X0),X3) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X8,X9,X10,X11,X12,X13] : s('type.ffi.ffi_state'(X6),X10) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X8),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9),s('type.ffi.ffi_state'(X6),X10),s(fun('type.semanticPrimitives.tid_or_exn',bool),X11),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.option.option'('type.modSem.v')),X13)))))),
  file('thm.modSem.state_nchotomy','thm.modSem.state_ffi')).
fof(f302,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',X1) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) )),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s('type.num.num',X1) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(flattening,[],[f132])).
fof(f132,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : s('type.num.num',X1) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X6] : ! [X8,X9,X10,X11,X12,X13] : s('type.num.num',X8) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X8),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9),s('type.ffi.ffi_state'(X6),X10),s(fun('type.semanticPrimitives.tid_or_exn',bool),X11),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.option.option'('type.modSem.v')),X13)))))),
  file('thm.modSem.state_nchotomy','thm.modSem.state_clock')).
fof(f233,plain,(
  ( ! [X6,X4,X2,X7,X5,X3] : (s('type.modSem.state'(sK0),sK1) != s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X2),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3),s('type.ffi.ffi_state'(sK0),X4),s(fun('type.semanticPrimitives.tid_or_exn',bool),X5),s(fun('type.list.list'('type.string.char'),bool),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7)))) )),
  inference(cnf_transformation,[],[f200])).
fof(f200,plain,(
  ! [X2,X3,X4,X5,X6,X7] : s('type.modSem.state'(sK0),sK1) != s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X2),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3),s('type.ffi.ffi_state'(sK0),X4),s(fun('type.semanticPrimitives.tid_or_exn',bool),X5),s(fun('type.list.list'('type.string.char'),bool),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f193])).
fof(f193,plain,(
  ? [X0,X1] : ! [X2,X3,X4,X5,X6,X7] : s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X2),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3),s('type.ffi.ffi_state'(X0),X4),s(fun('type.semanticPrimitives.tid_or_exn',bool),X5),s(fun('type.list.list'('type.string.char'),bool),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7)))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1] : ? [X2,X3,X4,X5,X6,X7] : s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X2),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3),s('type.ffi.ffi_state'(X0),X4),s(fun('type.semanticPrimitives.tid_or_exn',bool),X5),s(fun('type.list.list'('type.string.char'),bool),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7)))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1] : ? [X2,X3,X4,X5,X6,X7] : s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X2),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3),s('type.ffi.ffi_state'(X0),X4),s(fun('type.semanticPrimitives.tid_or_exn',bool),X5),s(fun('type.list.list'('type.string.char'),bool),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ? [X8,X9,X10,X11,X12,X13] : s('type.modSem.state'(X6),X7) = s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X8),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9),s('type.ffi.ffi_state'(X6),X10),s(fun('type.semanticPrimitives.tid_or_exn',bool),X11),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.option.option'('type.modSem.v')),X13)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ? [X8,X9,X10,X11,X12,X13] : s('type.modSem.state'(X6),X7) = s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X8),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9),s('type.ffi.ffi_state'(X6),X10),s(fun('type.semanticPrimitives.tid_or_exn',bool),X11),s(fun('type.list.list'('type.string.char'),bool),X12),s('type.list.list'('type.option.option'('type.modSem.v')),X13)))),
  file('thm.modSem.state_nchotomy','thm.modSem.state_nchotomy')).
% SZS output end Proof for thm.modSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 209
% Passive clauses: 2954
% Generated clauses: 30242
% Final active clauses: 128
% Final passive clauses: 1531
% Input formulas: 69
% Initial clauses: 116
% 
% Duplicate literals: 731
% Trivial inequalities: 283
% Fw subsumption resolutions: 890
% Fw demodulations: 3890
% Bw demodulations: 1188
% Condensations: 1274
% Global subsumptions: 128
% 
% Simple tautologies: 242
% Equational tautologies: 290
% Forward subsumptions: 19194
% Fw demodulations to eq. taut.: 128
% Bw demodulations to eq. taut.: 95
% 
% Unit resulting resolution: 2953
% Factoring: 1
% Forward superposition: 10922
% Backward superposition: 6349
% Self superposition: 147
% Equality factoring: 62
% Equality resolution: 27
% 
% Split clauses: 11
% Split components: 22
% SAT solver clauses: 3272
% SAT solver unit clauses: 276
% SAT solver binary clauses: 1032
% 
% Sat splits: 11
% Sat splitting refutations: 166
% 
% Memory used [KB]: 30063
% Time elapsed: 1.775 s
% ------------------------------
% ------------------------------
% Success in time 3.121 s
