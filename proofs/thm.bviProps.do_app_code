Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bviProps
% (96199)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 77
% Passive clauses: 2356
% Generated clauses: 11038
% Final active clauses: 72
% Final passive clauses: 2134
% Input formulas: 21
% Initial clauses: 40
% 
% Duplicate literals: 496
% Trivial inequalities: 160
% Fw subsumption resolutions: 1255
% Fw demodulations: 1713
% Bw demodulations: 2
% 
% Simple tautologies: 192
% Equational tautologies: 35
% Forward subsumptions: 4409
% 
% Binary resolution: 109
% Factoring: 3
% Forward superposition: 4009
% Backward superposition: 2917
% Self superposition: 179
% Equality factoring: 75
% Equality resolution: 12
% 
% Split clauses: 191
% Split components: 391
% SAT solver clauses: 432
% SAT solver unit clauses: 3
% SAT solver binary clauses: 41
% 
% Sat splits: 191
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 430
% TWLsolver calls for satisfiability: 91
% 
% Memory used [KB]: 7803
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bviProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bviProps
% SZS output start Proof for thm.bviProps
fof(f1340,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1339,f75,f118,f1312,f1321,f74,f120,f104,f131])).
fof(f131,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',X4),s('type.list.list'('type.bvlSem.v'),X5),s('type.bviSem.state'(X0),X2))) != s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'const.pair.,_2'(s('type.bvlSem.v',X3),s('type.bviSem.state'(X0),X1))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X2)))) ) | $spl10),
  inference(cnf_transformation,[],[f131_D])).
fof(f131_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',X4),s('type.list.list'('type.bvlSem.v'),X5),s('type.bviSem.state'(X0),X2))) != s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'const.pair.,_2'(s('type.bvlSem.v',X3),s('type.bviSem.state'(X0),X1))))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X2)))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f104,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X2))) | s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',X4),s('type.list.list'('type.bvlSem.v'),X5),s('type.bviSem.state'(X0),X2))) != s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'const.pair.,_2'(s('type.bvlSem.v',X3),s('type.bviSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',X4),s('type.list.list'('type.bvlSem.v'),X5),s('type.bviSem.state'(X0),X2))) != s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'const.pair.,_2'(s('type.bvlSem.v',X3),s('type.bviSem.state'(X0),X1))))) | (s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X2)))))),
  inference(ennf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',X4),s('type.list.list'('type.bvlSem.v'),X5),s('type.bviSem.state'(X0),X2))) = s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'const.pair.,_2'(s('type.bvlSem.v',X3),s('type.bviSem.state'(X0),X1))))) => (s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X2)))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5] : (s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',X4),s('type.list.list'('type.bvlSem.v'),X5),s('type.bviSem.state'(X0),X2))) = s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'const.pair.,_2'(s('type.bvlSem.v',X3),s('type.bviSem.state'(X0),X1))))) => (s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X2)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X11,X10,X12,X9,X13] : (s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X6)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',X9),s('type.list.list'('type.bvlSem.v'),X13),s('type.bviSem.state'(X6),X10))) = s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X6)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X6)),'const.pair.,_2'(s('type.bvlSem.v',X12),s('type.bviSem.state'(X6),X11))))) => (s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),X10))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),X11))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X6),X10))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X6),X11)))))),
  file('thm.bviProps.do_app_code','thm.bviSem.do_app_const')).
fof(f120,plain,(
  s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',sK3),s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),sK4))) = s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.bvlSem.v',sK1),s('type.bviSem.state'(sK0),sK5))))) | $spl2),
  inference(cnf_transformation,[],[f120_D])).
fof(f120_D,plain,(
  s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',sK3),s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),sK4))) = s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.bvlSem.v',sK1),s('type.bviSem.state'(sK0),sK5))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f74,plain,(
  s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',sK3),s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),sK4))) = s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.bvlSem.v',sK1),s('type.bviSem.state'(sK0),sK5)))))),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',sK3),s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),sK4))) = s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'const.pair.,_2'(s('type.bvlSem.v',sK1),s('type.bviSem.state'(sK0),sK5))))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK4))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f49])).
fof(f49,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',X3),s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X4))) = s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'const.pair.,_2'(s('type.bvlSem.v',X1),s('type.bviSem.state'(X0),X5))))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X4))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X5))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',X3),s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X4))) = s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'const.pair.,_2'(s('type.bvlSem.v',X1),s('type.bviSem.state'(X0),X5))))) => s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X4))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X5))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : (s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',X3),s('type.list.list'('type.bvlSem.v'),X2),s('type.bviSem.state'(X0),X4))) = s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X0)),'const.pair.,_2'(s('type.bvlSem.v',X1),s('type.bviSem.state'(X0),X5))))) => s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X4))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X0),X5))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X6)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',X9),s('type.list.list'('type.bvlSem.v'),X8),s('type.bviSem.state'(X6),X10))) = s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X6)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X6)),'const.pair.,_2'(s('type.bvlSem.v',X7),s('type.bviSem.state'(X6),X11))))) => s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X6),X10))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X6),X11))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X6)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',X9),s('type.list.list'('type.bvlSem.v'),X8),s('type.bviSem.state'(X6),X10))) = s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X6)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(X6)),'const.pair.,_2'(s('type.bvlSem.v',X7),s('type.bviSem.state'(X6),X11))))) => s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X6),X10))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(X6),X11))))),
  file('thm.bviProps.do_app_code','thm.bviProps.do_app_code')).
fof(f1321,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',sK3),s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),sK4))) != s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',X0),s('type.list.list'('type.bvlSem.v'),X1),s('type.bviSem.state'(sK0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK5))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),X2)))) ) | $spl282),
  inference(cnf_transformation,[],[f1321_D])).
fof(f1321_D,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',sK3),s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),sK4))) != s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',X0),s('type.list.list'('type.bvlSem.v'),X1),s('type.bviSem.state'(sK0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK5))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),X2)))) ) <=> ~$spl282),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl282])])).
fof(f1312,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',sK3),s('type.list.list'('type.bvlSem.v'),sK2),s('type.bviSem.state'(sK0),sK4))) != s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bviSem.state'(sK0)),'type.bvlSem.v'),'const.bviSem.do_app_3'(s('type.closLang.op',X0),s('type.list.list'('type.bvlSem.v'),X1),s('type.bviSem.state'(sK0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK5))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),X2)))) ) | ($spl2 | $spl10)),
  inference(superposition,[],[f131,f120])).
fof(f118,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK4))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK5))) | $spl1),
  inference(cnf_transformation,[],[f118_D])).
fof(f118_D,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK4))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK5))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f75,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK4))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK5)))),
  inference(cnf_transformation,[],[f57])).
fof(f1339,plain,(
  $false | ($spl1 | $spl282)),
  inference(subsumption_resolution,[],[f1334,f118])).
fof(f1334,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK4))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(sK0),sK5))) | $spl282),
  inference(equality_resolution,[],[f1321])).
% SZS output end Proof for thm.bviProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 30
% Passive clauses: 139
% Generated clauses: 1226
% Final active clauses: 26
% Final passive clauses: 107
% Input formulas: 21
% Initial clauses: 40
% 
% Duplicate literals: 103
% Trivial inequalities: 6
% Fw subsumption resolutions: 29
% Fw demodulations: 4
% Bw demodulations: 2
% Condensations: 145
% Global subsumptions: 5
% 
% Simple tautologies: 49
% Equational tautologies: 30
% Forward subsumptions: 465
% 
% Binary resolution: 30
% Factoring: 1
% Forward superposition: 321
% Backward superposition: 270
% Self superposition: 71
% Equality factoring: 50
% Equality resolution: 4
% 
% Split clauses: 2
% Split components: 4
% SAT solver clauses: 298
% SAT solver unit clauses: 46
% SAT solver binary clauses: 30
% SAT solver learnt clauses: 11
% 
% Sat splits: 2
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 277
% TWLsolver calls for satisfiability: 107
% 
% Memory used [KB]: 2686
% Time elapsed: 0.148 s
% ------------------------------
% ------------------------------
% Success in time 0.78 s
