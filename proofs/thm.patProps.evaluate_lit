Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.patProps
% (81210)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 120
% Passive clauses: 3657
% Generated clauses: 15648
% Final active clauses: 112
% Final passive clauses: 3371
% Input formulas: 63
% Initial clauses: 69
% 
% Duplicate literals: 545
% Trivial inequalities: 170
% Fw subsumption resolutions: 981
% Fw demodulations: 1725
% Bw demodulations: 4
% 
% Simple tautologies: 150
% Equational tautologies: 26
% Forward subsumptions: 7616
% 
% Binary resolution: 36
% Forward superposition: 6236
% Backward superposition: 5466
% Self superposition: 230
% Equality factoring: 68
% Equality resolution: 17
% 
% Split clauses: 339
% Split components: 697
% SAT solver clauses: 721
% SAT solver unit clauses: 20
% SAT solver binary clauses: 206
% 
% Sat splits: 339
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 718
% TWLsolver calls for satisfiability: 94
% 
% Memory used [KB]: 20980
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.patProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.patProps
% SZS output start Proof for thm.patProps
fof(f362,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f361,f194,f264,f209,f281])).
fof(f281,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X3),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X2))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X1),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',X2))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))))) ) | $spl30),
  inference(cnf_transformation,[],[f281_D])).
fof(f281_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X3),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X2))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X1),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',X2))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f209,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X3),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X2))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X1),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',X2))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X3),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X2))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X1),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',X2))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))))),
  inference(flattening,[],[f89])).
fof(f89,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X3),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X2))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X1),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',X2))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X10] : ! [X7,X8,X9] : s('type.pair.prod'('type.patSem.state'(X10),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X9),s('type.patSem.state'(X10),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X8))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(X10),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X10),X7),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',X8))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))))),
  file('thm.patProps.evaluate_lit','thm.patSem.patSem_|49|3|48|_prove_ltb|split|2')).
fof(f264,plain,(
  s('type.pair.prod'('type.patSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK3),s('type.patSem.state'(sK0),sK1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK2))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) != s('type.pair.prod'('type.patSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK0),sK1),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',sK2))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0'))))))) | $spl1),
  inference(cnf_transformation,[],[f264_D])).
fof(f264_D,plain,(
  s('type.pair.prod'('type.patSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK3),s('type.patSem.state'(sK0),sK1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK2))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) != s('type.pair.prod'('type.patSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK0),sK1),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',sK2))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0'))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f194,plain,(
  s('type.pair.prod'('type.patSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK3),s('type.patSem.state'(sK0),sK1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK2))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) != s('type.pair.prod'('type.patSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK0),sK1),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',sK2))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))))),
  inference(cnf_transformation,[],[f185])).
fof(f185,plain,(
  s('type.pair.prod'('type.patSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK3),s('type.patSem.state'(sK0),sK1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK2))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) != s('type.pair.prod'('type.patSem.state'(sK0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK0),sK1),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',sK2))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f183])).
fof(f183,plain,(
  ? [X0,X1,X2,X3] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X3),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X2))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) != s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X1),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',X2))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))))),
  inference(ennf_transformation,[],[f66])).
fof(f66,plain,(
  ~! [X0,X1,X2,X3] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X3),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X2))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X1),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',X2))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))))),
  inference(flattening,[],[f65])).
fof(f65,plain,(
  ~! [X0] : ! [X1,X2,X3] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X3),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X2))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X1),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',X2))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X9),s('type.patSem.state'(X6),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X8))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X6),X7),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',X8))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X9),s('type.patSem.state'(X6),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X8))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X6),X7),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',X8))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))))),
  file('thm.patProps.evaluate_lit','thm.patProps.evaluate_lit')).
fof(f361,plain,(
  $false | ($spl1 | $spl30)),
  inference(subsumption_resolution,[],[f264,f281])).
% SZS output end Proof for thm.patProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Passive clauses: 62
% Generated clauses: 158
% Final passive clauses: 61
% Input formulas: 63
% Initial clauses: 69
% 
% Fw subsumption resolutions: 1
% Fw demodulations: 18
% Bw demodulations: 1
% 
% SAT solver clauses: 147
% SAT solver unit clauses: 129
% SAT solver binary clauses: 9
% SAT solver learnt clauses: 1
% 
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 146
% TWLsolver calls for satisfiability: 114
% 
% Memory used [KB]: 4093
% Time elapsed: 0.020 s
% ------------------------------
% ------------------------------
% Success in time 0.642 s
