Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (100478)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 818
% Passive clauses: 5243
% Generated clauses: 20002
% Final active clauses: 724
% Final passive clauses: 4081
% Input formulas: 132
% Initial clauses: 360
% 
% Duplicate literals: 130
% Trivial inequalities: 39
% Fw subsumption resolutions: 728
% Fw demodulations: 4135
% Bw demodulations: 93
% 
% Simple tautologies: 372
% Equational tautologies: 16
% Forward subsumptions: 8967
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 3824
% Factoring: 341
% Forward superposition: 4945
% Backward superposition: 5122
% Self superposition: 54
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 374
% Split components: 750
% SAT solver clauses: 487
% SAT solver unit clauses: 11
% SAT solver binary clauses: 86
% 
% Sat splits: 374
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 475
% TWLsolver calls for satisfiability: 273
% 
% Memory used [KB]: 13304
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (100493)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 374
% Passive clauses: 2769
% Generated clauses: 14323
% Final active clauses: 367
% Final passive clauses: 2333
% Input formulas: 132
% Initial clauses: 360
% 
% Duplicate literals: 81
% Trivial inequalities: 2
% Fw subsumption resolutions: 346
% Fw demodulations: 2290
% Bw demodulations: 69
% Condensations: 64
% Global subsumptions: 26
% 
% Simple tautologies: 329
% Equational tautologies: 12
% Forward subsumptions: 4998
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 1699
% Factoring: 72
% Forward superposition: 3329
% Backward superposition: 3114
% Self superposition: 69
% Equality factoring: 2
% Equality resolution: 5
% 
% Split clauses: 31
% Split components: 62
% SAT solver clauses: 3565
% SAT solver unit clauses: 378
% SAT solver binary clauses: 97
% SAT solver learnt clauses: 52
% SAT solver learnt literals: 14
% 
% Sat splits: 31
% 
% TWLsolver clauses: 3461
% TWLsolver calls for satisfiability: 2632
% 
% Memory used [KB]: 21620
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% (100512)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 452
% Passive clauses: 3751
% Generated clauses: 280275
% Final active clauses: 394
% Final passive clauses: 931
% Input formulas: 132
% Initial clauses: 360
% Discarded non-redundant clauses: 247890
% 
% Duplicate literals: 8
% Trivial inequalities: 6
% Fw subsumption resolutions: 601
% Fw demodulations: 13567
% Bw demodulations: 326
% Condensations: 33
% 
% Simple tautologies: 172
% Equational tautologies: 32
% Forward subsumptions: 11001
% Fw demodulations to eq. taut.: 4159
% Bw demodulations to eq. taut.: 5
% 
% Unit resulting resolution: 261759
% Factoring: 1
% Forward superposition: 3433
% Backward superposition: 3094
% Self superposition: 83
% Equality factoring: 2
% Equality resolution: 6
% 
% Split clauses: 18
% Split components: 36
% SAT solver clauses: 4664
% SAT solver unit clauses: 1873
% SAT solver binary clauses: 1898
% 
% Sat splits: 18
% Sat splitting refutations: 875
% 
% Memory used [KB]: 215817
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f870,plain,(
  $false),
  inference(equality_resolution,[],[f789])).
fof(f789,plain,(
  ( ! [X8] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),X8) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK11),sK12))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK14),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK15),s('type.list.list'('type.ast.top'),sK13)))) )),
  inference(superposition,[],[f738,f448])).
fof(f448,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK20(X2,X1,X0)),s(X1,sK21(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f299])).
fof(f299,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK20(X2,X1,X0)),s(X1,sK21(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK20,sK21])],[f176])).
fof(f176,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f175])).
fof(f175,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f91])).
fof(f91,axiom,(
  ! [X6,X37] : ! [X42] : ? [X64,X19] : s('type.pair.prod'(X6,X37),X42) = s('type.pair.prod'(X6,X37),'const.pair.,_2'(s(X6,X64),s(X37,X19)))),
  file('thm.source_to_modProof.source_to_modProof_|49|89_prove_ltb','thm.pair.ABS_PAIR_THM')).
fof(f738,plain,(
  ( ! [X10,X11] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),X10))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK11),sK12))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK14),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK15),s('type.list.list'('type.ast.top'),sK13)))) )),
  inference(superposition,[],[f666,f448])).
fof(f666,plain,(
  ( ! [X14,X12,X13] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK11),sK12))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK14),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK15),s('type.list.list'('type.ast.top'),sK13))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X13),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X14),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')),X12)))))) )),
  inference(superposition,[],[f377,f448])).
fof(f377,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK11),sK12))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK14),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK15),s('type.list.list'('type.ast.top'),sK13))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.modLang.prompt'),X8)))))))) )),
  inference(cnf_transformation,[],[f263])).
fof(f263,plain,(
  ! [X5,X6,X7,X8] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK11),sK12))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK14),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK15),s('type.list.list'('type.ast.top'),sK13))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.modLang.prompt'),X8)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11,sK12,sK13,sK14,sK15])],[f226])).
fof(f226,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6,X7,X8] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s('type.list.list'('type.ast.top'),X2))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.modLang.prompt'),X8)))))))),
  inference(ennf_transformation,[],[f135])).
fof(f135,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6,X7,X8] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s('type.list.list'('type.ast.top'),X2))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.modLang.prompt'),X8)))))))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : ? [X5,X6,X7,X8] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s('type.list.list'('type.ast.top'),X2))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.modLang.prompt'),X8)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12,X13,X14] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X7))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10),s('type.list.list'('type.ast.top'),X8))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X12),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X13),s('type.list.list'('type.modLang.prompt'),X14)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12,X13,X14] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X7))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10),s('type.list.list'('type.ast.top'),X8))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X12),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X13),s('type.list.list'('type.modLang.prompt'),X14)))))))),
  file('thm.source_to_modProof.source_to_modProof_|49|89_prove_ltb','thm.source_to_modProof.source_to_modProof_|49|89_prove_ltb')).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 151
% Passive clauses: 65
% Generated clauses: 224
% Final active clauses: 151
% Final passive clauses: 61
% Input formulas: 132
% Initial clauses: 217
% 
% Selected by SInE selection: 56
% SInE iterations: 1
% 
% Duplicate literals: 6
% Trivial inequalities: 1
% 
% Simple tautologies: 65
% Equational tautologies: 4
% Forward subsumptions: 158
% 
% Forward superposition: 269
% Equality resolution: 1
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 2558
% Time elapsed: 0.021 s
% ------------------------------
% ------------------------------
% Success in time 11.758 s
