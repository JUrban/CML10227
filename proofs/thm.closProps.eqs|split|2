Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.closProps
% (109364)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 116
% Passive clauses: 3758
% Generated clauses: 19180
% Final active clauses: 104
% Final passive clauses: 3366
% Input formulas: 105
% Initial clauses: 117
% 
% Duplicate literals: 638
% Trivial inequalities: 213
% Fw subsumption resolutions: 1608
% Fw demodulations: 2491
% Bw demodulations: 2
% 
% Simple tautologies: 291
% Equational tautologies: 83
% Forward subsumptions: 9860
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 89
% Factoring: 1
% Forward superposition: 6996
% Backward superposition: 6670
% Self superposition: 299
% Equality factoring: 179
% Equality resolution: 22
% 
% Split clauses: 180
% Split components: 365
% SAT solver clauses: 328
% SAT solver unit clauses: 18
% SAT solver binary clauses: 69
% 
% Sat splits: 180
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 328
% TWLsolver calls for satisfiability: 59
% 
% Memory used [KB]: 13688
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.closProps
% (109393)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 98
% Passive clauses: 1245
% Generated clauses: 10610
% Final active clauses: 90
% Final passive clauses: 1133
% Input formulas: 105
% Initial clauses: 117
% 
% Duplicate literals: 421
% Trivial inequalities: 44
% Fw subsumption resolutions: 131
% Fw demodulations: 677
% Bw demodulations: 12
% Condensations: 844
% 
% Simple tautologies: 111
% Equational tautologies: 58
% Forward subsumptions: 4879
% Fw demodulations to eq. taut.: 7
% 
% Binary resolution: 77
% Factoring: 1
% Forward superposition: 3809
% Backward superposition: 2887
% Self superposition: 193
% Equality factoring: 108
% Equality resolution: 7
% 
% Split clauses: 38
% Split components: 81
% SAT solver clauses: 2247
% SAT solver unit clauses: 196
% SAT solver binary clauses: 51
% 
% Sat splits: 38
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 2247
% TWLsolver calls for satisfiability: 3548
% 
% Memory used [KB]: 18805
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.closProps
% (109420)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 315
% Passive clauses: 5469
% Generated clauses: 97437
% Final active clauses: 161
% Final passive clauses: 672
% Input formulas: 105
% Initial clauses: 117
% Discarded non-redundant clauses: 109180
% 
% Duplicate literals: 1281
% Trivial inequalities: 248
% Fw subsumption resolutions: 669
% Fw demodulations: 5545
% Bw demodulations: 2235
% Condensations: 5205
% Global subsumptions: 104
% 
% Simple tautologies: 218
% Equational tautologies: 217
% Forward subsumptions: 70554
% Fw demodulations to eq. taut.: 57
% Bw demodulations to eq. taut.: 216
% 
% Unit resulting resolution: 1551
% Factoring: 1
% Forward superposition: 53036
% Backward superposition: 23572
% Self superposition: 945
% Equality factoring: 122
% Equality resolution: 16
% 
% Split clauses: 68
% Split components: 143
% SAT solver clauses: 5867
% SAT solver unit clauses: 373
% SAT solver binary clauses: 1645
% 
% Sat splits: 68
% Sat splitting refutations: 156
% 
% Memory used [KB]: 166180
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.closProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.closProps
% SZS output start Proof for thm.closProps
fof(f467,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f130,f138,f129,f142,f137,f128,f127,f144,f126,f141,f125,f146,f139,f136,f161,f222,f360,f382,f383,f436,f384,f140,f438,f361,f442,f440,f465,f466])).
fof(f466,plain,(
  $false | ($spl0 | $spl4 | $spl7)),
  inference(subsumption_resolution,[],[f459,f142])).
fof(f459,plain,(
  s(sK1,sK3) = s(sK1,sK4) | ($spl0 | $spl4)),
  inference(superposition,[],[f133,f443])).
fof(f443,plain,(
  s(sK1,sK3) = s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(sK1,sK4),s(fun(sK0,sK1),sK5))) | ($spl0 | $spl4)),
  inference(backward_demodulation,[],[f139,f136])).
fof(f133,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f114])).
fof(f114,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))),
  inference(flattening,[],[f113])).
fof(f113,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))),
  inference(rectify,[],[f84])).
fof(f84,axiom,(
  ! [X6,X7] : ! [X20,X11] : s(X7,X20) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.NONE_0'),s(X7,X20),s(fun(X6,X7),X11)))),
  file('thm.closProps.eqs|split|2','thm.option.option_case_def|split|0')).
fof(f465,plain,(
  $false | ($spl0 | $spl4 | $spl7)),
  inference(subsumption_resolution,[],[f458,f142])).
fof(f458,plain,(
  s(sK1,sK3) = s(sK1,sK4) | ($spl0 | $spl4)),
  inference(superposition,[],[f443,f133])).
fof(f440,plain,(
  s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK7(sK2,sK0)))) | $spl14),
  inference(cnf_transformation,[],[f440_D])).
fof(f440_D,plain,(
  s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK7(sK2,sK0)))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f442,plain,(
  s(sK1,sK3) = s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(sK1,sK4),s(fun(sK0,sK1),sK5))) | $spl16),
  inference(cnf_transformation,[],[f442_D])).
fof(f442_D,plain,(
  s(sK1,sK3) = s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(sK1,sK4),s(fun(sK0,sK1),sK5))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f361,plain,(
  s(sK1,sK3) = s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(sK1,sK4),s(fun(sK0,sK1),sK5))) | s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK7(sK2,sK0)))) | $spl0),
  inference(superposition,[],[f136,f132])).
fof(f132,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK7(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK7(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7])],[f112])).
fof(f112,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f111])).
fof(f111,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f83])).
fof(f83,axiom,(
  ! [X6] : ! [X83] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X83) | ? [X68] : s('type.option.option'(X6),X83) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X68))))),
  file('thm.closProps.eqs|split|2','thm.option.option_nchotomy')).
fof(f438,plain,(
  s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6))) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK7('const.option.SOME_1'(s(sK0,sK6)),sK0)))) | $spl12),
  inference(cnf_transformation,[],[f438_D])).
fof(f438_D,plain,(
  s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6))) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK7('const.option.SOME_1'(s(sK0,sK6)),sK0)))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f140,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK2) | $spl5),
  inference(cnf_transformation,[],[f140_D])).
fof(f140_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK2) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f384,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK2) | s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6))) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK7('const.option.SOME_1'(s(sK0,sK6)),sK0)))) | $spl11),
  inference(superposition,[],[f145,f132])).
fof(f145,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6))) | $spl11),
  inference(cnf_transformation,[],[f145_D])).
fof(f145_D,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f436,plain,(
  $false | ($spl0 | $spl2 | $spl5)),
  inference(subsumption_resolution,[],[f435,f224])).
fof(f224,plain,(
  s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK7(sK2,sK0)))) | $spl5),
  inference(trivial_inequality_removal,[],[f223])).
fof(f223,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.option.NONE_0') | s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK7(sK2,sK0)))) | $spl5),
  inference(superposition,[],[f140,f132])).
fof(f435,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK7(sK2,sK0)))) | ($spl0 | $spl2 | $spl5)),
  inference(trivial_inequality_removal,[],[f427])).
fof(f427,plain,(
  s(sK1,sK3) != s(sK1,sK3) | s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK7(sK2,sK0)))) | ($spl0 | $spl2 | $spl5)),
  inference(superposition,[],[f138,f405])).
fof(f405,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun(sK0,sK1),sK5),s(sK0,sK7(sK2,sK0)))) | ($spl0 | $spl5)),
  inference(superposition,[],[f240,f136])).
fof(f240,plain,(
  ( ! [X2,X0,X1] : (s(X0,happ(s(fun(sK0,X0),X1),s(sK0,sK7(sK2,sK0)))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(X0,X2),s(fun(sK0,X0),X1)))) ) | $spl5),
  inference(superposition,[],[f131,f224])).
fof(f131,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))) )),
  inference(cnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0,X1,X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))),
  inference(flattening,[],[f109])).
fof(f109,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))),
  inference(rectify,[],[f85])).
fof(f85,axiom,(
  ! [X7,X6] : ! [X68,X20,X11] : s(X7,happ(s(fun(X6,X7),X11),s(X6,X68))) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X68))),s(X7,X20),s(fun(X6,X7),X11)))),
  file('thm.closProps.eqs|split|2','thm.option.option_case_def|split|1')).
fof(f383,plain,(
  $false | ($spl0 | $spl9 | $spl10)),
  inference(subsumption_resolution,[],[f362,f143])).
fof(f143,plain,(
  s(sK1,sK3) != s(sK1,happ(s(fun(sK0,sK1),sK5),s(sK0,sK6))) | $spl9),
  inference(cnf_transformation,[],[f143_D])).
fof(f143_D,plain,(
  s(sK1,sK3) != s(sK1,happ(s(fun(sK0,sK1),sK5),s(sK0,sK6))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f362,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun(sK0,sK1),sK5),s(sK0,sK6))) | ($spl0 | $spl10)),
  inference(superposition,[],[f136,f226])).
fof(f226,plain,(
  ( ! [X2,X0,X1] : (s(X0,happ(s(fun(sK0,X0),X1),s(sK0,sK6))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(X0,X2),s(fun(sK0,X0),X1)))) ) | $spl10),
  inference(superposition,[],[f131,f146])).
fof(f382,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f376,f146])).
fof(f376,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6))) | ($spl2 | $spl8)),
  inference(trivial_inequality_removal,[],[f375])).
fof(f375,plain,(
  s(sK1,sK3) != s(sK1,sK3) | s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6))) | ($spl2 | $spl8)),
  inference(superposition,[],[f138,f144])).
fof(f360,plain,(
  $false | ($spl1 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f355,f144])).
fof(f355,plain,(
  s(sK1,sK3) != s(sK1,happ(s(fun(sK0,sK1),sK5),s(sK0,sK6))) | ($spl1 | $spl10)),
  inference(superposition,[],[f137,f226])).
fof(f222,plain,(
  $false | ($spl1 | $spl4 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f217,f144])).
fof(f217,plain,(
  s(sK1,sK3) != s(sK1,happ(s(fun(sK0,sK1),sK5),s(sK0,sK6))) | ($spl1 | $spl4 | $spl10)),
  inference(superposition,[],[f162,f164])).
fof(f164,plain,(
  ( ! [X2,X0,X1] : (s(X0,happ(s(fun(sK0,X0),X1),s(sK0,sK6))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(X0,X2),s(fun(sK0,X0),X1)))) ) | ($spl4 | $spl10)),
  inference(superposition,[],[f131,f163])).
fof(f163,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6))) | ($spl4 | $spl10)),
  inference(forward_demodulation,[],[f146,f139])).
fof(f162,plain,(
  s(sK1,sK3) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(sK1,sK4),s(fun(sK0,sK1),sK5))) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f137,f139])).
fof(f161,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f160,f133])).
fof(f160,plain,(
  s(sK1,sK3) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(sK1,sK3),s(fun(sK0,sK1),sK5))) | ($spl1 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f159,f139])).
fof(f159,plain,(
  s(sK1,sK3) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK3),s(fun(sK0,sK1),sK5))) | ($spl1 | $spl6)),
  inference(forward_demodulation,[],[f137,f141])).
fof(f136,plain,(
  s(sK1,sK3) = s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK5))) | $spl0),
  inference(cnf_transformation,[],[f136_D])).
fof(f136_D,plain,(
  s(sK1,sK3) = s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK5))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f139,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | $spl4),
  inference(cnf_transformation,[],[f139_D])).
fof(f139_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f146,plain,(
  s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6))) | $spl10),
  inference(cnf_transformation,[],[f146_D])).
fof(f146_D,plain,(
  s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f125,plain,(
  s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | s(sK1,sK3) = s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK5)))),
  inference(cnf_transformation,[],[f123])).
fof(f123,plain,(
  (s(sK1,sK3) = s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK5))) | (s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) & s(sK1,sK3) = s(sK1,sK4)) | (s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6))) & s(sK1,sK3) = s(sK1,happ(s(fun(sK0,sK1),sK5),s(sK0,sK6))))) & (s(sK1,sK3) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK5))) | ((s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK2) | s(sK1,sK3) != s(sK1,sK4)) & ! [X6] : (s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X6))) | s(sK1,sK3) != s(sK1,happ(s(fun(sK0,sK1),sK5),s(sK0,X6))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6])],[f122])).
fof(f122,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((s(X1,X3) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X4),s(fun(X0,X1),X5))) | (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) & s(X1,X3) = s(X1,X4)) | ? [X7] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X7))) & s(X1,X3) = s(X1,happ(s(fun(X0,X1),X5),s(X0,X7))))) & (s(X1,X3) != s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X4),s(fun(X0,X1),X5))) | ((s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X2) | s(X1,X3) != s(X1,X4)) & ! [X6] : (s('type.option.option'(X0),X2) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) | s(X1,X3) != s(X1,happ(s(fun(X0,X1),X5),s(X0,X6)))))))),
  inference(rectify,[],[f121])).
fof(f121,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((s(X1,X3) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X4),s(fun(X0,X1),X5))) | (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) & s(X1,X3) = s(X1,X4)) | ? [X6] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) & s(X1,X3) = s(X1,happ(s(fun(X0,X1),X5),s(X0,X6))))) & (s(X1,X3) != s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X4),s(fun(X0,X1),X5))) | ((s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X2) | s(X1,X3) != s(X1,X4)) & ! [X6] : (s('type.option.option'(X0),X2) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) | s(X1,X3) != s(X1,happ(s(fun(X0,X1),X5),s(X0,X6)))))))),
  inference(flattening,[],[f120])).
fof(f120,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((s(X1,X3) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X4),s(fun(X0,X1),X5))) | ((s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) & s(X1,X3) = s(X1,X4)) | ? [X6] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) & s(X1,X3) = s(X1,happ(s(fun(X0,X1),X5),s(X0,X6)))))) & (s(X1,X3) != s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X4),s(fun(X0,X1),X5))) | ((s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X2) | s(X1,X3) != s(X1,X4)) & ! [X6] : (s('type.option.option'(X0),X2) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) | s(X1,X3) != s(X1,happ(s(fun(X0,X1),X5),s(X0,X6)))))))),
  inference(nnf_transformation,[],[f119])).
fof(f119,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s(X1,X3) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X4),s(fun(X0,X1),X5))) <~> ((s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) & s(X1,X3) = s(X1,X4)) | ? [X6] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) & s(X1,X3) = s(X1,happ(s(fun(X0,X1),X5),s(X0,X6))))))),
  inference(ennf_transformation,[],[f108])).
fof(f108,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (s(X1,X3) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X4),s(fun(X0,X1),X5))) <=> ((s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) & s(X1,X3) = s(X1,X4)) | ? [X6] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) & s(X1,X3) = s(X1,happ(s(fun(X0,X1),X5),s(X0,X6))))))),
  inference(flattening,[],[f107])).
fof(f107,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5] : (s(X1,X3) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X4),s(fun(X0,X1),X5))) <=> ((s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) & s(X1,X3) = s(X1,X4)) | ? [X6] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) & s(X1,X3) = s(X1,happ(s(fun(X0,X1),X5),s(X0,X6))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11] : (s(X7,X9) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),X8),s(X7,X10),s(fun(X6,X7),X11))) <=> ((s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X8) & s(X7,X9) = s(X7,X10)) | ? [X12] : (s('type.option.option'(X6),X8) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X12))) & s(X7,X9) = s(X7,happ(s(fun(X6,X7),X11),s(X6,X12))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11] : (s(X7,X9) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),X8),s(X7,X10),s(fun(X6,X7),X11))) <=> ((s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X8) & s(X7,X9) = s(X7,X10)) | ? [X12] : (s('type.option.option'(X6),X8) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X12))) & s(X7,X9) = s(X7,happ(s(fun(X6,X7),X11),s(X6,X12))))))),
  file('thm.closProps.eqs|split|2','thm.closProps.eqs|split|2')).
fof(f141,plain,(
  s(sK1,sK3) = s(sK1,sK4) | $spl6),
  inference(cnf_transformation,[],[f141_D])).
fof(f141_D,plain,(
  s(sK1,sK3) = s(sK1,sK4) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f126,plain,(
  s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6))) | s(sK1,sK3) = s(sK1,sK4) | s(sK1,sK3) = s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK5)))),
  inference(cnf_transformation,[],[f123])).
fof(f144,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun(sK0,sK1),sK5),s(sK0,sK6))) | $spl8),
  inference(cnf_transformation,[],[f144_D])).
fof(f144_D,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun(sK0,sK1),sK5),s(sK0,sK6))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f127,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun(sK0,sK1),sK5),s(sK0,sK6))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | s(sK1,sK3) = s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK5)))),
  inference(cnf_transformation,[],[f123])).
fof(f128,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun(sK0,sK1),sK5),s(sK0,sK6))) | s(sK1,sK3) = s(sK1,sK4) | s(sK1,sK3) = s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK5)))),
  inference(cnf_transformation,[],[f123])).
fof(f137,plain,(
  s(sK1,sK3) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK5))) | $spl1),
  inference(cnf_transformation,[],[f137_D])).
fof(f137_D,plain,(
  s(sK1,sK3) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK5))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f142,plain,(
  s(sK1,sK3) != s(sK1,sK4) | $spl7),
  inference(cnf_transformation,[],[f142_D])).
fof(f142_D,plain,(
  s(sK1,sK3) != s(sK1,sK4) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f129,plain,(
  s(sK1,sK3) != s(sK1,sK4) | s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK2) | s(sK1,sK3) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK5)))),
  inference(cnf_transformation,[],[f123])).
fof(f138,plain,(
  ( ! [X6] : (s(sK1,sK3) != s(sK1,happ(s(fun(sK0,sK1),sK5),s(sK0,X6))) | s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X6)))) ) | $spl2),
  inference(cnf_transformation,[],[f138_D])).
fof(f138_D,plain,(
  ( ! [X6] : (s(sK1,sK3) != s(sK1,happ(s(fun(sK0,sK1),sK5),s(sK0,X6))) | s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X6)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f130,plain,(
  ( ! [X6] : (s(sK1,sK3) != s(sK1,happ(s(fun(sK0,sK1),sK5),s(sK0,X6))) | s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X6))) | s(sK1,sK3) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s(sK1,sK4),s(fun(sK0,sK1),sK5)))) )),
  inference(cnf_transformation,[],[f123])).
% SZS output end Proof for thm.closProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 30
% Passive clauses: 64
% Generated clauses: 341
% Final active clauses: 10
% Final passive clauses: 5
% Input formulas: 105
% Initial clauses: 11
% 
% Selected by SInE selection: 6
% SInE iterations: 1
% 
% Trivial inequalities: 4
% Fw subsumption resolutions: 20
% Fw demodulations: 35
% Bw demodulations: 3
% 
% Forward subsumptions: 208
% 
% Forward superposition: 87
% Backward superposition: 159
% Self superposition: 6
% 
% Split clauses: 8
% Split components: 21
% SAT solver clauses: 17
% SAT solver binary clauses: 1
% 
% Sat splits: 8
% Sat splitting refutations: 8
% 
% Memory used [KB]: 1663
% Time elapsed: 0.039 s
% ------------------------------
% ------------------------------
% Success in time 11.782 s
