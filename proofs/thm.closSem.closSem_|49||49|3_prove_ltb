Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.closSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.closSem
% SZS output start Proof for thm.closSem
fof(f899,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f898,f41,f66,f64,f75,f76,f42,f62,f61])).
fof(f61,plain,(
  ( ! [X8] : (~p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),X8))))) ) | $spl0),
  inference(cnf_transformation,[],[f61_D])).
fof(f61_D,plain,(
  ( ! [X8] : (~p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),X8))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f62,plain,(
  ( ! [X6,X4,X7,X5,X3] : (~p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),X3))),s('type.closSem.state'(sK0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),X4))),s('type.closSem.state'(sK0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK1),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),X5))),s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X6))),s('type.closSem.state'(sK1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),X7))),s('type.closSem.state'(sK1),'const.bool.ARB_0'))))))))))))))) ) | $spl2),
  inference(cnf_transformation,[],[f62_D])).
fof(f62_D,plain,(
  ( ! [X6,X4,X7,X5,X3] : (~p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),X3))),s('type.closSem.state'(sK0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),X4))),s('type.closSem.state'(sK0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK1),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),X5))),s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X6))),s('type.closSem.state'(sK1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),X7))),s('type.closSem.state'(sK1),'const.bool.ARB_0'))))))))))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f42,plain,(
  ( ! [X6,X4,X8,X7,X5,X3] : (~p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),X3))),s('type.closSem.state'(sK0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),X4))),s('type.closSem.state'(sK0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK1),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),X5))),s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X6))),s('type.closSem.state'(sK1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),X7))),s('type.closSem.state'(sK1),'const.bool.ARB_0')))))))))))))) | ~p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),X8))))) )),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  (p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),sK3)))) | p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),sK4))),s('type.closSem.state'(sK0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),sK5))),s('type.closSem.state'(sK0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK1),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),sK6))),s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.closSem.state'(sK1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),sK8))),s('type.closSem.state'(sK1),'const.bool.ARB_0'))))))))))))))) & (! [X8] : ~p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),X8)))) | ! [X3,X4,X5,X6,X7] : ~p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),X3))),s('type.closSem.state'(sK0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),X4))),s('type.closSem.state'(sK0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK1),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),X5))),s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X6))),s('type.closSem.state'(sK1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),X7))),s('type.closSem.state'(sK1),'const.bool.ARB_0')))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8])],[f33])).
fof(f33,plain,(
  ? [X0,X1,X2] : ((? [X14] : p(s(bool,happ(s(fun('type.closSem.state'(X0),bool),X2),s('type.closSem.state'(X0),X14)))) | ? [X9,X10,X11,X12,X13] : p(s(bool,happ(s(fun('type.closSem.state'(X0),bool),X2),s('type.closSem.state'(X0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),X9))),s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),X10))),s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X11))),s('type.closSem.state'(X1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X12))),s('type.closSem.state'(X1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),X13))),s('type.closSem.state'(X1),'const.bool.ARB_0'))))))))))))))) & (! [X8] : ~p(s(bool,happ(s(fun('type.closSem.state'(X0),bool),X2),s('type.closSem.state'(X0),X8)))) | ! [X3,X4,X5,X6,X7] : ~p(s(bool,happ(s(fun('type.closSem.state'(X0),bool),X2),s('type.closSem.state'(X0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),X3))),s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),X4))),s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X5))),s('type.closSem.state'(X1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X6))),s('type.closSem.state'(X1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),X7))),s('type.closSem.state'(X1),'const.bool.ARB_0'))))))))))))))))),
  inference(rectify,[],[f32])).
fof(f32,plain,(
  ? [X0,X1,X2] : ((? [X3] : p(s(bool,happ(s(fun('type.closSem.state'(X0),bool),X2),s('type.closSem.state'(X0),X3)))) | ? [X4,X5,X6,X7,X8] : p(s(bool,happ(s(fun('type.closSem.state'(X0),bool),X2),s('type.closSem.state'(X0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),X4))),s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),X5))),s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X6))),s('type.closSem.state'(X1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.closSem.state'(X1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),X8))),s('type.closSem.state'(X1),'const.bool.ARB_0'))))))))))))))) & (! [X3] : ~p(s(bool,happ(s(fun('type.closSem.state'(X0),bool),X2),s('type.closSem.state'(X0),X3)))) | ! [X4,X5,X6,X7,X8] : ~p(s(bool,happ(s(fun('type.closSem.state'(X0),bool),X2),s('type.closSem.state'(X0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),X4))),s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),X5))),s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X6))),s('type.closSem.state'(X1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.closSem.state'(X1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),X8))),s('type.closSem.state'(X1),'const.bool.ARB_0'))))))))))))))))),
  inference(nnf_transformation,[],[f28])).
fof(f28,plain,(
  ? [X0,X1,X2] : (? [X3] : p(s(bool,happ(s(fun('type.closSem.state'(X0),bool),X2),s('type.closSem.state'(X0),X3)))) <~> ? [X4,X5,X6,X7,X8] : p(s(bool,happ(s(fun('type.closSem.state'(X0),bool),X2),s('type.closSem.state'(X0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),X4))),s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),X5))),s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X6))),s('type.closSem.state'(X1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.closSem.state'(X1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),X8))),s('type.closSem.state'(X1),'const.bool.ARB_0')))))))))))))))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ~! [X0,X1,X2] : (? [X3] : p(s(bool,happ(s(fun('type.closSem.state'(X0),bool),X2),s('type.closSem.state'(X0),X3)))) <=> ? [X4,X5,X6,X7,X8] : p(s(bool,happ(s(fun('type.closSem.state'(X0),bool),X2),s('type.closSem.state'(X0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),X4))),s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),X5))),s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X6))),s('type.closSem.state'(X1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.closSem.state'(X1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),X8))),s('type.closSem.state'(X1),'const.bool.ARB_0')))))))))))))))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ~! [X0,X1] : ! [X2] : (? [X3] : p(s(bool,happ(s(fun('type.closSem.state'(X0),bool),X2),s('type.closSem.state'(X0),X3)))) <=> ? [X4,X5,X6,X7,X8] : p(s(bool,happ(s(fun('type.closSem.state'(X0),bool),X2),s('type.closSem.state'(X0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),X4))),s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),X5))),s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X6))),s('type.closSem.state'(X1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X7))),s('type.closSem.state'(X1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),X8))),s('type.closSem.state'(X1),'const.bool.ARB_0')))))))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : (? [X9] : p(s(bool,happ(s(fun('type.closSem.state'(X6),bool),X8),s('type.closSem.state'(X6),X9)))) <=> ? [X10,X11,X12,X13,X14] : p(s(bool,happ(s(fun('type.closSem.state'(X6),bool),X8),s('type.closSem.state'(X6),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),X10))),s('type.closSem.state'(X6),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),X11))),s('type.closSem.state'(X6),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X7),'type.ffi.ffi_state'(X6)),'const.combin.K_1'(s('type.ffi.ffi_state'(X6),X12))),s('type.closSem.state'(X7),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X13))),s('type.closSem.state'(X7),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),X14))),s('type.closSem.state'(X7),'const.bool.ARB_0')))))))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : (? [X9] : p(s(bool,happ(s(fun('type.closSem.state'(X6),bool),X8),s('type.closSem.state'(X6),X9)))) <=> ? [X10,X11,X12,X13,X14] : p(s(bool,happ(s(fun('type.closSem.state'(X6),bool),X8),s('type.closSem.state'(X6),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),X10))),s('type.closSem.state'(X6),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),X11))),s('type.closSem.state'(X6),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X7),'type.ffi.ffi_state'(X6)),'const.combin.K_1'(s('type.ffi.ffi_state'(X6),X12))),s('type.closSem.state'(X7),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X13))),s('type.closSem.state'(X7),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),X14))),s('type.closSem.state'(X7),'const.bool.ARB_0')))))))))))))))),
  file('thm.closSem.closSem_|49||49|3_prove_ltb','thm.closSem.closSem_|49||49|3_prove_ltb')).
fof(f76,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f66,f61])).
fof(f75,plain,(
  $false | ($spl0 | $spl4)),
  inference(subsumption_resolution,[],[f64,f61])).
fof(f64,plain,(
  p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),sK3)))) | $spl4),
  inference(cnf_transformation,[],[f64_D])).
fof(f64_D,plain,(
  p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),sK3)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f66,plain,(
  p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),sK4))),s('type.closSem.state'(sK0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),sK5))),s('type.closSem.state'(sK0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK1),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),sK6))),s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.closSem.state'(sK1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),sK8))),s('type.closSem.state'(sK1),'const.bool.ARB_0')))))))))))))) | $spl6),
  inference(cnf_transformation,[],[f66_D])).
fof(f66_D,plain,(
  p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),sK4))),s('type.closSem.state'(sK0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),sK5))),s('type.closSem.state'(sK0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK1),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),sK6))),s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.closSem.state'(sK1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),sK8))),s('type.closSem.state'(sK1),'const.bool.ARB_0')))))))))))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f41,plain,(
  p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),sK4))),s('type.closSem.state'(sK0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),sK5))),s('type.closSem.state'(sK0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK1),'type.ffi.ffi_state'(sK0)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK0),sK6))),s('type.closSem.state'(sK1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK7))),s('type.closSem.state'(sK1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),sK8))),s('type.closSem.state'(sK1),'const.bool.ARB_0')))))))))))))) | p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),sK3))))),
  inference(cnf_transformation,[],[f34])).
fof(f898,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.closSem.state'(sK0),bool),sK2),s('type.closSem.state'(sK0),X0))))) ) | $spl2),
  inference(superposition,[],[f62,f59])).
fof(f59,plain,(
  ( ! [X2,X0,X1] : (s('type.closSem.state'(X0),X2) = s('type.closSem.state'(X0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),sK9(X2,X1,X0)))),s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),sK10(X2,X1,X0)))),s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),sK11(X2,X1,X0)))),s('type.closSem.state'(X1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK12(X2,X1,X0)))),s('type.closSem.state'(X1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),sK13(X2,X1,X0)))),s('type.closSem.state'(X1),'const.bool.ARB_0')))))))))))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2] : s('type.closSem.state'(X0),X2) = s('type.closSem.state'(X0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),sK9(X2,X1,X0)))),s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),sK10(X2,X1,X0)))),s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),sK11(X2,X1,X0)))),s('type.closSem.state'(X1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK12(X2,X1,X0)))),s('type.closSem.state'(X1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),sK13(X2,X1,X0)))),s('type.closSem.state'(X1),'const.bool.ARB_0')))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10,sK11,sK12,sK13])],[f25])).
fof(f25,plain,(
  ! [X0,X1,X2] : ? [X3,X4,X5,X6,X7] : s('type.closSem.state'(X0),X2) = s('type.closSem.state'(X0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),X3))),s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),X4))),s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X5))),s('type.closSem.state'(X1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X6))),s('type.closSem.state'(X1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),X7))),s('type.closSem.state'(X1),'const.bool.ARB_0')))))))))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4,X5,X6,X7] : s('type.closSem.state'(X0),X2) = s('type.closSem.state'(X0),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),X3))),s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),X4))),s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),X5))),s('type.closSem.state'(X1),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X6))),s('type.closSem.state'(X1),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),X7))),s('type.closSem.state'(X1),'const.bool.ARB_0')))))))))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6,X7] : ! [X9] : ? [X10,X11,X12,X13,X14] : s('type.closSem.state'(X6),X9) = s('type.closSem.state'(X6),'const.closSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.closSem.v')),'type.list.list'('type.option.option'('type.closSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.closSem.v')),X10))),s('type.closSem.state'(X6),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),X11))),s('type.closSem.state'(X6),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X7),'type.ffi.ffi_state'(X6)),'const.combin.K_1'(s('type.ffi.ffi_state'(X6),X12))),s('type.closSem.state'(X7),'const.closSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X13))),s('type.closSem.state'(X7),'const.closSem.state_code_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),'type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp'))),'const.combin.K_1'(s('type.finite_map.fmap'('type.num.num','type.pair.prod'('type.num.num','type.closLang.exp')),X14))),s('type.closSem.state'(X7),'const.bool.ARB_0')))))))))))),
  file('thm.closSem.closSem_|49||49|3_prove_ltb','thm.closSem.closSem_|49||49||49|_prove_ltb')).
% SZS output end Proof for thm.closSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 26
% Passive clauses: 166
% Generated clauses: 812
% Final active clauses: 24
% Final passive clauses: 122
% Input formulas: 12
% Initial clauses: 20
% 
% Duplicate literals: 94
% Trivial inequalities: 23
% Fw subsumption resolutions: 110
% Fw demodulations: 4
% Bw demodulations: 1
% 
% Simple tautologies: 57
% Equational tautologies: 28
% Forward subsumptions: 328
% 
% Binary resolution: 44
% Factoring: 1
% Forward superposition: 138
% Backward superposition: 271
% Self superposition: 42
% Equality factoring: 50
% Equality resolution: 5
% 
% Split clauses: 10
% Split components: 20
% SAT solver clauses: 20
% SAT solver unit clauses: 6
% SAT solver binary clauses: 11
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 10
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 18
% TWLsolver calls for satisfiability: 7
% 
% Memory used [KB]: 1151
% Time elapsed: 0.019 s
% ------------------------------
% ------------------------------
% Success in time 0.02 s
