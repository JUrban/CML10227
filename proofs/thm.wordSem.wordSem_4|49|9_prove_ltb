Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.wordSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.wordSem
% SZS output start Proof for thm.wordSem
fof(f1823,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1822,f133,f230,f228,f134,f227])).
fof(f227,plain,(
  s('type.list.list'('type.wordSem.stack_frame'(sK6)),'const.list.NIL_0') != s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK7) | $spl1),
  inference(cnf_transformation,[],[f227_D])).
fof(f227_D,plain,(
  s('type.list.list'('type.wordSem.stack_frame'(sK6)),'const.list.NIL_0') != s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK7) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f134,plain,(
  s('type.list.list'('type.wordSem.stack_frame'(sK6)),'const.list.NIL_0') != s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK7)),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  (s('type.list.list'('type.wordSem.stack_frame'(sK6)),'const.list.NIL_0') = s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK7) | s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK7) = s('type.list.list'('type.wordSem.stack_frame'(sK6)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(sK6),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK6))),sK8),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK9))),s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK10)))) & s('type.list.list'('type.wordSem.stack_frame'(sK6)),'const.list.NIL_0') != s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK7) & ! [X2,X3,X4] : s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK7) != s('type.list.list'('type.wordSem.stack_frame'(sK6)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(sK6),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK6))),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X3))),s('type.list.list'('type.wordSem.stack_frame'(sK6)),X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9,sK10])],[f90])).
fof(f90,plain,(
  ? [X0,X1] : ((s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.NIL_0') = s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) | ? [X5,X6,X7] : s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(X0),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X0))),X5),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X6))),s('type.list.list'('type.wordSem.stack_frame'(X0)),X7)))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.NIL_0') != s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) & ! [X2,X3,X4] : s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) != s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(X0),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X0))),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X3))),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4))))),
  inference(rectify,[],[f65])).
fof(f65,plain,(
  ? [X0,X1] : ((s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.NIL_0') = s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) | ? [X2,X3,X4] : s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(X0),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X0))),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X3))),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4)))) & s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.NIL_0') != s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) & ! [X5,X6,X7] : s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) != s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(X0),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X0))),X5),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X6))),s('type.list.list'('type.wordSem.stack_frame'(X0)),X7))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ? [X0,X1] : ((s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.NIL_0') = s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) | ? [X2,X3,X4] : s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(X0),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X0))),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X3))),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4)))) & (s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.NIL_0') != s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) & ! [X5,X6,X7] : s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) != s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(X0),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X0))),X5),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X6))),s('type.list.list'('type.wordSem.stack_frame'(X0)),X7)))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1] : ((s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.NIL_0') = s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) | ? [X2,X3,X4] : s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(X0),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X0))),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X3))),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4)))) => (s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.NIL_0') = s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) | ? [X5,X6,X7] : s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(X0),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X0))),X5),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X6))),s('type.list.list'('type.wordSem.stack_frame'(X0)),X7)))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ~! [X0] : ! [X1] : ((s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.NIL_0') = s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) | ? [X2,X3,X4] : s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(X0),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X0))),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X3))),s('type.list.list'('type.wordSem.stack_frame'(X0)),X4)))) => (s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.NIL_0') = s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) | ? [X5,X6,X7] : s('type.list.list'('type.wordSem.stack_frame'(X0)),X1) = s('type.list.list'('type.wordSem.stack_frame'(X0)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(X0),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X0))),X5),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X6))),s('type.list.list'('type.wordSem.stack_frame'(X0)),X7)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.list.NIL_0') = s('type.list.list'('type.wordSem.stack_frame'(X6)),X7) | ? [X8,X9,X10] : s('type.list.list'('type.wordSem.stack_frame'(X6)),X7) = s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(X6),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X6))),X8),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X9))),s('type.list.list'('type.wordSem.stack_frame'(X6)),X10)))) => (s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.list.NIL_0') = s('type.list.list'('type.wordSem.stack_frame'(X6)),X7) | ? [X8,X9,X10] : s('type.list.list'('type.wordSem.stack_frame'(X6)),X7) = s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(X6),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X6))),X8),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X9))),s('type.list.list'('type.wordSem.stack_frame'(X6)),X10)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.list.NIL_0') = s('type.list.list'('type.wordSem.stack_frame'(X6)),X7) | ? [X8,X9,X10] : s('type.list.list'('type.wordSem.stack_frame'(X6)),X7) = s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(X6),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X6))),X8),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X9))),s('type.list.list'('type.wordSem.stack_frame'(X6)),X10)))) => (s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.list.NIL_0') = s('type.list.list'('type.wordSem.stack_frame'(X6)),X7) | ? [X8,X9,X10] : s('type.list.list'('type.wordSem.stack_frame'(X6)),X7) = s('type.list.list'('type.wordSem.stack_frame'(X6)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(X6),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X6))),X8),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X9))),s('type.list.list'('type.wordSem.stack_frame'(X6)),X10)))))),
  file('thm.wordSem.wordSem_4|49|9_prove_ltb','thm.wordSem.wordSem_4|49|9_prove_ltb')).
fof(f228,plain,(
  s('type.list.list'('type.wordSem.stack_frame'(sK6)),'const.list.NIL_0') = s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK7) | $spl0),
  inference(cnf_transformation,[],[f228_D])).
fof(f228_D,plain,(
  s('type.list.list'('type.wordSem.stack_frame'(sK6)),'const.list.NIL_0') = s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK7) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f230,plain,(
  s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK7) = s('type.list.list'('type.wordSem.stack_frame'(sK6)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(sK6),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK6))),sK8),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK9))),s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK10))) | $spl2),
  inference(cnf_transformation,[],[f230_D])).
fof(f230_D,plain,(
  s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK7) = s('type.list.list'('type.wordSem.stack_frame'(sK6)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(sK6),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK6))),sK8),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK9))),s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK10))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f133,plain,(
  s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK7) = s('type.list.list'('type.wordSem.stack_frame'(sK6)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(sK6),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK6))),sK8),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK9))),s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK10))) | s('type.list.list'('type.wordSem.stack_frame'(sK6)),'const.list.NIL_0') = s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK7)),
  inference(cnf_transformation,[],[f91])).
fof(f1822,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f230,f135])).
fof(f135,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'('type.wordSem.stack_frame'(sK6)),sK7) != s('type.list.list'('type.wordSem.stack_frame'(sK6)),'const.list.CONS_2'(s('type.wordSem.stack_frame'(sK6),'const.wordSem.StackFrame_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK6))),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X3))),s('type.list.list'('type.wordSem.stack_frame'(sK6)),X4)))) )),
  inference(cnf_transformation,[],[f91])).
% SZS output end Proof for thm.wordSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 169
% Passive clauses: 584
% Generated clauses: 1682
% Final active clauses: 169
% Final passive clauses: 358
% Input formulas: 26
% Initial clauses: 93
% 
% Duplicate literals: 37
% Trivial inequalities: 13
% Fw subsumption resolutions: 127
% 
% Simple tautologies: 58
% Equational tautologies: 11
% Forward subsumptions: 830
% 
% Binary resolution: 1055
% Factoring: 200
% Forward superposition: 76
% Backward superposition: 51
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 43
% Split components: 87
% SAT solver clauses: 80
% SAT solver unit clauses: 8
% SAT solver binary clauses: 30
% SAT solver learnt clauses: 1
% 
% Sat splits: 43
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 79
% TWLsolver calls for satisfiability: 59
% 
% Memory used [KB]: 1279
% Time elapsed: 0.065 s
% ------------------------------
% ------------------------------
% Success in time 0.06 s
