Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.SplayHeap
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.SplayHeap
% SZS output start Proof for thm.SplayHeap
fof(f1203,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1202,f133,f230,f228,f134,f227])).
fof(f227,plain,(
  s('type.SplayHeap.heap'(sK6),'const.SplayHeap.Empty_0') != s('type.SplayHeap.heap'(sK6),sK7) | $spl1),
  inference(cnf_transformation,[],[f227_D])).
fof(f227_D,plain,(
  s('type.SplayHeap.heap'(sK6),'const.SplayHeap.Empty_0') != s('type.SplayHeap.heap'(sK6),sK7) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f134,plain,(
  s('type.SplayHeap.heap'(sK6),'const.SplayHeap.Empty_0') != s('type.SplayHeap.heap'(sK6),sK7)),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  (s('type.SplayHeap.heap'(sK6),'const.SplayHeap.Empty_0') = s('type.SplayHeap.heap'(sK6),sK7) | s('type.SplayHeap.heap'(sK6),sK7) = s('type.SplayHeap.heap'(sK6),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(sK6),sK8),s(sK6,sK9),s('type.SplayHeap.heap'(sK6),sK10)))) & s('type.SplayHeap.heap'(sK6),'const.SplayHeap.Empty_0') != s('type.SplayHeap.heap'(sK6),sK7) & ! [X2,X3,X4] : s('type.SplayHeap.heap'(sK6),sK7) != s('type.SplayHeap.heap'(sK6),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(sK6),X2),s(sK6,X3),s('type.SplayHeap.heap'(sK6),X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9,sK10])],[f90])).
fof(f90,plain,(
  ? [X0,X1] : ((s('type.SplayHeap.heap'(X0),'const.SplayHeap.Empty_0') = s('type.SplayHeap.heap'(X0),X1) | ? [X5,X6,X7] : s('type.SplayHeap.heap'(X0),X1) = s('type.SplayHeap.heap'(X0),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(X0),X5),s(X0,X6),s('type.SplayHeap.heap'(X0),X7)))) & s('type.SplayHeap.heap'(X0),'const.SplayHeap.Empty_0') != s('type.SplayHeap.heap'(X0),X1) & ! [X2,X3,X4] : s('type.SplayHeap.heap'(X0),X1) != s('type.SplayHeap.heap'(X0),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(X0),X2),s(X0,X3),s('type.SplayHeap.heap'(X0),X4))))),
  inference(rectify,[],[f65])).
fof(f65,plain,(
  ? [X0,X1] : ((s('type.SplayHeap.heap'(X0),'const.SplayHeap.Empty_0') = s('type.SplayHeap.heap'(X0),X1) | ? [X2,X3,X4] : s('type.SplayHeap.heap'(X0),X1) = s('type.SplayHeap.heap'(X0),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(X0),X2),s(X0,X3),s('type.SplayHeap.heap'(X0),X4)))) & s('type.SplayHeap.heap'(X0),'const.SplayHeap.Empty_0') != s('type.SplayHeap.heap'(X0),X1) & ! [X5,X6,X7] : s('type.SplayHeap.heap'(X0),X1) != s('type.SplayHeap.heap'(X0),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(X0),X5),s(X0,X6),s('type.SplayHeap.heap'(X0),X7))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ? [X0,X1] : ((s('type.SplayHeap.heap'(X0),'const.SplayHeap.Empty_0') = s('type.SplayHeap.heap'(X0),X1) | ? [X2,X3,X4] : s('type.SplayHeap.heap'(X0),X1) = s('type.SplayHeap.heap'(X0),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(X0),X2),s(X0,X3),s('type.SplayHeap.heap'(X0),X4)))) & (s('type.SplayHeap.heap'(X0),'const.SplayHeap.Empty_0') != s('type.SplayHeap.heap'(X0),X1) & ! [X5,X6,X7] : s('type.SplayHeap.heap'(X0),X1) != s('type.SplayHeap.heap'(X0),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(X0),X5),s(X0,X6),s('type.SplayHeap.heap'(X0),X7)))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1] : ((s('type.SplayHeap.heap'(X0),'const.SplayHeap.Empty_0') = s('type.SplayHeap.heap'(X0),X1) | ? [X2,X3,X4] : s('type.SplayHeap.heap'(X0),X1) = s('type.SplayHeap.heap'(X0),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(X0),X2),s(X0,X3),s('type.SplayHeap.heap'(X0),X4)))) => (s('type.SplayHeap.heap'(X0),'const.SplayHeap.Empty_0') = s('type.SplayHeap.heap'(X0),X1) | ? [X5,X6,X7] : s('type.SplayHeap.heap'(X0),X1) = s('type.SplayHeap.heap'(X0),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(X0),X5),s(X0,X6),s('type.SplayHeap.heap'(X0),X7)))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ~! [X0] : ! [X1] : ((s('type.SplayHeap.heap'(X0),'const.SplayHeap.Empty_0') = s('type.SplayHeap.heap'(X0),X1) | ? [X2,X3,X4] : s('type.SplayHeap.heap'(X0),X1) = s('type.SplayHeap.heap'(X0),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(X0),X2),s(X0,X3),s('type.SplayHeap.heap'(X0),X4)))) => (s('type.SplayHeap.heap'(X0),'const.SplayHeap.Empty_0') = s('type.SplayHeap.heap'(X0),X1) | ? [X5,X6,X7] : s('type.SplayHeap.heap'(X0),X1) = s('type.SplayHeap.heap'(X0),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(X0),X5),s(X0,X6),s('type.SplayHeap.heap'(X0),X7)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((s('type.SplayHeap.heap'(X6),'const.SplayHeap.Empty_0') = s('type.SplayHeap.heap'(X6),X7) | ? [X8,X9,X10] : s('type.SplayHeap.heap'(X6),X7) = s('type.SplayHeap.heap'(X6),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(X6),X8),s(X6,X9),s('type.SplayHeap.heap'(X6),X10)))) => (s('type.SplayHeap.heap'(X6),'const.SplayHeap.Empty_0') = s('type.SplayHeap.heap'(X6),X7) | ? [X8,X9,X10] : s('type.SplayHeap.heap'(X6),X7) = s('type.SplayHeap.heap'(X6),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(X6),X8),s(X6,X9),s('type.SplayHeap.heap'(X6),X10)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((s('type.SplayHeap.heap'(X6),'const.SplayHeap.Empty_0') = s('type.SplayHeap.heap'(X6),X7) | ? [X8,X9,X10] : s('type.SplayHeap.heap'(X6),X7) = s('type.SplayHeap.heap'(X6),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(X6),X8),s(X6,X9),s('type.SplayHeap.heap'(X6),X10)))) => (s('type.SplayHeap.heap'(X6),'const.SplayHeap.Empty_0') = s('type.SplayHeap.heap'(X6),X7) | ? [X8,X9,X10] : s('type.SplayHeap.heap'(X6),X7) = s('type.SplayHeap.heap'(X6),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(X6),X8),s(X6,X9),s('type.SplayHeap.heap'(X6),X10)))))),
  file('thm.SplayHeap.SplayHeap_24_prove_ltb','thm.SplayHeap.SplayHeap_24_prove_ltb')).
fof(f228,plain,(
  s('type.SplayHeap.heap'(sK6),'const.SplayHeap.Empty_0') = s('type.SplayHeap.heap'(sK6),sK7) | $spl0),
  inference(cnf_transformation,[],[f228_D])).
fof(f228_D,plain,(
  s('type.SplayHeap.heap'(sK6),'const.SplayHeap.Empty_0') = s('type.SplayHeap.heap'(sK6),sK7) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f230,plain,(
  s('type.SplayHeap.heap'(sK6),sK7) = s('type.SplayHeap.heap'(sK6),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(sK6),sK8),s(sK6,sK9),s('type.SplayHeap.heap'(sK6),sK10))) | $spl2),
  inference(cnf_transformation,[],[f230_D])).
fof(f230_D,plain,(
  s('type.SplayHeap.heap'(sK6),sK7) = s('type.SplayHeap.heap'(sK6),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(sK6),sK8),s(sK6,sK9),s('type.SplayHeap.heap'(sK6),sK10))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f133,plain,(
  s('type.SplayHeap.heap'(sK6),sK7) = s('type.SplayHeap.heap'(sK6),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(sK6),sK8),s(sK6,sK9),s('type.SplayHeap.heap'(sK6),sK10))) | s('type.SplayHeap.heap'(sK6),'const.SplayHeap.Empty_0') = s('type.SplayHeap.heap'(sK6),sK7)),
  inference(cnf_transformation,[],[f91])).
fof(f1202,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f230,f135])).
fof(f135,plain,(
  ( ! [X4,X2,X3] : (s('type.SplayHeap.heap'(sK6),sK7) != s('type.SplayHeap.heap'(sK6),'const.SplayHeap.Tree_3'(s('type.SplayHeap.heap'(sK6),X2),s(sK6,X3),s('type.SplayHeap.heap'(sK6),X4)))) )),
  inference(cnf_transformation,[],[f91])).
% SZS output end Proof for thm.SplayHeap
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 135
% Passive clauses: 238
% Generated clauses: 1062
% Final active clauses: 135
% Final passive clauses: 68
% Input formulas: 26
% Initial clauses: 93
% 
% Duplicate literals: 27
% Trivial inequalities: 13
% Fw subsumption resolutions: 84
% 
% Simple tautologies: 47
% Equational tautologies: 7
% Forward subsumptions: 609
% 
% Binary resolution: 568
% Factoring: 172
% Forward superposition: 24
% Backward superposition: 51
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 42
% Split components: 85
% SAT solver clauses: 73
% SAT solver unit clauses: 6
% SAT solver binary clauses: 30
% SAT solver learnt clauses: 1
% 
% Sat splits: 42
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 72
% TWLsolver calls for satisfiability: 52
% 
% Memory used [KB]: 1023
% Time elapsed: 0.052 s
% ------------------------------
% ------------------------------
% Success in time 0.044 s
