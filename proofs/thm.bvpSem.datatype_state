Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvpSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvpSem
% SZS output start Proof for thm.bvpSem
fof(f522,plain,(
  $false),
  inference(subsumption_resolution,[],[f521,f21])).
fof(f21,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvpSem.datatype_state','thm.bool.TRUTH')).
fof(f521,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f20,f25])).
fof(f25,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f13])).
fof(f13,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(flattening,[],[f12])).
fof(f12,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X18] : ! [X19] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X18,X19)))),
  file('thm.bvpSem.datatype_state','thm.bool.DATATYPE_TAG_THM')).
fof(f20,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool)),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool)))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool)))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool))))))),happ(s(fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool)))))))),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool))))))))),happ(s(fun('type.min.ind',fun('type.sptree.spt'('type.bvlSem.v'),fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool)))))))))),sK5),s('type.min.ind',sK1))),s('type.sptree.spt'('type.bvlSem.v'),sK6))),s('type.list.list'('type.bvpSem.stack'),sK2))),s('type.option.option'('type.num.num'),sK8))),s('type.num.num',sK7))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK4))),s('type.num.num',sK11))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK10))),s('type.ffi.ffi_state'(sK0),sK9))),s('type.num.num',sK3))))))),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool)),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool)))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool)))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool))))))),happ(s(fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool)))))))),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool))))))))),happ(s(fun('type.min.ind',fun('type.sptree.spt'('type.bvlSem.v'),fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(sK0),fun('type.num.num',bool)))))))))),sK5),s('type.min.ind',sK1))),s('type.sptree.spt'('type.bvlSem.v'),sK6))),s('type.list.list'('type.bvpSem.stack'),sK2))),s('type.option.option'('type.num.num'),sK8))),s('type.num.num',sK7))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),sK4))),s('type.num.num',sK11))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),sK10))),s('type.ffi.ffi_state'(sK0),sK9))),s('type.num.num',sK3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8,sK9,sK10,sK11])],[f16])).
fof(f16,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool)),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool)))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool)))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool))))))),happ(s(fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool)))))))),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool))))))))),happ(s(fun('type.min.ind',fun('type.sptree.spt'('type.bvlSem.v'),fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool)))))))))),X5),s('type.min.ind',X1))),s('type.sptree.spt'('type.bvlSem.v'),X6))),s('type.list.list'('type.bvpSem.stack'),X2))),s('type.option.option'('type.num.num'),X8))),s('type.num.num',X7))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X4))),s('type.num.num',X11))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X10))),s('type.ffi.ffi_state'(X0),X9))),s('type.num.num',X3))))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool)),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool)))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool)))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool))))))),happ(s(fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool)))))))),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool))))))))),happ(s(fun('type.min.ind',fun('type.sptree.spt'('type.bvlSem.v'),fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool)))))))))),X5),s('type.min.ind',X1))),s('type.sptree.spt'('type.bvlSem.v'),X6))),s('type.list.list'('type.bvpSem.stack'),X2))),s('type.option.option'('type.num.num'),X8))),s('type.num.num',X7))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X4))),s('type.num.num',X11))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X10))),s('type.ffi.ffi_state'(X0),X9))),s('type.num.num',X3))))))),
  inference(flattening,[],[f9])).
fof(f9,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool)),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool)))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool)))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool))))))),happ(s(fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool)))))))),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool))))))))),happ(s(fun('type.min.ind',fun('type.sptree.spt'('type.bvlSem.v'),fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X0),fun('type.num.num',bool)))))))))),X5),s('type.min.ind',X1))),s('type.sptree.spt'('type.bvlSem.v'),X6))),s('type.list.list'('type.bvpSem.stack'),X2))),s('type.option.option'('type.num.num'),X8))),s('type.num.num',X7))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X4))),s('type.num.num',X11))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X10))),s('type.ffi.ffi_state'(X0),X9))),s('type.num.num',X3))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool)),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool)))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool)))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool))))))),happ(s(fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool)))))))),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool))))))))),happ(s(fun('type.min.ind',fun('type.sptree.spt'('type.bvlSem.v'),fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool)))))))))),X11),s('type.min.ind',X7))),s('type.sptree.spt'('type.bvlSem.v'),X12))),s('type.list.list'('type.bvpSem.stack'),X8))),s('type.option.option'('type.num.num'),X14))),s('type.num.num',X13))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X10))),s('type.num.num',X17))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X16))),s('type.ffi.ffi_state'(X6),X15))),s('type.num.num',X9))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool)),happ(s(fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool)))),happ(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool)))))),happ(s(fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool))))))),happ(s(fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool)))))))),happ(s(fun('type.sptree.spt'('type.bvlSem.v'),fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool))))))))),happ(s(fun('type.min.ind',fun('type.sptree.spt'('type.bvlSem.v'),fun('type.list.list'('type.bvpSem.stack'),fun('type.option.option'('type.num.num'),fun('type.num.num',fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),fun('type.num.num',fun('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),fun('type.ffi.ffi_state'(X6),fun('type.num.num',bool)))))))))),X11),s('type.min.ind',X7))),s('type.sptree.spt'('type.bvlSem.v'),X12))),s('type.list.list'('type.bvpSem.stack'),X8))),s('type.option.option'('type.num.num'),X14))),s('type.num.num',X13))),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),X10))),s('type.num.num',X17))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),X16))),s('type.ffi.ffi_state'(X6),X15))),s('type.num.num',X9))))))),
  file('thm.bvpSem.datatype_state','thm.bvpSem.datatype_state')).
% SZS output end Proof for thm.bvpSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 14
% Passive clauses: 57
% Generated clauses: 470
% Final active clauses: 12
% Final passive clauses: 36
% Input formulas: 7
% Initial clauses: 7
% 
% Duplicate literals: 84
% Trivial inequalities: 7
% Fw subsumption resolutions: 6
% Fw demodulations: 16
% 
% Simple tautologies: 25
% Equational tautologies: 16
% Forward subsumptions: 244
% 
% Binary resolution: 4
% Forward superposition: 123
% Backward superposition: 126
% Self superposition: 49
% Equality factoring: 40
% Equality resolution: 1
% 
% Split clauses: 12
% Split components: 24
% SAT solver clauses: 18
% SAT solver unit clauses: 4
% SAT solver binary clauses: 12
% 
% Sat splits: 12
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 18
% TWLsolver calls for satisfiability: 6
% 
% Memory used [KB]: 767
% Time elapsed: 0.021 s
% ------------------------------
% ------------------------------
% Success in time 0.06 s
