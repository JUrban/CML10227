Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.misc
% (104479)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 668
% Passive clauses: 8396
% Generated clauses: 21124
% Final active clauses: 661
% Final passive clauses: 7336
% Input formulas: 38
% Initial clauses: 156
% 
% Duplicate literals: 807
% Trivial inequalities: 189
% Fw subsumption resolutions: 2363
% Fw demodulations: 366
% Bw demodulations: 6
% 
% Simple tautologies: 285
% Equational tautologies: 72
% Forward subsumptions: 7953
% 
% Binary resolution: 9575
% Factoring: 1278
% Forward superposition: 3023
% Backward superposition: 2987
% Self superposition: 47
% Equality factoring: 52
% Equality resolution: 32
% 
% Split clauses: 638
% Split components: 1283
% SAT solver clauses: 1062
% SAT solver unit clauses: 27
% SAT solver binary clauses: 238
% 
% Sat splits: 638
% 
% TWLsolver clauses: 1062
% TWLsolver calls for satisfiability: 400
% 
% Memory used [KB]: 8315
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.misc
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.misc
% SZS output start Proof for thm.misc
fof(f4907,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4906,f2071,f212,f378,f376,f292,f414,f2144,f2155,f256,f398,f2094,f2104,f211,f377,f375])).
fof(f375,plain,(
  s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) = s('type.list.list'('type.option.option'(sK12)),'const.list.APPEND_2'(s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK13))),s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK14))))) | $spl0),
  inference(cnf_transformation,[],[f375_D])).
fof(f375_D,plain,(
  s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) = s('type.list.list'('type.option.option'(sK12)),'const.list.APPEND_2'(s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK13))),s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK14))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f377,plain,(
  s('type.list.list'(sK12),sK15) = s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK13),s('type.list.list'(sK12),sK14))) | $spl2),
  inference(cnf_transformation,[],[f377_D])).
fof(f377_D,plain,(
  s('type.list.list'(sK12),sK15) = s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK13),s('type.list.list'(sK12),sK14))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f211,plain,(
  s('type.list.list'(sK12),sK15) = s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK13),s('type.list.list'(sK12),sK14))) | s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) = s('type.list.list'('type.option.option'(sK12)),'const.list.APPEND_2'(s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK13))),s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK14)))))),
  inference(cnf_transformation,[],[f145])).
fof(f145,plain,(
  (s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) = s('type.list.list'('type.option.option'(sK12)),'const.list.APPEND_2'(s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK13))),s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK14))))) | s('type.list.list'(sK12),sK15) = s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK13),s('type.list.list'(sK12),sK14)))) & (s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) != s('type.list.list'('type.option.option'(sK12)),'const.list.APPEND_2'(s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK13))),s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK14))))) | s('type.list.list'(sK12),sK15) != s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK13),s('type.list.list'(sK12),sK14))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15])],[f144])).
fof(f144,plain,(
  ? [X0,X1,X2,X3] : ((s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X3))) = s('type.list.list'('type.option.option'(X0)),'const.list.APPEND_2'(s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X1))),s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X2))))) | s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2)))) & (s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X3))) != s('type.list.list'('type.option.option'(X0)),'const.list.APPEND_2'(s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X1))),s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X2))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2)))))),
  inference(nnf_transformation,[],[f99])).
fof(f99,plain,(
  ? [X0,X1,X2,X3] : (s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X3))) = s('type.list.list'('type.option.option'(X0)),'const.list.APPEND_2'(s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X1))),s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X2))))) <~> s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))),
  inference(ennf_transformation,[],[f41])).
fof(f41,plain,(
  ~! [X0,X1,X2,X3] : (s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X3))) = s('type.list.list'('type.option.option'(X0)),'const.list.APPEND_2'(s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X1))),s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X2))))) <=> s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ~! [X0] : ! [X1,X2,X3] : (s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X3))) = s('type.list.list'('type.option.option'(X0)),'const.list.APPEND_2'(s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X1))),s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X2))))) <=> s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : (s('type.list.list'('type.option.option'(X6)),'const.list.MAP_2'(s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'),s('type.list.list'(X6),X9))) = s('type.list.list'('type.option.option'(X6)),'const.list.APPEND_2'(s('type.list.list'('type.option.option'(X6)),'const.list.MAP_2'(s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'),s('type.list.list'(X6),X7))),s('type.list.list'('type.option.option'(X6)),'const.list.MAP_2'(s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'),s('type.list.list'(X6),X8))))) <=> s('type.list.list'(X6),X9) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),X8))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : (s('type.list.list'('type.option.option'(X6)),'const.list.MAP_2'(s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'),s('type.list.list'(X6),X9))) = s('type.list.list'('type.option.option'(X6)),'const.list.APPEND_2'(s('type.list.list'('type.option.option'(X6)),'const.list.MAP_2'(s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'),s('type.list.list'(X6),X7))),s('type.list.list'('type.option.option'(X6)),'const.list.MAP_2'(s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'),s('type.list.list'(X6),X8))))) <=> s('type.list.list'(X6),X9) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),X8))))),
  file('thm.misc.map_some_eq_append','thm.misc.map_some_eq_append')).
fof(f2104,plain,(
  s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) = s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK13),s('type.list.list'(sK12),sK14))))) | $spl760),
  inference(cnf_transformation,[],[f2104_D])).
fof(f2104_D,plain,(
  s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) = s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK13),s('type.list.list'(sK12),sK14))))) <=> ~$spl760),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl760])])).
fof(f2094,plain,(
  s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) = s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK13),s('type.list.list'(sK12),sK14))))) | ($spl0 | $spl44)),
  inference(superposition,[],[f375,f414])).
fof(f398,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X1))) != s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2)) ) | $spl22),
  inference(cnf_transformation,[],[f398_D])).
fof(f398_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X1))) != s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f256,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2) | s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X1))) != s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0,X1,X2] : ((s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X1))) != s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2)) & (s('type.list.list'(X0),X1) != s('type.list.list'(X0),X2) | s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X1))) = s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X2)))))),
  inference(nnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2] : (s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X1))) = s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X2))) <=> s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ! [X0] : ! [X1,X2] : (s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X1))) = s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s('type.list.list'(X0),X2))) <=> s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X7,X8] : (s('type.list.list'('type.option.option'(X6)),'const.list.MAP_2'(s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'),s('type.list.list'(X6),X7))) = s('type.list.list'('type.option.option'(X6)),'const.list.MAP_2'(s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'),s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),X7) = s('type.list.list'(X6),X8))),
  file('thm.misc.map_some_eq_append','thm.misc.map_some_eq')).
fof(f2155,plain,(
  ( ! [X0] : (s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) != s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),X0))) | s('type.list.list'(sK12),X0) = s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK13),s('type.list.list'(sK12),sK14)))) ) | $spl768),
  inference(cnf_transformation,[],[f2155_D])).
fof(f2155_D,plain,(
  ( ! [X0] : (s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) != s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),X0))) | s('type.list.list'(sK12),X0) = s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK13),s('type.list.list'(sK12),sK14)))) ) <=> ~$spl768),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl768])])).
fof(f2144,plain,(
  ( ! [X0] : (s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) != s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),X0))) | s('type.list.list'(sK12),X0) = s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK13),s('type.list.list'(sK12),sK14)))) ) | ($spl22 | $spl760)),
  inference(superposition,[],[f398,f2104])).
fof(f414,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))) ) | $spl44),
  inference(cnf_transformation,[],[f414_D])).
fof(f414_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f292,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))),
  inference(flattening,[],[f89])).
fof(f89,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X14,X6] : ! [X15,X7,X8] : s('type.list.list'(X14),'const.list.MAP_2'(s(fun(X6,X14),X15),s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),X8))))) = s('type.list.list'(X14),'const.list.APPEND_2'(s('type.list.list'(X14),'const.list.MAP_2'(s(fun(X6,X14),X15),s('type.list.list'(X6),X7))),s('type.list.list'(X14),'const.list.MAP_2'(s(fun(X6,X14),X15),s('type.list.list'(X6),X8)))))),
  file('thm.misc.map_some_eq_append','thm.list.MAP_APPEND')).
fof(f376,plain,(
  s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) != s('type.list.list'('type.option.option'(sK12)),'const.list.APPEND_2'(s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK13))),s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK14))))) | $spl1),
  inference(cnf_transformation,[],[f376_D])).
fof(f376_D,plain,(
  s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) != s('type.list.list'('type.option.option'(sK12)),'const.list.APPEND_2'(s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK13))),s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK14))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f378,plain,(
  s('type.list.list'(sK12),sK15) != s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK13),s('type.list.list'(sK12),sK14))) | $spl3),
  inference(cnf_transformation,[],[f378_D])).
fof(f378_D,plain,(
  s('type.list.list'(sK12),sK15) != s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK13),s('type.list.list'(sK12),sK14))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f212,plain,(
  s('type.list.list'(sK12),sK15) != s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK13),s('type.list.list'(sK12),sK14))) | s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) != s('type.list.list'('type.option.option'(sK12)),'const.list.APPEND_2'(s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK13))),s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK14)))))),
  inference(cnf_transformation,[],[f145])).
fof(f2071,plain,(
  $false | ($spl1 | $spl2 | $spl44)),
  inference(trivial_inequality_removal,[],[f2070])).
fof(f2070,plain,(
  s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) != s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) | ($spl1 | $spl2 | $spl44)),
  inference(forward_demodulation,[],[f2064,f377])).
fof(f2064,plain,(
  s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),sK15))) != s('type.list.list'('type.option.option'(sK12)),'const.list.MAP_2'(s(fun(sK12,'type.option.option'(sK12)),'const.option.SOME_0'),s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK13),s('type.list.list'(sK12),sK14))))) | ($spl1 | $spl44)),
  inference(superposition,[],[f376,f414])).
fof(f4906,plain,(
  $false | ($spl3 | $spl768)),
  inference(subsumption_resolution,[],[f4904,f378])).
fof(f4904,plain,(
  s('type.list.list'(sK12),sK15) = s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK13),s('type.list.list'(sK12),sK14))) | $spl768),
  inference(equality_resolution,[],[f2155])).
% SZS output end Proof for thm.misc
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 290
% Passive clauses: 782
% Generated clauses: 4676
% Final active clauses: 283
% Final passive clauses: 480
% Input formulas: 38
% Initial clauses: 156
% 
% Duplicate literals: 152
% Trivial inequalities: 15
% Fw subsumption resolutions: 505
% Fw demodulations: 47
% Bw demodulations: 13
% Condensations: 173
% Global subsumptions: 13
% 
% Simple tautologies: 179
% Equational tautologies: 20
% Forward subsumptions: 1864
% 
% Binary resolution: 1705
% Factoring: 258
% Forward superposition: 279
% Backward superposition: 506
% Self superposition: 25
% Equality factoring: 26
% Equality resolution: 10
% 
% Split clauses: 15
% Split components: 35
% SAT solver clauses: 1112
% SAT solver unit clauses: 169
% SAT solver binary clauses: 68
% SAT solver learnt clauses: 28
% SAT solver learnt literals: 11
% 
% Sat splits: 15
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1058
% TWLsolver calls for satisfiability: 1595
% 
% Memory used [KB]: 4093
% Time elapsed: 0.263 s
% ------------------------------
% ------------------------------
% Success in time 0.878 s
