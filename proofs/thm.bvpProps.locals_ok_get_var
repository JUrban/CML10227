Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvpProps
% (144416)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 134
% Passive clauses: 1692
% Generated clauses: 10038
% Final active clauses: 131
% Final passive clauses: 1385
% Input formulas: 24
% Initial clauses: 57
% 
% Duplicate literals: 574
% Trivial inequalities: 239
% Fw subsumption resolutions: 1768
% Fw demodulations: 666
% Bw demodulations: 3
% 
% Simple tautologies: 274
% Equational tautologies: 39
% Forward subsumptions: 3697
% Fw demodulations to eq. taut.: 5
% 
% Binary resolution: 241
% Forward superposition: 2951
% Backward superposition: 4354
% Self superposition: 163
% Equality factoring: 128
% Equality resolution: 44
% 
% Split clauses: 860
% Split components: 1808
% SAT solver clauses: 1258
% SAT solver unit clauses: 25
% SAT solver binary clauses: 162
% 
% Sat splits: 860
% 
% TWLsolver clauses: 1257
% TWLsolver calls for satisfiability: 176
% 
% Memory used [KB]: 6140
% Time elapsed: 0.680 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvpProps
% (144454)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 58
% Passive clauses: 406
% Generated clauses: 5700
% Final active clauses: 57
% Final passive clauses: 344
% Input formulas: 24
% Initial clauses: 57
% 
% Duplicate literals: 557
% Trivial inequalities: 129
% Fw subsumption resolutions: 497
% Fw demodulations: 62
% Bw demodulations: 5
% Condensations: 789
% Global subsumptions: 4
% 
% Simple tautologies: 137
% Equational tautologies: 50
% Forward subsumptions: 2228
% Fw demodulations to eq. taut.: 15
% 
% Binary resolution: 78
% Forward superposition: 1458
% Backward superposition: 1405
% Self superposition: 144
% Equality factoring: 112
% Equality resolution: 19
% 
% Split clauses: 85
% Split components: 172
% SAT solver clauses: 890
% SAT solver unit clauses: 65
% SAT solver binary clauses: 46
% SAT solver learnt clauses: 8
% 
% Sat splits: 85
% 
% TWLsolver clauses: 874
% TWLsolver calls for satisfiability: 240
% 
% Memory used [KB]: 4605
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 135 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvpProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvpProps
% SZS output start Proof for thm.bvpProps
fof(f3436,plain,(
  $false),
  inference(subsumption_resolution,[],[f3435,f101])).
fof(f101,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvpProps.locals_ok_get_var',aHL_TRUTH)).
fof(f3435,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f3411,f180])).
fof(f180,plain,(
  s(bool,'T_0') = s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(sK0),sK3),s('type.sptree.spt'(sK0),sK4)))),
  inference(unit_resulting_resolution,[],[f98,f106])).
fof(f106,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X11] : (s(bool,'T_0') = s(bool,X11) <=> p(s(bool,X11)))),
  file('thm.bvpProps.locals_ok_get_var','thm.bool.EQ_CLAUSES|split|1')).
fof(f98,plain,(
  p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(sK0),sK3),s('type.sptree.spt'(sK0),sK4))))),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(sK0),sK3),s('type.sptree.spt'(sK0),sK4)))) & s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK2))) = s('type.option.option'(sK0),'const.bvpSem.get_var_2'(s('type.num.num',sK1),s('type.sptree.spt'(sK0),sK3))) & s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK2))) != s('type.option.option'(sK0),'const.bvpSem.get_var_2'(s('type.num.num',sK1),s('type.sptree.spt'(sK0),sK4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f60])).
fof(f60,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X3),s('type.sptree.spt'(X0),X4)))) & s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) = s('type.option.option'(X0),'const.bvpSem.get_var_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X3))) & s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) != s('type.option.option'(X0),'const.bvpSem.get_var_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X4))))),
  inference(flattening,[],[f59])).
fof(f59,plain,(
  ? [X0,X1,X2,X3,X4] : ((p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X3),s('type.sptree.spt'(X0),X4)))) & s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) = s('type.option.option'(X0),'const.bvpSem.get_var_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X3)))) & s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) != s('type.option.option'(X0),'const.bvpSem.get_var_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X4))))),
  inference(ennf_transformation,[],[f27])).
fof(f27,plain,(
  ~! [X0,X1,X2,X3,X4] : ((p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X3),s('type.sptree.spt'(X0),X4)))) & s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) = s('type.option.option'(X0),'const.bvpSem.get_var_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X3)))) => s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) = s('type.option.option'(X0),'const.bvpSem.get_var_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X4))))),
  inference(flattening,[],[f26])).
fof(f26,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : ((p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X3),s('type.sptree.spt'(X0),X4)))) & s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) = s('type.option.option'(X0),'const.bvpSem.get_var_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X3)))) => s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) = s('type.option.option'(X0),'const.bvpSem.get_var_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X4))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : ((p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X6),X9),s('type.sptree.spt'(X6),X10)))) & s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))) = s('type.option.option'(X6),'const.bvpSem.get_var_2'(s('type.num.num',X7),s('type.sptree.spt'(X6),X9)))) => s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))) = s('type.option.option'(X6),'const.bvpSem.get_var_2'(s('type.num.num',X7),s('type.sptree.spt'(X6),X10))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : ((p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X6),X9),s('type.sptree.spt'(X6),X10)))) & s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))) = s('type.option.option'(X6),'const.bvpSem.get_var_2'(s('type.num.num',X7),s('type.sptree.spt'(X6),X9)))) => s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))) = s('type.option.option'(X6),'const.bvpSem.get_var_2'(s('type.num.num',X7),s('type.sptree.spt'(X6),X10))))),
  file('thm.bvpProps.locals_ok_get_var','thm.bvpProps.locals_ok_get_var')).
fof(f3411,plain,(
  ~p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(sK0),sK3),s('type.sptree.spt'(sK0),sK4))))),
  inference(unit_resulting_resolution,[],[f99,f100,f177])).
fof(f177,plain,(
  ( ! [X6,X2,X0,X5,X1] : (~p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2)))) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) = s('type.option.option'(X0),'const.bvpSem.get_var_2'(s('type.num.num',X5),s('type.sptree.spt'(X0),X2))) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) != s('type.option.option'(X0),'const.bvpSem.get_var_2'(s('type.num.num',X5),s('type.sptree.spt'(X0),X1)))) )),
  inference(forward_demodulation,[],[f176,f173])).
fof(f173,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.bvpSem.get_var_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X2))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X2)))) )),
  inference(forward_demodulation,[],[f172,f131])).
fof(f131,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.bvpSem.get_var_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X2))) = s('type.option.option'(X0),happ(s(fun('type.sptree.spt'(X0),'type.option.option'(X0)),'const.bvpSem.get_var_1'(s('type.num.num',X1))),s('type.sptree.spt'(X0),X2)))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2] : s('type.option.option'(X0),'const.bvpSem.get_var_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X2))) = s('type.option.option'(X0),happ(s(fun('type.sptree.spt'(X0),'type.option.option'(X0)),'const.bvpSem.get_var_1'(s('type.num.num',X1))),s('type.sptree.spt'(X0),X2)))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0] : ! [X1,X2] : s('type.option.option'(X0),'const.bvpSem.get_var_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X2))) = s('type.option.option'(X0),happ(s(fun('type.sptree.spt'(X0),'type.option.option'(X0)),'const.bvpSem.get_var_1'(s('type.num.num',X1))),s('type.sptree.spt'(X0),X2)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X21,X22] : s('type.option.option'(X6),'const.bvpSem.get_var_2'(s('type.num.num',X21),s('type.sptree.spt'(X6),X22))) = s('type.option.option'(X6),happ(s(fun('type.sptree.spt'(X6),'type.option.option'(X6)),'const.bvpSem.get_var_1'(s('type.num.num',X21))),s('type.sptree.spt'(X6),X22)))),
  file('thm.bvpProps.locals_ok_get_var','ARITY_1_2_const.bvpSem.get_var')).
fof(f172,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X2))) = s('type.option.option'(X0),happ(s(fun('type.sptree.spt'(X0),'type.option.option'(X0)),'const.bvpSem.get_var_1'(s('type.num.num',X1))),s('type.sptree.spt'(X0),X2)))) )),
  inference(forward_demodulation,[],[f132,f128])).
fof(f128,plain,(
  ( ! [X0,X1] : (s(fun('type.sptree.spt'(X0),'type.option.option'(X0)),'const.bvpSem.get_var_1'(s('type.num.num',X1))) = s(fun('type.sptree.spt'(X0),'type.option.option'(X0)),'const.sptree.lookup_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1] : s(fun('type.sptree.spt'(X0),'type.option.option'(X0)),'const.bvpSem.get_var_1'(s('type.num.num',X1))) = s(fun('type.sptree.spt'(X0),'type.option.option'(X0)),'const.sptree.lookup_1'(s('type.num.num',X1)))),
  inference(flattening,[],[f41])).
fof(f41,plain,(
  ! [X0] : ! [X1] : s(fun('type.sptree.spt'(X0),'type.option.option'(X0)),'const.bvpSem.get_var_1'(s('type.num.num',X1))) = s(fun('type.sptree.spt'(X0),'type.option.option'(X0)),'const.sptree.lookup_1'(s('type.num.num',X1)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6] : ! [X20] : s(fun('type.sptree.spt'(X6),'type.option.option'(X6)),'const.bvpSem.get_var_1'(s('type.num.num',X20))) = s(fun('type.sptree.spt'(X6),'type.option.option'(X6)),'const.sptree.lookup_1'(s('type.num.num',X20)))),
  file('thm.bvpProps.locals_ok_get_var','thm.bvpSem.get_var_def')).
fof(f132,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X2))) = s('type.option.option'(X0),happ(s(fun('type.sptree.spt'(X0),'type.option.option'(X0)),'const.sptree.lookup_1'(s('type.num.num',X1))),s('type.sptree.spt'(X0),X2)))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2] : s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X2))) = s('type.option.option'(X0),happ(s(fun('type.sptree.spt'(X0),'type.option.option'(X0)),'const.sptree.lookup_1'(s('type.num.num',X1))),s('type.sptree.spt'(X0),X2)))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ! [X0] : ! [X1,X2] : s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X1),s('type.sptree.spt'(X0),X2))) = s('type.option.option'(X0),happ(s(fun('type.sptree.spt'(X0),'type.option.option'(X0)),'const.sptree.lookup_1'(s('type.num.num',X1))),s('type.sptree.spt'(X0),X2)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X21,X22] : s('type.option.option'(X6),'const.sptree.lookup_2'(s('type.num.num',X21),s('type.sptree.spt'(X6),X22))) = s('type.option.option'(X6),happ(s(fun('type.sptree.spt'(X6),'type.option.option'(X6)),'const.sptree.lookup_1'(s('type.num.num',X21))),s('type.sptree.spt'(X6),X22)))),
  file('thm.bvpProps.locals_ok_get_var','ARITY_1_2_const.sptree.lookup')).
fof(f176,plain,(
  ( ! [X6,X2,X0,X5,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) = s('type.option.option'(X0),'const.bvpSem.get_var_2'(s('type.num.num',X5),s('type.sptree.spt'(X0),X2))) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X5),s('type.sptree.spt'(X0),X1))) | ~p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2))))) )),
  inference(forward_demodulation,[],[f135,f173])).
fof(f135,plain,(
  ( ! [X6,X2,X0,X5,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X5),s('type.sptree.spt'(X0),X2))) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X5),s('type.sptree.spt'(X0),X1))) | ~p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2)))) | ! [X5,X6] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X5),s('type.sptree.spt'(X0),X1))) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X5),s('type.sptree.spt'(X0),X2))))) & ((s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X2,X1,X0)))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',sK5(X2,X1,X0)),s('type.sptree.spt'(X0),X1))) & s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X2,X1,X0)))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',sK5(X2,X1,X0)),s('type.sptree.spt'(X0),X2)))) | p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6])],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2)))) | ! [X5,X6] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X5),s('type.sptree.spt'(X0),X1))) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X5),s('type.sptree.spt'(X0),X2))))) & (? [X3,X4] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) & s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))) | p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2))))))),
  inference(rectify,[],[f89])).
fof(f89,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2)))) | ! [X3,X4] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2))))) & (? [X3,X4] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) & s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))) | p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2))))))),
  inference(nnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2)))) <=> ! [X3,X4] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))))),
  inference(ennf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2)))) <=> ! [X3,X4] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) => s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X0),X1),s('type.sptree.spt'(X0),X2)))) <=> ! [X3,X4] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) => s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X18,X19] : (p(s(bool,'const.bvpProps.locals_ok_2'(s('type.sptree.spt'(X6),X18),s('type.sptree.spt'(X6),X19)))) <=> ! [X20,X7] : (s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))) = s('type.option.option'(X6),'const.sptree.lookup_2'(s('type.num.num',X20),s('type.sptree.spt'(X6),X18))) => s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))) = s('type.option.option'(X6),'const.sptree.lookup_2'(s('type.num.num',X20),s('type.sptree.spt'(X6),X19)))))),
  file('thm.bvpProps.locals_ok_get_var','thm.bvpProps.locals_ok_def')).
fof(f100,plain,(
  s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK2))) != s('type.option.option'(sK0),'const.bvpSem.get_var_2'(s('type.num.num',sK1),s('type.sptree.spt'(sK0),sK4)))),
  inference(cnf_transformation,[],[f72])).
fof(f99,plain,(
  s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK2))) = s('type.option.option'(sK0),'const.bvpSem.get_var_2'(s('type.num.num',sK1),s('type.sptree.spt'(sK0),sK3)))),
  inference(cnf_transformation,[],[f72])).
% SZS output end Proof for thm.bvpProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 44
% Passive clauses: 160
% Generated clauses: 3238
% Final active clauses: 39
% Final passive clauses: 106
% Input formulas: 24
% Initial clauses: 57
% 
% Duplicate literals: 396
% Trivial inequalities: 72
% Fw subsumption resolutions: 252
% Fw demodulations: 90
% Bw demodulations: 14
% Condensations: 563
% Global subsumptions: 2
% 
% Simple tautologies: 108
% Equational tautologies: 66
% Forward subsumptions: 1505
% Fw demodulations to eq. taut.: 10
% 
% Unit resulting resolution: 77
% Forward superposition: 639
% Backward superposition: 835
% Self superposition: 120
% Equality factoring: 116
% Equality resolution: 10
% 
% Split clauses: 7
% Split components: 14
% SAT solver clauses: 183
% SAT solver unit clauses: 23
% SAT solver binary clauses: 30
% 
% Sat splits: 7
% Sat splitting refutations: 5
% 
% Memory used [KB]: 1918
% Time elapsed: 0.125 s
% ------------------------------
% ------------------------------
% Success in time 1.54 s
