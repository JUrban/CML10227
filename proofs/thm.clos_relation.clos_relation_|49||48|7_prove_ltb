Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_relation
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_relation
% SZS output start Proof for thm.clos_relation
fof(f11650,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f11649,f151,f167,f165,f163,f161,f159,f157,f155,f153,f9962,f11570,f104,f169,f9957,f11633,f149,f177,f3755,f212,f3756,f92,f168,f110,f173,f236,f11641,f11636,f11644,f83,f171])).
fof(f171,plain,(
  ( ! [X16] : (p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X16))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X16))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) ) | $spl22),
  inference(cnf_transformation,[],[f171_D])).
fof(f171_D,plain,(
  ( ! [X16] : (p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X16))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X16))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f83,plain,(
  ( ! [X12,X16] : (p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X12))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X12))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X16))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X16))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ((! [X16] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X16))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X16))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & ! [X15] : p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X15),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X15)))) & ! [X14] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X14))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X14))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X14))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X14))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) & ! [X13] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X13))),s('type.list.list'('type.closLang.exp'),X13))))) | (! [X12] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X12))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X12))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & ! [X11] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X11))),s('type.list.list'('type.closLang.exp'),X11)))) & ! [X10] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X10))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X10))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X10))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X10))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) & ! [X9] : p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9)))))) & (~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2)))) | (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))) != s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),sK4))),s('type.list.list'('type.closLang.exp'),sK4)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK5))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK5))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),sK6))),s('type.list.list'('type.closLang.exp'),sK6)))) | (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))) != s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK8)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8])],[f66])).
fof(f66,plain,(
  ? [X0] : (((! [X16] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X16))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X16))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & ! [X15] : p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X15),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X15)))) & ! [X14] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X14))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X14))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X14))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X14))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) & ! [X13] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X13))),s('type.list.list'('type.closLang.exp'),X13))))) | (! [X12] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X12))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X12))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & ! [X11] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X11))),s('type.list.list'('type.closLang.exp'),X11)))) & ! [X10] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X10))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X10))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X10))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X10))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) & ! [X9] : p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9)))))) & (? [X8] : ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X8))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X8))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ? [X7] : ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X7),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X7)))) | ? [X6] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))) != s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) | ? [X5] : ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X5))),s('type.list.list'('type.closLang.exp'),X5)))) | ? [X4] : ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X4))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X4))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ? [X3] : ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X3))),s('type.list.list'('type.closLang.exp'),X3)))) | ? [X2] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))) != s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) | ? [X1] : ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))))))),
  inference(rectify,[],[f65])).
fof(f65,plain,(
  ? [X0] : (((! [X4] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X4))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X4))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & ! [X3] : p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3)))) & ! [X2] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) & ! [X1] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X1))),s('type.list.list'('type.closLang.exp'),X1))))) | (! [X8] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X8))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X8))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & ! [X7] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X7))),s('type.list.list'('type.closLang.exp'),X7)))) & ! [X6] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) & ! [X5] : p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5)))))) & (? [X4] : ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X4))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X4))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ? [X3] : ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3)))) | ? [X2] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))) != s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) | ? [X1] : ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X1))),s('type.list.list'('type.closLang.exp'),X1)))) | ? [X8] : ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X8))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X8))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ? [X7] : ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X7))),s('type.list.list'('type.closLang.exp'),X7)))) | ? [X6] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))) != s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) | ? [X5] : ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5))))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ? [X0] : (((! [X4] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X4))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X4))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & ! [X3] : p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3)))) & ! [X2] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) & ! [X1] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X1))),s('type.list.list'('type.closLang.exp'),X1))))) | (! [X8] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X8))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X8))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & ! [X7] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X7))),s('type.list.list'('type.closLang.exp'),X7)))) & ! [X6] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) & ! [X5] : p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5)))))) & ((? [X4] : ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X4))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X4))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ? [X3] : ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3)))) | ? [X2] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))) != s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) | ? [X1] : ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X1))),s('type.list.list'('type.closLang.exp'),X1))))) | (? [X8] : ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X8))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X8))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ? [X7] : ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X7))),s('type.list.list'('type.closLang.exp'),X7)))) | ? [X6] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))) != s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) | ? [X5] : ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5)))))))),
  inference(nnf_transformation,[],[f60])).
fof(f60,plain,(
  ? [X0] : ((! [X4] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X4))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X4))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & ! [X3] : p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3)))) & ! [X2] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) & ! [X1] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X1))),s('type.list.list'('type.closLang.exp'),X1))))) <~> (! [X8] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X8))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X8))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & ! [X7] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X7))),s('type.list.list'('type.closLang.exp'),X7)))) & ! [X6] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) & ! [X5] : p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5))))))),
  inference(ennf_transformation,[],[f26])).
fof(f26,plain,(
  ~! [X0] : ((! [X4] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X4))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X4))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & ! [X3] : p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X3)))) & ! [X2] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X2))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) & ! [X1] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X1))),s('type.list.list'('type.closLang.exp'),X1))))) <=> (! [X8] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X8))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X8))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & ! [X7] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X7))),s('type.list.list'('type.closLang.exp'),X7)))) & ! [X6] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X6))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) & ! [X5] : p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X5))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((! [X7] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X7))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X7))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & ! [X8] : p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8)))) & ! [X9] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X9))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X9))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X9))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X9))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) & ! [X10] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X10))),s('type.list.list'('type.closLang.exp'),X10))))) <=> (! [X7] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X7))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X7))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & ! [X10] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X10))),s('type.list.list'('type.closLang.exp'),X10)))) & ! [X9] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X9))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X9))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X9))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X9))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) & ! [X8] : p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((! [X7] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X7))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X7))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & ! [X8] : p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8)))) & ! [X9] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X9))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X9))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X9))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X9))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) & ! [X10] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X10))),s('type.list.list'('type.closLang.exp'),X10))))) <=> (! [X7] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X7))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X7))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & ! [X10] : p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X10))),s('type.list.list'('type.closLang.exp'),X10)))) & ! [X9] : (s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X9))) = s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X9))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X9))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),X9))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) & ! [X8] : p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8))))))),
  file('thm.clos_relation.clos_relation_|49||48|7_prove_ltb','thm.clos_relation.clos_relation_|49||48|7_prove_ltb')).
fof(f11644,plain,(
  $false | ($spl15 | $spl18)),
  inference(subsumption_resolution,[],[f167,f169])).
fof(f11636,plain,(
  $false | ($spl9 | $spl22)),
  inference(subsumption_resolution,[],[f11635,f8681])).
fof(f8681,plain,(
  ( ! [X16] : (p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'_dst_x0x0x1_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.closLang.exp',X16))),s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X16))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) ) | $spl22),
  inference(forward_demodulation,[],[f8680,f143])).
fof(f143,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(flattening,[],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X23,X24,X25] : ! [X26,X27,X28] : s(X23,happ(s(fun(X24,X23),'_dst_x1x0_2'(s(fun(X24,fun(X25,X23)),X26),s(X25,X27))),s(X24,X28))) = s(X23,happ(s(fun(X25,X23),happ(s(fun(X24,fun(X25,X23)),X26),s(X24,X28))),s(X25,X27)))),
  file('thm.clos_relation.clos_relation_|49||48|7_prove_ltb','_dst_x1x0_ax')).
fof(f8680,plain,(
  ( ! [X16] : (p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'_dst_x0x0x1_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X16))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X16))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) ) | $spl22),
  inference(forward_demodulation,[],[f171,f145])).
fof(f145,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun(X3,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X2,X0)),X4),s(X1,X5),s(fun(X3,X2),X6))),s(X3,X7))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X4),s(X1,X5))),s(X2,happ(s(fun(X3,X2),X6),s(X3,X7)))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun(X3,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X2,X0)),X4),s(X1,X5),s(fun(X3,X2),X6))),s(X3,X7))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X4),s(X1,X5))),s(X2,happ(s(fun(X3,X2),X6),s(X3,X7)))))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : s(X0,happ(s(fun(X3,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X2,X0)),X4),s(X1,X5),s(fun(X3,X2),X6))),s(X3,X7))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X4),s(X1,X5))),s(X2,happ(s(fun(X3,X2),X6),s(X3,X7)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X23,X25,X29,X24] : ! [X26,X27,X30,X28] : s(X23,happ(s(fun(X24,X23),'_dst_x0x0x1_3'(s(fun(X25,fun(X29,X23)),X26),s(X25,X27),s(fun(X24,X29),X30))),s(X24,X28))) = s(X23,happ(s(fun(X29,X23),happ(s(fun(X25,fun(X29,X23)),X26),s(X25,X27))),s(X29,happ(s(fun(X24,X29),X30),s(X24,X28)))))),
  file('thm.clos_relation.clos_relation_|49||48|7_prove_ltb','_dst_x0x0x1_ax')).
fof(f11635,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'_dst_x0x0x1_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.closLang.exp',sK5))),s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK5))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))) | $spl9),
  inference(forward_demodulation,[],[f11634,f143])).
fof(f11634,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'_dst_x0x0x1_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK5))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK5))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))) | $spl9),
  inference(forward_demodulation,[],[f161,f145])).
fof(f11641,plain,(
  $false | ($spl11 | $spl30 | $spl180)),
  inference(subsumption_resolution,[],[f11640,f177])).
fof(f11640,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl180)),
  inference(forward_demodulation,[],[f11639,f3756])).
fof(f11639,plain,(
  ~p(s(bool,'const.clos_relation.exp_rel_3'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.list.list'('type.closLang.exp'),sK6),s('type.list.list'('type.closLang.exp'),sK6)))) | $spl11),
  inference(forward_demodulation,[],[f163,f130])).
fof(f130,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.clos_relation.exp_rel_3'(s('type.bool.itself'(X0),X1),s('type.list.list'('type.closLang.exp'),X2),s('type.list.list'('type.closLang.exp'),X3))) = s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),X1))),s('type.list.list'('type.closLang.exp'),X2))),s('type.list.list'('type.closLang.exp'),X3)))) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0,X1,X2,X3] : s(bool,'const.clos_relation.exp_rel_3'(s('type.bool.itself'(X0),X1),s('type.list.list'('type.closLang.exp'),X2),s('type.list.list'('type.closLang.exp'),X3))) = s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),X1))),s('type.list.list'('type.closLang.exp'),X2))),s('type.list.list'('type.closLang.exp'),X3)))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ! [X0] : ! [X1,X2,X3] : s(bool,'const.clos_relation.exp_rel_3'(s('type.bool.itself'(X0),X1),s('type.list.list'('type.closLang.exp'),X2),s('type.list.list'('type.closLang.exp'),X3))) = s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),X1))),s('type.list.list'('type.closLang.exp'),X2))),s('type.list.list'('type.closLang.exp'),X3)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X16,X17,X18] : s(bool,'const.clos_relation.exp_rel_3'(s('type.bool.itself'(X6),X16),s('type.list.list'('type.closLang.exp'),X17),s('type.list.list'('type.closLang.exp'),X18))) = s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),X16))),s('type.list.list'('type.closLang.exp'),X17))),s('type.list.list'('type.closLang.exp'),X18)))),
  file('thm.clos_relation.clos_relation_|49||48|7_prove_ltb','ARITY_1_3_const.clos_relation.exp_rel')).
fof(f236,plain,(
  $false | ($spl25 | $spl30 | $spl36)),
  inference(subsumption_resolution,[],[f217,f177])).
fof(f217,plain,(
  ~p(s(bool,'T_0')) | ($spl25 | $spl36)),
  inference(backward_demodulation,[],[f212,f173])).
fof(f173,plain,(
  ~p(s(bool,'F_0')) | $spl25),
  inference(cnf_transformation,[],[f173_D])).
fof(f173_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f110,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.clos_relation.clos_relation_|49||48|7_prove_ltb',aHL_FALSITY)).
fof(f168,plain,(
  ( ! [X13] : (p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X13))),s('type.list.list'('type.closLang.exp'),X13))))) ) | $spl16),
  inference(cnf_transformation,[],[f168_D])).
fof(f168_D,plain,(
  ( ! [X13] : (p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X13))),s('type.list.list'('type.closLang.exp'),X13))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f92,plain,(
  ( ! [X13,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X11))),s('type.list.list'('type.closLang.exp'),X11)))) | p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),X13))),s('type.list.list'('type.closLang.exp'),X13))))) )),
  inference(cnf_transformation,[],[f67])).
fof(f3756,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'const.clos_relation.exp_rel_3'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.closLang.exp'),X3)))) ) | $spl180),
  inference(cnf_transformation,[],[f3756_D])).
fof(f3756_D,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'const.clos_relation.exp_rel_3'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.closLang.exp'),X3)))) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f212,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl36),
  inference(cnf_transformation,[],[f212_D])).
fof(f212_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f3755,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,'const.clos_relation.exp_rel_3'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.closLang.exp'),X3)))) ) | ($spl16 | $spl25)),
  inference(subsumption_resolution,[],[f3741,f181])).
fof(f181,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl25),
  inference(superposition,[],[f173,f111])).
fof(f111,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.clos_relation.clos_relation_|49||48|7_prove_ltb',aHL_BOOL_CASES)).
fof(f3741,plain,(
  ( ! [X4,X3] : (p(s(bool,X4)) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,'const.clos_relation.exp_rel_3'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.closLang.exp'),X3)))) ) | $spl16),
  inference(superposition,[],[f3622,f179])).
fof(f179,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f111,f111])).
fof(f3622,plain,(
  ( ! [X13] : (p(s(bool,'const.clos_relation.exp_rel_3'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.list.list'('type.closLang.exp'),X13),s('type.list.list'('type.closLang.exp'),X13))))) ) | $spl16),
  inference(backward_demodulation,[],[f130,f168])).
fof(f177,plain,(
  p(s(bool,'T_0')) | $spl30),
  inference(cnf_transformation,[],[f177_D])).
fof(f177_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f149,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f127])).
fof(f127,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X14] : ! [X15] : (s(X14,X15) = s(X14,X15) <=> p(s(bool,'T_0')))),
  file('thm.clos_relation.clos_relation_|49||48|7_prove_ltb','thm.bool.REFL_CLAUSE')).
fof(f11633,plain,(
  $false | ($spl7 | $spl30 | $spl180)),
  inference(subsumption_resolution,[],[f11632,f177])).
fof(f11632,plain,(
  ~p(s(bool,'T_0')) | ($spl7 | $spl180)),
  inference(forward_demodulation,[],[f11631,f3756])).
fof(f11631,plain,(
  ~p(s(bool,'const.clos_relation.exp_rel_3'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.list.list'('type.closLang.exp'),sK4),s('type.list.list'('type.closLang.exp'),sK4)))) | $spl7),
  inference(forward_demodulation,[],[f159,f130])).
fof(f9957,plain,(
  $false | ($spl5 | $spl22)),
  inference(subsumption_resolution,[],[f9956,f8681])).
fof(f9956,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'_dst_x0x0x1_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))))),s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))) | $spl5),
  inference(forward_demodulation,[],[f9955,f143])).
fof(f9955,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'_dst_x0x0x1_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))) | $spl5),
  inference(forward_demodulation,[],[f157,f145])).
fof(f169,plain,(
  ( ! [X9] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))))) ) | $spl18),
  inference(cnf_transformation,[],[f169_D])).
fof(f169_D,plain,(
  ( ! [X9] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f104,plain,(
  ( ! [X15,X9] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9)))) | p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X15),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X15))))) )),
  inference(cnf_transformation,[],[f67])).
fof(f11570,plain,(
  $false | ($spl3 | $spl18)),
  inference(resolution,[],[f169,f155])).
fof(f9962,plain,(
  $false | ($spl1 | $spl22)),
  inference(subsumption_resolution,[],[f9961,f8681])).
fof(f9961,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'_dst_x0x0x1_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.closLang.exp',sK1))),s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK1))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))) | $spl1),
  inference(forward_demodulation,[],[f9960,f143])).
fof(f9960,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'_dst_x0x0x1_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK1))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))) | $spl1),
  inference(forward_demodulation,[],[f153,f145])).
fof(f153,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | $spl1),
  inference(cnf_transformation,[],[f153_D])).
fof(f153_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f155,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2)))) | $spl3),
  inference(cnf_transformation,[],[f155_D])).
fof(f155_D,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f157,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | $spl5),
  inference(cnf_transformation,[],[f157_D])).
fof(f157_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f159,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),sK4))),s('type.list.list'('type.closLang.exp'),sK4)))) | $spl7),
  inference(cnf_transformation,[],[f159_D])).
fof(f159_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),sK4))),s('type.list.list'('type.closLang.exp'),sK4)))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f161,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK5))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK5))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | $spl9),
  inference(cnf_transformation,[],[f161_D])).
fof(f161_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK5))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK5))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f163,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),sK6))),s('type.list.list'('type.closLang.exp'),sK6)))) | $spl11),
  inference(cnf_transformation,[],[f163_D])).
fof(f163_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),sK6))),s('type.list.list'('type.closLang.exp'),sK6)))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f165,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | $spl13),
  inference(cnf_transformation,[],[f165_D])).
fof(f165_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f167,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK8)))) | $spl15),
  inference(cnf_transformation,[],[f167_D])).
fof(f167_D,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK8)))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f151,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK8)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),sK6))),s('type.list.list'('type.closLang.exp'),sK6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK5))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK5))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),sK4))),s('type.list.list'('type.closLang.exp'),sK4)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),
  inference(trivial_inequality_removal,[],[f108])).
fof(f108,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK8)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))) != s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),sK6))),s('type.list.list'('type.closLang.exp'),sK6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK5))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK5))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),sK4))),s('type.list.list'('type.closLang.exp'),sK4)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))) != s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK3))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',sK1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),
  inference(cnf_transformation,[],[f67])).
fof(f11649,plain,(
  $false | ($spl13 | $spl22)),
  inference(subsumption_resolution,[],[f11648,f8681])).
fof(f11648,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'_dst_x0x0x1_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))))),s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))) | $spl13),
  inference(forward_demodulation,[],[f11647,f143])).
fof(f11647,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'_dst_x0x0x1_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.closLang.exp'),sK7))))))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))) | $spl13),
  inference(forward_demodulation,[],[f165,f145])).
% SZS output end Proof for thm.clos_relation
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 84
% Passive clauses: 3320
% Generated clauses: 11354
% Final active clauses: 73
% Final passive clauses: 3070
% Input formulas: 24
% Initial clauses: 66
% 
% Duplicate literals: 451
% Trivial inequalities: 63
% Fw subsumption resolutions: 1313
% Fw demodulations: 560
% Bw demodulations: 6
% 
% Simple tautologies: 159
% Equational tautologies: 84
% Forward subsumptions: 4687
% 
% Binary resolution: 355
% Factoring: 2
% Forward superposition: 4263
% Backward superposition: 3681
% Self superposition: 280
% Equality factoring: 176
% Equality resolution: 7
% 
% Split clauses: 324
% Split components: 654
% SAT solver clauses: 833
% SAT solver unit clauses: 7
% SAT solver binary clauses: 166
% SAT solver learnt clauses: 1
% 
% Sat splits: 324
% Sat splitting refutations: 11
% 
% TWLsolver clauses: 828
% TWLsolver calls for satisfiability: 137
% 
% Memory used [KB]: 12281
% Time elapsed: 0.458 s
% ------------------------------
% ------------------------------
% Success in time 0.48 s
