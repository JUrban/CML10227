Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.inferProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.inferProps
% SZS output start Proof for thm.inferProps
fof(f4123,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4122,f223,f403,f401,f399,f3960,f4121])).
fof(f4121,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f401,f226])).
fof(f226,plain,(
  ( ! [X2,X3,X1] : (s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) != s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X1),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),X2),s('type.ast.tctor',X3)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  (s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),sK13),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',sK14))))) | s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),sK15),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),sK16),s('type.ast.tctor',sK17))))) | s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),sK18),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',sK19)))))) & ! [X6,X7] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) != s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X6),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',X7))))) & ! [X4,X5] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) != s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X4),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',X5))))) & ! [X1,X2,X3] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) != s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X1),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),X2),s('type.ast.tctor',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19])],[f137])).
fof(f137,plain,(
  ? [X0] : ((? [X13,X14] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X13),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',X14))))) | ? [X10,X11,X12] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X10),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),X11),s('type.ast.tctor',X12))))) | ? [X8,X9] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X8),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',X9)))))) & ! [X6,X7] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) != s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X6),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',X7))))) & ! [X4,X5] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) != s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X4),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',X5))))) & ! [X1,X2,X3] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) != s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X1),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),X2),s('type.ast.tctor',X3))))))),
  inference(rectify,[],[f97])).
fof(f97,plain,(
  ? [X0] : ((? [X6,X7] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X6),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',X7))))) | ? [X3,X4,X5] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X3),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),X4),s('type.ast.tctor',X5))))) | ? [X1,X2] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X1),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',X2)))))) & ! [X13,X14] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) != s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X13),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',X14))))) & ! [X11,X12] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) != s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X11),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',X12))))) & ! [X8,X9,X10] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) != s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X8),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),X9),s('type.ast.tctor',X10))))))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ? [X0] : ((? [X6,X7] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X6),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',X7))))) | ? [X3,X4,X5] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X3),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),X4),s('type.ast.tctor',X5))))) | ? [X1,X2] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X1),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',X2)))))) & (! [X13,X14] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) != s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X13),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',X14))))) & ! [X11,X12] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) != s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X11),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',X12))))) & ! [X8,X9,X10] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) != s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X8),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),X9),s('type.ast.tctor',X10)))))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ((? [X6,X7] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X6),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',X7))))) | ? [X3,X4,X5] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X3),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),X4),s('type.ast.tctor',X5))))) | ? [X1,X2] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X1),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',X2)))))) => (? [X13,X14] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X13),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',X14))))) | ? [X11,X12] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X11),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',X12))))) | ? [X8,X9,X10] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X0) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X8),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),X9),s('type.ast.tctor',X10)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7,X8] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X6) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X7),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',X8))))) | ? [X7,X9,X10] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X6) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X7),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),X9),s('type.ast.tctor',X10))))) | ? [X7,X11] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X6) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X7),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',X11)))))) => (? [X7,X11] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X6) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X7),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',X11))))) | ? [X7,X8] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X6) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X7),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',X8))))) | ? [X7,X9,X10] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X6) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X7),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),X9),s('type.ast.tctor',X10)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7,X8] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X6) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X7),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',X8))))) | ? [X7,X9,X10] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X6) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X7),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),X9),s('type.ast.tctor',X10))))) | ? [X7,X11] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X6) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X7),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',X11)))))) => (? [X7,X11] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X6) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X7),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',X11))))) | ? [X7,X8] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X6) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X7),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',X8))))) | ? [X7,X9,X10] : s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),X6) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X7),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),X9),s('type.ast.tctor',X10)))))))),
  file('thm.inferProps.inferProps_98_prove_ltb','thm.inferProps.inferProps_98_prove_ltb')).
fof(f3960,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f399,f225])).
fof(f225,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) != s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X4),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',X5)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f399,plain,(
  s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),sK13),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',sK14))))) | $spl0),
  inference(cnf_transformation,[],[f399_D])).
fof(f399_D,plain,(
  s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),sK13),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',sK14))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f401,plain,(
  s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),sK15),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),sK16),s('type.ast.tctor',sK17))))) | $spl2),
  inference(cnf_transformation,[],[f401_D])).
fof(f401_D,plain,(
  s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),sK15),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),sK16),s('type.ast.tctor',sK17))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f403,plain,(
  s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),sK18),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',sK19))))) | $spl4),
  inference(cnf_transformation,[],[f403_D])).
fof(f403_D,plain,(
  s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),sK18),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',sK19))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f223,plain,(
  s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),sK18),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',sK19))))) | s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),sK15),s('type.infer_t.infer_t','const.infer_t.Infer_Tapp_2'(s('type.list.list'('type.infer_t.infer_t'),sK16),s('type.ast.tctor',sK17))))) | s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),sK13),s('type.infer_t.infer_t','const.infer_t.Infer_Tvar_db_1'(s('type.num.num',sK14)))))),
  inference(cnf_transformation,[],[f138])).
fof(f4122,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f403,f224])).
fof(f224,plain,(
  ( ! [X6,X7] : (s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),sK12) != s('type.pair.prod'('type.finite_map.fmap'('type.num.num','type.num.num'),'type.infer_t.infer_t'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num','type.num.num'),X6),s('type.infer_t.infer_t','const.infer_t.Infer_Tuvar_1'(s('type.num.num',X7)))))) )),
  inference(cnf_transformation,[],[f138])).
% SZS output end Proof for thm.inferProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 317
% Passive clauses: 1240
% Generated clauses: 3893
% Final active clauses: 317
% Final passive clauses: 774
% Input formulas: 37
% Initial clauses: 171
% 
% Duplicate literals: 149
% Trivial inequalities: 13
% Fw subsumption resolutions: 261
% 
% Simple tautologies: 145
% Equational tautologies: 22
% Forward subsumptions: 2067
% 
% Binary resolution: 2377
% Factoring: 711
% Forward superposition: 110
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 78
% Split components: 158
% SAT solver clauses: 155
% SAT solver unit clauses: 9
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 78
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 154
% TWLsolver calls for satisfiability: 134
% 
% Memory used [KB]: 2046
% Time elapsed: 0.089 s
% ------------------------------
% ------------------------------
% Success in time 0.1 s
