Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.BinaryRandomAccessLists
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BinaryRandomAccessLists
% SZS output start Proof for thm.BinaryRandomAccessLists
fof(f9966,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f9963,f134,f207,f205,f245,f135,f208,f206])).
fof(f206,plain,(
  s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK1))) != s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK2))) | $spl1),
  inference(cnf_transformation,[],[f206_D])).
fof(f206_D,plain,(
  s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK1))) != s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK2))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f208,plain,(
  s(sK0,sK1) != s(sK0,sK2) | $spl3),
  inference(cnf_transformation,[],[f208_D])).
fof(f208_D,plain,(
  s(sK0,sK1) != s(sK0,sK2) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f135,plain,(
  s(sK0,sK1) != s(sK0,sK2) | s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK1))) != s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK2)))),
  inference(cnf_transformation,[],[f114])).
fof(f114,plain,(
  (s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK1))) = s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK2))) | s(sK0,sK1) = s(sK0,sK2)) & (s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK1))) != s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK2))) | s(sK0,sK1) != s(sK0,sK2))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f113])).
fof(f113,plain,(
  ? [X0,X1,X2] : ((s('type.BinaryRandomAccessLists.tree'(X0),'const.BinaryRandomAccessLists.Leaf_1'(s(X0,X1))) = s('type.BinaryRandomAccessLists.tree'(X0),'const.BinaryRandomAccessLists.Leaf_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) & (s('type.BinaryRandomAccessLists.tree'(X0),'const.BinaryRandomAccessLists.Leaf_1'(s(X0,X1))) != s('type.BinaryRandomAccessLists.tree'(X0),'const.BinaryRandomAccessLists.Leaf_1'(s(X0,X2))) | s(X0,X1) != s(X0,X2)))),
  inference(nnf_transformation,[],[f97])).
fof(f97,plain,(
  ? [X0,X1,X2] : (s('type.BinaryRandomAccessLists.tree'(X0),'const.BinaryRandomAccessLists.Leaf_1'(s(X0,X1))) = s('type.BinaryRandomAccessLists.tree'(X0),'const.BinaryRandomAccessLists.Leaf_1'(s(X0,X2))) <~> s(X0,X1) = s(X0,X2))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2] : (s('type.BinaryRandomAccessLists.tree'(X0),'const.BinaryRandomAccessLists.Leaf_1'(s(X0,X1))) = s('type.BinaryRandomAccessLists.tree'(X0),'const.BinaryRandomAccessLists.Leaf_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.BinaryRandomAccessLists.tree'(X0),'const.BinaryRandomAccessLists.Leaf_1'(s(X0,X1))) = s('type.BinaryRandomAccessLists.tree'(X0),'const.BinaryRandomAccessLists.Leaf_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.BinaryRandomAccessLists.tree'(X6),'const.BinaryRandomAccessLists.Leaf_1'(s(X6,X7))) = s('type.BinaryRandomAccessLists.tree'(X6),'const.BinaryRandomAccessLists.Leaf_1'(s(X6,X8))) <=> s(X6,X7) = s(X6,X8))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.BinaryRandomAccessLists.tree'(X6),'const.BinaryRandomAccessLists.Leaf_1'(s(X6,X7))) = s('type.BinaryRandomAccessLists.tree'(X6),'const.BinaryRandomAccessLists.Leaf_1'(s(X6,X8))) <=> s(X6,X7) = s(X6,X8))),
  file('thm.BinaryRandomAccessLists.tree_|49||49||split|0','thm.BinaryRandomAccessLists.tree_|49||49||split|0')).
fof(f245,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f244])).
fof(f244,plain,(
  s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK1))) != s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK1))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f206,f207])).
fof(f205,plain,(
  s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK1))) = s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK2))) | $spl0),
  inference(cnf_transformation,[],[f205_D])).
fof(f205_D,plain,(
  s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK1))) = s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK2))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f207,plain,(
  s(sK0,sK1) = s(sK0,sK2) | $spl2),
  inference(cnf_transformation,[],[f207_D])).
fof(f207_D,plain,(
  s(sK0,sK1) = s(sK0,sK2) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f134,plain,(
  s(sK0,sK1) = s(sK0,sK2) | s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK1))) = s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK2)))),
  inference(cnf_transformation,[],[f114])).
fof(f9963,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f9962,f208])).
fof(f9962,plain,(
  s(sK0,sK1) = s(sK0,sK2) | $spl0),
  inference(forward_demodulation,[],[f9939,f164])).
fof(f164,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))),
  inference(flattening,[],[f56])).
fof(f56,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X7,X10] : s(X6,X7) = s(X6,'const.ind_type.FCONS_3'(s(X6,X7),s(fun('type.num.num',X6),X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.BinaryRandomAccessLists.tree_|49||49||split|0','thm.ind_type.FCONS|split|0')).
fof(f9939,plain,(
  ( ! [X2] : (s(sK0,sK2) = s(sK0,'const.ind_type.FCONS_3'(s(sK0,sK1),s(fun('type.num.num',sK0),X2),s('type.num.num','const.num.|48|_0')))) ) | $spl0),
  inference(superposition,[],[f4280,f164])).
fof(f4280,plain,(
  ( ! [X4,X5] : (s(sK0,'const.ind_type.FCONS_3'(s(sK0,sK1),s(fun('type.num.num',sK0),X4),s('type.num.num',X5))) = s(sK0,'const.ind_type.FCONS_3'(s(sK0,sK2),s(fun('type.num.num',sK0),X4),s('type.num.num',X5)))) ) | $spl0),
  inference(forward_demodulation,[],[f4157,f172])).
fof(f172,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0] : ! [X1,X2,X3] : s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X9,X13,X14] : s(X6,'const.ind_type.FCONS_3'(s(X6,X9),s(fun('type.num.num',X6),X13),s('type.num.num',X14))) = s(X6,happ(s(fun('type.num.num',X6),happ(s(fun(fun('type.num.num',X6),fun('type.num.num',X6)),happ(s(fun(X6,fun(fun('type.num.num',X6),fun('type.num.num',X6))),'const.ind_type.FCONS_0'),s(X6,X9))),s(fun('type.num.num',X6),X13))),s('type.num.num',X14)))),
  file('thm.BinaryRandomAccessLists.tree_|49||49||split|0','ARITY_0_3_const.ind_type.FCONS')).
fof(f4157,plain,(
  ( ! [X4,X5] : (s(sK0,'const.ind_type.FCONS_3'(s(sK0,sK2),s(fun('type.num.num',sK0),X4),s('type.num.num',X5))) = s(sK0,happ(s(fun('type.num.num',sK0),happ(s(fun(fun('type.num.num',sK0),fun('type.num.num',sK0)),happ(s(fun(sK0,fun(fun('type.num.num',sK0),fun('type.num.num',sK0))),'const.ind_type.FCONS_0'),s(sK0,sK1))),s(fun('type.num.num',sK0),X4))),s('type.num.num',X5)))) ) | $spl0),
  inference(superposition,[],[f172,f2679])).
fof(f2679,plain,(
  ( ! [X0,X1] : (s(X0,happ(s(fun(sK0,X0),X1),s(sK0,sK1))) = s(X0,happ(s(fun(sK0,X0),X1),s(sK0,sK2)))) ) | $spl0),
  inference(forward_demodulation,[],[f2604,f186])).
fof(f186,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X3),s(X1,X2))) = s(X0,'const.BinaryRandomAccessLists.tree_CASE_3'(s('type.BinaryRandomAccessLists.tree'(X1),'const.BinaryRandomAccessLists.Leaf_1'(s(X1,X2))),s(fun(X1,X0),X3),s(fun('type.num.num',fun('type.BinaryRandomAccessLists.tree'(X1),fun('type.BinaryRandomAccessLists.tree'(X1),X0))),X4)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X3),s(X1,X2))) = s(X0,'const.BinaryRandomAccessLists.tree_CASE_3'(s('type.BinaryRandomAccessLists.tree'(X1),'const.BinaryRandomAccessLists.Leaf_1'(s(X1,X2))),s(fun(X1,X0),X3),s(fun('type.num.num',fun('type.BinaryRandomAccessLists.tree'(X1),fun('type.BinaryRandomAccessLists.tree'(X1),X0))),X4)))),
  inference(flattening,[],[f89])).
fof(f89,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X3),s(X1,X2))) = s(X0,'const.BinaryRandomAccessLists.tree_CASE_3'(s('type.BinaryRandomAccessLists.tree'(X1),'const.BinaryRandomAccessLists.Leaf_1'(s(X1,X2))),s(fun(X1,X0),X3),s(fun('type.num.num',fun('type.BinaryRandomAccessLists.tree'(X1),fun('type.BinaryRandomAccessLists.tree'(X1),X0))),X4)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X11,X6] : ! [X7,X10,X12] : s(X11,happ(s(fun(X6,X11),X10),s(X6,X7))) = s(X11,'const.BinaryRandomAccessLists.tree_CASE_3'(s('type.BinaryRandomAccessLists.tree'(X6),'const.BinaryRandomAccessLists.Leaf_1'(s(X6,X7))),s(fun(X6,X11),X10),s(fun('type.num.num',fun('type.BinaryRandomAccessLists.tree'(X6),fun('type.BinaryRandomAccessLists.tree'(X6),X11))),X12)))),
  file('thm.BinaryRandomAccessLists.tree_|49||49||split|0','thm.BinaryRandomAccessLists.tree_case_def|split|0')).
fof(f2604,plain,(
  ( ! [X2,X0,X1] : (s(X0,happ(s(fun(sK0,X0),X1),s(sK0,sK2))) = s(X0,'const.BinaryRandomAccessLists.tree_CASE_3'(s('type.BinaryRandomAccessLists.tree'(sK0),'const.BinaryRandomAccessLists.Leaf_1'(s(sK0,sK1))),s(fun(sK0,X0),X1),s(fun('type.num.num',fun('type.BinaryRandomAccessLists.tree'(sK0),fun('type.BinaryRandomAccessLists.tree'(sK0),X0))),X2)))) ) | $spl0),
  inference(superposition,[],[f186,f205])).
% SZS output end Proof for thm.BinaryRandomAccessLists
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 95
% Passive clauses: 2138
% Generated clauses: 9659
% Final active clauses: 87
% Final passive clauses: 1914
% Input formulas: 37
% Initial clauses: 71
% 
% Duplicate literals: 355
% Trivial inequalities: 189
% Fw subsumption resolutions: 1164
% Fw demodulations: 761
% Bw demodulations: 3
% 
% Simple tautologies: 220
% Equational tautologies: 46
% Forward subsumptions: 4391
% Fw demodulations to eq. taut.: 1
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 240
% Factoring: 2
% Forward superposition: 3361
% Backward superposition: 3106
% Self superposition: 184
% Equality factoring: 116
% Equality resolution: 21
% 
% Split clauses: 241
% Split components: 491
% SAT solver clauses: 516
% SAT solver unit clauses: 26
% SAT solver binary clauses: 128
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 241
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 512
% TWLsolver calls for satisfiability: 125
% 
% Memory used [KB]: 11897
% Time elapsed: 0.433 s
% ------------------------------
% ------------------------------
% Success in time 0.43 s
