Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.BinaryRandomAccessLists
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BinaryRandomAccessLists
% SZS output start Proof for thm.BinaryRandomAccessLists
fof(f1057,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1056,f133,f230,f228,f134,f227])).
fof(f227,plain,(
  s('type.list.list'(sK6),'const.list.NIL_0') != s('type.list.list'(sK6),sK7) | $spl1),
  inference(cnf_transformation,[],[f227_D])).
fof(f227_D,plain,(
  s('type.list.list'(sK6),'const.list.NIL_0') != s('type.list.list'(sK6),sK7) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f134,plain,(
  s('type.list.list'(sK6),'const.list.NIL_0') != s('type.list.list'(sK6),sK7)),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  (s('type.list.list'(sK6),'const.list.NIL_0') = s('type.list.list'(sK6),sK7) | s('type.list.list'(sK6),sK7) = s('type.list.list'(sK6),'const.list.CONS_2'(s(sK6,sK8),s('type.list.list'(sK6),sK9)))) & s('type.list.list'(sK6),'const.list.NIL_0') != s('type.list.list'(sK6),sK7) & ! [X2,X3] : s('type.list.list'(sK6),sK7) != s('type.list.list'(sK6),'const.list.CONS_2'(s(sK6,X2),s('type.list.list'(sK6),X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9])],[f90])).
fof(f90,plain,(
  ? [X0,X1] : ((s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X5)))) & s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) & ! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))),
  inference(rectify,[],[f65])).
fof(f65,plain,(
  ? [X0,X1] : ((s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3)))) & s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) & ! [X4,X5] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X5))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ? [X0,X1] : ((s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3)))) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) & ! [X4,X5] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X5)))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1] : ((s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3)))) => (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ~! [X0] : ! [X1] : ((s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3)))) => (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7) | ? [X8,X9] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),X9)))) => (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7) | ? [X8,X9] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7) | ? [X8,X9] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),X9)))) => (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7) | ? [X8,X9] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),X9)))))),
  file('thm.BinaryRandomAccessLists.BinaryRandomAccessLists_34_prove_ltb','thm.BinaryRandomAccessLists.BinaryRandomAccessLists_34_prove_ltb')).
fof(f228,plain,(
  s('type.list.list'(sK6),'const.list.NIL_0') = s('type.list.list'(sK6),sK7) | $spl0),
  inference(cnf_transformation,[],[f228_D])).
fof(f228_D,plain,(
  s('type.list.list'(sK6),'const.list.NIL_0') = s('type.list.list'(sK6),sK7) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f230,plain,(
  s('type.list.list'(sK6),sK7) = s('type.list.list'(sK6),'const.list.CONS_2'(s(sK6,sK8),s('type.list.list'(sK6),sK9))) | $spl2),
  inference(cnf_transformation,[],[f230_D])).
fof(f230_D,plain,(
  s('type.list.list'(sK6),sK7) = s('type.list.list'(sK6),'const.list.CONS_2'(s(sK6,sK8),s('type.list.list'(sK6),sK9))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f133,plain,(
  s('type.list.list'(sK6),sK7) = s('type.list.list'(sK6),'const.list.CONS_2'(s(sK6,sK8),s('type.list.list'(sK6),sK9))) | s('type.list.list'(sK6),'const.list.NIL_0') = s('type.list.list'(sK6),sK7)),
  inference(cnf_transformation,[],[f91])).
fof(f1056,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f230,f135])).
fof(f135,plain,(
  ( ! [X2,X3] : (s('type.list.list'(sK6),sK7) != s('type.list.list'(sK6),'const.list.CONS_2'(s(sK6,X2),s('type.list.list'(sK6),X3)))) )),
  inference(cnf_transformation,[],[f91])).
% SZS output end Proof for thm.BinaryRandomAccessLists
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 116
% Passive clauses: 220
% Generated clauses: 916
% Final active clauses: 116
% Final passive clauses: 82
% Input formulas: 26
% Initial clauses: 93
% 
% Duplicate literals: 23
% Trivial inequalities: 5
% Fw subsumption resolutions: 72
% 
% Simple tautologies: 37
% Equational tautologies: 3
% Forward subsumptions: 525
% 
% Binary resolution: 497
% Factoring: 146
% Forward superposition: 8
% Backward superposition: 51
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 3
% 
% Split clauses: 35
% Split components: 71
% SAT solver clauses: 54
% SAT solver unit clauses: 6
% SAT solver binary clauses: 18
% SAT solver learnt clauses: 1
% 
% Sat splits: 35
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 53
% TWLsolver calls for satisfiability: 33
% 
% Memory used [KB]: 895
% Time elapsed: 0.030 s
% ------------------------------
% ------------------------------
% Success in time 0.06 s
