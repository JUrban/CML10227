Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (41340)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 123
% Passive clauses: 1843
% Generated clauses: 10850
% Final active clauses: 113
% Final passive clauses: 1545
% Input formulas: 23
% Initial clauses: 514
% 
% Duplicate literals: 728
% Trivial inequalities: 142
% Fw subsumption resolutions: 1573
% Fw demodulations: 128
% Bw demodulations: 4
% 
% Simple tautologies: 259
% Equational tautologies: 119
% Forward subsumptions: 3805
% 
% Binary resolution: 201
% Factoring: 2
% Forward superposition: 2889
% Backward superposition: 3832
% Self superposition: 400
% Equality factoring: 356
% Equality resolution: 12
% 
% Split clauses: 401
% Split components: 803
% SAT solver clauses: 1333
% SAT solver unit clauses: 7
% SAT solver binary clauses: 187
% 
% Sat splits: 401
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1333
% TWLsolver calls for satisfiability: 156
% 
% Memory used [KB]: 5500
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (41371)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 150
% Passive clauses: 862
% Generated clauses: 9394
% Final active clauses: 117
% Final passive clauses: 398
% Input formulas: 23
% Initial clauses: 514
% 
% Duplicate literals: 687
% Trivial inequalities: 111
% Fw subsumption resolutions: 1056
% Fw demodulations: 379
% Bw demodulations: 318
% Condensations: 1437
% Global subsumptions: 4
% 
% Simple tautologies: 196
% Equational tautologies: 66
% Forward subsumptions: 3268
% 
% Binary resolution: 49
% Factoring: 1
% Forward superposition: 1976
% Backward superposition: 2183
% Self superposition: 250
% Equality factoring: 216
% Equality resolution: 21
% 
% Split clauses: 109
% Split components: 218
% SAT solver clauses: 1572
% SAT solver unit clauses: 500
% SAT solver binary clauses: 199
% SAT solver learnt clauses: 8
% 
% Sat splits: 109
% Sat splitting refutations: 20
% 
% TWLsolver clauses: 1556
% TWLsolver calls for satisfiability: 10542
% 
% Memory used [KB]: 9850
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% (41401)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 405
% Passive clauses: 5361
% Generated clauses: 153588
% Final active clauses: 252
% Final passive clauses: 822
% Input formulas: 23
% Initial clauses: 514
% 
% Duplicate literals: 7250
% Trivial inequalities: 1583
% Fw subsumption resolutions: 18957
% Fw demodulations: 17192
% Bw demodulations: 3121
% Condensations: 17199
% Global subsumptions: 1540
% 
% Simple tautologies: 1897
% Equational tautologies: 465
% Forward subsumptions: 79081
% Fw demodulations to eq. taut.: 9
% Bw demodulations to eq. taut.: 20
% 
% Unit resulting resolution: 1658
% Factoring: 1
% Forward superposition: 37232
% Backward superposition: 34401
% Self superposition: 833
% Equality factoring: 465
% Equality resolution: 94
% 
% Split clauses: 431
% Split components: 885
% SAT solver clauses: 9361
% SAT solver unit clauses: 22
% SAT solver binary clauses: 1095
% 
% Sat splits: 431
% Sat splitting refutations: 1596
% 
% Memory used [KB]: 86096
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 31 next slice time: 31
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f5493,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f5490])).
fof(f5490,plain,(
  s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),'const.list.NIL_0') | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0')),
  inference(resolution,[],[f5489,f276])).
fof(f276,plain,(
  ~sP11(sK12,'const.list.NIL_0','const.list.NIL_0')),
  inference(resolution,[],[f132,f274])).
fof(f274,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.modSem.v'),X2)))) | ~sP11(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.modSem.v'),X2)))) | sP11(X0,X1,X2)) & (~sP11(X0,X1,X2) | p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.modSem.v'),X2))))))),
  inference(nnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.modSem.v'),X2)))) <=> sP11(X0,X1,X2))),
  inference(definition_folding,[],[f64,f76,f75,f74,f73,f72,f71,f70,f69,f68,f67,f66,f65])).
fof(f65,plain,(
  ! [X40,X48,X46,X47,X53,X49] : (sP0(X40,X48,X46,X47,X53,X49) <=> ! [X54] : (~p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X54),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49)))))))) | ? [X55,X56,X57] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X55))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X54))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X55),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X40)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X56),s('type.ast.exp',X57))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X54),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.option.option'('type.modSem.v')),X40))) = s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X56),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X56))),s('type.ast.exp',X57))))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f66,plain,(
  ! [X40,X7,X42,X41] : (sP1(X40,X7,X42,X41) <=> ? [X46,X47,X48,X49,X50,X51,X52,X53] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.string.char'),X50))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X51),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X51))),s('type.ast.exp',X52))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X51),s('type.ast.exp',X52))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X50),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & sP0(X40,X48,X46,X47,X53,X49)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f67,plain,(
  ! [X7,X40,X5,X42,X41] : (sP2(X7,X40,X5,X42,X41) <=> ? [X65,X66,X67,X68,X69,X70,X71] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.string.char'),X68),s('type.ast.exp',X69))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))),s('type.list.list'('type.string.char'),X68),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))))),s('type.list.list'('type.string.char'),X68))),s('type.ast.exp',X69))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f68,plain,(
  ! [X7,X40,X5,X42,X41] : (sP3(X7,X40,X5,X42,X41) <=> ? [X58,X59,X60,X61,X62,X63,X64] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61),s('type.list.list'('type.string.char'),X62))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))),s('type.list.list'('type.string.char'),X62))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f69,plain,(
  ! [X4,X40,X42,X41] : (sP4(X4,X40,X42,X41) <=> ? [X72,X73,X74] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.semanticPrimitives.v'),X73))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.modSem.v'),X74))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X73))),s('type.list.list'('type.modSem.v'),X74))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f70,plain,(
  ! [X4,X40,X42,X41] : (sP5(X4,X40,X42,X41) <=> ? [X43,X44] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X44))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X43))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X44))),s('type.list.list'('type.modSem.v'),X43))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f71,plain,(
  ! [X4,X33,X3,X35,X34] : (sP6(X4,X33,X3,X35,X34) <=> ((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X34) & s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X35)) | ? [X36,X37,X38,X39] : (s('type.list.list'('type.semanticPrimitives.v'),X34) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X36),s('type.list.list'('type.semanticPrimitives.v'),X37))) & s('type.list.list'('type.modSem.v'),X35) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X38),s('type.list.list'('type.modSem.v'),X39))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.semanticPrimitives.v',X36))),s('type.modSem.v',X38)))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.modSem.v'),X39)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f72,plain,(
  ! [X3,X25,X5,X27,X26] : (sP7(X3,X25,X5,X27,X26) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27)) | ? [X28,X29,X30,X31,X32] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.semanticPrimitives.v',X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.modSem.v',X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.v',X29))),s('type.modSem.v',X32)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f73,plain,(
  ! [X3,X4,X7,X5] : (sP8(X3,X4,X7,X5) <=> ? [X40,X41,X42] : ((? [X75] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X75))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X75)))) | sP4(X4,X40,X42,X41) | sP2(X7,X40,X5,X42,X41) | sP3(X7,X40,X5,X42,X41) | sP1(X40,X7,X42,X41) | ? [X45] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X45))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X45)))) | sP5(X4,X40,X42,X41)) & ~p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.semanticPrimitives.v',X41))),s('type.modSem.v',X42))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f74,plain,(
  ! [X6,X3] : (sP9(X6,X3) <=> ? [X17,X18,X19,X20] : (! [X21,X22] : (p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X21),s(fun('type.list.list'('type.string.char'),bool),X19)))) | s('type.option.option'('type.semanticPrimitives.v'),'const.option.SOME_1'(s('type.semanticPrimitives.v',X22))) != s('type.option.option'('type.semanticPrimitives.v'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20),s('type.list.list'('type.string.char'),X21))) | ? [X23,X24] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X23))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18),s('type.list.list'('type.string.char'),X21))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17)))))) & s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v',X24))) = s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X23),s('type.list.list'('type.option.option'('type.modSem.v')),X17))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.semanticPrimitives.v',X22))),s('type.modSem.v',X24)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18))),s(fun('type.list.list'('type.string.char'),bool),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f75,plain,(
  ! [X7,X6] : (sP10(X7,X6) <=> ? [X8,X9,X10,X11,X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))) & ! [X14,X15] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))) != s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s('type.list.list'('type.string.char'),X14))) | ? [X16] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.list.list'('type.string.char'),X14))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP10])])).
fof(f76,plain,(
  ! [X0,X1,X2] : (sP11(X0,X1,X2) <=> ! [X3,X4,X5,X6,X7] : (sP8(X3,X4,X7,X5) | ? [X33,X34,X35] : (sP6(X4,X33,X3,X35,X34) & ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X34))),s('type.list.list'('type.modSem.v'),X35))))) | ? [X25,X26,X27] : (sP7(X3,X25,X5,X27,X26) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))) | sP9(X6,X3) | sP10(X7,X6) | p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.list.list'('type.modSem.v'),X2))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP11])])).
fof(f64,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.modSem.v'),X2)))) <=> ! [X3,X4,X5,X6,X7] : (? [X40,X41,X42] : ((? [X75] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X75))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X75)))) | ? [X72,X73,X74] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.semanticPrimitives.v'),X73))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.modSem.v'),X74))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X73))),s('type.list.list'('type.modSem.v'),X74))))) | ? [X65,X66,X67,X68,X69,X70,X71] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.string.char'),X68),s('type.ast.exp',X69))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))),s('type.list.list'('type.string.char'),X68),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))))),s('type.list.list'('type.string.char'),X68))),s('type.ast.exp',X69))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))) | ? [X58,X59,X60,X61,X62,X63,X64] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61),s('type.list.list'('type.string.char'),X62))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))),s('type.list.list'('type.string.char'),X62))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))) | ? [X46,X47,X48,X49,X50,X51,X52,X53] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.string.char'),X50))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X51),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X51))),s('type.ast.exp',X52))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X51),s('type.ast.exp',X52))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X50),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & ! [X54] : (~p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X54),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49)))))))) | ? [X55,X56,X57] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X55))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X54))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X55),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X40)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X56),s('type.ast.exp',X57))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X54),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.option.option'('type.modSem.v')),X40))) = s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X56),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X56))),s('type.ast.exp',X57)))))))))) | ? [X45] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X45))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X45)))) | ? [X43,X44] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X44))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X43))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X44))),s('type.list.list'('type.modSem.v'),X43)))))) & ~p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.semanticPrimitives.v',X41))),s('type.modSem.v',X42))))) | ? [X33,X34,X35] : (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X34) & s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X35)) | ? [X36,X37,X38,X39] : (s('type.list.list'('type.semanticPrimitives.v'),X34) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X36),s('type.list.list'('type.semanticPrimitives.v'),X37))) & s('type.list.list'('type.modSem.v'),X35) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X38),s('type.list.list'('type.modSem.v'),X39))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.semanticPrimitives.v',X36))),s('type.modSem.v',X38)))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.modSem.v'),X39)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X34))),s('type.list.list'('type.modSem.v'),X35))))) | ? [X25,X26,X27] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27)) | ? [X28,X29,X30,X31,X32] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.semanticPrimitives.v',X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.modSem.v',X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.v',X29))),s('type.modSem.v',X32)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))) | ? [X17,X18,X19,X20] : (! [X21,X22] : (p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X21),s(fun('type.list.list'('type.string.char'),bool),X19)))) | s('type.option.option'('type.semanticPrimitives.v'),'const.option.SOME_1'(s('type.semanticPrimitives.v',X22))) != s('type.option.option'('type.semanticPrimitives.v'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20),s('type.list.list'('type.string.char'),X21))) | ? [X23,X24] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X23))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18),s('type.list.list'('type.string.char'),X21))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17)))))) & s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v',X24))) = s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X23),s('type.list.list'('type.option.option'('type.modSem.v')),X17))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.semanticPrimitives.v',X22))),s('type.modSem.v',X24)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18))),s(fun('type.list.list'('type.string.char'),bool),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))))) | ? [X8,X9,X10,X11,X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))) & ! [X14,X15] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))) != s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s('type.list.list'('type.string.char'),X14))) | ? [X16] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.list.list'('type.string.char'),X14))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))))) | p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.list.list'('type.modSem.v'),X2))))))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.modSem.v'),X2)))) <=> ! [X3,X4,X5,X6,X7] : ((? [X40,X41,X42] : ((? [X75] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X75))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X75)))) | ? [X72,X73,X74] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.semanticPrimitives.v'),X73))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.modSem.v'),X74))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X73))),s('type.list.list'('type.modSem.v'),X74))))) | ? [X65,X66,X67,X68,X69,X70,X71] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.string.char'),X68),s('type.ast.exp',X69))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))),s('type.list.list'('type.string.char'),X68),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))))),s('type.list.list'('type.string.char'),X68))),s('type.ast.exp',X69))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))) | ? [X58,X59,X60,X61,X62,X63,X64] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61),s('type.list.list'('type.string.char'),X62))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))),s('type.list.list'('type.string.char'),X62))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))) | ? [X46,X47,X48,X49,X50,X51,X52,X53] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.string.char'),X50))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X51),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X51))),s('type.ast.exp',X52))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X51),s('type.ast.exp',X52))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X50),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & ! [X54] : (~p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X54),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49)))))))) | ? [X55,X56,X57] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X55))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X54))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X55),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X40)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X56),s('type.ast.exp',X57))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X54),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.option.option'('type.modSem.v')),X40))) = s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X56),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X56))),s('type.ast.exp',X57)))))))))) | ? [X45] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X45))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X45)))) | ? [X43,X44] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X44))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X43))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X44))),s('type.list.list'('type.modSem.v'),X43)))))) & ~p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.semanticPrimitives.v',X41))),s('type.modSem.v',X42))))) | ? [X33,X34,X35] : (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X34) & s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X35)) | ? [X36,X37,X38,X39] : (s('type.list.list'('type.semanticPrimitives.v'),X34) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X36),s('type.list.list'('type.semanticPrimitives.v'),X37))) & s('type.list.list'('type.modSem.v'),X35) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X38),s('type.list.list'('type.modSem.v'),X39))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.semanticPrimitives.v',X36))),s('type.modSem.v',X38)))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.modSem.v'),X39)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X34))),s('type.list.list'('type.modSem.v'),X35))))) | ? [X25,X26,X27] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27)) | ? [X28,X29,X30,X31,X32] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.semanticPrimitives.v',X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.modSem.v',X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.v',X29))),s('type.modSem.v',X32)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))) | ? [X17,X18,X19,X20] : (! [X21,X22] : ((p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X21),s(fun('type.list.list'('type.string.char'),bool),X19)))) | s('type.option.option'('type.semanticPrimitives.v'),'const.option.SOME_1'(s('type.semanticPrimitives.v',X22))) != s('type.option.option'('type.semanticPrimitives.v'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20),s('type.list.list'('type.string.char'),X21)))) | ? [X23,X24] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X23))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18),s('type.list.list'('type.string.char'),X21))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17)))))) & s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v',X24))) = s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X23),s('type.list.list'('type.option.option'('type.modSem.v')),X17))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.semanticPrimitives.v',X22))),s('type.modSem.v',X24)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18))),s(fun('type.list.list'('type.string.char'),bool),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))))) | ? [X8,X9,X10,X11,X12,X13] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))) & ! [X14,X15] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))) != s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s('type.list.list'('type.string.char'),X14))) | ? [X16] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.list.list'('type.string.char'),X14))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))))) | p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.list.list'('type.modSem.v'),X2))))))),
  inference(ennf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.modSem.v'),X2)))) <=> ! [X3,X4,X5,X6,X7] : ((! [X40,X41,X42] : ((? [X75] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X75))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X75)))) | ? [X72,X73,X74] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.semanticPrimitives.v'),X73))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.modSem.v'),X74))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X73))),s('type.list.list'('type.modSem.v'),X74))))) | ? [X65,X66,X67,X68,X69,X70,X71] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.string.char'),X68),s('type.ast.exp',X69))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))),s('type.list.list'('type.string.char'),X68),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))))),s('type.list.list'('type.string.char'),X68))),s('type.ast.exp',X69))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))) | ? [X58,X59,X60,X61,X62,X63,X64] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61),s('type.list.list'('type.string.char'),X62))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))),s('type.list.list'('type.string.char'),X62))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))) | ? [X46,X47,X48,X49,X50,X51,X52,X53] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.string.char'),X50))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X51),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X51))),s('type.ast.exp',X52))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X51),s('type.ast.exp',X52))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X50),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & ! [X54] : (p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X54),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49)))))))) => ? [X55,X56,X57] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X55))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X54))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X55),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X40)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X56),s('type.ast.exp',X57))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X54),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.option.option'('type.modSem.v')),X40))) = s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X56),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X56))),s('type.ast.exp',X57)))))))))) | ? [X45] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X45))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X45)))) | ? [X43,X44] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X44))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X43))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X44))),s('type.list.list'('type.modSem.v'),X43)))))) => p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.semanticPrimitives.v',X41))),s('type.modSem.v',X42))))) & ! [X33,X34,X35] : (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X34) & s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X35)) | ? [X36,X37,X38,X39] : (s('type.list.list'('type.semanticPrimitives.v'),X34) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X36),s('type.list.list'('type.semanticPrimitives.v'),X37))) & s('type.list.list'('type.modSem.v'),X35) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X38),s('type.list.list'('type.modSem.v'),X39))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.semanticPrimitives.v',X36))),s('type.modSem.v',X38)))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.modSem.v'),X39)))))) => p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X34))),s('type.list.list'('type.modSem.v'),X35))))) & ! [X25,X26,X27] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27)) | ? [X28,X29,X30,X31,X32] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.semanticPrimitives.v',X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.modSem.v',X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.v',X29))),s('type.modSem.v',X32)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))) & ! [X17,X18,X19,X20] : (! [X21,X22] : ((~p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X21),s(fun('type.list.list'('type.string.char'),bool),X19)))) & s('type.option.option'('type.semanticPrimitives.v'),'const.option.SOME_1'(s('type.semanticPrimitives.v',X22))) = s('type.option.option'('type.semanticPrimitives.v'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20),s('type.list.list'('type.string.char'),X21)))) => ? [X23,X24] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X23))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18),s('type.list.list'('type.string.char'),X21))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17)))))) & s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v',X24))) = s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X23),s('type.list.list'('type.option.option'('type.modSem.v')),X17))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.semanticPrimitives.v',X22))),s('type.modSem.v',X24)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18))),s(fun('type.list.list'('type.string.char'),bool),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))))) & ! [X8,X9,X10,X11,X12,X13] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))) & ! [X14,X15] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s('type.list.list'('type.string.char'),X14))) => ? [X16] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.list.list'('type.string.char'),X14))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.list.list'('type.modSem.v'),X2))))))),
  inference(flattening,[],[f41])).
fof(f41,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.modSem.v'),X2)))) <=> ! [X3,X4,X5,X6,X7] : ((! [X40,X41,X42] : ((? [X75] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X75))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X75)))) | ? [X72,X73,X74] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.semanticPrimitives.v'),X73))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.modSem.v'),X74))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X73))),s('type.list.list'('type.modSem.v'),X74))))) | ? [X65,X66,X67,X68,X69,X70,X71] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.string.char'),X68),s('type.ast.exp',X69))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))),s('type.list.list'('type.string.char'),X68),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))))),s('type.list.list'('type.string.char'),X68))),s('type.ast.exp',X69))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))) | ? [X58,X59,X60,X61,X62,X63,X64] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61),s('type.list.list'('type.string.char'),X62))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))),s('type.list.list'('type.string.char'),X62))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))) | ? [X46,X47,X48,X49,X50,X51,X52,X53] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.string.char'),X50))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X51),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X51))),s('type.ast.exp',X52))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X51),s('type.ast.exp',X52))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X50),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & ! [X54] : (p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X54),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49)))))))) => ? [X55,X56,X57] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X55))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X54))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X55),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X40)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X56),s('type.ast.exp',X57))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X54),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.option.option'('type.modSem.v')),X40))) = s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X56),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X56))),s('type.ast.exp',X57)))))))))) | ? [X45] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X45))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X45)))) | ? [X43,X44] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X44))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X43))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X44))),s('type.list.list'('type.modSem.v'),X43)))))) => p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.semanticPrimitives.v',X41))),s('type.modSem.v',X42))))) & ! [X33,X34,X35] : (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X34) & s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X35)) | ? [X36,X37,X38,X39] : (s('type.list.list'('type.semanticPrimitives.v'),X34) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X36),s('type.list.list'('type.semanticPrimitives.v'),X37))) & s('type.list.list'('type.modSem.v'),X35) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X38),s('type.list.list'('type.modSem.v'),X39))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.semanticPrimitives.v',X36))),s('type.modSem.v',X38)))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.modSem.v'),X39)))))) => p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X34))),s('type.list.list'('type.modSem.v'),X35))))) & ! [X25,X26,X27] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27)) | ? [X28,X29,X30,X31,X32] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.semanticPrimitives.v',X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.modSem.v',X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.v',X29))),s('type.modSem.v',X32)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))) & ! [X17,X18,X19,X20] : (! [X21,X22] : ((~p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X21),s(fun('type.list.list'('type.string.char'),bool),X19)))) & s('type.option.option'('type.semanticPrimitives.v'),'const.option.SOME_1'(s('type.semanticPrimitives.v',X22))) = s('type.option.option'('type.semanticPrimitives.v'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20),s('type.list.list'('type.string.char'),X21)))) => ? [X23,X24] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X23))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18),s('type.list.list'('type.string.char'),X21))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17)))))) & s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v',X24))) = s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X23),s('type.list.list'('type.option.option'('type.modSem.v')),X17))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.semanticPrimitives.v',X22))),s('type.modSem.v',X24)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18))),s(fun('type.list.list'('type.string.char'),bool),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))))) & ! [X8,X9,X10,X11,X12,X13] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))) & ! [X14,X15] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s('type.list.list'('type.string.char'),X14))) => ? [X16] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.list.list'('type.string.char'),X14))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.list.list'('type.modSem.v'),X2))))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X5,X18,X19] : (p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X5),s('type.list.list'('type.semanticPrimitives.v'),X18),s('type.list.list'('type.modSem.v'),X19)))) <=> ! [X23,X24,X25,X26,X27] : ((! [X28,X29,X30] : ((? [X31] : (s('type.semanticPrimitives.v',X29) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X31))) & s('type.modSem.v',X30) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X31)))) | ? [X32,X33,X34] : (s('type.semanticPrimitives.v',X29) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X32),s('type.list.list'('type.semanticPrimitives.v'),X33))) & s('type.modSem.v',X30) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X32),s('type.list.list'('type.modSem.v'),X34))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X24),s('type.list.list'('type.option.option'('type.modSem.v')),X28))),s('type.list.list'('type.semanticPrimitives.v'),X33))),s('type.list.list'('type.modSem.v'),X34))))) | ? [X35,X36,X37,X14,X38,X39,X40] : (s('type.semanticPrimitives.v',X29) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X39))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.string.char'),X14),s('type.ast.exp',X38))) & s('type.modSem.v',X30) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X40))),s('type.list.list'('type.string.char'),X14),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X35),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X36),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X40))))))))),s('type.list.list'('type.string.char'),X14))),s('type.ast.exp',X38))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X25),s('type.list.list'('type.option.option'('type.modSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X40)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X39))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X36)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X27),s('type.list.list'('type.option.option'('type.modSem.v')),X28))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X35))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X36))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X40))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X39))))) | ? [X35,X36,X37,X41,X14,X39,X40] : (s('type.semanticPrimitives.v',X29) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X39))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X41),s('type.list.list'('type.string.char'),X14))) & s('type.modSem.v',X30) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X35),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X36),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X40))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X41))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X41))),s('type.list.list'('type.string.char'),X14))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X25),s('type.list.list'('type.option.option'('type.modSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X40)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X39))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X36)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X27),s('type.list.list'('type.option.option'('type.modSem.v')),X28))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X35))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X36))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X40))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X39))))) | ? [X35,X36,X37,X41,X14,X13,X38,X42] : (s('type.semanticPrimitives.v',X29) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X41),s('type.list.list'('type.string.char'),X14))) & s('type.modSem.v',X30) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X13),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X35),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X36),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X42))),s('type.list.list'('type.string.char'),X13))),s('type.ast.exp',X38))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X36)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X27),s('type.list.list'('type.option.option'('type.modSem.v')),X28))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X35))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X36))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37))))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X41))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X42))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X13),s('type.ast.exp',X38))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X41))) & ! [X43] : (p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X43),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X41)))))))) => ? [X44,X45,X46] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X44))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X42))),s('type.list.list'('type.string.char'),X43))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X44),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X28)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X45),s('type.ast.exp',X46))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X43),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X41))) & s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X44),s('type.list.list'('type.option.option'('type.modSem.v')),X28))) = s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X45),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X35),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X36),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X42))),s('type.list.list'('type.string.char'),X45))),s('type.ast.exp',X46)))))))))) | ? [X47] : (s('type.semanticPrimitives.v',X29) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X47))) & s('type.modSem.v',X30) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X47)))) | ? [X48,X33] : (s('type.semanticPrimitives.v',X29) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X33))) & s('type.modSem.v',X30) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X48))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X24),s('type.list.list'('type.option.option'('type.modSem.v')),X28))),s('type.list.list'('type.semanticPrimitives.v'),X33))),s('type.list.list'('type.modSem.v'),X48)))))) => p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X23),s('type.list.list'('type.option.option'('type.modSem.v')),X28))),s('type.semanticPrimitives.v',X29))),s('type.modSem.v',X30))))) & ! [X83,X84,X85] : (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X84) & s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X85)) | ? [X52,X33,X53,X34] : (s('type.list.list'('type.semanticPrimitives.v'),X84) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X52),s('type.list.list'('type.semanticPrimitives.v'),X33))) & s('type.list.list'('type.modSem.v'),X85) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X53),s('type.list.list'('type.modSem.v'),X34))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X23),s('type.list.list'('type.option.option'('type.modSem.v')),X83))),s('type.semanticPrimitives.v',X52))),s('type.modSem.v',X53)))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X24),s('type.list.list'('type.option.option'('type.modSem.v')),X83))),s('type.list.list'('type.semanticPrimitives.v'),X33))),s('type.list.list'('type.modSem.v'),X34)))))) => p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X24),s('type.list.list'('type.option.option'('type.modSem.v')),X83))),s('type.list.list'('type.semanticPrimitives.v'),X84))),s('type.list.list'('type.modSem.v'),X85))))) & ! [X54,X55,X56] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X55) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X56)) | ? [X14,X52,X37,X39,X53] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X55) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X14),s('type.semanticPrimitives.v',X52))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X37))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X56) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X14),s('type.modSem.v',X53))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X25),s('type.list.list'('type.option.option'('type.modSem.v')),X54))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X39)))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X23),s('type.list.list'('type.option.option'('type.modSem.v')),X54))),s('type.semanticPrimitives.v',X52))),s('type.modSem.v',X53)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X25),s('type.list.list'('type.option.option'('type.modSem.v')),X54))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X55))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X56))))) & ! [X57,X58,X59,X60] : (! [X14,X52] : ((~p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X14),s(fun('type.list.list'('type.string.char'),bool),X59)))) & s('type.option.option'('type.semanticPrimitives.v'),'const.option.SOME_1'(s('type.semanticPrimitives.v',X52))) = s('type.option.option'('type.semanticPrimitives.v'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X60),s('type.list.list'('type.string.char'),X14)))) => ? [X44,X61] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X44))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X58),s('type.list.list'('type.string.char'),X14))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X44),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X57)))))) & s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v',X61))) = s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X44),s('type.list.list'('type.option.option'('type.modSem.v')),X57))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X23),s('type.list.list'('type.option.option'('type.modSem.v')),X57))),s('type.semanticPrimitives.v',X52))),s('type.modSem.v',X61)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X26),s('type.list.list'('type.option.option'('type.modSem.v')),X57))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X58))),s(fun('type.list.list'('type.string.char'),bool),X59))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X60))))) & ! [X74,X75,X76,X77,X78,X79] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X26),s('type.list.list'('type.option.option'('type.modSem.v')),X74))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X76))),s(fun('type.list.list'('type.string.char'),bool),X78))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X79)))) & ! [X68,X39] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X39))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X77),s('type.list.list'('type.string.char'),X68))) => ? [X69] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X69))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X75),s('type.list.list'('type.string.char'),X68))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X26),s('type.list.list'('type.option.option'('type.modSem.v')),X74))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X69))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X39))))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X27),s('type.list.list'('type.option.option'('type.modSem.v')),X74))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X75))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X76))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X77))),s(fun('type.list.list'('type.string.char'),bool),X78))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X79)))))) => p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X24),s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.list.list'('type.semanticPrimitives.v'),X18))),s('type.list.list'('type.modSem.v'),X19))))))),
  file('thm.source_to_modProof.v_rel_rules|split|7','thm.source_to_modProof.v_rel3_def')).
fof(f132,plain,(
  ~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK12),s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0'),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))))),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK12),s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0'),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12])],[f45])).
fof(f45,plain,(
  ? [X0] : ~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0'),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))))),
  inference(ennf_transformation,[],[f25])).
fof(f25,plain,(
  ~! [X0] : p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0'),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0'),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0'),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))))),
  file('thm.source_to_modProof.v_rel_rules|split|7','thm.source_to_modProof.v_rel_rules|split|7')).
fof(f5489,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X2) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X1)) )),
  inference(resolution,[],[f5482,f237])).
fof(f237,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP6(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X3) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X4)) )),
  inference(cnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP6(X0,X1,X2,X3,X4) | (s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X4) & s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X3)) | (s('type.list.list'('type.semanticPrimitives.v'),X4) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',sK55(X4,X3,X2,X1,X0)),s('type.list.list'('type.semanticPrimitives.v'),sK56(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.modSem.v'),X3) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK57(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK58(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.v',sK55(X4,X3,X2,X1,X0)))),s('type.modSem.v',sK57(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.list.list'('type.semanticPrimitives.v'),sK56(X4,X3,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK58(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.semanticPrimitives.v'),X4) != s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X5),s('type.list.list'('type.semanticPrimitives.v'),X6))) | s('type.list.list'('type.modSem.v'),X3) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X7),s('type.list.list'('type.modSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.v',X5))),s('type.modSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.list.list'('type.semanticPrimitives.v'),X6))),s('type.list.list'('type.modSem.v'),X8)))))) | sP6(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK55,sK56,sK57,sK58])],[f111])).
fof(f111,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP6(X0,X1,X2,X3,X4) | (s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X4) & s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X3)) | ? [X9,X10,X11,X12] : (s('type.list.list'('type.semanticPrimitives.v'),X4) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X9),s('type.list.list'('type.semanticPrimitives.v'),X10))) & s('type.list.list'('type.modSem.v'),X3) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.v',X9))),s('type.modSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.list.list'('type.semanticPrimitives.v'),X10))),s('type.list.list'('type.modSem.v'),X12)))))) & (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.semanticPrimitives.v'),X4) != s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X5),s('type.list.list'('type.semanticPrimitives.v'),X6))) | s('type.list.list'('type.modSem.v'),X3) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X7),s('type.list.list'('type.modSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.v',X5))),s('type.modSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.list.list'('type.semanticPrimitives.v'),X6))),s('type.list.list'('type.modSem.v'),X8)))))) | sP6(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f110])).
fof(f110,plain,(
  ! [X4,X33,X3,X35,X34] : ((~sP6(X4,X33,X3,X35,X34) | (s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X34) & s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X35)) | ? [X36,X37,X38,X39] : (s('type.list.list'('type.semanticPrimitives.v'),X34) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X36),s('type.list.list'('type.semanticPrimitives.v'),X37))) & s('type.list.list'('type.modSem.v'),X35) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X38),s('type.list.list'('type.modSem.v'),X39))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.semanticPrimitives.v',X36))),s('type.modSem.v',X38)))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.modSem.v'),X39)))))) & (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X34) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X35)) & ! [X36,X37,X38,X39] : (s('type.list.list'('type.semanticPrimitives.v'),X34) != s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X36),s('type.list.list'('type.semanticPrimitives.v'),X37))) | s('type.list.list'('type.modSem.v'),X35) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X38),s('type.list.list'('type.modSem.v'),X39))) | ~p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.semanticPrimitives.v',X36))),s('type.modSem.v',X38)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.modSem.v'),X39)))))) | sP6(X4,X33,X3,X35,X34)))),
  inference(flattening,[],[f109])).
fof(f109,plain,(
  ! [X4,X33,X3,X35,X34] : ((~sP6(X4,X33,X3,X35,X34) | ((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X34) & s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X35)) | ? [X36,X37,X38,X39] : (s('type.list.list'('type.semanticPrimitives.v'),X34) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X36),s('type.list.list'('type.semanticPrimitives.v'),X37))) & s('type.list.list'('type.modSem.v'),X35) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X38),s('type.list.list'('type.modSem.v'),X39))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.semanticPrimitives.v',X36))),s('type.modSem.v',X38)))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.modSem.v'),X39))))))) & (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X34) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X35)) & ! [X36,X37,X38,X39] : (s('type.list.list'('type.semanticPrimitives.v'),X34) != s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X36),s('type.list.list'('type.semanticPrimitives.v'),X37))) | s('type.list.list'('type.modSem.v'),X35) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X38),s('type.list.list'('type.modSem.v'),X39))) | ~p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.semanticPrimitives.v',X36))),s('type.modSem.v',X38)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.modSem.v'),X39)))))) | sP6(X4,X33,X3,X35,X34)))),
  inference(nnf_transformation,[],[f71])).
fof(f5482,plain,(
  ( ! [X2,X0,X1] : (~sP6(sK24(X2,X1,X0),X0,sK23(X2,X1,X0),X2,X1) | sP11(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f5429])).
fof(f5429,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~sP6(sK24(X2,X1,X0),X0,sK23(X2,X1,X0),X2,X1) | sP11(X0,X1,X2)) )),
  inference(resolution,[],[f188,f192])).
fof(f192,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),sK24(X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.list.list'('type.modSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0,X1,X2] : ((~sP11(X0,X1,X2) | ! [X14,X15,X16,X17,X18] : (sP8(X14,X15,X18,X16) | (sP6(X15,sK17(X18,X17,X16,X15,X14,X2,X1,X0),X14,sK19(X18,X17,X16,X15,X14,X2,X1,X0),sK18(X18,X17,X16,X15,X14,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X15),s('type.list.list'('type.option.option'('type.modSem.v')),sK17(X18,X17,X16,X15,X14,X2,X1,X0)))),s('type.list.list'('type.semanticPrimitives.v'),sK18(X18,X17,X16,X15,X14,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK19(X18,X17,X16,X15,X14,X2,X1,X0)))))) | (sP7(X14,sK20(X18,X17,X16,X15,X14,X2,X1,X0),X16,sK22(X18,X17,X16,X15,X14,X2,X1,X0),sK21(X18,X17,X16,X15,X14,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X16),s('type.list.list'('type.option.option'('type.modSem.v')),sK20(X18,X17,X16,X15,X14,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK21(X18,X17,X16,X15,X14,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK22(X18,X17,X16,X15,X14,X2,X1,X0)))))) | sP9(X17,X14) | sP10(X18,X17) | p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X15),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.list.list'('type.modSem.v'),X2)))))) & ((~sP8(sK23(X2,X1,X0),sK24(X2,X1,X0),sK27(X2,X1,X0),sK25(X2,X1,X0)) & ! [X11,X12,X13] : (~sP6(sK24(X2,X1,X0),X11,sK23(X2,X1,X0),X13,X12) | p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),sK24(X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X11))),s('type.list.list'('type.semanticPrimitives.v'),X12))),s('type.list.list'('type.modSem.v'),X13))))) & ! [X8,X9,X10] : (~sP7(sK23(X2,X1,X0),X8,sK25(X2,X1,X0),X10,X9) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),sK25(X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10))))) & ~sP9(sK26(X2,X1,X0),sK23(X2,X1,X0)) & ~sP10(sK27(X2,X1,X0),sK26(X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),sK24(X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.list.list'('type.modSem.v'),X2))))) | sP11(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27])],[f94])).
fof(f94,plain,(
  ! [X0,X1,X2] : ((~sP11(X0,X1,X2) | ! [X14,X15,X16,X17,X18] : (sP8(X14,X15,X18,X16) | ? [X22,X23,X24] : (sP6(X15,X22,X14,X24,X23) & ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X15),s('type.list.list'('type.option.option'('type.modSem.v')),X22))),s('type.list.list'('type.semanticPrimitives.v'),X23))),s('type.list.list'('type.modSem.v'),X24))))) | ? [X19,X20,X21] : (sP7(X14,X19,X16,X21,X20) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X16),s('type.list.list'('type.option.option'('type.modSem.v')),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X21))))) | sP9(X17,X14) | sP10(X18,X17) | p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X15),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.list.list'('type.modSem.v'),X2)))))) & (? [X3,X4,X5,X6,X7] : (~sP8(X3,X4,X7,X5) & ! [X11,X12,X13] : (~sP6(X4,X11,X3,X13,X12) | p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X11))),s('type.list.list'('type.semanticPrimitives.v'),X12))),s('type.list.list'('type.modSem.v'),X13))))) & ! [X8,X9,X10] : (~sP7(X3,X8,X5,X10,X9) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10))))) & ~sP9(X6,X3) & ~sP10(X7,X6) & ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.list.list'('type.modSem.v'),X2))))) | sP11(X0,X1,X2)))),
  inference(rectify,[],[f93])).
fof(f93,plain,(
  ! [X0,X1,X2] : ((~sP11(X0,X1,X2) | ! [X3,X4,X5,X6,X7] : (sP8(X3,X4,X7,X5) | ? [X33,X34,X35] : (sP6(X4,X33,X3,X35,X34) & ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X34))),s('type.list.list'('type.modSem.v'),X35))))) | ? [X25,X26,X27] : (sP7(X3,X25,X5,X27,X26) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))) | sP9(X6,X3) | sP10(X7,X6) | p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.list.list'('type.modSem.v'),X2)))))) & (? [X3,X4,X5,X6,X7] : (~sP8(X3,X4,X7,X5) & ! [X33,X34,X35] : (~sP6(X4,X33,X3,X35,X34) | p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X34))),s('type.list.list'('type.modSem.v'),X35))))) & ! [X25,X26,X27] : (~sP7(X3,X25,X5,X27,X26) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))) & ~sP9(X6,X3) & ~sP10(X7,X6) & ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.list.list'('type.modSem.v'),X2))))) | sP11(X0,X1,X2)))),
  inference(nnf_transformation,[],[f76])).
fof(f188,plain,(
  ( ! [X2,X0,X12,X1,X13,X11] : (sP11(X0,X1,X2) | p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),sK24(X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X11))),s('type.list.list'('type.semanticPrimitives.v'),X12))),s('type.list.list'('type.modSem.v'),X13)))) | ~sP6(sK24(X2,X1,X0),X11,sK23(X2,X1,X0),X13,X12)) )),
  inference(cnf_transformation,[],[f95])).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 187
% Passive clauses: 1831
% Generated clauses: 5229
% Final active clauses: 107
% Final passive clauses: 1617
% Input formulas: 23
% Initial clauses: 144
% 
% Selected by SInE selection: 17
% SInE iterations: 1
% 
% Duplicate literals: 270
% Trivial inequalities: 52
% Fw subsumption resolutions: 767
% Fw demodulations: 33
% Bw demodulations: 68
% 
% Simple tautologies: 261
% Equational tautologies: 38
% Forward subsumptions: 1935
% 
% Binary resolution: 1183
% Factoring: 2
% Forward superposition: 1647
% Backward superposition: 946
% Self superposition: 48
% Equality factoring: 50
% Equality resolution: 18
% 
% Split clauses: 135
% Split components: 270
% SAT solver clauses: 146
% SAT solver unit clauses: 9
% SAT solver binary clauses: 30
% 
% Sat splits: 135
% Sat splitting refutations: 9
% 
% Memory used [KB]: 6396
% Time elapsed: 0.142 s
% ------------------------------
% ------------------------------
% Success in time 11.973 s
