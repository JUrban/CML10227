Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (47431)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 116
% Passive clauses: 1820
% Generated clauses: 20670
% Final active clauses: 95
% Final passive clauses: 1290
% Input formulas: 7
% Initial clauses: 16
% 
% Duplicate literals: 1004
% Trivial inequalities: 260
% Fw subsumption resolutions: 3778
% Fw demodulations: 2373
% Bw demodulations: 12
% 
% Simple tautologies: 328
% Equational tautologies: 63
% Forward subsumptions: 8742
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 406
% Factoring: 5
% Forward superposition: 6621
% Backward superposition: 5575
% Self superposition: 248
% Equality factoring: 174
% Equality resolution: 22
% 
% Split clauses: 989
% Split components: 2003
% SAT solver clauses: 2131
% SAT solver unit clauses: 29
% SAT solver binary clauses: 129
% 
% Sat splits: 989
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 2113
% TWLsolver calls for satisfiability: 231
% 
% Memory used [KB]: 10234
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f3266,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3254,f31,f50,f32,f52,f71,f73,f29,f47,f33,f53,f140,f144,f30,f45,f110,f116,f34,f55,f1559,f1560,f41,f59,f402,f403,f28,f48,f40,f60,f39,f61])).
fof(f61,plain,(
  ( ! [X2,X0,X8,X3,X1] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',sK6(X8,X3,X2,X1,X0)))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',sK7(X8,X3,X2,X1,X0)))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X8,X3,X2,X1,X0))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X8),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))) ) | $spl26),
  inference(cnf_transformation,[],[f61_D])).
fof(f61_D,plain,(
  ( ! [X2,X0,X8,X3,X1] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',sK6(X8,X3,X2,X1,X0)))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',sK7(X8,X3,X2,X1,X0)))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X8,X3,X2,X1,X0))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X8),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f39,plain,(
  ( ! [X2,X0,X8,X3,X1] : (p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X8),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',sK6(X8,X3,X2,X1,X0)))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',sK7(X8,X3,X2,X1,X0)))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X8,X3,X2,X1,X0))))) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))) )),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | ! [X8] : ((p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',sK6(X8,X3,X2,X1,X0)))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',sK7(X8,X3,X2,X1,X0)))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X8,X3,X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X8,X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',sK6(X8,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',sK7(X8,X3,X2,X1,X0))))))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X8),s('type.modSem.environment',sK6(X8,X3,X2,X1,X0)))),s('type.conSem.environment',sK7(X8,X3,X2,X1,X0)))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X8,X3,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X8),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))))) & ((! [X5,X6,X7] : (~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X5))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X6))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X6)))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK9(X3,X2,X1,X0)),s('type.modSem.environment',X5))),s('type.conSem.environment',X6))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK9(X3,X2,X1,X0)),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))) | p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9])],[f26])).
fof(f26,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | ! [X8] : (? [X9,X10,X11] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X9))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X10))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11)))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X10)))))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X8),s('type.modSem.environment',X9))),s('type.conSem.environment',X10))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X8),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))))) & (? [X4] : (! [X5,X6,X7] : (~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X5))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X6))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X6)))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X4),s('type.modSem.environment',X5))),s('type.conSem.environment',X6))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X4),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))) | p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))))),
  inference(rectify,[],[f25])).
fof(f25,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | ! [X4] : (? [X5,X6,X7] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X5))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X6))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7)))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X6)))))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X4),s('type.modSem.environment',X5))),s('type.conSem.environment',X6))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X4),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))))) & (? [X4] : (! [X5,X6,X7] : (~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X5))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X6))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X6)))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X4),s('type.modSem.environment',X5))),s('type.conSem.environment',X6))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X4),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))) | p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))))),
  inference(nnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) <=> ! [X4] : (? [X5,X6,X7] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X5))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X6))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7)))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X6)))))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X4),s('type.modSem.environment',X5))),s('type.conSem.environment',X6))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X4),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) <=> ! [X4] : (? [X5,X6,X7] : ((p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X5))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X6))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7)))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X6))))))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X4),s('type.modSem.environment',X5))),s('type.conSem.environment',X6))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X4),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) <=> ! [X4] : (! [X5,X6,X7] : ((p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X5))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X6))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7)))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X6))))))) => p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X4),s('type.modSem.environment',X5))),s('type.conSem.environment',X6))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))))) => p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X4),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X5,X16,X17,X18] : (p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X5),s('type.modSem.environment',X16),s('type.conSem.environment',X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18)))) <=> ! [X7] : (! [X19,X20,X21] : ((p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X19))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X20))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X20))))))) => p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X7),s('type.modSem.environment',X19))),s('type.conSem.environment',X20))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) => p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X7),s('type.modSem.environment',X16))),s('type.conSem.environment',X17))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18))))))),
  file('thm.mod_to_conProof.env_all_rel_ind','thm.mod_to_conProof.env_all_rel_def')).
fof(f60,plain,(
  ( ! [X2,X0,X8,X3,X1] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X8,X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',sK6(X8,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',sK7(X8,X3,X2,X1,X0))))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X8),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))) ) | $spl24),
  inference(cnf_transformation,[],[f60_D])).
fof(f60_D,plain,(
  ( ! [X2,X0,X8,X3,X1] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X8,X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',sK6(X8,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',sK7(X8,X3,X2,X1,X0))))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X8),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f40,plain,(
  ( ! [X2,X0,X8,X3,X1] : (p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X8),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X8,X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',sK6(X8,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',sK7(X8,X3,X2,X1,X0))))))) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))) )),
  inference(cnf_transformation,[],[f27])).
fof(f48,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X6))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X7))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X7)))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',X6))),s('type.conSem.environment',X7))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))))) ) | $spl4),
  inference(cnf_transformation,[],[f48_D])).
fof(f48_D,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X6))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X7))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X7)))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',X6))),s('type.conSem.environment',X7))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f28,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',X6))),s('type.conSem.environment',X7))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X7)))))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X6))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X7))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))))) )),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X5,X6,X7] : (~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X6))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X7))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X7)))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',X6))),s('type.conSem.environment',X7))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))))) & (p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',sK2),s('type.conSem.environment',sK3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4)))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',sK2))),s('type.conSem.environment',sK3))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f22])).
fof(f22,plain,(
  ? [X0,X1] : (! [X5,X6,X7] : (~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X6))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X7))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X7)))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X1),s('type.modSem.environment',X6))),s('type.conSem.environment',X7))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))))) & ? [X2,X3,X4] : (p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X2),s('type.conSem.environment',X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4)))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X1),s('type.modSem.environment',X2))),s('type.conSem.environment',X3))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))))))),
  inference(rectify,[],[f16])).
fof(f16,plain,(
  ? [X0,X1] : (! [X2,X3,X4] : (~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X3))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X4))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X4)))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X1),s('type.modSem.environment',X3))),s('type.conSem.environment',X4))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))))) & ? [X5,X6,X7] : (p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X5),s('type.conSem.environment',X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7)))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X1),s('type.modSem.environment',X5))),s('type.conSem.environment',X6))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))))))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ? [X0,X1] : (! [X2,X3,X4] : ((~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X3))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X4))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X4))))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X1),s('type.modSem.environment',X3))),s('type.conSem.environment',X4))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))))) & ? [X5,X6,X7] : (p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X5),s('type.conSem.environment',X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7)))) & ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X1),s('type.modSem.environment',X5))),s('type.conSem.environment',X6))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))))))),
  inference(ennf_transformation,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1] : (! [X2,X3,X4] : ((p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X3))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X4))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X4))))))) => p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X1),s('type.modSem.environment',X3))),s('type.conSem.environment',X4))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))))) => ! [X5,X6,X7] : (p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X5),s('type.conSem.environment',X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7)))) => p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X1),s('type.modSem.environment',X5))),s('type.conSem.environment',X6))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X7))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (! [X8,X9,X10] : ((p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X9))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X10))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8)))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X10))))))) => p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X7),s('type.modSem.environment',X9))),s('type.conSem.environment',X10))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))))) => ! [X11,X12,X13] : (p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.modSem.environment',X11),s('type.conSem.environment',X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13)))) => p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X7),s('type.modSem.environment',X11))),s('type.conSem.environment',X12))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (! [X8,X9,X10] : ((p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.modSem.environment_c_1'(s('type.modSem.environment',X9))),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),'const.conSem.environment_exh_1'(s('type.conSem.environment',X10))),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8)))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',X10))))))) => p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X7),s('type.modSem.environment',X9))),s('type.conSem.environment',X10))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))))) => ! [X11,X12,X13] : (p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.modSem.environment',X11),s('type.conSem.environment',X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13)))) => p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X7),s('type.modSem.environment',X11))),s('type.conSem.environment',X12))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))))))),
  file('thm.mod_to_conProof.env_all_rel_ind','thm.mod_to_conProof.env_all_rel_ind')).
fof(f403,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',sK6(X0,X3,X2,X1,sK0)))),s('type.conSem.environment',sK7(X0,X3,X2,X1,sK0)))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X0,X3,X2,X1,sK0))))) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X0),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))) ) | $spl144),
  inference(cnf_transformation,[],[f403_D])).
fof(f403_D,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',sK6(X0,X3,X2,X1,sK0)))),s('type.conSem.environment',sK7(X0,X3,X2,X1,sK0)))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X0,X3,X2,X1,sK0))))) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X0),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f402,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X0),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',sK6(X0,X3,X2,X1,sK0)))),s('type.conSem.environment',sK7(X0,X3,X2,X1,sK0)))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X0,X3,X2,X1,sK0)))))) ) | ($spl4 | $spl24 | $spl26)),
  inference(subsumption_resolution,[],[f395,f60])).
fof(f395,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X0),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X0,X3,X2,X1,sK0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.modSem.environment_v_1'(s('type.modSem.environment',sK6(X0,X3,X2,X1,sK0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.conSem.environment_v_1'(s('type.conSem.environment',sK7(X0,X3,X2,X1,sK0))))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',sK6(X0,X3,X2,X1,sK0)))),s('type.conSem.environment',sK7(X0,X3,X2,X1,sK0)))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X0,X3,X2,X1,sK0)))))) ) | ($spl4 | $spl26)),
  inference(resolution,[],[f61,f48])).
fof(f59,plain,(
  ( ! [X2,X0,X8,X3,X1] : (~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X8),s('type.modSem.environment',sK6(X8,X3,X2,X1,X0)))),s('type.conSem.environment',sK7(X8,X3,X2,X1,X0)))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X8,X3,X2,X1,X0))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X8),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))) ) | $spl22),
  inference(cnf_transformation,[],[f59_D])).
fof(f59_D,plain,(
  ( ! [X2,X0,X8,X3,X1] : (~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X8),s('type.modSem.environment',sK6(X8,X3,X2,X1,X0)))),s('type.conSem.environment',sK7(X8,X3,X2,X1,X0)))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X8,X3,X2,X1,X0))))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X8),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f41,plain,(
  ( ! [X2,X0,X8,X3,X1] : (p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X8),s('type.modSem.environment',X1))),s('type.conSem.environment',X2))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),X8),s('type.modSem.environment',sK6(X8,X3,X2,X1,X0)))),s('type.conSem.environment',sK7(X8,X3,X2,X1,X0)))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK8(X8,X3,X2,X1,X0))))) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.modSem.environment',X1),s('type.conSem.environment',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))))) )),
  inference(cnf_transformation,[],[f27])).
fof(f1560,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',X0))),s('type.conSem.environment',X1))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',X0),s('type.conSem.environment',X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))))) ) | $spl250),
  inference(cnf_transformation,[],[f1560_D])).
fof(f1560_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',X0))),s('type.conSem.environment',X1))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',X0),s('type.conSem.environment',X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))))) ) <=> ~$spl250),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl250])])).
fof(f1559,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',X0),s('type.conSem.environment',X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',X0))),s('type.conSem.environment',X1))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))))) ) | ($spl22 | $spl144)),
  inference(duplicate_literal_removal,[],[f1546])).
fof(f1546,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',X0),s('type.conSem.environment',X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',X0))),s('type.conSem.environment',X1))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) | p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',X0))),s('type.conSem.environment',X1))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',X0),s('type.conSem.environment',X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))))) ) | ($spl22 | $spl144)),
  inference(resolution,[],[f403,f59])).
fof(f55,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1)) ) | $spl14),
  inference(cnf_transformation,[],[f55_D])).
fof(f55_D,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f34,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f11])).
fof(f11,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X14,X15] : ((p(s(bool,X14)) => p(s(bool,X15))) => ((p(s(bool,X15)) => p(s(bool,X14))) => s(bool,X14) = s(bool,X15)))),
  file('thm.mod_to_conProof.env_all_rel_ind','thm.bool.IMP_ANTISYM_AX')).
fof(f116,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl38),
  inference(cnf_transformation,[],[f116_D])).
fof(f116_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f110,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | ($spl9 | $spl14)),
  inference(resolution,[],[f55,f52])).
fof(f45,plain,(
  ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',sK2))),s('type.conSem.environment',sK3))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4)))) | $spl1),
  inference(cnf_transformation,[],[f45_D])).
fof(f45_D,plain,(
  ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',sK2))),s('type.conSem.environment',sK3))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f30,plain,(
  ~p(s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',sK2))),s('type.conSem.environment',sK3))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4))))),
  inference(cnf_transformation,[],[f23])).
fof(f144,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',sK2))),s('type.conSem.environment',sK3))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4))) | $spl48),
  inference(cnf_transformation,[],[f144_D])).
fof(f144_D,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',sK2))),s('type.conSem.environment',sK3))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f140,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool),happ(s(fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool)),happ(s(fun('type.modSem.environment',fun('type.conSem.environment',fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),bool))),sK1),s('type.modSem.environment',sK2))),s('type.conSem.environment',sK3))),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4))) | ($spl1 | $spl38)),
  inference(resolution,[],[f45,f116])).
fof(f53,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl10),
  inference(cnf_transformation,[],[f53_D])).
fof(f53_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f33,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.mod_to_conProof.env_all_rel_ind',aHL_BOOL_CASES)).
fof(f47,plain,(
  p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',sK2),s('type.conSem.environment',sK3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4)))) | $spl2),
  inference(cnf_transformation,[],[f47_D])).
fof(f47_D,plain,(
  p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',sK2),s('type.conSem.environment',sK3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f29,plain,(
  p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',sK2),s('type.conSem.environment',sK3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4))))),
  inference(cnf_transformation,[],[f23])).
fof(f73,plain,(
  s(bool,'T_0') = s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',sK2),s('type.conSem.environment',sK3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4))) | $spl32),
  inference(cnf_transformation,[],[f73_D])).
fof(f73_D,plain,(
  s(bool,'T_0') = s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',sK2),s('type.conSem.environment',sK3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f71,plain,(
  s(bool,'T_0') = s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',sK2),s('type.conSem.environment',sK3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4))) | ($spl2 | $spl9 | $spl10)),
  inference(subsumption_resolution,[],[f66,f52])).
fof(f66,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',sK2),s('type.conSem.environment',sK3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4))) | ($spl2 | $spl10)),
  inference(superposition,[],[f47,f53])).
fof(f52,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f52_D])).
fof(f52_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f32,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f10])).
fof(f10,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.mod_to_conProof.env_all_rel_ind',aHL_FALSITY)).
fof(f50,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f50_D])).
fof(f50_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f31,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.mod_to_conProof.env_all_rel_ind',aHL_TRUTH)).
fof(f3254,plain,(
  $false | ($spl6 | $spl9 | $spl32 | $spl48 | $spl250)),
  inference(subsumption_resolution,[],[f3253,f50])).
fof(f3253,plain,(
  ~p(s(bool,'T_0')) | ($spl9 | $spl32 | $spl48 | $spl250)),
  inference(forward_demodulation,[],[f3252,f73])).
fof(f3252,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',sK2),s('type.conSem.environment',sK3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4)))) | ($spl9 | $spl48 | $spl250)),
  inference(subsumption_resolution,[],[f3236,f52])).
fof(f3236,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.mod_to_conProof.env_all_rel_4'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK0),s('type.modSem.environment',sK2),s('type.conSem.environment',sK3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK4)))) | ($spl48 | $spl250)),
  inference(superposition,[],[f1560,f144])).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 74
% Passive clauses: 278
% Generated clauses: 3200
% Final active clauses: 70
% Final passive clauses: 191
% Input formulas: 7
% Initial clauses: 16
% 
% Duplicate literals: 196
% Trivial inequalities: 22
% Fw subsumption resolutions: 312
% Fw demodulations: 149
% Bw demodulations: 16
% Condensations: 217
% 
% Simple tautologies: 66
% Equational tautologies: 21
% Forward subsumptions: 1423
% 
% Binary resolution: 152
% Factoring: 2
% Forward superposition: 946
% Backward superposition: 762
% Self superposition: 85
% Equality factoring: 38
% Equality resolution: 7
% 
% Split clauses: 43
% Split components: 90
% SAT solver clauses: 529
% SAT solver unit clauses: 18
% SAT solver binary clauses: 11
% SAT solver learnt clauses: 1
% 
% Sat splits: 43
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 528
% TWLsolver calls for satisfiability: 181
% 
% Memory used [KB]: 5500
% Time elapsed: 0.219 s
% ------------------------------
% ------------------------------
% Success in time 0.84 s
