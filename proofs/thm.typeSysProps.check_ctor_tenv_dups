Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.typeSysProps
% (124504)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 161
% Passive clauses: 2810
% Generated clauses: 17373
% Final active clauses: 149
% Final passive clauses: 2516
% Input formulas: 65
% Initial clauses: 114
% 
% Duplicate literals: 405
% Trivial inequalities: 375
% Fw subsumption resolutions: 866
% Fw demodulations: 2450
% Bw demodulations: 6
% 
% Simple tautologies: 313
% Equational tautologies: 21
% Forward subsumptions: 9486
% 
% Binary resolution: 290
% Factoring: 1
% Forward superposition: 7133
% Backward superposition: 5460
% Self superposition: 139
% Equality factoring: 36
% Equality resolution: 41
% 
% Split clauses: 124
% Split components: 254
% SAT solver clauses: 337
% SAT solver unit clauses: 15
% SAT solver binary clauses: 121
% 
% Sat splits: 124
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 337
% TWLsolver calls for satisfiability: 93
% 
% Memory used [KB]: 18549
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.typeSysProps
% (124533)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 116
% Passive clauses: 713
% Generated clauses: 8713
% Final active clauses: 108
% Final passive clauses: 482
% Input formulas: 65
% Initial clauses: 114
% 
% Duplicate literals: 15
% Trivial inequalities: 95
% Fw subsumption resolutions: 396
% Fw demodulations: 2465
% Bw demodulations: 117
% Condensations: 44
% Global subsumptions: 8
% 
% Simple tautologies: 53
% Equational tautologies: 5
% Forward subsumptions: 3954
% 
% Binary resolution: 38
% Forward superposition: 2626
% Backward superposition: 2003
% Self superposition: 71
% Equality factoring: 2
% Equality resolution: 50
% 
% Split clauses: 6
% Split components: 12
% SAT solver clauses: 1076
% SAT solver unit clauses: 150
% SAT solver binary clauses: 44
% SAT solver learnt clauses: 16
% 
% Sat splits: 6
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 1044
% TWLsolver calls for satisfiability: 431
% 
% Memory used [KB]: 14200
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.typeSysProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.typeSysProps
% SZS output start Proof for thm.typeSysProps
fof(f35223,plain,(
  $false),
  inference(subsumption_resolution,[],[f35222,f236])).
fof(f236,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f69])).
fof(f69,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.typeSysProps.check_ctor_tenv_dups',aHL_FALSITY)).
fof(f35222,plain,(
  p(s(bool,'F_0'))),
  inference(forward_demodulation,[],[f35221,f386])).
fof(f386,plain,(
  s(bool,'F_0') = s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(sK3,'type.list.list'('type.pair.prod'(sK4,'type.list.list'('type.ast.t')))))),sK7)))),
  inference(unit_resulting_resolution,[],[f233,f244])).
fof(f244,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f190])).
fof(f190,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X14] : (s(bool,'F_0') = s(bool,X14) <=> ~p(s(bool,X14)))),
  file('thm.typeSysProps.check_ctor_tenv_dups','thm.bool.EQ_CLAUSES|split|3')).
fof(f233,plain,(
  ~p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(sK3,'type.list.list'('type.pair.prod'(sK4,'type.list.list'('type.ast.t')))))),sK7))))),
  inference(cnf_transformation,[],[f187])).
fof(f187,plain,(
  p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s(sK0,sK6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(sK1),sK2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(sK1),sK2))),sK5),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(sK3,'type.list.list'('type.pair.prod'(sK4,'type.list.list'('type.ast.t')))))),sK7)))) & ~p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(sK3,'type.list.list'('type.pair.prod'(sK4,'type.list.list'('type.ast.t')))))),sK7))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7])],[f173])).
fof(f173,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7] : (p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s(X0,X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) & ~p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))))),
  inference(ennf_transformation,[],[f68])).
fof(f68,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7] : (p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s(X0,X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) => p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))))),
  inference(flattening,[],[f67])).
fof(f67,plain,(
  ~! [X0,X1,X2,X3,X4] : ! [X5,X6,X7] : (p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s(X0,X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) => p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10] : ! [X11,X12,X13] : (p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s(X6,X12),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X7),X8))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X7),X8))),X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X9,'type.list.list'('type.pair.prod'(X10,'type.list.list'('type.ast.t')))))),X13)))) => p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X9,'type.list.list'('type.pair.prod'(X10,'type.list.list'('type.ast.t')))))),X13)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10] : ! [X11,X12,X13] : (p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s(X6,X12),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X7),X8))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X7),X8))),X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X9,'type.list.list'('type.pair.prod'(X10,'type.list.list'('type.ast.t')))))),X13)))) => p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X9,'type.list.list'('type.pair.prod'(X10,'type.list.list'('type.ast.t')))))),X13)))))),
  file('thm.typeSysProps.check_ctor_tenv_dups','thm.typeSysProps.check_ctor_tenv_dups')).
fof(f35221,plain,(
  p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(sK3,'type.list.list'('type.pair.prod'(sK4,'type.list.list'('type.ast.t')))))),sK7))))),
  inference(subsumption_resolution,[],[f35030,f234])).
fof(f234,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f8])).
fof(f8,axiom,(
  p(s(bool,'T_0'))),
  file('thm.typeSysProps.check_ctor_tenv_dups','thm.bool.TRUTH')).
fof(f35030,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(sK3,'type.list.list'('type.pair.prod'(sK4,'type.list.list'('type.ast.t')))))),sK7))))),
  inference(superposition,[],[f337,f617])).
fof(f617,plain,(
  s(bool,'T_0') = s(bool,'const.typeSystem.check_ctor_tenv_3'(s(sK0,sK6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(sK1),sK2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(sK1),sK2))),sK5),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(sK3,'type.list.list'('type.pair.prod'(sK4,'type.list.list'('type.ast.t')))))),sK7)))),
  inference(unit_resulting_resolution,[],[f232,f240])).
fof(f240,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f188])).
fof(f188,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X14] : (s(bool,'T_0') = s(bool,X14) <=> p(s(bool,X14)))),
  file('thm.typeSysProps.check_ctor_tenv_dups','thm.bool.EQ_CLAUSES|split|0')).
fof(f232,plain,(
  p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s(sK0,sK6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(sK1),sK2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(sK1),sK2))),sK5),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(sK3,'type.list.list'('type.pair.prod'(sK4,'type.list.list'('type.ast.t')))))),sK7))))),
  inference(cnf_transformation,[],[f187])).
fof(f337,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s(X0,X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) | p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7))))) )),
  inference(cnf_transformation,[],[f230])).
fof(f230,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : ((~p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s(X0,X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) | (p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),bool),happ(s(fun(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),bool)),'const.list.EVERY_0'),s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool),happ(s(fun(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),'_dst_x0x1_2'(s(fun(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool))),'_dst_x000x100x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),bool),'const.list.ALL_DISTINCT_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool),fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),'const.list.EVERY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool)),'_dst_x0x1_2'(s(fun(fun(X4,fun('type.list.list'('type.ast.t'),bool)),fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun(X4,fun('type.list.list'('type.ast.t'),bool))),'_dst_x000x101x001_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.t'),bool)),'_dst_x0x1_2'(s(fun(fun('type.ast.t',bool),fun('type.list.list'('type.ast.t'),bool)),'const.list.EVERY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.ast.t',bool)),'const.typeSystem.check_freevars_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun(fun('type.ast.t',bool),fun('type.list.list'('type.ast.t'),bool)),'const.list.EVERY_0'),s(fun('type.ast.t',bool),'const.typeSystem.check_type_names_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),X6))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) & p(s(bool,happ(s(fun('type.list.list'(X3),bool),'const.list.ALL_DISTINCT_0'),s('type.list.list'(X3),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),X3),'_dst_x1x0_2'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),fun(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3)),X3)),'const.pair.pair_CASE_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3)),happ(s(fun(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3),fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3))),'_dst_x0_0'),s(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3),'_dst_x1x0_2'(s(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),fun(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),X3)),X3)),'const.pair.pair_CASE_0'),s(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),X3)),'_dst_x0_0'))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))))))) & (~p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),bool),happ(s(fun(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),bool)),'const.list.EVERY_0'),s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool),happ(s(fun(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),'_dst_x0x1_2'(s(fun(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool))),'_dst_x000x100x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),bool),'const.list.ALL_DISTINCT_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool),fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),'const.list.EVERY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool)),'_dst_x0x1_2'(s(fun(fun(X4,fun('type.list.list'('type.ast.t'),bool)),fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun(X4,fun('type.list.list'('type.ast.t'),bool))),'_dst_x000x101x001_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.t'),bool)),'_dst_x0x1_2'(s(fun(fun('type.ast.t',bool),fun('type.list.list'('type.ast.t'),bool)),'const.list.EVERY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.ast.t',bool)),'const.typeSystem.check_freevars_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun(fun('type.ast.t',bool),fun('type.list.list'('type.ast.t'),bool)),'const.list.EVERY_0'),s(fun('type.ast.t',bool),'const.typeSystem.check_type_names_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),X6))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'(X3),bool),'const.list.ALL_DISTINCT_0'),s('type.list.list'(X3),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),X3),'_dst_x1x0_2'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),fun(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3)),X3)),'const.pair.pair_CASE_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3)),happ(s(fun(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3),fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3))),'_dst_x0_0'),s(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3),'_dst_x1x0_2'(s(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),fun(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),X3)),X3)),'const.pair.pair_CASE_0'),s(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),X3)),'_dst_x0_0'))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))))) | p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s(X0,X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7))))))),
  inference(flattening,[],[f229])).
fof(f229,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : ((~p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s(X0,X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) | (p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),bool),happ(s(fun(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),bool)),'const.list.EVERY_0'),s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool),happ(s(fun(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),'_dst_x0x1_2'(s(fun(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool))),'_dst_x000x100x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),bool),'const.list.ALL_DISTINCT_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool),fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),'const.list.EVERY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool)),'_dst_x0x1_2'(s(fun(fun(X4,fun('type.list.list'('type.ast.t'),bool)),fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun(X4,fun('type.list.list'('type.ast.t'),bool))),'_dst_x000x101x001_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.t'),bool)),'_dst_x0x1_2'(s(fun(fun('type.ast.t',bool),fun('type.list.list'('type.ast.t'),bool)),'const.list.EVERY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.ast.t',bool)),'const.typeSystem.check_freevars_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun(fun('type.ast.t',bool),fun('type.list.list'('type.ast.t'),bool)),'const.list.EVERY_0'),s(fun('type.ast.t',bool),'const.typeSystem.check_type_names_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),X6))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) & p(s(bool,happ(s(fun('type.list.list'(X3),bool),'const.list.ALL_DISTINCT_0'),s('type.list.list'(X3),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),X3),'_dst_x1x0_2'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),fun(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3)),X3)),'const.pair.pair_CASE_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3)),happ(s(fun(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3),fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3))),'_dst_x0_0'),s(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3),'_dst_x1x0_2'(s(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),fun(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),X3)),X3)),'const.pair.pair_CASE_0'),s(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),X3)),'_dst_x0_0'))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))))))) & ((~p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),bool),happ(s(fun(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),bool)),'const.list.EVERY_0'),s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool),happ(s(fun(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),'_dst_x0x1_2'(s(fun(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool))),'_dst_x000x100x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),bool),'const.list.ALL_DISTINCT_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool),fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),'const.list.EVERY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool)),'_dst_x0x1_2'(s(fun(fun(X4,fun('type.list.list'('type.ast.t'),bool)),fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun(X4,fun('type.list.list'('type.ast.t'),bool))),'_dst_x000x101x001_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.t'),bool)),'_dst_x0x1_2'(s(fun(fun('type.ast.t',bool),fun('type.list.list'('type.ast.t'),bool)),'const.list.EVERY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.ast.t',bool)),'const.typeSystem.check_freevars_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun(fun('type.ast.t',bool),fun('type.list.list'('type.ast.t'),bool)),'const.list.EVERY_0'),s(fun('type.ast.t',bool),'const.typeSystem.check_type_names_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),X6))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'(X3),bool),'const.list.ALL_DISTINCT_0'),s('type.list.list'(X3),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),X3),'_dst_x1x0_2'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),fun(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3)),X3)),'const.pair.pair_CASE_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3)),happ(s(fun(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3),fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3))),'_dst_x0_0'),s(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3),'_dst_x1x0_2'(s(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),fun(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),X3)),X3)),'const.pair.pair_CASE_0'),s(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),X3)),'_dst_x0_0'))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7))))))) | p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s(X0,X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7))))))),
  inference(nnf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s(X0,X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) <=> (p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),bool),happ(s(fun(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),bool)),'const.list.EVERY_0'),s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool),happ(s(fun(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),'_dst_x0x1_2'(s(fun(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool))),'_dst_x000x100x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),bool),'const.list.ALL_DISTINCT_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool),fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),'const.list.EVERY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool)),'_dst_x0x1_2'(s(fun(fun(X4,fun('type.list.list'('type.ast.t'),bool)),fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun(X4,fun('type.list.list'('type.ast.t'),bool))),'_dst_x000x101x001_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.t'),bool)),'_dst_x0x1_2'(s(fun(fun('type.ast.t',bool),fun('type.list.list'('type.ast.t'),bool)),'const.list.EVERY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.ast.t',bool)),'const.typeSystem.check_freevars_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun(fun('type.ast.t',bool),fun('type.list.list'('type.ast.t'),bool)),'const.list.EVERY_0'),s(fun('type.ast.t',bool),'const.typeSystem.check_type_names_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),X6))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) & p(s(bool,happ(s(fun('type.list.list'(X3),bool),'const.list.ALL_DISTINCT_0'),s('type.list.list'(X3),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),X3),'_dst_x1x0_2'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),fun(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3)),X3)),'const.pair.pair_CASE_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3)),happ(s(fun(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3),fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3))),'_dst_x0_0'),s(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3),'_dst_x1x0_2'(s(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),fun(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),X3)),X3)),'const.pair.pair_CASE_0'),s(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),X3)),'_dst_x0_0'))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7))))))))),
  inference(flattening,[],[f161])).
fof(f161,plain,(
  ! [X0,X1,X2,X3,X4] : ! [X5,X6,X7] : (p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s(X0,X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) <=> (p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),bool),happ(s(fun(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),bool)),'const.list.EVERY_0'),s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool),happ(s(fun(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),'_dst_x0x1_2'(s(fun(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool))),'_dst_x000x100x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),bool),'const.list.ALL_DISTINCT_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool),fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),bool)),'const.list.EVERY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool)),'_dst_x0x1_2'(s(fun(fun(X4,fun('type.list.list'('type.ast.t'),bool)),fun('type.pair.prod'(X4,'type.list.list'('type.ast.t')),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun(X4,fun('type.list.list'('type.ast.t'),bool))),'_dst_x000x101x001_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.t'),bool)),'_dst_x0x1_2'(s(fun(fun('type.ast.t',bool),fun('type.list.list'('type.ast.t'),bool)),'const.list.EVERY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.ast.t',bool)),'const.typeSystem.check_freevars_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun(fun('type.ast.t',bool),fun('type.list.list'('type.ast.t'),bool)),'const.list.EVERY_0'),s(fun('type.ast.t',bool),'const.typeSystem.check_type_names_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X1),X2))),X6))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7)))) & p(s(bool,happ(s(fun('type.list.list'(X3),bool),'const.list.ALL_DISTINCT_0'),s('type.list.list'(X3),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),X3),'_dst_x1x0_2'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))))),fun(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3)),X3)),'const.pair.pair_CASE_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3)),happ(s(fun(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3),fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3))),'_dst_x0_0'),s(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),X3),'_dst_x1x0_2'(s(fun('type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))),fun(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),X3)),X3)),'const.pair.pair_CASE_0'),s(fun(X3,fun('type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t'))),X3)),'_dst_x0_0'))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X3,'type.list.list'('type.pair.prod'(X4,'type.list.list'('type.ast.t')))))),X7))))))))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X6,X9,X10,X7,X8] : ! [X12,X35,X29] : (p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s(X6,X12),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X9),X10))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X9),X10))),X35),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t')))))),X29)))) <=> (p(s(bool,'const.semanticPrimitives.check_dup_ctors_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t')))))),X29)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t')))))),bool),happ(s(fun(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t'))))),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t')))))),bool)),'const.list.EVERY_0'),s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t'))))),bool),happ(s(fun(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t')))),bool)),fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t'))))),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t')))),bool)),'_dst_x0x1_2'(s(fun(fun(X7,fun('type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t'))),bool)),fun('type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t')))),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun(X7,fun('type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t'))),bool))),'_dst_x000x100x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),bool),'const.list.ALL_DISTINCT_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t'))),bool)),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'(X8,'type.list.list'('type.ast.t')),bool),fun('type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t'))),bool)),'const.list.EVERY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X8,'type.list.list'('type.ast.t')),bool)),'_dst_x0x1_2'(s(fun(fun(X8,fun('type.list.list'('type.ast.t'),bool)),fun('type.pair.prod'(X8,'type.list.list'('type.ast.t')),bool)),'const.pair.UNCURRY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun(X8,fun('type.list.list'('type.ast.t'),bool))),'_dst_x000x101x001_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.list.list'('type.ast.t'),bool)),'_dst_x0x1_2'(s(fun(fun('type.ast.t',bool),fun('type.list.list'('type.ast.t'),bool)),'const.list.EVERY_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.ast.t',bool)),'const.typeSystem.check_freevars_1'(s('type.num.num','const.num.|48|_0'))))),s(fun('type.list.list'('type.ast.t'),bool),happ(s(fun(fun('type.ast.t',bool),fun('type.list.list'('type.ast.t'),bool)),'const.list.EVERY_0'),s(fun('type.ast.t',bool),'const.typeSystem.check_type_names_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X9),X10))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'(X9),X10))),X35))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t')))))),X29)))) & p(s(bool,happ(s(fun('type.list.list'(X7),bool),'const.list.ALL_DISTINCT_0'),s('type.list.list'(X7),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t'))))),X7),'_dst_x1x0_2'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t'))))),fun(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t')))),X7)),X7)),'const.pair.pair_CASE_0'),s(fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t')))),X7)),happ(s(fun(fun('type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t')))),X7),fun('type.list.list'('type.list.list'('type.string.char')),fun('type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t')))),X7))),'_dst_x0_0'),s(fun('type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t')))),X7),'_dst_x1x0_2'(s(fun('type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t')))),fun(fun(X7,fun('type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t'))),X7)),X7)),'const.pair.pair_CASE_0'),s(fun(X7,fun('type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t'))),X7)),'_dst_x0_0'))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'(X7,'type.list.list'('type.pair.prod'(X8,'type.list.list'('type.ast.t')))))),X29))))))))),
  file('thm.typeSysProps.check_ctor_tenv_dups','thm.typeSystem.check_ctor_tenv_def')).
% SZS output end Proof for thm.typeSysProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 197
% Passive clauses: 2159
% Generated clauses: 35070
% Final active clauses: 163
% Final passive clauses: 1753
% Input formulas: 65
% Initial clauses: 114
% 
% Duplicate literals: 669
% Trivial inequalities: 331
% Fw subsumption resolutions: 676
% Fw demodulations: 6295
% Bw demodulations: 229
% Condensations: 1040
% Global subsumptions: 5
% 
% Simple tautologies: 386
% Equational tautologies: 211
% Forward subsumptions: 23093
% Bw demodulations to eq. taut.: 8
% 
% Unit resulting resolution: 3188
% Forward superposition: 12425
% Backward superposition: 9567
% Self superposition: 230
% Equality factoring: 46
% Equality resolution: 26
% 
% Split clauses: 14
% Split components: 28
% SAT solver clauses: 2222
% SAT solver unit clauses: 509
% SAT solver binary clauses: 963
% 
% Sat splits: 14
% Sat splitting refutations: 28
% 
% Memory used [KB]: 45415
% Time elapsed: 1.653 s
% ------------------------------
% ------------------------------
% Success in time 3 s
