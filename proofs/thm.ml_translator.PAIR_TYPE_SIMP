Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.ml_translator
% (44194)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 126
% Passive clauses: 2345
% Generated clauses: 21125
% Final active clauses: 120
% Final passive clauses: 2148
% Input formulas: 14
% Initial clauses: 16
% 
% Duplicate literals: 1455
% Trivial inequalities: 68
% Fw subsumption resolutions: 2373
% Fw demodulations: 3711
% Bw demodulations: 4
% 
% Simple tautologies: 237
% Equational tautologies: 24
% Forward subsumptions: 9808
% 
% Binary resolution: 60
% Forward superposition: 8634
% Backward superposition: 4644
% Self superposition: 157
% Equality factoring: 34
% Equality resolution: 18
% 
% Split clauses: 662
% Split components: 1351
% SAT solver clauses: 1193
% SAT solver unit clauses: 8
% SAT solver binary clauses: 61
% 
% Sat splits: 662
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1172
% TWLsolver calls for satisfiability: 102
% 
% Memory used [KB]: 15863
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.ml_translator
% (44220)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 77
% Passive clauses: 1041
% Generated clauses: 8408
% Final active clauses: 74
% Final passive clauses: 921
% Input formulas: 14
% Initial clauses: 16
% 
% Duplicate literals: 399
% Trivial inequalities: 44
% Fw subsumption resolutions: 418
% Fw demodulations: 743
% Bw demodulations: 42
% Condensations: 632
% 
% Simple tautologies: 102
% Equational tautologies: 19
% Forward subsumptions: 3191
% 
% Binary resolution: 39
% Forward superposition: 2757
% Backward superposition: 2101
% Self superposition: 120
% Equality factoring: 42
% Equality resolution: 13
% 
% Split clauses: 136
% Split components: 279
% SAT solver clauses: 1726
% SAT solver unit clauses: 25
% SAT solver binary clauses: 49
% 
% Sat splits: 136
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1726
% TWLsolver calls for satisfiability: 102
% 
% Memory used [KB]: 16758
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.ml_translator
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.ml_translator
% SZS output start Proof for thm.ml_translator
fof(f3679,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f68,f71,f69,f1663,f1664,f1672,f1670,f1665,f1666,f1675,f1667,f1677,f1674,f2491,f2475,f2460,f2455,f2446,f2500,f2445,f2527,f2896,f2898,f3095,f3096,f3097,f3099,f3100,f3285,f2499,f3286,f3667,f3670])).
fof(f3670,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f3669,f45])).
fof(f45,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.ml_translator.PAIR_TYPE_SIMP',aHL_TRUTH)).
fof(f3669,plain,(
  ~p(s(bool,'T_0')) | $spl8),
  inference(forward_demodulation,[],[f3668,f1508])).
fof(f1508,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X1)))) )),
  inference(equality_resolution,[],[f354])).
fof(f354,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) )),
  inference(condensation,[],[f353])).
fof(f353,plain,(
  ( ! [X10,X8,X11,X9] : (s(X8,X9) != s(X8,X10) | s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),happ(s(fun(X8,fun(X8,bool)),'=_0'),s(X8,X9))),s(X8,X10))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f344,f65])).
fof(f65,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f46,f47])).
fof(f47,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.ml_translator.PAIR_TYPE_SIMP',aHL_BOOL_CASES)).
fof(f46,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.ml_translator.PAIR_TYPE_SIMP',aHL_FALSITY)).
fof(f344,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,X11)) | s(X8,X9) != s(X8,X10) | s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),happ(s(fun(X8,fun(X8,bool)),'=_0'),s(X8,X9))),s(X8,X10))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f56,f63])).
fof(f63,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f47,f47])).
fof(f56,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) != s(X0,X2)) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2))))))),
  inference(nnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X16,X17,X18] : (p(s(bool,happ(s(fun(X16,bool),happ(s(fun(X16,fun(X16,bool)),'=_0'),s(X16,X17))),s(X16,X18)))) <=> s(X16,X17) = s(X16,X18))),
  file('thm.ml_translator.PAIR_TYPE_SIMP',arity_0_HL_EQ)).
fof(f3668,plain,(
  ~p(s(bool,happ(s(fun(fun('type.semanticPrimitives.v',bool),bool),happ(s(fun(fun('type.semanticPrimitives.v',bool),fun(fun('type.semanticPrimitives.v',bool),bool)),'=_0'),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))))),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2)))))) | $spl8),
  inference(forward_demodulation,[],[f3665,f57])).
fof(f57,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X19,X20,X21] : ! [X22,X23,X24] : s(X19,happ(s(fun(X20,X19),'_dst_x1x0_2'(s(fun(X20,fun(X21,X19)),X22),s(X21,X23))),s(X20,X24))) = s(X19,happ(s(fun(X21,X19),happ(s(fun(X20,fun(X21,X19)),X22),s(X20,X24))),s(X21,X23)))),
  file('thm.ml_translator.PAIR_TYPE_SIMP','_dst_x1x0_ax')).
fof(f3665,plain,(
  ~p(s(bool,happ(s(fun(fun('type.semanticPrimitives.v',bool),bool),'_dst_x1x0_2'(s(fun(fun('type.semanticPrimitives.v',bool),fun(fun('type.semanticPrimitives.v',bool),bool)),'=_0'),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))))),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2)))))) | $spl8),
  inference(backward_demodulation,[],[f3619,f3103])).
fof(f3103,plain,(
  ~p(s(bool,happ(s(fun(fun('type.semanticPrimitives.v',bool),bool),'_dst_x1x0_2'(s(fun(fun('type.semanticPrimitives.v',bool),fun(fun('type.semanticPrimitives.v',bool),bool)),'=_0'),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))))),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'T_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'T_0'))))),s('type.pair.prod'(sK0,sK1),sK2)))))) | $spl8),
  inference(forward_demodulation,[],[f1668,f1674])).
fof(f1668,plain,(
  ~p(s(bool,happ(s(fun(fun('type.semanticPrimitives.v',bool),bool),'_dst_x1x0_2'(s(fun(fun('type.semanticPrimitives.v',bool),fun(fun('type.semanticPrimitives.v',bool),bool)),'=_0'),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))))),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'const.bool.ARB_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(sK0,sK1),sK2))))))),
  inference(forward_demodulation,[],[f1662,f57])).
fof(f1662,plain,(
  ~p(s(bool,happ(s(fun(fun('type.semanticPrimitives.v',bool),bool),happ(s(fun(fun('type.semanticPrimitives.v',bool),fun(fun('type.semanticPrimitives.v',bool),bool)),'=_0'),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'const.bool.ARB_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(sK0,sK1),sK2))))),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))))))),
  inference(unit_resulting_resolution,[],[f62,f55])).
fof(f55,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f43])).
fof(f62,plain,(
  s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'const.bool.ARB_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(sK0,sK1),sK2)))),
  inference(backward_demodulation,[],[f57,f60])).
fof(f60,plain,(
  s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'const.bool.ARB_0'))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(sK0,sK1),sK2)))),
  inference(backward_demodulation,[],[f52,f44])).
fof(f44,plain,(
  s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'const.bool.ARB_0'))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(sK0,sK1),sK2)))),
  inference(cnf_transformation,[],[f40])).
fof(f40,plain,(
  s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'const.bool.ARB_0'))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(sK0,sK1),sK2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f38])).
fof(f38,plain,(
  ? [X0,X1,X2,X3,X4] : s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3))),s('type.pair.prod'(X0,X1),X2))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4),s(bool,'const.bool.ARB_0'))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X1,bool),'_dst_x1x0_2'(s(fun(X1,fun(X1,bool)),'=_0'),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(X0,X1),X2)))),
  inference(ennf_transformation,[],[f17])).
fof(f17,plain,(
  ~! [X0,X1,X2,X3,X4] : s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3))),s('type.pair.prod'(X0,X1),X2))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4),s(bool,'const.bool.ARB_0'))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X1,bool),'_dst_x1x0_2'(s(fun(X1,fun(X1,bool)),'=_0'),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(X0,X1),X2)))),
  inference(flattening,[],[f16])).
fof(f16,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3))),s('type.pair.prod'(X0,X1),X2))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X4),s(bool,'const.bool.ARB_0'))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X1,bool),'_dst_x1x0_2'(s(fun(X1,fun(X1,bool)),'=_0'),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(X0,X1),X2)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X7,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun(fun(X7,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'),s(fun(X6,fun('type.semanticPrimitives.v',bool)),X10))),s(fun(X7,fun('type.semanticPrimitives.v',bool)),X9))),s('type.pair.prod'(X6,X7),X8))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X7,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun(fun(X7,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun(fun(X7,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(X6,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X6,bool),'_dst_x1x0_2'(s(fun(X6,fun(X6,bool)),'=_0'),s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X7),X8))))),s(fun(X6,fun('type.semanticPrimitives.v',bool)),X10),s(bool,'const.bool.ARB_0'))))),s(fun(X7,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X7,bool),'_dst_x1x0_2'(s(fun(X7,fun(X7,bool)),'=_0'),s(X7,'const.pair.SND_1'(s('type.pair.prod'(X6,X7),X8))))),s(fun(X7,fun('type.semanticPrimitives.v',bool)),X9),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(X6,X7),X8)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X7,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun(fun(X7,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'),s(fun(X6,fun('type.semanticPrimitives.v',bool)),X10))),s(fun(X7,fun('type.semanticPrimitives.v',bool)),X9))),s('type.pair.prod'(X6,X7),X8))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X7,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun(fun(X7,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun(fun(X7,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(X6,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X6,bool),'_dst_x1x0_2'(s(fun(X6,fun(X6,bool)),'=_0'),s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X7),X8))))),s(fun(X6,fun('type.semanticPrimitives.v',bool)),X10),s(bool,'const.bool.ARB_0'))))),s(fun(X7,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X7,bool),'_dst_x1x0_2'(s(fun(X7,fun(X7,bool)),'=_0'),s(X7,'const.pair.SND_1'(s('type.pair.prod'(X6,X7),X8))))),s(fun(X7,fun('type.semanticPrimitives.v',bool)),X9),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(X6,X7),X8)))),
  file('thm.ml_translator.PAIR_TYPE_SIMP','thm.ml_translator.PAIR_TYPE_SIMP')).
fof(f52,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3))) = s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3)))) )),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0,X1,X2,X3] : s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3))) = s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3)))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ! [X0,X1] : ! [X2,X3] : s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3))) = s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X3)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X7,X12] : ! [X13,X14] : s(fun('type.pair.prod'(X7,X12),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(X7,fun('type.semanticPrimitives.v',bool)),X13),s(fun(X12,fun('type.semanticPrimitives.v',bool)),X14))) = s(fun('type.pair.prod'(X7,X12),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X12,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X7,X12),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X7,fun('type.semanticPrimitives.v',bool)),fun(fun(X12,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X7,X12),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'),s(fun(X7,fun('type.semanticPrimitives.v',bool)),X13))),s(fun(X12,fun('type.semanticPrimitives.v',bool)),X14)))),
  file('thm.ml_translator.PAIR_TYPE_SIMP','ARITY_0_2_const.ml_translator.PAIR_TYPE')).
fof(f3619,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X3),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X4))),s('type.pair.prod'(X0,X1),X2))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X1,bool),'_dst_x1x0_2'(s(fun(X1,fun(X1,bool)),'=_0'),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X4),s(bool,'T_0'))))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X3),s(bool,'T_0'))))),s('type.pair.prod'(X0,X1),X2)))) ) | $spl8),
  inference(superposition,[],[f3102,f57])).
fof(f3102,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X3),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X2))),s('type.pair.prod'(X0,X1),X4))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X4))))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X3),s(bool,'T_0'))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X1,bool),'_dst_x1x0_2'(s(fun(X1,fun(X1,bool)),'=_0'),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X4))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X2),s(bool,'T_0'))))),s('type.pair.prod'(X0,X1),X4)))) ) | $spl8),
  inference(forward_demodulation,[],[f61,f1674])).
fof(f61,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X3),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X2))),s('type.pair.prod'(X0,X1),X4))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X4))))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X3),s(bool,'const.bool.ARB_0'))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X1,bool),'_dst_x1x0_2'(s(fun(X1,fun(X1,bool)),'=_0'),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X4))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X2),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(X0,X1),X4)))) )),
  inference(forward_demodulation,[],[f54,f52])).
fof(f54,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X3))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X2))),s('type.pair.prod'(X0,X1),X4))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X4))))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X3),s(bool,'const.bool.ARB_0'))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X1,bool),'_dst_x1x0_2'(s(fun(X1,fun(X1,bool)),'=_0'),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X4))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X2),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(X0,X1),X4)))) )),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0,X1,X2,X3,X4] : s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X3))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X2))),s('type.pair.prod'(X0,X1),X4))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X4))))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X3),s(bool,'const.bool.ARB_0'))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X1,bool),'_dst_x1x0_2'(s(fun(X1,fun(X1,bool)),'=_0'),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X4))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X2),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(X0,X1),X4)))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X3))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X2))),s('type.pair.prod'(X0,X1),X4))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X4))))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X3),s(bool,'const.bool.ARB_0'))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X1,bool),'_dst_x1x0_2'(s(fun(X1,fun(X1,bool)),'=_0'),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X4))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X2),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(X0,X1),X4)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X7] : ! [X9,X10,X8] : s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X7,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun(fun(X7,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'),s(fun(X6,fun('type.semanticPrimitives.v',bool)),X10))),s(fun(X7,fun('type.semanticPrimitives.v',bool)),X9))),s('type.pair.prod'(X6,X7),X8))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X7,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun(fun(X7,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun(fun(X7,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X6,X7),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(X6,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X6,bool),'_dst_x1x0_2'(s(fun(X6,fun(X6,bool)),'=_0'),s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X7),X8))))),s(fun(X6,fun('type.semanticPrimitives.v',bool)),X10),s(bool,'const.bool.ARB_0'))))),s(fun(X7,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X7,bool),'_dst_x1x0_2'(s(fun(X7,fun(X7,bool)),'=_0'),s(X7,'const.pair.SND_1'(s('type.pair.prod'(X6,X7),X8))))),s(fun(X7,fun('type.semanticPrimitives.v',bool)),X9),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(X6,X7),X8)))),
  file('thm.ml_translator.PAIR_TYPE_SIMP','thm.ml_translator.ml_translator_2|49|3_prove_ltb')).
fof(f3667,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f3666,f45])).
fof(f3666,plain,(
  ~p(s(bool,'T_0')) | $spl8),
  inference(forward_demodulation,[],[f3664,f1508])).
fof(f3664,plain,(
  ~p(s(bool,happ(s(fun(fun('type.semanticPrimitives.v',bool),bool),happ(s(fun(fun('type.semanticPrimitives.v',bool),fun(fun('type.semanticPrimitives.v',bool),bool)),'=_0'),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))))),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2)))))) | $spl8),
  inference(backward_demodulation,[],[f3619,f3104])).
fof(f3104,plain,(
  ~p(s(bool,happ(s(fun(fun('type.semanticPrimitives.v',bool),bool),happ(s(fun(fun('type.semanticPrimitives.v',bool),fun(fun('type.semanticPrimitives.v',bool),bool)),'=_0'),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))))),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'T_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'T_0'))))),s('type.pair.prod'(sK0,sK1),sK2)))))) | $spl8),
  inference(forward_demodulation,[],[f1659,f1674])).
fof(f1659,plain,(
  ~p(s(bool,happ(s(fun(fun('type.semanticPrimitives.v',bool),bool),happ(s(fun(fun('type.semanticPrimitives.v',bool),fun(fun('type.semanticPrimitives.v',bool),bool)),'=_0'),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))))),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'const.bool.ARB_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(sK0,sK1),sK2))))))),
  inference(unit_resulting_resolution,[],[f62,f55])).
fof(f3286,plain,(
  ( ! [X14] : (p(s(bool,X14)) | s(bool,'F_0') = s(bool,X14)) ) | $spl20),
  inference(cnf_transformation,[],[f3286_D])).
fof(f3286_D,plain,(
  ( ! [X14] : (p(s(bool,X14)) | s(bool,'F_0') = s(bool,X14)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f2499,plain,(
  ( ! [X24] : (s(bool,'T_0') = s(bool,X24)) ) | $spl14),
  inference(cnf_transformation,[],[f2499_D])).
fof(f2499_D,plain,(
  ( ! [X24] : (s(bool,'T_0') = s(bool,X24)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f3285,plain,(
  ( ! [X14,X15] : (s(bool,'T_0') = s(bool,X15) | p(s(bool,X14)) | s(bool,'F_0') = s(bool,X14)) ) | $spl18),
  inference(duplicate_literal_removal,[],[f3284])).
fof(f3284,plain,(
  ( ! [X14,X15] : (s(bool,'T_0') = s(bool,X15) | p(s(bool,X14)) | s(bool,'T_0') = s(bool,X15) | s(bool,'F_0') = s(bool,X14)) ) | $spl18),
  inference(forward_demodulation,[],[f3283,f1508])).
fof(f3283,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X14))),s(bool,X14))) | p(s(bool,X14)) | s(bool,'T_0') = s(bool,X15) | s(bool,'F_0') = s(bool,X14)) ) | $spl18),
  inference(forward_demodulation,[],[f3254,f57])).
fof(f3254,plain,(
  ( ! [X14,X15] : (p(s(bool,X14)) | s(bool,X15) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X14))),s(bool,X14))) | s(bool,'T_0') = s(bool,X15) | s(bool,'F_0') = s(bool,X14)) ) | $spl18),
  inference(superposition,[],[f143,f2527])).
fof(f143,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f45,f63])).
fof(f3100,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f3059,f45])).
fof(f3059,plain,(
  ~p(s(bool,'T_0')) | $spl14),
  inference(backward_demodulation,[],[f2499,f1668])).
fof(f3099,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f3048,f45])).
fof(f3048,plain,(
  ~p(s(bool,'T_0')) | $spl14),
  inference(backward_demodulation,[],[f2499,f1659])).
fof(f3097,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f2978,f2499])).
fof(f2978,plain,(
  s(bool,'T_0') != s(bool,g(s('type.semanticPrimitives.v',sK5(happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'const.bool.ARB_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(sK0,sK1),sK2)),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2)),bool,'type.semanticPrimitives.v')))) | $spl14),
  inference(backward_demodulation,[],[f2499,f1657])).
fof(f1657,plain,(
  s(bool,f(s('type.semanticPrimitives.v',sK5(happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'const.bool.ARB_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(sK0,sK1),sK2)),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2)),bool,'type.semanticPrimitives.v')))) != s(bool,g(s('type.semanticPrimitives.v',sK5(happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'const.bool.ARB_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(sK0,sK1),sK2)),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2)),bool,'type.semanticPrimitives.v'))))),
  inference(unit_resulting_resolution,[],[f62,f53])).
fof(f53,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK5(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK5(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK5(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK5(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5])],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.ml_translator.PAIR_TYPE_SIMP',aHL_EXT)).
fof(f3096,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f2977,f2499])).
fof(f2977,plain,(
  s(bool,'T_0') != s(bool,g(s('type.semanticPrimitives.v',sK5(happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2)),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'const.bool.ARB_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(sK0,sK1),sK2)),bool,'type.semanticPrimitives.v')))) | $spl14),
  inference(backward_demodulation,[],[f2499,f1660])).
fof(f1660,plain,(
  s(bool,f(s('type.semanticPrimitives.v',sK5(happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2)),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'const.bool.ARB_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(sK0,sK1),sK2)),bool,'type.semanticPrimitives.v')))) != s(bool,g(s('type.semanticPrimitives.v',sK5(happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2)),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'const.bool.ARB_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'const.bool.ARB_0'))))),s('type.pair.prod'(sK0,sK1),sK2)),bool,'type.semanticPrimitives.v'))))),
  inference(unit_resulting_resolution,[],[f62,f53])).
fof(f3095,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f2911,f45])).
fof(f2911,plain,(
  ~p(s(bool,'T_0')) | $spl14),
  inference(backward_demodulation,[],[f2499,f46])).
fof(f2898,plain,(
  $false | $spl9),
  inference(subsumption_resolution,[],[f2897,f45])).
fof(f2897,plain,(
  ~p(s(bool,'T_0')) | $spl9),
  inference(forward_demodulation,[],[f2893,f1508])).
fof(f2893,plain,(
  ~p(s(bool,happ(s(fun(fun('type.semanticPrimitives.v',bool),bool),happ(s(fun(fun('type.semanticPrimitives.v',bool),fun(fun('type.semanticPrimitives.v',bool),bool)),'=_0'),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))))),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2)))))) | $spl9),
  inference(backward_demodulation,[],[f2839,f2721])).
fof(f2721,plain,(
  ~p(s(bool,happ(s(fun(fun('type.semanticPrimitives.v',bool),bool),happ(s(fun(fun('type.semanticPrimitives.v',bool),fun(fun('type.semanticPrimitives.v',bool),bool)),'=_0'),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))))),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'F_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'F_0'))))),s('type.pair.prod'(sK0,sK1),sK2)))))) | $spl9),
  inference(backward_demodulation,[],[f2701,f1659])).
fof(f2701,plain,(
  s(bool,'F_0') = s(bool,'const.bool.ARB_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1673,f47])).
fof(f1673,plain,(
  s(bool,'T_0') != s(bool,'const.bool.ARB_0') | $spl9),
  inference(cnf_transformation,[],[f1673_D])).
fof(f1673_D,plain,(
  s(bool,'T_0') != s(bool,'const.bool.ARB_0') <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f2839,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X3),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X4))),s('type.pair.prod'(X0,X1),X2))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X1,bool),'_dst_x1x0_2'(s(fun(X1,fun(X1,bool)),'=_0'),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X4),s(bool,'F_0'))))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X3),s(bool,'F_0'))))),s('type.pair.prod'(X0,X1),X2)))) ) | $spl9),
  inference(superposition,[],[f2718,f57])).
fof(f2718,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X3),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X2))),s('type.pair.prod'(X0,X1),X4))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool))),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun(fun(X1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(X0,X1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X4))))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X3),s(bool,'F_0'))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X1,bool),'_dst_x1x0_2'(s(fun(X1,fun(X1,bool)),'=_0'),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X4))))),s(fun(X1,fun('type.semanticPrimitives.v',bool)),X2),s(bool,'F_0'))))),s('type.pair.prod'(X0,X1),X4)))) ) | $spl9),
  inference(backward_demodulation,[],[f2701,f61])).
fof(f2896,plain,(
  $false | $spl9),
  inference(subsumption_resolution,[],[f2895,f45])).
fof(f2895,plain,(
  ~p(s(bool,'T_0')) | $spl9),
  inference(forward_demodulation,[],[f2894,f1508])).
fof(f2894,plain,(
  ~p(s(bool,happ(s(fun(fun('type.semanticPrimitives.v',bool),bool),happ(s(fun(fun('type.semanticPrimitives.v',bool),fun(fun('type.semanticPrimitives.v',bool),bool)),'=_0'),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))))),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2)))))) | $spl9),
  inference(forward_demodulation,[],[f2892,f57])).
fof(f2892,plain,(
  ~p(s(bool,happ(s(fun(fun('type.semanticPrimitives.v',bool),bool),'_dst_x1x0_2'(s(fun(fun('type.semanticPrimitives.v',bool),fun(fun('type.semanticPrimitives.v',bool),bool)),'=_0'),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))))),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2)))))) | $spl9),
  inference(backward_demodulation,[],[f2839,f2723])).
fof(f2723,plain,(
  ~p(s(bool,happ(s(fun(fun('type.semanticPrimitives.v',bool),bool),'_dst_x1x0_2'(s(fun(fun('type.semanticPrimitives.v',bool),fun(fun('type.semanticPrimitives.v',bool),bool)),'=_0'),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))))),s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'F_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'F_0'))))),s('type.pair.prod'(sK0,sK1),sK2)))))) | $spl9),
  inference(backward_demodulation,[],[f2701,f1668])).
fof(f2527,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X1))),s(bool,X1))) | s(bool,'F_0') = s(bool,X1)) ) | $spl18),
  inference(cnf_transformation,[],[f2527_D])).
fof(f2527_D,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X1))),s(bool,X1))) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f2445,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') = s(bool,X20) | s(bool,X21) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X21))),s(bool,X21))) | s(bool,'F_0') = s(bool,X21)) ) | $spl8),
  inference(duplicate_literal_removal,[],[f2104])).
fof(f2104,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') = s(bool,X20) | s(bool,X21) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X21))),s(bool,X21))) | s(bool,'F_0') = s(bool,X21) | s(bool,'T_0') = s(bool,X20)) ) | $spl8),
  inference(superposition,[],[f1892,f47])).
fof(f1892,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X0))),s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl8),
  inference(superposition,[],[f1824,f63])).
fof(f1824,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0'))) | $spl8),
  inference(forward_demodulation,[],[f1774,f1674])).
fof(f1774,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'const.bool.ARB_0'))),s(bool,'T_0'))) | $spl8),
  inference(unit_resulting_resolution,[],[f1674,f878])).
fof(f878,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) )),
  inference(condensation,[],[f877])).
fof(f877,plain,(
  ( ! [X10,X8,X11,X9] : (s(X8,X9) != s(X8,X10) | s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),'_dst_x1x0_2'(s(fun(X8,fun(X8,bool)),'=_0'),s(X8,X9))),s(X8,X10))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f822,f65])).
fof(f822,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,X11)) | s(X8,X9) != s(X8,X10) | s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),'_dst_x1x0_2'(s(fun(X8,fun(X8,bool)),'=_0'),s(X8,X9))),s(X8,X10))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f551,f63])).
fof(f551,plain,(
  ( ! [X30,X28,X29] : (p(s(bool,happ(s(fun(X28,bool),'_dst_x1x0_2'(s(fun(X28,fun(X28,bool)),'=_0'),s(X28,X30))),s(X28,X29)))) | s(X28,X29) != s(X28,X30)) )),
  inference(superposition,[],[f56,f57])).
fof(f2500,plain,(
  ( ! [X23,X25] : (s(bool,X23) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X23))),s(bool,X23))) | s(bool,X23) = s(bool,X25) | s(bool,X25) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X25))),s(bool,X25)))) ) | $spl16),
  inference(cnf_transformation,[],[f2500_D])).
fof(f2500_D,plain,(
  ( ! [X23,X25] : (s(bool,X23) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X23))),s(bool,X23))) | s(bool,X23) = s(bool,X25) | s(bool,X25) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X25))),s(bool,X25)))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f2446,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,X11) | s(bool,X12) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X12))),s(bool,X12))) | s(bool,X10) = s(bool,X12) | s(bool,X10) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X10))),s(bool,X10)))) ) | $spl8),
  inference(duplicate_literal_removal,[],[f2102])).
fof(f2102,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,X11) | s(bool,X12) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X12))),s(bool,X12))) | s(bool,X10) = s(bool,X12) | s(bool,X10) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X10))),s(bool,X10))) | s(bool,'T_0') = s(bool,X11)) ) | $spl8),
  inference(superposition,[],[f1892,f1892])).
fof(f2455,plain,(
  ( ! [X19,X17,X18] : (s(bool,X18) = s(bool,X19) | s(bool,X19) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X19))),s(bool,X19))) | s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X18))),s(bool,X18)))) ) | $spl8),
  inference(duplicate_literal_removal,[],[f2068])).
fof(f2068,plain,(
  ( ! [X19,X17,X18] : (s(bool,X18) = s(bool,X19) | s(bool,X19) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X19))),s(bool,X19))) | s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X18))),s(bool,X18))) | s(bool,'T_0') = s(bool,X17)) ) | $spl8),
  inference(superposition,[],[f1892,f1892])).
fof(f2460,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X1))),s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl8),
  inference(duplicate_literal_removal,[],[f2062])).
fof(f2062,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X1))),s(bool,X1))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl8),
  inference(superposition,[],[f1892,f47])).
fof(f2475,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,X20) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X20))),s(bool,X20))) | s(bool,X22) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X22))),s(bool,X22))) | s(bool,X20) = s(bool,X22)) ) | $spl8),
  inference(duplicate_literal_removal,[],[f2042])).
fof(f2042,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,X20) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X20))),s(bool,X20))) | s(bool,'T_0') = s(bool,X21) | s(bool,X22) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X22))),s(bool,X22))) | s(bool,X20) = s(bool,X22)) ) | $spl8),
  inference(superposition,[],[f1892,f1892])).
fof(f2491,plain,(
  ( ! [X24,X23,X25] : (s(bool,X23) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X23))),s(bool,X23))) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X25))),s(bool,X25))) | s(bool,X23) = s(bool,X25)) ) | $spl8),
  inference(duplicate_literal_removal,[],[f2007])).
fof(f2007,plain,(
  ( ! [X24,X23,X25] : (s(bool,X23) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X23))),s(bool,X23))) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X25))),s(bool,X25))) | s(bool,X23) = s(bool,X25)) ) | $spl8),
  inference(superposition,[],[f1892,f1892])).
fof(f1674,plain,(
  s(bool,'T_0') = s(bool,'const.bool.ARB_0') | $spl8),
  inference(cnf_transformation,[],[f1674_D])).
fof(f1674_D,plain,(
  s(bool,'T_0') = s(bool,'const.bool.ARB_0') <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f1677,plain,(
  s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'F_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'F_0'))))),s('type.pair.prod'(sK0,sK1),sK2))) | $spl13),
  inference(cnf_transformation,[],[f1677_D])).
fof(f1677_D,plain,(
  s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'F_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'F_0'))))),s('type.pair.prod'(sK0,sK1),sK2))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f1667,plain,(
  s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'F_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'F_0'))))),s('type.pair.prod'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.bool.ARB_0')),
  inference(superposition,[],[f62,f47])).
fof(f1675,plain,(
  ( ! [X2] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,X2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,X2))))),s('type.pair.prod'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X2)) ) | $spl10),
  inference(cnf_transformation,[],[f1675_D])).
fof(f1675_D,plain,(
  ( ! [X2] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,X2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,X2))))),s('type.pair.prod'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f1666,plain,(
  ( ! [X3] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,X3))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,X3))))),s('type.pair.prod'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,'const.bool.ARB_0')) )),
  inference(superposition,[],[f62,f63])).
fof(f1665,plain,(
  ( ! [X2] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,X2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,X2))))),s('type.pair.prod'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.bool.ARB_0') | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f62,f63])).
fof(f1670,plain,(
  ( ! [X0] : (s(bool,'const.bool.ARB_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(cnf_transformation,[],[f1670_D])).
fof(f1670_D,plain,(
  ( ! [X0] : (s(bool,'const.bool.ARB_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1672,plain,(
  s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'T_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'T_0'))))),s('type.pair.prod'(sK0,sK1),sK2))) | $spl7),
  inference(cnf_transformation,[],[f1672_D])).
fof(f1672_D,plain,(
  s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'T_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'T_0'))))),s('type.pair.prod'(sK0,sK1),sK2))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f1664,plain,(
  ( ! [X1] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'T_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'T_0'))))),s('type.pair.prod'(sK0,sK1),sK2))) | s(bool,'const.bool.ARB_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f62,f63])).
fof(f1663,plain,(
  ( ! [X0] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.PAIR_TYPE_2'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3))),s('type.pair.prod'(sK0,sK1),sK2))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool))),'_dst_x1x0_2'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun(fun(sK1,fun('type.semanticPrimitives.v',bool)),fun('type.pair.prod'(sK0,sK1),fun('type.semanticPrimitives.v',bool)))),'const.ml_translator.PAIR_TYPE_0'))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK1,bool),'_dst_x1x0_2'(s(fun(sK1,fun(sK1,bool)),'=_0'),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK1,fun('type.semanticPrimitives.v',bool)),sK3),s(bool,'T_0'))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x1x0_2'(s(fun(sK0,fun(sK0,bool)),'=_0'),s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK2))))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK4),s(bool,'T_0'))))),s('type.pair.prod'(sK0,sK1),sK2))) | s(bool,'const.bool.ARB_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f62,f63])).
fof(f69,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(cnf_transformation,[],[f69_D])).
fof(f69_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f71,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl3),
  inference(cnf_transformation,[],[f71_D])).
fof(f71_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f68,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f47])).
% SZS output end Proof for thm.ml_translator
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 50
% Passive clauses: 617
% Generated clauses: 3749
% Final active clauses: 26
% Final passive clauses: 305
% Input formulas: 14
% Initial clauses: 16
% 
% Duplicate literals: 161
% Trivial inequalities: 18
% Fw subsumption resolutions: 44
% Fw demodulations: 717
% Bw demodulations: 198
% Condensations: 214
% 
% Simple tautologies: 24
% Equational tautologies: 35
% Forward subsumptions: 1901
% Bw demodulations to eq. taut.: 6
% 
% Unit resulting resolution: 216
% Forward superposition: 1065
% Backward superposition: 783
% Self superposition: 89
% Equality factoring: 40
% Equality resolution: 2
% 
% Split clauses: 13
% Split components: 26
% SAT solver clauses: 654
% SAT solver unit clauses: 124
% SAT solver binary clauses: 243
% 
% Sat splits: 13
% Sat splitting refutations: 9
% 
% Memory used [KB]: 8571
% Time elapsed: 0.473 s
% ------------------------------
% ------------------------------
% Success in time 1.821 s
