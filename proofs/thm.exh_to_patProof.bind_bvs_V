Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.exh_to_patProof
% (139049)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 677
% Passive clauses: 4914
% Generated clauses: 20099
% Final active clauses: 640
% Final passive clauses: 3826
% Input formulas: 32
% Initial clauses: 130
% 
% Duplicate literals: 979
% Trivial inequalities: 119
% Fw subsumption resolutions: 2966
% Fw demodulations: 342
% Bw demodulations: 35
% 
% Simple tautologies: 212
% Equational tautologies: 80
% Forward subsumptions: 8306
% 
% Binary resolution: 5147
% Factoring: 1256
% Forward superposition: 2816
% Backward superposition: 5453
% Self superposition: 120
% Equality factoring: 118
% Equality resolution: 25
% 
% Split clauses: 2058
% Split components: 4290
% SAT solver clauses: 2521
% SAT solver unit clauses: 42
% SAT solver binary clauses: 260
% 
% Sat splits: 2058
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 2512
% TWLsolver calls for satisfiability: 467
% 
% Memory used [KB]: 9594
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.exh_to_patProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.exh_to_patProof
% SZS output start Proof for thm.exh_to_patProof
fof(f4255,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4252,f855,f866,f179,f316,f193,f329,f3870,f3872,f180,f320,f414,f416,f178,f318,f194,f328,f1382,f1393,f221,f337,f4223,f4225,f321,f323,f856,f868,f198,f330,f1429,f1440,f220,f336,f222,f338])).
fof(f338,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))),s('type.list.list'('type.option.option'(X0)),X2))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))),s('type.list.list'('type.option.option'(X0)),X3))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X4)))))) | ~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X2),s('type.list.list'('type.option.option'(X0)),X3),s(fun('type.num.num',fun('type.num.num',bool)),X4))))) ) | $spl22),
  inference(cnf_transformation,[],[f338_D])).
fof(f338_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))),s('type.list.list'('type.option.option'(X0)),X2))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))),s('type.list.list'('type.option.option'(X0)),X3))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X4)))))) | ~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X2),s('type.list.list'('type.option.option'(X0)),X3),s(fun('type.num.num',fun('type.num.num',bool)),X4))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f222,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))),s('type.list.list'('type.option.option'(X0)),X2))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))),s('type.list.list'('type.option.option'(X0)),X3))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X4)))))) | ~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X2),s('type.list.list'('type.option.option'(X0)),X3),s(fun('type.num.num',fun('type.num.num',bool)),X4))))) )),
  inference(cnf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X2),s('type.list.list'('type.option.option'(X0)),X3),s(fun('type.num.num',fun('type.num.num',bool)),X4)))) | p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))),s('type.list.list'('type.option.option'(X0)),X2))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))),s('type.list.list'('type.option.option'(X0)),X3))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X4)))))))),
  inference(ennf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X2),s('type.list.list'('type.option.option'(X0)),X3),s(fun('type.num.num',fun('type.num.num',bool)),X4)))) => p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))),s('type.list.list'('type.option.option'(X0)),X2))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))),s('type.list.list'('type.option.option'(X0)),X3))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X4)))))))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0] : ! [X1,X2,X3,X4] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X2),s('type.list.list'('type.option.option'(X0)),X3),s(fun('type.num.num',fun('type.num.num',bool)),X4)))) => p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))),s('type.list.list'('type.option.option'(X0)),X2))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))),s('type.list.list'('type.option.option'(X0)),X3))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X4)))))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X7,X8,X9,X10] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X6)),X8),s('type.list.list'('type.option.option'(X6)),X9),s(fun('type.num.num',fun('type.num.num',bool)),X10)))) => p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X6)),'const.list.CONS_2'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s('type.list.list'('type.option.option'(X6)),X8))),s('type.list.list'('type.option.option'(X6)),'const.list.CONS_2'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s('type.list.list'('type.option.option'(X6)),X9))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X10)))))))),
  file('thm.exh_to_patProof.bind_bvs_V','thm.exh_to_patProof.exh_to_patProof_99_prove_ltb')).
fof(f336,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK15(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) | $spl18),
  inference(cnf_transformation,[],[f336_D])).
fof(f336_D,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK15(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f220,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK15(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK15(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK15])],[f60])).
fof(f60,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f59])).
fof(f59,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6] : ! [X12] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X12) | ? [X7] : s('type.option.option'(X6),X12) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))))),
  file('thm.exh_to_patProof.bind_bvs_V','thm.option.option_nchotomy')).
fof(f1440,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),X1),s('type.list.list'('type.option.option'(X0)),X2))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),X1),s('type.list.list'('type.option.option'(X0)),X3))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X4)))))) | ~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X2),s('type.list.list'('type.option.option'(X0)),X3),s(fun('type.num.num',fun('type.num.num',bool)),X4)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) | $spl534),
  inference(cnf_transformation,[],[f1440_D])).
fof(f1440_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),X1),s('type.list.list'('type.option.option'(X0)),X2))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),X1),s('type.list.list'('type.option.option'(X0)),X3))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X4)))))) | ~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X2),s('type.list.list'('type.option.option'(X0)),X3),s(fun('type.num.num',fun('type.num.num',bool)),X4)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) <=> ~$spl534),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl534])])).
fof(f1429,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),X1),s('type.list.list'('type.option.option'(X0)),X2))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),X1),s('type.list.list'('type.option.option'(X0)),X3))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X4)))))) | ~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X2),s('type.list.list'('type.option.option'(X0)),X3),s(fun('type.num.num',fun('type.num.num',bool)),X4)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) | ($spl18 | $spl22)),
  inference(superposition,[],[f338,f336])).
fof(f330,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl14),
  inference(cnf_transformation,[],[f330_D])).
fof(f330_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f198,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X11] : (s(bool,'F_0') = s(bool,X11) <=> ~p(s(bool,X11)))),
  file('thm.exh_to_patProof.bind_bvs_V','thm.bool.EQ_CLAUSES|split|2')).
fof(f868,plain,(
  s(bool,'F_0') = s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK12))),s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK13))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK14))))) | $spl342),
  inference(cnf_transformation,[],[f868_D])).
fof(f868_D,plain,(
  s(bool,'F_0') = s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK12))),s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK13))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK14))))) <=> ~$spl342),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl342])])).
fof(f856,plain,(
  s(bool,'F_0') = s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK12))),s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK13))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK14))))) | ($spl1 | $spl14)),
  inference(resolution,[],[f316,f330])).
fof(f323,plain,(
  ~p(s(bool,'F_0')) | $spl7),
  inference(cnf_transformation,[],[f323_D])).
fof(f323_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f321,plain,(
  ~p(s(bool,'F_0'))),
  inference(global_subsumption,[],[f183,f180])).
fof(f183,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f120])).
fof(f120,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f36])).
fof(f36,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f15])).
fof(f15,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.exh_to_patProof.bind_bvs_V','thm.bool.NOT_CLAUSES|split|2')).
fof(f4225,plain,(
  s('type.option.option'(sK10),'const.option.NONE_0') = s('type.option.option'(sK10),sK11) | $spl1464),
  inference(cnf_transformation,[],[f4225_D])).
fof(f4225_D,plain,(
  s('type.option.option'(sK10),'const.option.NONE_0') = s('type.option.option'(sK10),sK11) <=> ~$spl1464),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1464])])).
fof(f4223,plain,(
  s('type.option.option'(sK10),'const.option.NONE_0') = s('type.option.option'(sK10),sK11) | ($spl4 | $spl7 | $spl152 | $spl342 | $spl534)),
  inference(subsumption_resolution,[],[f4222,f320])).
fof(f4222,plain,(
  ~p(s(bool,'T_0')) | s('type.option.option'(sK10),'const.option.NONE_0') = s('type.option.option'(sK10),sK11) | ($spl7 | $spl152 | $spl342 | $spl534)),
  inference(forward_demodulation,[],[f4221,f416])).
fof(f4221,plain,(
  ~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),sK12),s('type.list.list'('type.option.option'(sK10)),sK13),s(fun('type.num.num',fun('type.num.num',bool)),sK14)))) | s('type.option.option'(sK10),'const.option.NONE_0') = s('type.option.option'(sK10),sK11) | ($spl7 | $spl342 | $spl534)),
  inference(subsumption_resolution,[],[f4197,f323])).
fof(f4197,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),sK12),s('type.list.list'('type.option.option'(sK10)),sK13),s(fun('type.num.num',fun('type.num.num',bool)),sK14)))) | s('type.option.option'(sK10),'const.option.NONE_0') = s('type.option.option'(sK10),sK11) | ($spl342 | $spl534)),
  inference(superposition,[],[f1440,f868])).
fof(f337,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X1))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X2))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X3)))))) | ~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X1),s('type.list.list'('type.option.option'(X0)),X2),s(fun('type.num.num',fun('type.num.num',bool)),X3))))) ) | $spl20),
  inference(cnf_transformation,[],[f337_D])).
fof(f337_D,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X1))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X2))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X3)))))) | ~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X1),s('type.list.list'('type.option.option'(X0)),X2),s(fun('type.num.num',fun('type.num.num',bool)),X3))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f221,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X1))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X2))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X3)))))) | ~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X1),s('type.list.list'('type.option.option'(X0)),X2),s(fun('type.num.num',fun('type.num.num',bool)),X3))))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X1),s('type.list.list'('type.option.option'(X0)),X2),s(fun('type.num.num',fun('type.num.num',bool)),X3)))) | p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X1))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X2))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X3)))))))),
  inference(ennf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X1),s('type.list.list'('type.option.option'(X0)),X2),s(fun('type.num.num',fun('type.num.num',bool)),X3)))) => p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X1))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X2))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X3)))))))),
  inference(flattening,[],[f61])).
fof(f61,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X1),s('type.list.list'('type.option.option'(X0)),X2),s(fun('type.num.num',fun('type.num.num',bool)),X3)))) => p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X1))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X2))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X3)))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X8,X9,X10] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X6)),X8),s('type.list.list'('type.option.option'(X6)),X9),s(fun('type.num.num',fun('type.num.num',bool)),X10)))) => p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X6)),'const.list.CONS_2'(s('type.option.option'(X6),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X6)),X8))),s('type.list.list'('type.option.option'(X6)),'const.list.CONS_2'(s('type.option.option'(X6),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X6)),X9))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X10)))))))),
  file('thm.exh_to_patProof.bind_bvs_V','thm.exh_to_patProof.exh_to_patProof_98_prove_ltb')).
fof(f1393,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X1),s('type.list.list'('type.option.option'(X0)),X2),s(fun('type.num.num',fun('type.num.num',bool)),X3)))) | s(bool,'T_0') = s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X1))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X2))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X3)))))) ) | $spl498),
  inference(cnf_transformation,[],[f1393_D])).
fof(f1393_D,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X1),s('type.list.list'('type.option.option'(X0)),X2),s(fun('type.num.num',fun('type.num.num',bool)),X3)))) | s(bool,'T_0') = s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X1))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X2))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X3)))))) ) <=> ~$spl498),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl498])])).
fof(f1382,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X1),s('type.list.list'('type.option.option'(X0)),X2),s(fun('type.num.num',fun('type.num.num',bool)),X3)))) | s(bool,'T_0') = s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X1))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),'const.option.NONE_0'),s('type.list.list'('type.option.option'(X0)),X2))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X3)))))) ) | ($spl10 | $spl20)),
  inference(resolution,[],[f337,f328])).
fof(f328,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl10),
  inference(cnf_transformation,[],[f328_D])).
fof(f328_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f194,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f122])).
fof(f122,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X11] : (s(bool,'T_0') = s(bool,X11) <=> p(s(bool,X11)))),
  file('thm.exh_to_patProof.bind_bvs_V','thm.bool.EQ_CLAUSES|split|0')).
fof(f318,plain,(
  p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),sK12),s('type.list.list'('type.option.option'(sK10)),sK13),s(fun('type.num.num',fun('type.num.num',bool)),sK14)))) | $spl2),
  inference(cnf_transformation,[],[f318_D])).
fof(f318_D,plain,(
  p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),sK12),s('type.list.list'('type.option.option'(sK10)),sK13),s(fun('type.num.num',fun('type.num.num',bool)),sK14)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f178,plain,(
  p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),sK12),s('type.list.list'('type.option.option'(sK10)),sK13),s(fun('type.num.num',fun('type.num.num',bool)),sK14))))),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),sK12),s('type.list.list'('type.option.option'(sK10)),sK13),s(fun('type.num.num',fun('type.num.num',bool)),sK14)))) & ~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK12))),s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK13))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK14))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13,sK14])],[f82])).
fof(f82,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X2),s('type.list.list'('type.option.option'(X0)),X3),s(fun('type.num.num',fun('type.num.num',bool)),X4)))) & ~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),X1),s('type.list.list'('type.option.option'(X0)),X2))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),X1),s('type.list.list'('type.option.option'(X0)),X3))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X4)))))))),
  inference(ennf_transformation,[],[f35])).
fof(f35,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X2),s('type.list.list'('type.option.option'(X0)),X3),s(fun('type.num.num',fun('type.num.num',bool)),X4)))) => p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),X1),s('type.list.list'('type.option.option'(X0)),X2))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),X1),s('type.list.list'('type.option.option'(X0)),X3))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X4)))))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),X2),s('type.list.list'('type.option.option'(X0)),X3),s(fun('type.num.num',fun('type.num.num',bool)),X4)))) => p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),X1),s('type.list.list'('type.option.option'(X0)),X2))),s('type.list.list'('type.option.option'(X0)),'const.list.CONS_2'(s('type.option.option'(X0),X1),s('type.list.list'('type.option.option'(X0)),X3))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X4)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X6)),X8),s('type.list.list'('type.option.option'(X6)),X9),s(fun('type.num.num',fun('type.num.num',bool)),X10)))) => p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X6)),'const.list.CONS_2'(s('type.option.option'(X6),X7),s('type.list.list'('type.option.option'(X6)),X8))),s('type.list.list'('type.option.option'(X6)),'const.list.CONS_2'(s('type.option.option'(X6),X7),s('type.list.list'('type.option.option'(X6)),X9))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X10)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : (p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X6)),X8),s('type.list.list'('type.option.option'(X6)),X9),s(fun('type.num.num',fun('type.num.num',bool)),X10)))) => p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(X6)),'const.list.CONS_2'(s('type.option.option'(X6),X7),s('type.list.list'('type.option.option'(X6)),X8))),s('type.list.list'('type.option.option'(X6)),'const.list.CONS_2'(s('type.option.option'(X6),X7),s('type.list.list'('type.option.option'(X6)),X9))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X10)))))))),
  file('thm.exh_to_patProof.bind_bvs_V','thm.exh_to_patProof.bind_bvs_V')).
fof(f416,plain,(
  s(bool,'T_0') = s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),sK12),s('type.list.list'('type.option.option'(sK10)),sK13),s(fun('type.num.num',fun('type.num.num',bool)),sK14))) | $spl152),
  inference(cnf_transformation,[],[f416_D])).
fof(f416_D,plain,(
  s(bool,'T_0') = s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),sK12),s('type.list.list'('type.option.option'(sK10)),sK13),s(fun('type.num.num',fun('type.num.num',bool)),sK14))) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f414,plain,(
  s(bool,'T_0') = s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),sK12),s('type.list.list'('type.option.option'(sK10)),sK13),s(fun('type.num.num',fun('type.num.num',bool)),sK14))) | ($spl2 | $spl10)),
  inference(resolution,[],[f328,f318])).
fof(f320,plain,(
  p(s(bool,'T_0')) | $spl4),
  inference(cnf_transformation,[],[f320_D])).
fof(f320_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f180,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.exh_to_patProof.bind_bvs_V','thm.bool.TRUTH')).
fof(f3872,plain,(
  s(bool,'T_0') = s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),'const.option.NONE_0'),s('type.list.list'('type.option.option'(sK10)),sK12))),s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),'const.option.NONE_0'),s('type.list.list'('type.option.option'(sK10)),sK13))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK14))))) | $spl1338),
  inference(cnf_transformation,[],[f3872_D])).
fof(f3872_D,plain,(
  s(bool,'T_0') = s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),'const.option.NONE_0'),s('type.list.list'('type.option.option'(sK10)),sK12))),s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),'const.option.NONE_0'),s('type.list.list'('type.option.option'(sK10)),sK13))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK14))))) <=> ~$spl1338),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1338])])).
fof(f3870,plain,(
  s(bool,'T_0') = s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),'const.option.NONE_0'),s('type.list.list'('type.option.option'(sK10)),sK12))),s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),'const.option.NONE_0'),s('type.list.list'('type.option.option'(sK10)),sK13))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK14))))) | ($spl4 | $spl152 | $spl498)),
  inference(subsumption_resolution,[],[f3838,f320])).
fof(f3838,plain,(
  ~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),'const.option.NONE_0'),s('type.list.list'('type.option.option'(sK10)),sK12))),s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),'const.option.NONE_0'),s('type.list.list'('type.option.option'(sK10)),sK13))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK14))))) | ($spl152 | $spl498)),
  inference(superposition,[],[f1393,f416])).
fof(f329,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f329_D])).
fof(f329_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f193,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f122])).
fof(f316,plain,(
  ~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK12))),s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK13))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK14)))))) | $spl1),
  inference(cnf_transformation,[],[f316_D])).
fof(f316_D,plain,(
  ~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK12))),s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK13))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK14)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f179,plain,(
  ~p(s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK12))),s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK13))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK14))))))),
  inference(cnf_transformation,[],[f119])).
fof(f866,plain,(
  s(bool,'T_0') != s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK12))),s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK13))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK14))))) | $spl341),
  inference(cnf_transformation,[],[f866_D])).
fof(f866_D,plain,(
  s(bool,'T_0') != s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK12))),s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK13))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK14))))) <=> ~$spl341),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl341])])).
fof(f855,plain,(
  s(bool,'T_0') != s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK12))),s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),sK11),s('type.list.list'('type.option.option'(sK10)),sK13))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK14))))) | ($spl1 | $spl12)),
  inference(resolution,[],[f316,f329])).
fof(f4252,plain,(
  $false | ($spl341 | $spl1338 | $spl1464)),
  inference(subsumption_resolution,[],[f4229,f3872])).
fof(f4229,plain,(
  s(bool,'T_0') != s(bool,'const.exh_to_patProof.bvs_V_3'(s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),'const.option.NONE_0'),s('type.list.list'('type.option.option'(sK10)),sK12))),s('type.list.list'('type.option.option'(sK10)),'const.list.CONS_2'(s('type.option.option'(sK10),'const.option.NONE_0'),s('type.list.list'('type.option.option'(sK10)),sK13))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK14))))) | ($spl341 | $spl1464)),
  inference(backward_demodulation,[],[f4225,f866])).
% SZS output end Proof for thm.exh_to_patProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 251
% Passive clauses: 684
% Generated clauses: 3999
% Final active clauses: 243
% Final passive clauses: 414
% Input formulas: 32
% Initial clauses: 130
% 
% Duplicate literals: 141
% Trivial inequalities: 26
% Fw subsumption resolutions: 460
% Fw demodulations: 37
% Bw demodulations: 27
% Condensations: 123
% Global subsumptions: 13
% 
% Simple tautologies: 188
% Equational tautologies: 16
% Forward subsumptions: 1380
% 
% Binary resolution: 1234
% Factoring: 115
% Forward superposition: 354
% Backward superposition: 578
% Self superposition: 24
% Equality factoring: 28
% Equality resolution: 5
% 
% Split clauses: 60
% Split components: 125
% SAT solver clauses: 1066
% SAT solver unit clauses: 150
% SAT solver binary clauses: 59
% SAT solver learnt clauses: 27
% SAT solver learnt literals: 10
% 
% Sat splits: 60
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1012
% TWLsolver calls for satisfiability: 1291
% 
% Memory used [KB]: 4221
% Time elapsed: 0.132 s
% ------------------------------
% ------------------------------
% Success in time 0.75 s
