Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% (115232)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 90
% Passive clauses: 2187
% Generated clauses: 11785
% Final active clauses: 79
% Final passive clauses: 1949
% Input formulas: 19
% Initial clauses: 53
% 
% Duplicate literals: 634
% Trivial inequalities: 168
% Fw subsumption resolutions: 2032
% Fw demodulations: 797
% Bw demodulations: 8
% 
% Simple tautologies: 293
% Equational tautologies: 84
% Forward subsumptions: 4419
% 
% Binary resolution: 257
% Factoring: 3
% Forward superposition: 3275
% Backward superposition: 3993
% Self superposition: 249
% Equality factoring: 214
% Equality resolution: 25
% 
% Split clauses: 289
% Split components: 600
% SAT solver clauses: 1019
% SAT solver unit clauses: 64
% SAT solver binary clauses: 426
% 
% Sat splits: 289
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1018
% TWLsolver calls for satisfiability: 129
% 
% Memory used [KB]: 4861
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f22746,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f22745,f4810,f80,f137,f82,f145,f165,f170,f77,f143,f87,f149,f167,f172,f79,f139,f168,f174,f78,f141,f1019,f1020,f103,f160,f13436,f132,f81,f135,f133,f131,f187,f193,f91,f151,f4110,f84,f147,f5327,f2149,f933,f934,f102,f161,f5543,f5559,f17724,f6661,f6662,f1057,f1058,f104,f159])).
fof(f159,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X4),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X2))))),s('type.closSem.state'(X0),X6)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4))))) ) | $spl40),
  inference(cnf_transformation,[],[f159_D])).
fof(f159_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X4),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X2))))),s('type.closSem.state'(X0),X6)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f104,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X4),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X2))))),s('type.closSem.state'(X0),X6)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4))))) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) | (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X6)))) & p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5)))) & p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X4),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X2))))),s('type.closSem.state'(X0),X6))))))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6)))) | (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X6)))) & p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5)))) & p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X4),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X2))))),s('type.closSem.state'(X0),X6))))))),
  inference(ennf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) & s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) = s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6)))) => (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X6)))) & p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5)))) & p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X4),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X2))))),s('type.closSem.state'(X0),X6))))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : ((p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) & s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) = s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6)))) => (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X6)))) & p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5)))) & p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X4),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X2))))),s('type.closSem.state'(X0),X6))))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X22,X7,X8,X9,X10,X11] : ((p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X9)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X7)))) & s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),X22) = s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X7),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X8),s('type.closSem.state'(X6),X9))))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),X22))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11)))) => (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X11)))) & p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10)))) & p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X6),X9),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X7))))),s('type.closSem.state'(X6),X11))))))),
  file('thm.clos_knownProof.ssgc_evaluate','thm.clos_knownProof.clos_knownProof_2|48|5_prove_ltb|split|0')).
fof(f1058,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X1))))),s('type.closSem.state'(X0),X5)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3))))) ) | $spl270),
  inference(cnf_transformation,[],[f1058_D])).
fof(f1058_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X1))))),s('type.closSem.state'(X0),X5)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3))))) ) <=> ~$spl270),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl270])])).
fof(f1057,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X1))))),s('type.closSem.state'(X0),X5)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3))))) ) | $spl40),
  inference(equality_resolution,[],[f159])).
fof(f6662,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),X1))))) ) | $spl706),
  inference(cnf_transformation,[],[f6662_D])).
fof(f6662_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),X1))))) ) <=> ~$spl706),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl706])])).
fof(f6661,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),X1))))) ) | ($spl6 | $spl14 | $spl52 | $spl54 | $spl56 | $spl270)),
  inference(subsumption_resolution,[],[f6660,f145])).
fof(f6660,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),X1))))) ) | ($spl6 | $spl14 | $spl52 | $spl54 | $spl56 | $spl270)),
  inference(forward_demodulation,[],[f6659,f170])).
fof(f6659,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),X1)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))) ) | ($spl6 | $spl14 | $spl54 | $spl56 | $spl270)),
  inference(subsumption_resolution,[],[f6658,f145])).
fof(f6658,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),X1)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))) ) | ($spl6 | $spl14 | $spl54 | $spl56 | $spl270)),
  inference(forward_demodulation,[],[f6657,f174])).
fof(f6657,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))) ) | ($spl6 | $spl14 | $spl54 | $spl270)),
  inference(subsumption_resolution,[],[f6656,f145])).
fof(f6656,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))) ) | ($spl6 | $spl54 | $spl270)),
  inference(forward_demodulation,[],[f6637,f172])).
fof(f6637,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))) ) | ($spl6 | $spl270)),
  inference(superposition,[],[f1058,f137])).
fof(f17724,plain,(
  $false | ($spl17 | $spl670 | $spl706)),
  inference(subsumption_resolution,[],[f17723,f147])).
fof(f17723,plain,(
  p(s(bool,'F_0')) | ($spl670 | $spl706)),
  inference(forward_demodulation,[],[f17719,f5559])).
fof(f17719,plain,(
  p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),sK5)))) | $spl706),
  inference(equality_resolution,[],[f6662])).
fof(f5559,plain,(
  s(bool,'F_0') = s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),sK5))) | $spl670),
  inference(cnf_transformation,[],[f5559_D])).
fof(f5559_D,plain,(
  s(bool,'F_0') = s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),sK5))) <=> ~$spl670),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl670])])).
fof(f5543,plain,(
  s(bool,'F_0') = s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),sK5))) | ($spl5 | $spl24)),
  inference(resolution,[],[f135,f151])).
fof(f161,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X6)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4))))) ) | $spl44),
  inference(cnf_transformation,[],[f161_D])).
fof(f161_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X6)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4))))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f102,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X6)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4))))) )),
  inference(cnf_transformation,[],[f52])).
fof(f934,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X5)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3))))) ) | $spl248),
  inference(cnf_transformation,[],[f934_D])).
fof(f934_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X5)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3))))) ) <=> ~$spl248),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl248])])).
fof(f933,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X5)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3))))) ) | $spl44),
  inference(equality_resolution,[],[f161])).
fof(f2149,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),X1))))) ) | $spl414),
  inference(cnf_transformation,[],[f2149_D])).
fof(f2149_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),X1))))) ) <=> ~$spl414),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl414])])).
fof(f5327,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),X1))))) ) | ($spl6 | $spl14 | $spl52 | $spl54 | $spl56 | $spl248)),
  inference(subsumption_resolution,[],[f5326,f145])).
fof(f5326,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),X1))))) ) | ($spl6 | $spl14 | $spl52 | $spl54 | $spl56 | $spl248)),
  inference(forward_demodulation,[],[f5325,f170])).
fof(f5325,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),X1)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))) ) | ($spl6 | $spl14 | $spl54 | $spl56 | $spl248)),
  inference(subsumption_resolution,[],[f5324,f145])).
fof(f5324,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),X1)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))) ) | ($spl6 | $spl14 | $spl54 | $spl56 | $spl248)),
  inference(forward_demodulation,[],[f5323,f174])).
fof(f5323,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))) ) | ($spl6 | $spl14 | $spl54 | $spl248)),
  inference(subsumption_resolution,[],[f5322,f145])).
fof(f5322,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))) ) | ($spl6 | $spl54 | $spl248)),
  inference(forward_demodulation,[],[f5309,f172])).
fof(f5309,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))) ) | ($spl6 | $spl248)),
  inference(superposition,[],[f934,f137])).
fof(f147,plain,(
  ~p(s(bool,'F_0')) | $spl17),
  inference(cnf_transformation,[],[f147_D])).
fof(f147_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f84,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.clos_knownProof.ssgc_evaluate',aHL_FALSITY)).
fof(f4110,plain,(
  $false | ($spl17 | $spl58 | $spl414)),
  inference(subsumption_resolution,[],[f4109,f147])).
fof(f4109,plain,(
  p(s(bool,'F_0')) | ($spl58 | $spl414)),
  inference(forward_demodulation,[],[f4105,f193])).
fof(f4105,plain,(
  p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK5)))) | $spl414),
  inference(equality_resolution,[],[f2149])).
fof(f151,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl24),
  inference(cnf_transformation,[],[f151_D])).
fof(f151_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f91,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f26])).
fof(f26,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X16] : (s(bool,'F_0') = s(bool,X16) <=> ~p(s(bool,X16)))),
  file('thm.clos_knownProof.ssgc_evaluate','thm.bool.EQ_CLAUSES|split|2')).
fof(f193,plain,(
  s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK5))) | $spl58),
  inference(cnf_transformation,[],[f193_D])).
fof(f193_D,plain,(
  s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK5))) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f187,plain,(
  s(bool,'F_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK5))) | ($spl1 | $spl24)),
  inference(resolution,[],[f151,f131])).
fof(f131,plain,(
  ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK5)))) | $spl1),
  inference(cnf_transformation,[],[f131_D])).
fof(f131_D,plain,(
  ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK5)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f133,plain,(
  ~p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4)))) | $spl3),
  inference(cnf_transformation,[],[f133_D])).
fof(f133_D,plain,(
  ~p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f135,plain,(
  ~p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),sK5)))) | $spl5),
  inference(cnf_transformation,[],[f135_D])).
fof(f135_D,plain,(
  ~p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),sK5)))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f81,plain,(
  ~p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),sK5)))) | ~p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK5))))),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1)))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) & (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK5)))) | ~p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4)))) | ~p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(sK0),sK3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK1))))),s('type.closSem.state'(sK0),sK5)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f47])).
fof(f47,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) & (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X5)))) | ~p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4)))) | ~p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X1))))),s('type.closSem.state'(X0),X5))))))),
  inference(flattening,[],[f46])).
fof(f46,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3)))))))) & (~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X5)))) | ~p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4)))) | ~p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X1))))),s('type.closSem.state'(X0),X5))))))),
  inference(ennf_transformation,[],[f22])).
fof(f22,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3)))))))) => (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X5)))) & p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4)))) & p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X1))))),s('type.closSem.state'(X0),X5))))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : ((p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3)))))))) => (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X5)))) & p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4)))) & p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X0),X3),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X1))))),s('type.closSem.state'(X0),X5))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : ((p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X9)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X7)))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X7),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X8),s('type.closSem.state'(X6),X9)))))))) => (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X11)))) & p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10)))) & p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X6),X9),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X7))))),s('type.closSem.state'(X6),X11))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : ((p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X9)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X7)))) & s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X7),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X8),s('type.closSem.state'(X6),X9)))))))) => (p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X6),X11)))) & p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10)))) & p(s(bool,'const.clos_knownProof.mglobals_extend_3'(s('type.closSem.state'(X6),X9),s(fun('type.num.num',bool),'const.bag.SET_OF_BAG_1'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X7))))),s('type.closSem.state'(X6),X11))))))),
  file('thm.clos_knownProof.ssgc_evaluate','thm.clos_knownProof.ssgc_evaluate')).
fof(f132,plain,(
  p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4)))) | $spl2),
  inference(cnf_transformation,[],[f132_D])).
fof(f132_D,plain,(
  p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f13436,plain,(
  p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4)))) | $spl578),
  inference(equality_resolution,[],[f4810])).
fof(f160,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) | p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4))))) ) | $spl42),
  inference(cnf_transformation,[],[f160_D])).
fof(f160_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) | p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4))))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f103,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5)))) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X5),s('type.closSem.state'(X0),X6))) | s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),X1) != s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X2),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X4))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X2)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X3)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X4))))) )),
  inference(cnf_transformation,[],[f52])).
fof(f1020,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) | p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3))))) ) | $spl268),
  inference(cnf_transformation,[],[f1020_D])).
fof(f1020_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) | p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3))))) ) <=> ~$spl268),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl268])])).
fof(f1019,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),X1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X2),s('type.closSem.state'(X0),X3))))))) | p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),X2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(X0),X3))))) ) | $spl42),
  inference(equality_resolution,[],[f160])).
fof(f141,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) | $spl10),
  inference(cnf_transformation,[],[f141_D])).
fof(f141_D,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f78,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2))))),
  inference(cnf_transformation,[],[f59])).
fof(f174,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2))) | $spl56),
  inference(cnf_transformation,[],[f174_D])).
fof(f174_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2))) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f168,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2))) | ($spl10 | $spl20)),
  inference(resolution,[],[f149,f141])).
fof(f139,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1)))) | $spl8),
  inference(cnf_transformation,[],[f139_D])).
fof(f139_D,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1)))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f79,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1))))),
  inference(cnf_transformation,[],[f59])).
fof(f172,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1))) | $spl54),
  inference(cnf_transformation,[],[f172_D])).
fof(f172_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1))) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f167,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1))) | ($spl8 | $spl20)),
  inference(resolution,[],[f149,f139])).
fof(f149,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl20),
  inference(cnf_transformation,[],[f149_D])).
fof(f149_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f87,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X16] : (s(bool,'T_0') = s(bool,X16) <=> p(s(bool,X16)))),
  file('thm.clos_knownProof.ssgc_evaluate','thm.bool.EQ_CLAUSES|split|0')).
fof(f143,plain,(
  p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3)))) | $spl12),
  inference(cnf_transformation,[],[f143_D])).
fof(f143_D,plain,(
  p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3)))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f77,plain,(
  p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))),
  inference(cnf_transformation,[],[f59])).
fof(f170,plain,(
  s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))) | $spl52),
  inference(cnf_transformation,[],[f170_D])).
fof(f170_D,plain,(
  s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f165,plain,(
  s(bool,'T_0') = s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))) | ($spl12 | $spl20)),
  inference(resolution,[],[f149,f143])).
fof(f145,plain,(
  p(s(bool,'T_0')) | $spl14),
  inference(cnf_transformation,[],[f145_D])).
fof(f145_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f82,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.clos_knownProof.ssgc_evaluate','thm.bool.TRUTH')).
fof(f137,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) | $spl6),
  inference(cnf_transformation,[],[f137_D])).
fof(f137_D,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3))))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f80,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),sK1),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),sK2),s('type.closSem.state'(sK0),sK3)))))))),
  inference(cnf_transformation,[],[f59])).
fof(f4810,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0))))) ) | $spl578),
  inference(cnf_transformation,[],[f4810_D])).
fof(f4810_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0))))) ) <=> ~$spl578),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl578])])).
fof(f22745,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0))))) ) | ($spl6 | $spl14 | $spl52 | $spl54 | $spl56 | $spl268)),
  inference(subsumption_resolution,[],[f22744,f145])).
fof(f22744,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0))))) ) | ($spl6 | $spl14 | $spl52 | $spl54 | $spl56 | $spl268)),
  inference(forward_demodulation,[],[f22743,f170])).
fof(f22743,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))) ) | ($spl6 | $spl14 | $spl54 | $spl56 | $spl268)),
  inference(subsumption_resolution,[],[f22742,f145])).
fof(f22742,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))) ) | ($spl6 | $spl14 | $spl54 | $spl56 | $spl268)),
  inference(forward_demodulation,[],[f22741,f174])).
fof(f22741,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))) ) | ($spl6 | $spl14 | $spl54 | $spl268)),
  inference(subsumption_resolution,[],[f22740,f145])).
fof(f22740,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))) ) | ($spl6 | $spl54 | $spl268)),
  inference(forward_demodulation,[],[f22727,f172])).
fof(f22727,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK4),s('type.closSem.state'(sK0),sK5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0),s('type.closSem.state'(sK0),X1))) | p(s(bool,'const.clos_knownProof.rsgc_free_1'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X0)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closLang.exp',bool),'const.clos_knownProof.esgc_free_0'),s('type.list.list'('type.closLang.exp'),sK1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.closSem.v',bool),'const.clos_knownProof.vsgc_free_0'),s('type.list.list'('type.closSem.v'),sK2)))) | ~p(s(bool,'const.clos_knownProof.ssgc_free_1'(s('type.closSem.state'(sK0),sK3))))) ) | ($spl6 | $spl268)),
  inference(superposition,[],[f1020,f137])).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 215
% Passive clauses: 682
% Generated clauses: 23695
% Final active clauses: 126
% Final passive clauses: 316
% Input formulas: 19
% Initial clauses: 53
% 
% Duplicate literals: 1163
% Trivial inequalities: 672
% Fw subsumption resolutions: 2715
% Fw demodulations: 2237
% Bw demodulations: 180
% Condensations: 1755
% 
% Simple tautologies: 411
% Equational tautologies: 48
% Forward subsumptions: 12144
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 175
% Factoring: 1
% Forward superposition: 6036
% Backward superposition: 6548
% Self superposition: 175
% Equality factoring: 110
% Equality resolution: 30
% 
% Split clauses: 71
% Split components: 143
% SAT solver clauses: 1479
% SAT solver unit clauses: 35
% SAT solver binary clauses: 63
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 2
% 
% Sat splits: 71
% Sat splitting refutations: 112
% 
% TWLsolver clauses: 1477
% TWLsolver calls for satisfiability: 599
% 
% Memory used [KB]: 12665
% Time elapsed: 0.703 s
% ------------------------------
% ------------------------------
% Success in time 1.33 s
