Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f511,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f508,f83,f116])).
fof(f116,plain,(
  ~p(s(bool,'F_0')) | $spl1),
  inference(cnf_transformation,[],[f116_D])).
fof(f116_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f83,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.clos_knownProof.exp_size_MEM|split|1',aHL_FALSITY)).
fof(f508,plain,(
  $false | $spl1),
  inference(subsumption_resolution,[],[f507,f116])).
fof(f507,plain,(
  p(s(bool,'F_0'))),
  inference(forward_demodulation,[],[f496,f153])).
fof(f153,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.closLang.exp_size_1'(s('type.closLang.exp',sK1))),s('type.num.num','const.closLang.exp|49|_size_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2)))))),
  inference(resolution,[],[f76,f90])).
fof(f90,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X12] : (s(bool,'F_0') = s(bool,X12) <=> ~p(s(bool,X12)))),
  file('thm.clos_knownProof.exp_size_MEM|split|1','thm.bool.EQ_CLAUSES|split|2')).
fof(f76,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.closLang.exp_size_1'(s('type.closLang.exp',sK1))),s('type.num.num','const.closLang.exp|49|_size_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2))))))),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK0),s('type.closLang.exp',sK1))),s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2)))))) & ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.closLang.exp_size_1'(s('type.closLang.exp',sK1))),s('type.num.num','const.closLang.exp|49|_size_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f46])).
fof(f46,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.bool.IN_2'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',X1))),s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))) & ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.closLang.exp_size_1'(s('type.closLang.exp',X1))),s('type.num.num','const.closLang.exp|49|_size_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.bool.IN_2'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X0),s('type.closLang.exp',X1))),s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.closLang.exp_size_1'(s('type.closLang.exp',X1))),s('type.num.num','const.closLang.exp|49|_size_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (p(s(bool,'const.bool.IN_2'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X7))),s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8)))))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.closLang.exp_size_1'(s('type.closLang.exp',X7))),s('type.num.num','const.closLang.exp|49|_size_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (p(s(bool,'const.bool.IN_2'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X7))),s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8)))))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.closLang.exp_size_1'(s('type.closLang.exp',X7))),s('type.num.num','const.closLang.exp|49|_size_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8)))))))),
  file('thm.clos_knownProof.exp_size_MEM|split|1','thm.clos_knownProof.exp_size_MEM|split|1')).
fof(f496,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.closLang.exp_size_1'(s('type.closLang.exp',sK1))),s('type.num.num','const.closLang.exp|49|_size_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2))))))),
  inference(resolution,[],[f114,f75])).
fof(f75,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK0),s('type.closLang.exp',sK1))),s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2))))))),
  inference(cnf_transformation,[],[f54])).
fof(f114,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.bool.IN_2'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp',X2))),s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X0)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.closLang.exp_size_1'(s('type.closLang.exp',X2))),s('type.num.num','const.closLang.exp|49|_size_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X0))))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.bool.IN_2'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp',X2))),s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X0)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.closLang.exp_size_1'(s('type.closLang.exp',X2))),s('type.num.num','const.closLang.exp|49|_size_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X0)))))))),
  inference(ennf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.bool.IN_2'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X1),s('type.closLang.exp',X2))),s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X0)))))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.closLang.exp_size_1'(s('type.closLang.exp',X2))),s('type.num.num','const.closLang.exp|49|_size_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X0)))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9,X10,X6] : (p(s(bool,'const.bool.IN_2'(s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp',X6))),s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9)))))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.closLang.exp_size_1'(s('type.closLang.exp',X6))),s('type.num.num','const.closLang.exp|49|_size_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9)))))))),
  file('thm.clos_knownProof.exp_size_MEM|split|1','thm.closLang.exp|49|_size_lemma')).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 22
% Passive clauses: 74
% Generated clauses: 410
% Final active clauses: 21
% Final passive clauses: 40
% Input formulas: 21
% Initial clauses: 40
% 
% Duplicate literals: 47
% Trivial inequalities: 14
% Fw subsumption resolutions: 39
% Fw demodulations: 2
% Bw demodulations: 1
% 
% Simple tautologies: 50
% Equational tautologies: 15
% Forward subsumptions: 158
% 
% Binary resolution: 20
% Forward superposition: 105
% Backward superposition: 80
% Self superposition: 26
% Equality factoring: 26
% Equality resolution: 5
% 
% Split clauses: 16
% Split components: 33
% SAT solver clauses: 24
% SAT solver unit clauses: 4
% SAT solver binary clauses: 16
% SAT solver learnt clauses: 1
% 
% Sat splits: 16
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 23
% TWLsolver calls for satisfiability: 6
% 
% Memory used [KB]: 767
% Time elapsed: 0.018 s
% ------------------------------
% ------------------------------
% Success in time 0.019 s
