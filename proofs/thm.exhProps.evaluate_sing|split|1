Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.exhProps
% (72331)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 949
% Passive clauses: 8579
% Generated clauses: 29005
% Final active clauses: 807
% Final passive clauses: 6883
% Input formulas: 78
% Initial clauses: 201
% 
% Duplicate literals: 341
% Trivial inequalities: 138
% Fw subsumption resolutions: 2342
% Fw demodulations: 3374
% Bw demodulations: 141
% 
% Simple tautologies: 265
% Equational tautologies: 57
% Forward subsumptions: 14010
% Fw demodulations to eq. taut.: 5
% 
% Binary resolution: 8566
% Factoring: 1392
% Forward superposition: 7959
% Backward superposition: 4318
% Self superposition: 52
% Equality factoring: 26
% Equality resolution: 23
% 
% Split clauses: 326
% Split components: 653
% SAT solver clauses: 650
% SAT solver unit clauses: 7
% SAT solver binary clauses: 101
% 
% Sat splits: 326
% 
% TWLsolver clauses: 650
% TWLsolver calls for satisfiability: 463
% 
% Memory used [KB]: 13816
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.exhProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.exhProps
% SZS output start Proof for thm.exhProps
fof(f18908,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f18892,f298,f506,f669,f673,f303,f516,f374,f560,f18726,f18729,f16344,f16346,f297,f508,f671,f675,f379,f564])).
fof(f564,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X6))))) != s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1),s('type.exhSem.state'(X0),X2),s('type.exhSem.v',X3),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X4)))) ) | $spl86),
  inference(cnf_transformation,[],[f564_D])).
fof(f564_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X6))))) != s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1),s('type.exhSem.state'(X0),X2),s('type.exhSem.v',X3),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X4)))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f379,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X6))))) != s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1),s('type.exhSem.state'(X0),X2),s('type.exhSem.v',X3),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X4)))) )),
  inference(cnf_transformation,[],[f191])).
fof(f191,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X6))))) != s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1),s('type.exhSem.state'(X0),X2),s('type.exhSem.v',X3),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X4))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  inference(ennf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X6))))) = s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1),s('type.exhSem.state'(X0),X2),s('type.exhSem.v',X3),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X4))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  inference(flattening,[],[f144])).
fof(f144,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X6))))) = s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1),s('type.exhSem.state'(X0),X2),s('type.exhSem.v',X3),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X4))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X18] : ! [X12,X10,X8,X11,X9,X7] : (s('type.pair.prod'('type.exhSem.state'(X18),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X18),X9),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X7))))) = s('type.pair.prod'('type.exhSem.state'(X18),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X12),s('type.exhSem.state'(X18),X10),s('type.exhSem.v',X8),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X11))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  file('thm.exhProps.evaluate_sing|split|1','thm.exhProps.evaluate_length|split|1')).
fof(f675,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X6))))) != s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1),s('type.exhSem.state'(X0),X2),s('type.exhSem.v',X3),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X4))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X6)))) ) | $spl276),
  inference(cnf_transformation,[],[f675_D])).
fof(f675_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X6))))) != s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1),s('type.exhSem.state'(X0),X2),s('type.exhSem.v',X3),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X4))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X6)))) ) <=> ~$spl276),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl276])])).
fof(f671,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X6))) | s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X6))))) != s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1),s('type.exhSem.state'(X0),X2),s('type.exhSem.v',X3),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X4)))) ) | ($spl10 | $spl86)),
  inference(backward_demodulation,[],[f516,f564])).
fof(f508,plain,(
  s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK15),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) = s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK18),s('type.exhSem.state'(sK12),sK16),s('type.exhSem.v',sK14),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),sK17))) | $spl2),
  inference(cnf_transformation,[],[f508_D])).
fof(f508_D,plain,(
  s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK15),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) = s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK18),s('type.exhSem.state'(sK12),sK16),s('type.exhSem.v',sK14),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),sK17))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f297,plain,(
  s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK15),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) = s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK18),s('type.exhSem.state'(sK12),sK16),s('type.exhSem.v',sK14),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),sK17)))),
  inference(cnf_transformation,[],[f226])).
fof(f226,plain,(
  s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK15),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) = s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK18),s('type.exhSem.state'(sK12),sK16),s('type.exhSem.v',sK14),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),sK17))) & ! [X7] : s('type.list.list'('type.exhSem.v'),sK13) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X7),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18])],[f179])).
fof(f179,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X3),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X1))))) = s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X6),s('type.exhSem.state'(X0),X4),s('type.exhSem.v',X2),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X5))) & ! [X7] : s('type.list.list'('type.exhSem.v'),X1) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X7),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))))),
  inference(ennf_transformation,[],[f81])).
fof(f81,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X3),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X1))))) = s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X6),s('type.exhSem.state'(X0),X4),s('type.exhSem.v',X2),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X5))) => ? [X7] : s('type.list.list'('type.exhSem.v'),X1) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X7),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))))),
  inference(flattening,[],[f80])).
fof(f80,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6] : (s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X3),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X1))))) = s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X6),s('type.exhSem.state'(X0),X4),s('type.exhSem.v',X2),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X5))) => ? [X7] : s('type.list.list'('type.exhSem.v'),X1) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X7),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12] : (s('type.pair.prod'('type.exhSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X6),X9),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X7))))) = s('type.pair.prod'('type.exhSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X12),s('type.exhSem.state'(X6),X10),s('type.exhSem.v',X8),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X11))) => ? [X13] : s('type.list.list'('type.exhSem.v'),X7) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X13),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12] : (s('type.pair.prod'('type.exhSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X6),X9),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X7))))) = s('type.pair.prod'('type.exhSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_match_4'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X12),s('type.exhSem.state'(X6),X10),s('type.exhSem.v',X8),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X11))) => ? [X13] : s('type.list.list'('type.exhSem.v'),X7) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X13),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))))),
  file('thm.exhProps.evaluate_sing|split|1','thm.exhProps.evaluate_sing|split|1')).
fof(f16346,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK15),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) != s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),X0),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X1)))) ) | $spl3782),
  inference(cnf_transformation,[],[f16346_D])).
fof(f16346_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK15),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) != s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),X0),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X1)))) ) <=> ~$spl3782),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3782])])).
fof(f16344,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK15),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) != s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),X0),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X1)))) ) | ($spl2 | $spl276)),
  inference(superposition,[],[f675,f508])).
fof(f18729,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),sK13))) | $spl3876),
  inference(cnf_transformation,[],[f18729_D])).
fof(f18729_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),sK13))) <=> ~$spl3876),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3876])])).
fof(f18726,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),sK13))) | $spl3782),
  inference(equality_resolution,[],[f16346])).
fof(f560,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl78),
  inference(cnf_transformation,[],[f560_D])).
fof(f560_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f374,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(cnf_transformation,[],[f248])).
fof(f248,plain,(
  ! [X0,X1] : ((s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(nnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) <=> s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  inference(flattening,[],[f136])).
fof(f136,plain,(
  ! [X0] : ! [X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) <=> s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6] : ! [X21] : (s('type.list.list'(X6),X21) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,'const.list.HD_1'(s('type.list.list'(X6),X21))),s('type.list.list'(X6),'const.list.NIL_0'))) <=> s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X21))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  file('thm.exhProps.evaluate_sing|split|1','thm.misc.SING_HD|split|0')).
fof(f516,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl10),
  inference(cnf_transformation,[],[f516_D])).
fof(f516_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f303,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f41])).
fof(f41,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.exhProps.evaluate_sing|split|1','thm.numeral.numeral_distrib|split|13')).
fof(f673,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl272),
  inference(cnf_transformation,[],[f673_D])).
fof(f673_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0')))) ) <=> ~$spl272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl272])])).
fof(f669,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0')))) ) | ($spl10 | $spl78)),
  inference(backward_demodulation,[],[f516,f560])).
fof(f506,plain,(
  ( ! [X7] : (s('type.list.list'('type.exhSem.v'),sK13) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X7),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0')))) ) | $spl0),
  inference(cnf_transformation,[],[f506_D])).
fof(f506_D,plain,(
  ( ! [X7] : (s('type.list.list'('type.exhSem.v'),sK13) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X7),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0')))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f298,plain,(
  ( ! [X7] : (s('type.list.list'('type.exhSem.v'),sK13) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X7),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f226])).
fof(f18892,plain,(
  $false | ($spl0 | $spl272 | $spl3876)),
  inference(subsumption_resolution,[],[f18891,f506])).
fof(f18891,plain,(
  s('type.list.list'('type.exhSem.v'),sK13) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v','const.list.HD_1'(s('type.list.list'('type.exhSem.v'),sK13))),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))) | ($spl272 | $spl3876)),
  inference(trivial_inequality_removal,[],[f18731])).
fof(f18731,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.list.list'('type.exhSem.v'),sK13) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v','const.list.HD_1'(s('type.list.list'('type.exhSem.v'),sK13))),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))) | ($spl272 | $spl3876)),
  inference(superposition,[],[f673,f18729])).
% SZS output end Proof for thm.exhProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 684
% Passive clauses: 2079
% Generated clauses: 18883
% Final active clauses: 577
% Final passive clauses: 1273
% Input formulas: 78
% Initial clauses: 201
% 
% Duplicate literals: 127
% Trivial inequalities: 87
% Fw subsumption resolutions: 1089
% Fw demodulations: 1689
% Bw demodulations: 176
% Condensations: 118
% Global subsumptions: 13
% 
% Simple tautologies: 219
% Equational tautologies: 8
% Forward subsumptions: 11234
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 2366
% Factoring: 288
% Forward superposition: 4532
% Backward superposition: 5823
% Self superposition: 43
% Equality factoring: 2
% Equality resolution: 14
% 
% Split clauses: 34
% Split components: 68
% SAT solver clauses: 2403
% SAT solver unit clauses: 254
% SAT solver binary clauses: 82
% SAT solver learnt clauses: 30
% SAT solver learnt literals: 13
% 
% Sat splits: 34
% Sat splitting refutations: 45
% 
% TWLsolver clauses: 2347
% TWLsolver calls for satisfiability: 1770
% 
% Memory used [KB]: 13816
% Time elapsed: 0.438 s
% ------------------------------
% ------------------------------
% Success in time 1.061 s
