Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvlProps
% (24796)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 170
% Passive clauses: 2079
% Generated clauses: 22203
% Final active clauses: 155
% Final passive clauses: 1696
% Input formulas: 37
% Initial clauses: 114
% 
% Duplicate literals: 1537
% Trivial inequalities: 115
% Fw subsumption resolutions: 3190
% Fw demodulations: 3284
% Bw demodulations: 15
% 
% Simple tautologies: 375
% Equational tautologies: 19
% Forward subsumptions: 10024
% 
% Binary resolution: 244
% Forward superposition: 8389
% Backward superposition: 4941
% Self superposition: 133
% Equality factoring: 34
% Equality resolution: 28
% 
% Split clauses: 969
% Split components: 1944
% SAT solver clauses: 1772
% SAT solver unit clauses: 8
% SAT solver binary clauses: 69
% 
% Sat splits: 969
% 
% TWLsolver clauses: 1771
% TWLsolver calls for satisfiability: 228
% 
% Memory used [KB]: 12281
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvlProps
% (24812)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 105
% Passive clauses: 1023
% Generated clauses: 10550
% Final active clauses: 90
% Final passive clauses: 753
% Input formulas: 37
% Initial clauses: 114
% 
% Duplicate literals: 590
% Trivial inequalities: 152
% Fw subsumption resolutions: 691
% Fw demodulations: 850
% Bw demodulations: 173
% Condensations: 584
% Global subsumptions: 14
% 
% Simple tautologies: 209
% Equational tautologies: 23
% Forward subsumptions: 4199
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 235
% Forward superposition: 3112
% Backward superposition: 2696
% Self superposition: 156
% Equality factoring: 74
% Equality resolution: 11
% 
% Split clauses: 207
% Split components: 435
% SAT solver clauses: 1740
% SAT solver unit clauses: 122
% SAT solver binary clauses: 70
% SAT solver learnt clauses: 29
% SAT solver learnt literals: 6
% 
% Sat splits: 207
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1683
% TWLsolver calls for satisfiability: 1906
% 
% Memory used [KB]: 17142
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvlProps
% (24837)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 381
% Passive clauses: 7614
% Generated clauses: 82973
% Final active clauses: 60
% Final passive clauses: 209
% Input formulas: 37
% Initial clauses: 114
% Discarded non-redundant clauses: 5864
% 
% Duplicate literals: 2212
% Trivial inequalities: 559
% Fw subsumption resolutions: 5843
% Fw demodulations: 17120
% Bw demodulations: 2062
% Condensations: 2872
% Global subsumptions: 2618
% 
% Simple tautologies: 707
% Equational tautologies: 240
% Forward subsumptions: 39688
% Fw demodulations to eq. taut.: 5
% Bw demodulations to eq. taut.: 496
% 
% Unit resulting resolution: 1323
% Forward superposition: 21805
% Backward superposition: 14824
% Self superposition: 335
% Equality factoring: 125
% Equality resolution: 41
% 
% Split clauses: 165
% Split components: 342
% SAT solver clauses: 13244
% SAT solver unit clauses: 154
% SAT solver binary clauses: 1653
% 
% Sat splits: 165
% Sat splitting refutations: 2679
% 
% Memory used [KB]: 166308
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.bvlProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvlProps
% SZS output start Proof for thm.bvlProps
fof(f9152,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f257,f258,f259,f260,f261,f262,f263,f264,f339,f340,f341,f342,f343,f344,f345,f346,f286,f407,f408,f409,f410,f411,f412,f413,f414,f292,f284,f804,f968,f981,f986,f991,f996,f1001,f1006,f1011,f1016,f1021,f1026,f1031,f1036,f1041,f1046,f1051,f1056,f1062,f1069,f1075,f1082,f1088,f1094,f1100,f1107,f1112,f1117,f1122,f1127,f1132,f1137,f1142,f1147,f1154,f1160,f1166,f1172,f1178,f1184,f1190,f1196,f1202,f1208,f1215,f1222,f1227,f1232,f1237,f1242,f1247,f1252,f1257,f1262,f290,f1276,f1282,f1288,f1294,f1300,f1306,f1312,f1318,f1319,f1481,f1496,f1503,f1510,f1517,f1524,f1531,f1538,f1545,f288,f1561,f1569,f1577,f1585,f1593,f1601,f1609,f1617,f1773,f1833,f1844,f1855,f1341,f1860,f293,f1861,f1864,f1875,f1886,f1907,f1920,f300,f1933,f298,f1946,f2013,f2030,f2045,f305,f2178,f2263,f2314,f2333,f303,f2386,f2423,f2433,f2451,f2461,f2479,f2492,f2506,f2514,f2522,f2528,f2536,f301,f307,f296,f294,f2537,f1324,f2669,f2978,f2979,f3512,f3514,f5208,f5210,f7542,f7543,f1322,f9143,f9147])).
fof(f9147,plain,(
  $false | ($spl10 | $spl30)),
  inference(subsumption_resolution,[],[f9146,f251])).
fof(f251,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvlProps.bVarBound_ind',aHL_TRUTH)).
fof(f9146,plain,(
  ~p(s(bool,'T_0')) | ($spl10 | $spl30)),
  inference(forward_demodulation,[],[f9145,f2718])).
fof(f2718,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK10(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | $spl10),
  inference(resolution,[],[f2538,f242])).
fof(f242,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X20] : (s(bool,'T_0') = s(bool,X20) <=> p(s(bool,X20)))),
  file('thm.bvlProps.bVarBound_ind','thm.bool.EQ_CLAUSES|split|1')).
fof(f2538,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK10(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | $spl10),
  inference(resolution,[],[f294,f161])).
fof(f161,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK10(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP3(X0)) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0] : (~sP3(X0) | (! [X4] : (s('type.bvl.exp',X4) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',sK10(X0)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(X0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK12(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK10(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK10(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',sK11(X0)),s('type.bvl.exp',sK12(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12])],[f94])).
fof(f94,plain,(
  ! [X0] : (~sP3(X0) | ? [X1,X2,X3] : (! [X4] : (s('type.bvl.exp',X4) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',X1),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X2),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X3),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X2),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X2),s('type.bvl.exp',X3))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))),
  inference(rectify,[],[f93])).
fof(f93,plain,(
  ! [X0] : (~sP3(X0) | ? [X10,X11,X12] : (! [X13] : (s('type.bvl.exp',X13) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',X10),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X11),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X11),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X11),s('type.bvl.exp',X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))),
  inference(nnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0] : (~sP3(X0) | ? [X10,X11,X12] : (! [X13] : (s('type.bvl.exp',X13) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',X10),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X11),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X11),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X11),s('type.bvl.exp',X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f9145,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK10(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ($spl10 | $spl30)),
  inference(subsumption_resolution,[],[f9133,f245])).
fof(f245,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f69])).
fof(f69,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bvlProps.bVarBound_ind',aHL_FALSITY)).
fof(f9133,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK10(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ($spl10 | $spl30)),
  inference(superposition,[],[f1860,f2996])).
fof(f2996,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK10(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',sK11(sK5)),s('type.bvl.exp',sK12(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | $spl10),
  inference(resolution,[],[f2539,f204])).
fof(f204,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X0)) & (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0)) | p(s(bool,'F_0'))))),
  inference(flattening,[],[f118])).
fof(f118,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X0)) & (s(bool,'F_0') != s(bool,X0) | (~p(s(bool,X0)) | p(s(bool,'F_0')))))),
  inference(nnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0] : ((~p(s(bool,X0)) | p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X0))),
  inference(ennf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X0))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X20] : ((p(s(bool,X20)) => p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X20))),
  file('thm.bvlProps.bVarBound_ind','thm.bool.IMP_F_EQ_F')).
fof(f2539,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK10(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',sK11(sK5)),s('type.bvl.exp',sK12(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | $spl10),
  inference(resolution,[],[f294,f162])).
fof(f162,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK10(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',sK11(X0)),s('type.bvl.exp',sK12(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP3(X0)) )),
  inference(cnf_transformation,[],[f95])).
fof(f9143,plain,(
  $false | ($spl10 | $spl30)),
  inference(subsumption_resolution,[],[f9142,f294])).
fof(f9142,plain,(
  ~sP3(sK5) | $spl30),
  inference(subsumption_resolution,[],[f9123,f161])).
fof(f9123,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK10(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP3(sK5) | $spl30),
  inference(resolution,[],[f1860,f162])).
fof(f1322,plain,(
  ( ! [X0] : (s('type.bvl.exp',X0) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',sK10(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))) ) | $spl26),
  inference(cnf_transformation,[],[f1322_D])).
fof(f1322_D,plain,(
  ( ! [X0] : (s('type.bvl.exp',X0) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',sK10(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f7543,plain,(
  ( ! [X64,X63] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X63),s('type.option.option'('type.num.num'),X64),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK12(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) ) | $spl38),
  inference(cnf_transformation,[],[f7543_D])).
fof(f7543_D,plain,(
  ( ! [X64,X63] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X63),s('type.option.option'('type.num.num'),X64),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK12(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f7542,plain,(
  ( ! [X64,X65,X63] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X63),s('type.option.option'('type.num.num'),X64),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK12(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.bvl.exp',X65) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',sK10(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))) ) | $spl10),
  inference(subsumption_resolution,[],[f7437,f294])).
fof(f7437,plain,(
  ( ! [X64,X65,X63] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X63),s('type.option.option'('type.num.num'),X64),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK12(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.bvl.exp',X65) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',sK10(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ~sP3(sK5)) )),
  inference(resolution,[],[f783,f160])).
fof(f160,plain,(
  ( ! [X4,X0] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(X0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK12(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | s('type.bvl.exp',X4) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',sK10(X0)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ~sP3(X0)) )),
  inference(cnf_transformation,[],[f95])).
fof(f783,plain,(
  ( ! [X30,X28,X31,X29] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X28))),s('type.list.list'('type.bvl.exp'),X29)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X28))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X30),s('type.option.option'('type.num.num'),X31),s('type.list.list'('type.bvl.exp'),X29))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) )),
  inference(resolution,[],[f156,f242])).
fof(f156,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X3))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X4),s('type.option.option'('type.num.num'),X5),s('type.list.list'('type.bvl.exp'),X6))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X3))),s('type.list.list'('type.bvl.exp'),X6))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X30] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X30))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) & ! [X26,X27,X28,X29] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X26))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X27),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X26))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X28),s('type.list.list'('type.bvl.exp'),X29)))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X26))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X27),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X28),s('type.list.list'('type.bvl.exp'),X29))))))))) & ! [X24,X25] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X24))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ! [X20,X21,X22,X23] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X20))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X21),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X20))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X22),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X20))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X23),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X20))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X21),s('type.bvl.exp',X22),s('type.bvl.exp',X23))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X17,X18,X19] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X17))),s('type.list.list'('type.bvl.exp'),X18)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),X18))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X19),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X17))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X18),s('type.bvl.exp',X19))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X15,X16] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X15))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X16),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X15))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X16))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X13,X14] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X13))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X14),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X13))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X14))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X10,X11,X12] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X12)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X11),s('type.list.list'('type.bvl.exp'),X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X8,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X8),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X9),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X8),s('type.bvl.exp',X9))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X3,X4,X5,X6] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X3))),s('type.list.list'('type.bvl.exp'),X6)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X3))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X4),s('type.option.option'('type.num.num'),X5),s('type.list.list'('type.bvl.exp'),X6))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK6))),s('type.list.list'('type.bvl.exp'),sK7))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6,sK7])],[f88])).
fof(f88,plain,(
  ? [X0] : (! [X30] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X30))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) & ! [X26,X27,X28,X29] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X26))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X27),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X26))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X28),s('type.list.list'('type.bvl.exp'),X29)))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X26))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X27),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X28),s('type.list.list'('type.bvl.exp'),X29))))))))) & ! [X24,X25] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X24))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ! [X20,X21,X22,X23] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X20))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X21),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X20))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X22),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X20))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X23),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X20))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X21),s('type.bvl.exp',X22),s('type.bvl.exp',X23))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X17,X18,X19] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X17))),s('type.list.list'('type.bvl.exp'),X18)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),X18))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X19),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X17))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X18),s('type.bvl.exp',X19))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X15,X16] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X15))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X16),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X15))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X16))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X13,X14] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X13))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X14),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X13))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X14))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X10,X11,X12] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X12)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X11),s('type.list.list'('type.bvl.exp'),X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X8,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X8),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X9),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X8),s('type.bvl.exp',X9))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X3,X4,X5,X6] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X3))),s('type.list.list'('type.bvl.exp'),X6)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X3))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X4),s('type.option.option'('type.num.num'),X5),s('type.list.list'('type.bvl.exp'),X6))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ? [X1,X2] : ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X2)))))),
  inference(rectify,[],[f75])).
fof(f75,plain,(
  ? [X0] : (! [X28] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X28))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) & ! [X24,X25,X26,X27] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X24))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X25),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X24))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),X27)))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X24))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X25),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),X27))))))))) & ! [X22,X23] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X22))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X23))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ! [X18,X19,X20,X21] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X18))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X19),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X18))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X20),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X18))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X21),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X18))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X19),s('type.bvl.exp',X20),s('type.bvl.exp',X21))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X15,X16,X17] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X15))),s('type.list.list'('type.bvl.exp'),X16)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),X16))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X17),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X15))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X16),s('type.bvl.exp',X17))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X13,X14] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X13))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X14),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X13))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X14))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X11,X12] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X11))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X11))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X8,X9,X10] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X10)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X9),s('type.list.list'('type.bvl.exp'),X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X5,X6,X7] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X5))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X6),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X7),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X5))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X6),s('type.bvl.exp',X7))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X1,X2,X3,X4] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X2),s('type.option.option'('type.num.num'),X3),s('type.list.list'('type.bvl.exp'),X4))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ? [X29,X30] : ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X29))),s('type.list.list'('type.bvl.exp'),X30)))))),
  inference(flattening,[],[f74])).
fof(f74,plain,(
  ? [X0] : ((! [X28] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X28))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) & ! [X24,X25,X26,X27] : ((~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X24))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X25),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X24))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),X27))))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X24))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X25),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),X27))))))))) & ! [X22,X23] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X22))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X23))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ! [X18,X19,X20,X21] : ((~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X18))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X19),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X18))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X20),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X18))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X21),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X18))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X19),s('type.bvl.exp',X20),s('type.bvl.exp',X21))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X15,X16,X17] : ((~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X15))),s('type.list.list'('type.bvl.exp'),X16)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),X16))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X17),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X15))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X16),s('type.bvl.exp',X17))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X13,X14] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X13))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X14),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X13))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X14))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X11,X12] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X11))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X11))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X8,X9,X10] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X10)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X9),s('type.list.list'('type.bvl.exp'),X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X5,X6,X7] : ((~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X5))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X6),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X7),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X5))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X6),s('type.bvl.exp',X7))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X1,X2,X3,X4] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X2),s('type.option.option'('type.num.num'),X3),s('type.list.list'('type.bvl.exp'),X4))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))) & ? [X29,X30] : ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X29))),s('type.list.list'('type.bvl.exp'),X30)))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ((! [X28] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X28))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) & ! [X24,X25,X26,X27] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X24))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X25),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X24))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),X27))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X24))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X25),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),X27))))))))) & ! [X22,X23] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X22))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X23))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ! [X18,X19,X20,X21] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X18))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X19),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X18))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X20),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X18))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X21),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X18))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X19),s('type.bvl.exp',X20),s('type.bvl.exp',X21))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X15,X16,X17] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X15))),s('type.list.list'('type.bvl.exp'),X16)))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),X16))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X17),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X15))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X16),s('type.bvl.exp',X17))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X13,X14] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X13))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X14),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X13))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X14))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X11,X12] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X11))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X11))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X8,X9,X10] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X10)))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X9),s('type.list.list'('type.bvl.exp'),X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X5,X6,X7] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X5))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X6),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X7),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X5))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X6),s('type.bvl.exp',X7))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X1,X2,X3,X4] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X4)))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X2),s('type.option.option'('type.num.num'),X3),s('type.list.list'('type.bvl.exp'),X4))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))) => ! [X29,X30] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X29))),s('type.list.list'('type.bvl.exp'),X30)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((! [X7] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) & ! [X7,X8,X9,X10] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X8),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X9),s('type.list.list'('type.bvl.exp'),X10))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X8),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X9),s('type.list.list'('type.bvl.exp'),X10))))))))) & ! [X7,X11] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X11))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ! [X7,X12,X13,X14] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X13),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X14),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X12),s('type.bvl.exp',X13),s('type.bvl.exp',X14))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X10,X13] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),X10)))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),X10))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X13),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X10),s('type.bvl.exp',X13))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X12] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X12] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X15,X10] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),X10)))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X15),s('type.list.list'('type.bvl.exp'),X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X12,X13] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X13),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X12),s('type.bvl.exp',X13))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X16,X17,X10] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),X10)))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X16),s('type.option.option'('type.num.num'),X17),s('type.list.list'('type.bvl.exp'),X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))) => ! [X11,X18] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X11))),s('type.list.list'('type.bvl.exp'),X18)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((! [X7] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) & ! [X7,X8,X9,X10] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X8),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X9),s('type.list.list'('type.bvl.exp'),X10))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X8),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X9),s('type.list.list'('type.bvl.exp'),X10))))))))) & ! [X7,X11] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X11))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ! [X7,X12,X13,X14] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X13),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X14),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X12),s('type.bvl.exp',X13),s('type.bvl.exp',X14))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X10,X13] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),X10)))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),X10))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X13),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X10),s('type.bvl.exp',X13))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X12] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X12] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X15,X10] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),X10)))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X15),s('type.list.list'('type.bvl.exp'),X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X12,X13] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X13),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X12),s('type.bvl.exp',X13))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X16,X17,X10] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),X10)))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X16),s('type.option.option'('type.num.num'),X17),s('type.list.list'('type.bvl.exp'),X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))) => ! [X11,X18] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X11))),s('type.list.list'('type.bvl.exp'),X18)))))),
  file('thm.bvlProps.bVarBound_ind','thm.bvlProps.bVarBound_ind')).
fof(f5210,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK12(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | $spl36),
  inference(cnf_transformation,[],[f5210_D])).
fof(f5210_D,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK12(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f5208,plain,(
  ( ! [X15] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK12(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.bvl.exp',X15) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',sK10(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))) ) | $spl10),
  inference(subsumption_resolution,[],[f5138,f294])).
fof(f5138,plain,(
  ( ! [X15] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK12(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.bvl.exp',X15) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',sK10(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ~sP3(sK5)) )),
  inference(resolution,[],[f672,f160])).
fof(f672,plain,(
  ( ! [X23,X22] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X22))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X23),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X22))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X23))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) )),
  inference(resolution,[],[f153,f242])).
fof(f153,plain,(
  ( ! [X14,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X13))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X14))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X13))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X14),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f3514,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',sK12(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | $spl34),
  inference(cnf_transformation,[],[f3514_D])).
fof(f3514_D,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',sK12(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f3512,plain,(
  ( ! [X15] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',sK12(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.bvl.exp',X15) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',sK10(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))) ) | $spl10),
  inference(subsumption_resolution,[],[f3464,f294])).
fof(f3464,plain,(
  ( ! [X15] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',sK12(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.bvl.exp',X15) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',sK10(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ~sP3(sK5)) )),
  inference(resolution,[],[f635,f160])).
fof(f635,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X15),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X15))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) )),
  inference(resolution,[],[f152,f242])).
fof(f152,plain,(
  ( ! [X15,X16] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X15))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X16))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X15))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X16),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f2979,plain,(
  ( ! [X50] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X50),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK12(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) ) | $spl32),
  inference(cnf_transformation,[],[f2979_D])).
fof(f2979_D,plain,(
  ( ! [X50] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X50),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK12(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f2978,plain,(
  ( ! [X50,X51] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X50),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK12(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.bvl.exp',X51) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',sK10(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))) ) | $spl10),
  inference(subsumption_resolution,[],[f2929,f294])).
fof(f2929,plain,(
  ( ! [X50,X51] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X50),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK12(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.bvl.exp',X51) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',sK10(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ~sP3(sK5)) )),
  inference(resolution,[],[f532,f160])).
fof(f532,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),X26)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X27),s('type.list.list'('type.bvl.exp'),X26))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) )),
  inference(resolution,[],[f154,f242])).
fof(f154,plain,(
  ( ! [X12,X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X11),s('type.list.list'('type.bvl.exp'),X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X12))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f2669,plain,(
  $false | ($spl16 | $spl25)),
  inference(subsumption_resolution,[],[f2668,f251])).
fof(f2668,plain,(
  ~p(s(bool,'T_0')) | ($spl16 | $spl25)),
  inference(forward_demodulation,[],[f2641,f1954])).
fof(f1954,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5)))) | $spl16),
  inference(resolution,[],[f300,f242])).
fof(f2641,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | $spl25),
  inference(resolution,[],[f307,f156])).
fof(f1324,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK12(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | $spl28),
  inference(cnf_transformation,[],[f1324_D])).
fof(f1324_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK12(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f2537,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK12(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | s('type.bvl.exp',X0) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',sK10(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))) ) | $spl10),
  inference(resolution,[],[f294,f160])).
fof(f294,plain,(
  sP3(sK5) | $spl10),
  inference(cnf_transformation,[],[f294_D])).
fof(f294_D,plain,(
  sP3(sK5) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f296,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | $spl12),
  inference(cnf_transformation,[],[f296_D])).
fof(f296_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f307,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | $spl25),
  inference(cnf_transformation,[],[f307_D])).
fof(f307_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f301,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1))))) ) | $spl18),
  inference(cnf_transformation,[],[f301_D])).
fof(f301_D,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f2536,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5)) ) | ($spl5 | $spl7 | $spl22)),
  inference(subsumption_resolution,[],[f2535,f207])).
fof(f207,plain,(
  ( ! [X0] : (p(s(bool,'T_0')) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0] : (((~p(s(bool,X0)) & ~p(s(bool,'T_0'))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | p(s(bool,X0)) | p(s(bool,'T_0'))))),
  inference(flattening,[],[f120])).
fof(f120,plain,(
  ! [X0] : (((~p(s(bool,X0)) & ~p(s(bool,'T_0'))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (p(s(bool,X0)) | p(s(bool,'T_0')))))),
  inference(nnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0] : ((p(s(bool,X0)) | p(s(bool,'T_0'))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X20] : ((p(s(bool,X20)) | p(s(bool,'T_0'))) <=> p(s(bool,'T_0')))),
  file('thm.bvlProps.bVarBound_ind','thm.bool.OR_CLAUSES|split|1')).
fof(f2535,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5)) ) | ($spl5 | $spl7 | $spl22)),
  inference(forward_demodulation,[],[f2534,f272])).
fof(f272,plain,(
  ( ! [X19] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) )),
  inference(resolution,[],[f147,f242])).
fof(f147,plain,(
  ( ! [X30] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X30))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f2534,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl22)),
  inference(subsumption_resolution,[],[f2533,f207])).
fof(f2533,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl22)),
  inference(forward_demodulation,[],[f2532,f395])).
fof(f395,plain,(
  ( ! [X23,X22] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X22))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X23))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) )),
  inference(resolution,[],[f149,f242])).
fof(f149,plain,(
  ( ! [X24,X25] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X24))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f2532,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl22)),
  inference(subsumption_resolution,[],[f1847,f304])).
fof(f304,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | $spl22),
  inference(cnf_transformation,[],[f304_D])).
fof(f304_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f1847,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1846,f840])).
fof(f840,plain,(
  ~sP1(sK5)),
  inference(subsumption_resolution,[],[f839,f166])).
fof(f166,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK16(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK17(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP1(X0)) )),
  inference(cnf_transformation,[],[f101])).
fof(f101,plain,(
  ! [X0] : (~sP1(X0) | (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK16(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK17(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK16(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK18(X0)),s('type.list.list'('type.bvl.exp'),sK19(X0))))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK16(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK17(X0)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK18(X0)),s('type.list.list'('type.bvl.exp'),sK19(X0)))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16,sK17,sK18,sK19])],[f100])).
fof(f100,plain,(
  ! [X0] : (~sP1(X0) | ? [X1,X2,X3,X4] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X2),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X3),s('type.list.list'('type.bvl.exp'),X4)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X2),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X3),s('type.list.list'('type.bvl.exp'),X4))))))))))),
  inference(rectify,[],[f99])).
fof(f99,plain,(
  ! [X0] : (~sP1(X0) | ? [X25,X26,X27,X28] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X27),s('type.list.list'('type.bvl.exp'),X28)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X27),s('type.list.list'('type.bvl.exp'),X28))))))))))),
  inference(nnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0] : (~sP1(X0) | ? [X25,X26,X27,X28] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X27),s('type.list.list'('type.bvl.exp'),X28)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X27),s('type.list.list'('type.bvl.exp'),X28))))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f839,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK16(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK17(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP1(sK5)),
  inference(subsumption_resolution,[],[f820,f167])).
fof(f167,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK16(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK18(X0)),s('type.list.list'('type.bvl.exp'),sK19(X0))))))) | ~sP1(X0)) )),
  inference(cnf_transformation,[],[f101])).
fof(f820,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK16(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK18(sK5)),s('type.list.list'('type.bvl.exp'),sK19(sK5))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK16(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK17(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP1(sK5)),
  inference(resolution,[],[f148,f168])).
fof(f168,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK16(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK17(X0)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK18(X0)),s('type.list.list'('type.bvl.exp'),sK19(X0))))))))) | ~sP1(X0)) )),
  inference(cnf_transformation,[],[f101])).
fof(f148,plain,(
  ( ! [X28,X26,X29,X27] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X26))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X27),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X28),s('type.list.list'('type.bvl.exp'),X29)))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X26))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X28),s('type.list.list'('type.bvl.exp'),X29)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X26))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X27),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f1846,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1845,f289])).
fof(f289,plain,(
  ~sP2(sK5) | $spl7),
  inference(cnf_transformation,[],[f289_D])).
fof(f289_D,plain,(
  ~sP2(sK5) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f1845,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl5),
  inference(subsumption_resolution,[],[f1552,f646])).
fof(f646,plain,(
  ~sP4(sK5)),
  inference(subsumption_resolution,[],[f627,f158])).
fof(f158,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK8(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK9(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP4(X0)) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0] : (~sP4(X0) | (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK8(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK9(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK8(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',sK9(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9])],[f91])).
fof(f91,plain,(
  ! [X0] : (~sP4(X0) | ? [X1,X2] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X2),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X2))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))),
  inference(rectify,[],[f90])).
fof(f90,plain,(
  ! [X0] : (~sP4(X0) | ? [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X15),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X15))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))),
  inference(nnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0] : (~sP4(X0) | ? [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X15),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X15))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f627,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK8(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK9(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP4(sK5)),
  inference(resolution,[],[f152,f159])).
fof(f159,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK8(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',sK9(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP4(X0)) )),
  inference(cnf_transformation,[],[f92])).
fof(f1552,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl5),
  inference(resolution,[],[f287,f179])).
fof(f179,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK32(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(X0)),s('type.option.option'('type.num.num'),sK34(X0)),s('type.list.list'('type.bvl.exp'),sK35(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK30(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK27(X0)))),s('type.list.list'('type.bvl.exp'),sK29(X0))))) | sP3(X0) | sP4(X0) | sP2(X0) | sP0(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK25(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK24(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK24(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | sP1(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK25(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(X0) | sP2(X0) | sP4(X0) | sP3(X0) | (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK27(X0)))),s('type.list.list'('type.bvl.exp'),sK29(X0))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK27(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(X0)),s('type.list.list'('type.bvl.exp'),sK29(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK30(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK30(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK32(X0)))),s('type.list.list'('type.bvl.exp'),sK35(X0))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK32(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(X0)),s('type.option.option'('type.num.num'),sK34(X0)),s('type.list.list'('type.bvl.exp'),sK35(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ! [X1,X2] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK24,sK25,sK26,sK27,sK28,sK29,sK30,sK31,sK32,sK33,sK34,sK35])],[f105])).
fof(f105,plain,(
  ! [X0] : (? [X14] : ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | sP1(X0) | ? [X12,X13] : ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X13))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(X0) | sP2(X0) | sP4(X0) | sP3(X0) | ? [X9,X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X9))),s('type.list.list'('type.bvl.exp'),X11)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X9))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X10),s('type.list.list'('type.bvl.exp'),X11))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ? [X7,X8] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X8),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X8))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ? [X3,X4,X5,X6] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X3))),s('type.list.list'('type.bvl.exp'),X6)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X3))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X4),s('type.option.option'('type.num.num'),X5),s('type.list.list'('type.bvl.exp'),X6))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ! [X1,X2] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X2)))))),
  inference(rectify,[],[f87])).
fof(f87,plain,(
  ! [X0] : (? [X29] : ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X29))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | sP1(X0) | ? [X23,X24] : ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X23))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X24))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(X0) | sP2(X0) | sP4(X0) | sP3(X0) | ? [X7,X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),X9)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X8),s('type.list.list'('type.bvl.exp'),X9))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ? [X5,X6] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X5))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X6),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X5))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X6))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ? [X1,X2,X3,X4] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X4)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X2),s('type.option.option'('type.num.num'),X3),s('type.list.list'('type.bvl.exp'),X4))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ! [X30,X31] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X30))),s('type.list.list'('type.bvl.exp'),X31)))))),
  inference(definition_folding,[],[f77,f86,f85,f84,f83,f82])).
fof(f82,plain,(
  ! [X0] : (~sP0(X0) | ? [X19,X20,X21,X22] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X20),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X21),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X22),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X20),s('type.bvl.exp',X21),s('type.bvl.exp',X22))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f84,plain,(
  ! [X0] : (~sP2(X0) | ? [X16,X17,X18] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X16))),s('type.list.list'('type.bvl.exp'),X17)))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),X17))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X18),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X16))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X17),s('type.bvl.exp',X18))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f77,plain,(
  ! [X0] : (? [X29] : ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X29))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ? [X25,X26,X27,X28] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X27),s('type.list.list'('type.bvl.exp'),X28)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X27),s('type.list.list'('type.bvl.exp'),X28))))))))) | ? [X23,X24] : ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X23))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X24))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ? [X19,X20,X21,X22] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X20),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X21),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X22),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X20),s('type.bvl.exp',X21),s('type.bvl.exp',X22))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ? [X16,X17,X18] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X16))),s('type.list.list'('type.bvl.exp'),X17)))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),X17))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X18),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X16))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X17),s('type.bvl.exp',X18))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ? [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X15),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X15))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ? [X10,X11,X12] : (! [X13] : (s('type.bvl.exp',X13) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',X10),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X11),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X11),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X11),s('type.bvl.exp',X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ? [X7,X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),X9)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X8),s('type.list.list'('type.bvl.exp'),X9))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ? [X5,X6] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X5))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X6),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X5))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X6))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ? [X1,X2,X3,X4] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X4)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X2),s('type.option.option'('type.num.num'),X3),s('type.list.list'('type.bvl.exp'),X4))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ! [X30,X31] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X30))),s('type.list.list'('type.bvl.exp'),X31)))))),
  inference(flattening,[],[f76])).
fof(f76,plain,(
  ! [X0] : ((? [X29] : ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X29))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ? [X25,X26,X27,X28] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X27),s('type.list.list'('type.bvl.exp'),X28))))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X27),s('type.list.list'('type.bvl.exp'),X28))))))))) | ? [X23,X24] : ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X23))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X24))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ? [X19,X20,X21,X22] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X20),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X21),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X22),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X20),s('type.bvl.exp',X21),s('type.bvl.exp',X22))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ? [X16,X17,X18] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X16))),s('type.list.list'('type.bvl.exp'),X17)))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),X17))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X18),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X16))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X17),s('type.bvl.exp',X18))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ? [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X15),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X15))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ? [X10,X11,X12] : ((! [X13] : (s('type.bvl.exp',X13) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',X10),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X11),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X11),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X11),s('type.bvl.exp',X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ? [X7,X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),X9)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X8),s('type.list.list'('type.bvl.exp'),X9))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ? [X5,X6] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X5))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X6),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X5))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X6))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ? [X1,X2,X3,X4] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X4)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X2),s('type.option.option'('type.num.num'),X3),s('type.list.list'('type.bvl.exp'),X4))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))) | ! [X30,X31] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X30))),s('type.list.list'('type.bvl.exp'),X31)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0] : ((! [X29] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X29))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) & ! [X25,X26,X27,X28] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X27),s('type.list.list'('type.bvl.exp'),X28))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X25))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X27),s('type.list.list'('type.bvl.exp'),X28))))))))) & ! [X23,X24] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X23))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X24))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ! [X19,X20,X21,X22] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X20),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X21),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X22),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X20),s('type.bvl.exp',X21),s('type.bvl.exp',X22))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X16,X17,X18] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X16))),s('type.list.list'('type.bvl.exp'),X17)))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),X17))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X18),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X16))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X17),s('type.bvl.exp',X18))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X15),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X15))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X10,X11,X12] : ((! [X13] : (s('type.bvl.exp',X13) = s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',X10),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X11),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X11),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X11),s('type.bvl.exp',X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),X9)))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X8),s('type.list.list'('type.bvl.exp'),X9))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X5,X6] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X5))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X6),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X5))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X6))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X1,X2,X3,X4] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X4)))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X2),s('type.option.option'('type.num.num'),X3),s('type.list.list'('type.bvl.exp'),X4))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))) => ! [X30,X31] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X30))),s('type.list.list'('type.bvl.exp'),X31)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ((! [X7] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) & ! [X7,X8,X9,X10] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X8),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X9),s('type.list.list'('type.bvl.exp'),X10))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X8),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X9),s('type.list.list'('type.bvl.exp'),X10))))))))) & ! [X7,X11] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X11))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ! [X7,X12,X13,X14] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X13),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X14),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X12),s('type.bvl.exp',X13),s('type.bvl.exp',X14))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X10,X13] : ((p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),X10)))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),X10))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X13),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X10),s('type.bvl.exp',X13))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X12] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X12,X13] : ((! [X19] : (s('type.bvl.exp',X19) = s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X13),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X12),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X12),s('type.bvl.exp',X13))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X15,X10] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),X10)))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X15),s('type.list.list'('type.bvl.exp'),X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X8] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X8),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X8))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) & ! [X7,X20,X17,X10] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),X10)))) => p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X20),s('type.option.option'('type.num.num'),X17),s('type.list.list'('type.bvl.exp'),X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))) => ! [X11,X18] : p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X6),s('type.num.num',X11))),s('type.list.list'('type.bvl.exp'),X18)))))),
  file('thm.bvlProps.bVarBound_ind','thm.bvl_handle.compile_ind')).
fof(f287,plain,(
  ~sP0(sK5) | $spl5),
  inference(cnf_transformation,[],[f287_D])).
fof(f287_D,plain,(
  ~sP0(sK5) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f2528,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5)) ) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2527,f207])).
fof(f2527,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5)) ) | ($spl5 | $spl7 | $spl15)),
  inference(forward_demodulation,[],[f2526,f272])).
fof(f2526,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2525,f207])).
fof(f2525,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl15)),
  inference(forward_demodulation,[],[f2524,f395])).
fof(f2524,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2523,f210])).
fof(f210,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'F_0'))) )),
  inference(cnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0] : (((~p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,X0))) & (~p(s(bool,X0)) | p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f122])).
fof(f122,plain,(
  ! [X0] : (((~p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,X0))) & (~p(s(bool,X0)) | (p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : ((p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,X0)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X20] : ((p(s(bool,'F_0')) | p(s(bool,X20))) <=> p(s(bool,X20)))),
  file('thm.bvlProps.bVarBound_ind','thm.bool.OR_CLAUSES|split|2')).
fof(f2523,plain,(
  ( ! [X8,X9] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl15)),
  inference(forward_demodulation,[],[f1878,f1981])).
fof(f1981,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | $spl15),
  inference(resolution,[],[f297,f204])).
fof(f297,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | $spl15),
  inference(cnf_transformation,[],[f297_D])).
fof(f297_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f1878,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1877,f840])).
fof(f1877,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1876,f289])).
fof(f1876,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl5),
  inference(subsumption_resolution,[],[f1550,f646])).
fof(f1550,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl5),
  inference(resolution,[],[f287,f177])).
fof(f177,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK32(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(X0)),s('type.option.option'('type.num.num'),sK34(X0)),s('type.list.list'('type.bvl.exp'),sK35(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK30(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK27(X0)))),s('type.list.list'('type.bvl.exp'),sK29(X0))))) | sP3(X0) | sP4(X0) | sP2(X0) | sP0(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK25(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK24(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f2522,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5)) ) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2521,f207])).
fof(f2521,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5)) ) | ($spl5 | $spl7 | $spl15)),
  inference(forward_demodulation,[],[f2520,f272])).
fof(f2520,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2519,f207])).
fof(f2519,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl15)),
  inference(forward_demodulation,[],[f2518,f395])).
fof(f2518,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2517,f840])).
fof(f2517,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2516,f287])).
fof(f2516,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2515,f289])).
fof(f2515,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl15),
  inference(subsumption_resolution,[],[f1971,f646])).
fof(f1971,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl15),
  inference(resolution,[],[f297,f177])).
fof(f2514,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2513,f207])).
fof(f2513,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ($spl5 | $spl7 | $spl15)),
  inference(forward_demodulation,[],[f2512,f272])).
fof(f2512,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2511,f207])).
fof(f2511,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15)),
  inference(forward_demodulation,[],[f2510,f395])).
fof(f2510,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2509,f840])).
fof(f2509,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2508,f287])).
fof(f2508,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2507,f289])).
fof(f2507,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl15),
  inference(subsumption_resolution,[],[f2014,f646])).
fof(f2014,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl15),
  inference(subsumption_resolution,[],[f1977,f297])).
fof(f1977,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl15),
  inference(resolution,[],[f297,f177])).
fof(f2506,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ($spl5 | $spl7 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2505,f207])).
fof(f2505,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ($spl5 | $spl7 | $spl15 | $spl22)),
  inference(forward_demodulation,[],[f2504,f272])).
fof(f2504,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2503,f207])).
fof(f2503,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15 | $spl22)),
  inference(forward_demodulation,[],[f2502,f395])).
fof(f2502,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2501,f840])).
fof(f2501,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2500,f287])).
fof(f2500,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl7 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2499,f289])).
fof(f2499,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2498,f646])).
fof(f2498,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl15 | $spl22)),
  inference(subsumption_resolution,[],[f1979,f304])).
fof(f1979,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl15),
  inference(resolution,[],[f297,f179])).
fof(f2492,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5)) ) | ($spl5 | $spl7 | $spl22)),
  inference(subsumption_resolution,[],[f2491,f207])).
fof(f2491,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5)) ) | ($spl5 | $spl7 | $spl22)),
  inference(forward_demodulation,[],[f2490,f272])).
fof(f2490,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl22)),
  inference(subsumption_resolution,[],[f2489,f207])).
fof(f2489,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl22)),
  inference(forward_demodulation,[],[f2488,f395])).
fof(f2488,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl22)),
  inference(subsumption_resolution,[],[f2487,f840])).
fof(f2487,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl22)),
  inference(subsumption_resolution,[],[f2486,f287])).
fof(f2486,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl22)),
  inference(subsumption_resolution,[],[f2485,f289])).
fof(f2485,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl22),
  inference(subsumption_resolution,[],[f2133,f646])).
fof(f2133,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl22),
  inference(resolution,[],[f304,f179])).
fof(f2479,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5)) ) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2478,f207])).
fof(f2478,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5)) ) | ($spl5 | $spl7 | $spl15)),
  inference(forward_demodulation,[],[f2477,f272])).
fof(f2477,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2476,f207])).
fof(f2476,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl15)),
  inference(forward_demodulation,[],[f2475,f395])).
fof(f2475,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2474,f840])).
fof(f2474,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2473,f287])).
fof(f2473,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2472,f289])).
fof(f2472,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl15),
  inference(subsumption_resolution,[],[f2247,f646])).
fof(f2247,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl15),
  inference(subsumption_resolution,[],[f2190,f210])).
fof(f2190,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl15),
  inference(superposition,[],[f177,f1981])).
fof(f2461,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2460,f207])).
fof(f2460,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ($spl5 | $spl7 | $spl15)),
  inference(forward_demodulation,[],[f2459,f272])).
fof(f2459,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2458,f207])).
fof(f2458,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15)),
  inference(forward_demodulation,[],[f2457,f395])).
fof(f2457,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2456,f210])).
fof(f2456,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15)),
  inference(forward_demodulation,[],[f2455,f1981])).
fof(f2455,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2454,f840])).
fof(f2454,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2453,f287])).
fof(f2453,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl7 | $spl15)),
  inference(subsumption_resolution,[],[f2452,f289])).
fof(f2452,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl15),
  inference(subsumption_resolution,[],[f2294,f646])).
fof(f2294,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl15),
  inference(subsumption_resolution,[],[f2196,f210])).
fof(f2196,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl15),
  inference(superposition,[],[f177,f1981])).
fof(f2451,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ($spl5 | $spl7 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2450,f207])).
fof(f2450,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ($spl5 | $spl7 | $spl15 | $spl22)),
  inference(forward_demodulation,[],[f2449,f272])).
fof(f2449,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2448,f207])).
fof(f2448,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15 | $spl22)),
  inference(forward_demodulation,[],[f2447,f395])).
fof(f2447,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2446,f840])).
fof(f2446,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2445,f287])).
fof(f2445,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl7 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2444,f289])).
fof(f2444,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2316,f646])).
fof(f2316,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2315,f304])).
fof(f2315,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl15),
  inference(subsumption_resolution,[],[f2198,f210])).
fof(f2198,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl15),
  inference(superposition,[],[f179,f1981])).
fof(f2433,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ($spl5 | $spl7 | $spl15 | $spl21)),
  inference(subsumption_resolution,[],[f2432,f207])).
fof(f2432,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ($spl5 | $spl7 | $spl15 | $spl21)),
  inference(forward_demodulation,[],[f2431,f272])).
fof(f2431,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15 | $spl21)),
  inference(subsumption_resolution,[],[f2430,f207])).
fof(f2430,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15 | $spl21)),
  inference(forward_demodulation,[],[f2429,f395])).
fof(f2429,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15 | $spl21)),
  inference(subsumption_resolution,[],[f2428,f210])).
fof(f2428,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl15 | $spl21)),
  inference(forward_demodulation,[],[f2427,f1981])).
fof(f2427,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl21)),
  inference(subsumption_resolution,[],[f2426,f840])).
fof(f2426,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl21)),
  inference(subsumption_resolution,[],[f2425,f287])).
fof(f2425,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl7 | $spl21)),
  inference(subsumption_resolution,[],[f2424,f289])).
fof(f2424,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl21),
  inference(subsumption_resolution,[],[f2363,f646])).
fof(f2363,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl21),
  inference(resolution,[],[f303,f177])).
fof(f2423,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ($spl5 | $spl7 | $spl21 | $spl22)),
  inference(subsumption_resolution,[],[f2422,f207])).
fof(f2422,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ($spl5 | $spl7 | $spl21 | $spl22)),
  inference(forward_demodulation,[],[f2421,f272])).
fof(f2421,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl21 | $spl22)),
  inference(subsumption_resolution,[],[f2420,f207])).
fof(f2420,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl21 | $spl22)),
  inference(forward_demodulation,[],[f2419,f395])).
fof(f2419,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl21 | $spl22)),
  inference(subsumption_resolution,[],[f2418,f840])).
fof(f2418,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl21 | $spl22)),
  inference(subsumption_resolution,[],[f2417,f287])).
fof(f2417,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl7 | $spl21 | $spl22)),
  inference(subsumption_resolution,[],[f2416,f289])).
fof(f2416,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl21 | $spl22)),
  inference(subsumption_resolution,[],[f2408,f646])).
fof(f2408,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl21 | $spl22)),
  inference(subsumption_resolution,[],[f2365,f304])).
fof(f2365,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl21),
  inference(resolution,[],[f303,f179])).
fof(f2386,plain,(
  $false | ($spl12 | $spl21)),
  inference(subsumption_resolution,[],[f2385,f251])).
fof(f2385,plain,(
  ~p(s(bool,'T_0')) | ($spl12 | $spl21)),
  inference(forward_demodulation,[],[f2358,f1625])).
fof(f1625,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5)))) | $spl12),
  inference(resolution,[],[f296,f242])).
fof(f2358,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | $spl21),
  inference(resolution,[],[f303,f154])).
fof(f303,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | $spl21),
  inference(cnf_transformation,[],[f303_D])).
fof(f303_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f2333,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ($spl5 | $spl7 | $spl11 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2332,f207])).
fof(f2332,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ($spl5 | $spl7 | $spl11 | $spl15 | $spl22)),
  inference(forward_demodulation,[],[f2331,f272])).
fof(f2331,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2330,f207])).
fof(f2330,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15 | $spl22)),
  inference(forward_demodulation,[],[f2329,f395])).
fof(f2329,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2328,f840])).
fof(f2328,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2327,f287])).
fof(f2327,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl7 | $spl11 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2326,f289])).
fof(f2326,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl11 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2325,f646])).
fof(f2325,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl11 | $spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2324,f293])).
fof(f2324,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl15 | $spl22)),
  inference(subsumption_resolution,[],[f2323,f304])).
fof(f2323,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl15),
  inference(subsumption_resolution,[],[f2199,f245])).
fof(f2199,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl15),
  inference(superposition,[],[f180,f1981])).
fof(f180,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK32(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(X0)),s('type.option.option'('type.num.num'),sK34(X0)),s('type.list.list'('type.bvl.exp'),sK35(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK30(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK27(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(X0)),s('type.list.list'('type.bvl.exp'),sK29(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(X0) | sP4(X0) | sP2(X0) | sP0(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK25(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK24(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f2314,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2313,f207])).
fof(f2313,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f2312,f272])).
fof(f2312,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2311,f207])).
fof(f2311,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f2310,f395])).
fof(f2310,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2309,f245])).
fof(f2309,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f2308,f1981])).
fof(f2308,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2307,f840])).
fof(f2307,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2306,f287])).
fof(f2306,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2305,f289])).
fof(f2305,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2304,f646])).
fof(f2304,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2303,f293])).
fof(f2303,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl15),
  inference(subsumption_resolution,[],[f2197,f210])).
fof(f2197,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl15),
  inference(superposition,[],[f178,f1981])).
fof(f178,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK32(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(X0)),s('type.option.option'('type.num.num'),sK34(X0)),s('type.list.list'('type.bvl.exp'),sK35(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK30(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK27(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(X0)),s('type.list.list'('type.bvl.exp'),sK29(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(X0) | sP4(X0) | sP2(X0) | sP0(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK25(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK24(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f2263,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2262,f207])).
fof(f2262,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f2261,f272])).
fof(f2261,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2260,f207])).
fof(f2260,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f2259,f395])).
fof(f2259,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2258,f840])).
fof(f2258,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2257,f287])).
fof(f2257,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2256,f289])).
fof(f2256,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2255,f646])).
fof(f2255,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2254,f293])).
fof(f2254,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl15),
  inference(subsumption_resolution,[],[f2191,f210])).
fof(f2191,plain,(
  ( ! [X6,X7] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl15),
  inference(superposition,[],[f178,f1981])).
fof(f2178,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11 | $spl22)),
  inference(subsumption_resolution,[],[f2177,f207])).
fof(f2177,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11 | $spl22)),
  inference(forward_demodulation,[],[f2176,f272])).
fof(f2176,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11 | $spl22)),
  inference(subsumption_resolution,[],[f2175,f207])).
fof(f2175,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11 | $spl22)),
  inference(forward_demodulation,[],[f2174,f395])).
fof(f2174,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11 | $spl22)),
  inference(subsumption_resolution,[],[f2173,f840])).
fof(f2173,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11 | $spl22)),
  inference(subsumption_resolution,[],[f2172,f287])).
fof(f2172,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11 | $spl22)),
  inference(subsumption_resolution,[],[f2171,f289])).
fof(f2171,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl11 | $spl22)),
  inference(subsumption_resolution,[],[f2170,f646])).
fof(f2170,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl11 | $spl22)),
  inference(subsumption_resolution,[],[f2134,f293])).
fof(f2134,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl22),
  inference(resolution,[],[f304,f180])).
fof(f305,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | $spl23),
  inference(cnf_transformation,[],[f305_D])).
fof(f305_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f2045,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2044,f207])).
fof(f2044,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f2043,f272])).
fof(f2043,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2042,f207])).
fof(f2042,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f2041,f395])).
fof(f2041,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2040,f840])).
fof(f2040,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2039,f287])).
fof(f2039,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2038,f289])).
fof(f2038,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2037,f646])).
fof(f2037,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl11 | $spl15)),
  inference(subsumption_resolution,[],[f1980,f293])).
fof(f1980,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl15),
  inference(resolution,[],[f297,f180])).
fof(f2030,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2029,f207])).
fof(f2029,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f2028,f272])).
fof(f2028,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2027,f207])).
fof(f2027,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f2026,f395])).
fof(f2026,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2025,f840])).
fof(f2025,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2024,f287])).
fof(f2024,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2023,f289])).
fof(f2023,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2022,f646])).
fof(f2022,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | ($spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2021,f293])).
fof(f2021,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl15),
  inference(subsumption_resolution,[],[f1978,f297])).
fof(f1978,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) | $spl15),
  inference(resolution,[],[f297,f178])).
fof(f2013,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2012,f207])).
fof(f2012,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f2011,f272])).
fof(f2011,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2010,f207])).
fof(f2010,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f2009,f395])).
fof(f2009,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2008,f840])).
fof(f2008,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2007,f287])).
fof(f2007,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2006,f289])).
fof(f2006,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl11 | $spl15)),
  inference(subsumption_resolution,[],[f2005,f646])).
fof(f2005,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl11 | $spl15)),
  inference(subsumption_resolution,[],[f1972,f293])).
fof(f1972,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl15),
  inference(resolution,[],[f297,f178])).
fof(f1946,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1945,f207])).
fof(f1945,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1944,f272])).
fof(f1944,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1943,f207])).
fof(f1943,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1942,f395])).
fof(f1942,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1941,f840])).
fof(f1941,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1940,f287])).
fof(f1940,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1939,f289])).
fof(f1939,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(subsumption_resolution,[],[f1894,f646])).
fof(f1894,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(resolution,[],[f293,f180])).
fof(f298,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | $spl14),
  inference(cnf_transformation,[],[f298_D])).
fof(f298_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f1933,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1932,f207])).
fof(f1932,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1931,f272])).
fof(f1931,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1930,f207])).
fof(f1930,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1929,f395])).
fof(f1929,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1928,f840])).
fof(f1928,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1927,f287])).
fof(f1927,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1926,f289])).
fof(f1926,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(subsumption_resolution,[],[f1892,f646])).
fof(f1892,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(resolution,[],[f293,f178])).
fof(f300,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | $spl16),
  inference(cnf_transformation,[],[f300_D])).
fof(f300_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f1920,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1919,f207])).
fof(f1919,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1918,f272])).
fof(f1918,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1917,f207])).
fof(f1917,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1916,f395])).
fof(f1916,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1915,f840])).
fof(f1915,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1914,f287])).
fof(f1914,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1913,f289])).
fof(f1913,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(subsumption_resolution,[],[f1890,f646])).
fof(f1890,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(resolution,[],[f293,f176])).
fof(f176,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK32(X0)))),s('type.list.list'('type.bvl.exp'),sK35(X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK30(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK27(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(X0)),s('type.list.list'('type.bvl.exp'),sK29(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(X0) | sP4(X0) | sP2(X0) | sP0(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK25(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK24(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f1907,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1906,f207])).
fof(f1906,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1905,f272])).
fof(f1905,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1904,f207])).
fof(f1904,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1903,f395])).
fof(f1903,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1902,f840])).
fof(f1902,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1901,f287])).
fof(f1901,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1900,f289])).
fof(f1900,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(subsumption_resolution,[],[f1888,f646])).
fof(f1888,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(resolution,[],[f293,f174])).
fof(f174,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK32(X0)))),s('type.list.list'('type.bvl.exp'),sK35(X0))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK30(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK27(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(X0)),s('type.list.list'('type.bvl.exp'),sK29(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(X0) | sP4(X0) | sP2(X0) | sP0(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK25(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK24(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f1886,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5)) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1885,f207])).
fof(f1885,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5)) ) | ($spl5 | $spl7)),
  inference(forward_demodulation,[],[f1884,f272])).
fof(f1884,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1883,f207])).
fof(f1883,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(forward_demodulation,[],[f1882,f395])).
fof(f1882,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1881,f840])).
fof(f1881,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1880,f289])).
fof(f1880,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl5),
  inference(subsumption_resolution,[],[f1551,f646])).
fof(f1551,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl5),
  inference(resolution,[],[f287,f178])).
fof(f1875,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5)) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1874,f207])).
fof(f1874,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5)) ) | ($spl5 | $spl7)),
  inference(forward_demodulation,[],[f1873,f272])).
fof(f1873,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1872,f207])).
fof(f1872,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(forward_demodulation,[],[f1871,f395])).
fof(f1871,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1870,f840])).
fof(f1870,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1869,f289])).
fof(f1869,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl5),
  inference(subsumption_resolution,[],[f1547,f646])).
fof(f1547,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl5),
  inference(resolution,[],[f287,f174])).
fof(f1864,plain,(
  $false | $spl26),
  inference(equality_resolution,[],[f1322])).
fof(f1861,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK12(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | s('type.bvl.exp',X0) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',sK10(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))) ) | $spl10),
  inference(resolution,[],[f294,f160])).
fof(f293,plain,(
  ~sP3(sK5) | $spl11),
  inference(cnf_transformation,[],[f293_D])).
fof(f293_D,plain,(
  ~sP3(sK5) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f1860,plain,(
  ( ! [X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK10(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X15),s('type.bvl.exp',sK12(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK10(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X15),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | $spl30),
  inference(cnf_transformation,[],[f1860_D])).
fof(f1860_D,plain,(
  ( ! [X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK10(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X15),s('type.bvl.exp',sK12(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK10(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X15),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f1341,plain,(
  ( ! [X15,X16] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK10(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X15),s('type.bvl.exp',sK12(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK10(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X15),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | s('type.bvl.exp',X16) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',sK10(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) | ~sP3(sK5)) )),
  inference(resolution,[],[f155,f160])).
fof(f155,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X9),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X8),s('type.bvl.exp',X9))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X7))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X8),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f1855,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5)) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1854,f207])).
fof(f1854,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5)) ) | ($spl5 | $spl7)),
  inference(forward_demodulation,[],[f1853,f272])).
fof(f1853,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1852,f207])).
fof(f1852,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(forward_demodulation,[],[f1851,f395])).
fof(f1851,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1850,f840])).
fof(f1850,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1849,f289])).
fof(f1849,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl5),
  inference(subsumption_resolution,[],[f1549,f646])).
fof(f1549,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl5),
  inference(resolution,[],[f287,f176])).
fof(f1844,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5)) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1843,f207])).
fof(f1843,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5)) ) | ($spl5 | $spl7)),
  inference(forward_demodulation,[],[f1842,f272])).
fof(f1842,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1841,f207])).
fof(f1841,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(forward_demodulation,[],[f1840,f395])).
fof(f1840,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1839,f840])).
fof(f1839,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7)),
  inference(subsumption_resolution,[],[f1838,f289])).
fof(f1838,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl5),
  inference(subsumption_resolution,[],[f1553,f646])).
fof(f1553,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl5),
  inference(resolution,[],[f287,f180])).
fof(f1833,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f1822,f245])).
fof(f1822,plain,(
  p(s(bool,'F_0')) | $spl18),
  inference(superposition,[],[f301,f321])).
fof(f321,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK6))),s('type.list.list'('type.bvl.exp'),sK7)))),
  inference(resolution,[],[f157,f204])).
fof(f157,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK6))),s('type.list.list'('type.bvl.exp'),sK7))))),
  inference(cnf_transformation,[],[f89])).
fof(f1773,plain,(
  $false | ($spl14 | $spl23)),
  inference(subsumption_resolution,[],[f1746,f298])).
fof(f1746,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | $spl23),
  inference(resolution,[],[f305,f153])).
fof(f1617,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1616,f207])).
fof(f1616,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1615,f272])).
fof(f1615,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1614,f207])).
fof(f1614,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1613,f395])).
fof(f1613,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1612,f840])).
fof(f1612,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1611,f289])).
fof(f1611,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1610,f646])).
fof(f1610,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1553,f293])).
fof(f1609,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5)))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1608,f207])).
fof(f1608,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5)))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1607,f272])).
fof(f1607,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1606,f207])).
fof(f1606,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1605,f395])).
fof(f1605,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1604,f840])).
fof(f1604,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1603,f289])).
fof(f1603,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1602,f646])).
fof(f1602,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP4(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1552,f293])).
fof(f1601,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1600,f207])).
fof(f1600,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1599,f272])).
fof(f1599,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1598,f207])).
fof(f1598,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1597,f395])).
fof(f1597,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1596,f840])).
fof(f1596,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1595,f289])).
fof(f1595,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1594,f646])).
fof(f1594,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1551,f293])).
fof(f1593,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5)))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1592,f207])).
fof(f1592,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5)))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1591,f272])).
fof(f1591,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1590,f207])).
fof(f1590,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1589,f395])).
fof(f1589,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1588,f840])).
fof(f1588,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1587,f289])).
fof(f1587,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1586,f646])).
fof(f1586,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP4(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1550,f293])).
fof(f1585,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1584,f207])).
fof(f1584,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1583,f272])).
fof(f1583,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1582,f207])).
fof(f1582,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1581,f395])).
fof(f1581,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1580,f840])).
fof(f1580,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1579,f289])).
fof(f1579,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1578,f646])).
fof(f1578,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1549,f293])).
fof(f1577,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5)))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1576,f207])).
fof(f1576,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5)))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1575,f272])).
fof(f1575,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1574,f207])).
fof(f1574,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1573,f395])).
fof(f1573,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1572,f840])).
fof(f1572,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1571,f289])).
fof(f1571,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1570,f646])).
fof(f1570,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP4(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1548,f293])).
fof(f1548,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl5),
  inference(resolution,[],[f287,f175])).
fof(f175,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK32(X0)))),s('type.list.list'('type.bvl.exp'),sK35(X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK30(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK27(X0)))),s('type.list.list'('type.bvl.exp'),sK29(X0))))) | sP3(X0) | sP4(X0) | sP2(X0) | sP0(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK25(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK24(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f1569,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1568,f207])).
fof(f1568,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1567,f272])).
fof(f1567,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1566,f207])).
fof(f1566,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1565,f395])).
fof(f1565,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1564,f840])).
fof(f1564,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1563,f289])).
fof(f1563,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1562,f646])).
fof(f1562,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1547,f293])).
fof(f1561,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5)))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1560,f250])).
fof(f250,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f35])).
fof(f35,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvlProps.bVarBound_ind','thm.bool.TRUTH')).
fof(f1560,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5)))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1559,f272])).
fof(f1559,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1558,f207])).
fof(f1558,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(forward_demodulation,[],[f1557,f395])).
fof(f1557,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1556,f840])).
fof(f1556,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1555,f289])).
fof(f1555,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1554,f646])).
fof(f1554,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP4(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl5 | $spl11)),
  inference(subsumption_resolution,[],[f1546,f293])).
fof(f1546,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl5),
  inference(resolution,[],[f287,f173])).
fof(f173,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK32(X0)))),s('type.list.list'('type.bvl.exp'),sK35(X0))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK30(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK27(X0)))),s('type.list.list'('type.bvl.exp'),sK29(X0))))) | sP3(X0) | sP4(X0) | sP2(X0) | sP0(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK25(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK24(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f288,plain,(
  sP0(sK5) | $spl4),
  inference(cnf_transformation,[],[f288_D])).
fof(f288_D,plain,(
  sP0(sK5) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1545,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5)) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1544,f250])).
fof(f1544,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5)) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f1543,f272])).
fof(f1543,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1542,f207])).
fof(f1542,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f1541,f395])).
fof(f1541,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1540,f840])).
fof(f1540,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1539,f289])).
fof(f1539,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(subsumption_resolution,[],[f1329,f646])).
fof(f1329,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(resolution,[],[f293,f173])).
fof(f1538,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5)) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1537,f207])).
fof(f1537,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5)) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f1536,f272])).
fof(f1536,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1535,f207])).
fof(f1535,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f1534,f395])).
fof(f1534,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1533,f840])).
fof(f1533,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1532,f289])).
fof(f1532,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(subsumption_resolution,[],[f1330,f646])).
fof(f1330,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(resolution,[],[f293,f174])).
fof(f1531,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5)) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1530,f207])).
fof(f1530,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5)) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f1529,f272])).
fof(f1529,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1528,f207])).
fof(f1528,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f1527,f395])).
fof(f1527,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1526,f840])).
fof(f1526,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1525,f289])).
fof(f1525,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(subsumption_resolution,[],[f1331,f646])).
fof(f1331,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(resolution,[],[f293,f175])).
fof(f1524,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5)) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1523,f207])).
fof(f1523,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5)) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f1522,f272])).
fof(f1522,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1521,f207])).
fof(f1521,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f1520,f395])).
fof(f1520,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1519,f840])).
fof(f1519,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1518,f289])).
fof(f1518,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(subsumption_resolution,[],[f1332,f646])).
fof(f1332,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(resolution,[],[f293,f176])).
fof(f1517,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5)) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1516,f207])).
fof(f1516,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5)) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f1515,f272])).
fof(f1515,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1514,f207])).
fof(f1514,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f1513,f395])).
fof(f1513,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1512,f840])).
fof(f1512,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1511,f289])).
fof(f1511,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(subsumption_resolution,[],[f1333,f646])).
fof(f1333,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(resolution,[],[f293,f177])).
fof(f1510,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5)) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1509,f207])).
fof(f1509,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5)) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f1508,f272])).
fof(f1508,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1507,f207])).
fof(f1507,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f1506,f395])).
fof(f1506,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1505,f840])).
fof(f1505,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1504,f289])).
fof(f1504,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(subsumption_resolution,[],[f1334,f646])).
fof(f1334,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(resolution,[],[f293,f178])).
fof(f1503,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5)) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1502,f207])).
fof(f1502,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5)) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f1501,f272])).
fof(f1501,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1500,f207])).
fof(f1500,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f1499,f395])).
fof(f1499,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1498,f840])).
fof(f1498,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1497,f289])).
fof(f1497,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(subsumption_resolution,[],[f1335,f646])).
fof(f1335,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(resolution,[],[f293,f179])).
fof(f1496,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5)) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1495,f207])).
fof(f1495,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5)) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f1494,f272])).
fof(f1494,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1493,f207])).
fof(f1493,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f1492,f395])).
fof(f1492,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1491,f840])).
fof(f1491,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f1490,f289])).
fof(f1490,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(subsumption_resolution,[],[f1336,f646])).
fof(f1336,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl11),
  inference(resolution,[],[f293,f180])).
fof(f1481,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f1480,f288])).
fof(f1480,plain,(
  ~sP0(sK5)),
  inference(subsumption_resolution,[],[f1479,f169])).
fof(f169,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK20(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK21(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0] : (~sP0(X0) | (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK20(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK21(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK20(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK22(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK20(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK23(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK20(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',sK21(X0)),s('type.bvl.exp',sK22(X0)),s('type.bvl.exp',sK23(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK20,sK21,sK22,sK23])],[f103])).
fof(f103,plain,(
  ! [X0] : (~sP0(X0) | ? [X1,X2,X3,X4] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X2),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X3),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X4),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X2),s('type.bvl.exp',X3),s('type.bvl.exp',X4))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))),
  inference(rectify,[],[f102])).
fof(f102,plain,(
  ! [X0] : (~sP0(X0) | ? [X19,X20,X21,X22] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X20),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X21),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X22),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X19))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X20),s('type.bvl.exp',X21),s('type.bvl.exp',X22))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))),
  inference(nnf_transformation,[],[f82])).
fof(f1479,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK20(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK21(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP0(sK5)),
  inference(subsumption_resolution,[],[f1478,f170])).
fof(f170,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK20(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK22(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f104])).
fof(f1478,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK20(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK22(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK20(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK21(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP0(sK5)),
  inference(subsumption_resolution,[],[f1459,f171])).
fof(f171,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK20(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK23(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f104])).
fof(f1459,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK20(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK23(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK20(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK22(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK20(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK21(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP0(sK5)),
  inference(resolution,[],[f150,f172])).
fof(f172,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK20(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',sK21(X0)),s('type.bvl.exp',sK22(X0)),s('type.bvl.exp',sK23(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f104])).
fof(f150,plain,(
  ( ! [X23,X21,X22,X20] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X20))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X21),s('type.bvl.exp',X22),s('type.bvl.exp',X23))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X20))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X23),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X20))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X22),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X20))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X21),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f1319,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK10(sK5)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK12(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | s('type.bvl.exp',X0) != s('type.bvl.exp','const.list.HD_1'(s('type.list.list'('type.bvl.exp'),'const.bvl_handle.compile_2'(s('type.num.num',sK10(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK11(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))) ) | $spl10),
  inference(resolution,[],[f294,f160])).
fof(f1318,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5)) ) | $spl7),
  inference(subsumption_resolution,[],[f1317,f207])).
fof(f1317,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5)) ) | $spl7),
  inference(forward_demodulation,[],[f1316,f272])).
fof(f1316,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1315,f207])).
fof(f1315,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(forward_demodulation,[],[f1314,f395])).
fof(f1314,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1313,f840])).
fof(f1313,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1270,f646])).
fof(f1270,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(resolution,[],[f289,f180])).
fof(f1312,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5)) ) | $spl7),
  inference(subsumption_resolution,[],[f1311,f207])).
fof(f1311,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5)) ) | $spl7),
  inference(forward_demodulation,[],[f1310,f272])).
fof(f1310,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1309,f207])).
fof(f1309,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(forward_demodulation,[],[f1308,f395])).
fof(f1308,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1307,f840])).
fof(f1307,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1269,f646])).
fof(f1269,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(resolution,[],[f289,f179])).
fof(f1306,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5)) ) | $spl7),
  inference(subsumption_resolution,[],[f1305,f207])).
fof(f1305,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5)) ) | $spl7),
  inference(forward_demodulation,[],[f1304,f272])).
fof(f1304,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1303,f207])).
fof(f1303,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(forward_demodulation,[],[f1302,f395])).
fof(f1302,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1301,f840])).
fof(f1301,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1268,f646])).
fof(f1268,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(resolution,[],[f289,f178])).
fof(f1300,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5)) ) | $spl7),
  inference(subsumption_resolution,[],[f1299,f207])).
fof(f1299,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5)) ) | $spl7),
  inference(forward_demodulation,[],[f1298,f272])).
fof(f1298,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1297,f207])).
fof(f1297,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(forward_demodulation,[],[f1296,f395])).
fof(f1296,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1295,f840])).
fof(f1295,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1267,f646])).
fof(f1267,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(resolution,[],[f289,f177])).
fof(f1294,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5)) ) | $spl7),
  inference(subsumption_resolution,[],[f1293,f207])).
fof(f1293,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5)) ) | $spl7),
  inference(forward_demodulation,[],[f1292,f272])).
fof(f1292,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1291,f207])).
fof(f1291,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(forward_demodulation,[],[f1290,f395])).
fof(f1290,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1289,f840])).
fof(f1289,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1266,f646])).
fof(f1266,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(resolution,[],[f289,f176])).
fof(f1288,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5)) ) | $spl7),
  inference(subsumption_resolution,[],[f1287,f207])).
fof(f1287,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5)) ) | $spl7),
  inference(forward_demodulation,[],[f1286,f272])).
fof(f1286,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1285,f207])).
fof(f1285,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(forward_demodulation,[],[f1284,f395])).
fof(f1284,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1283,f840])).
fof(f1283,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1265,f646])).
fof(f1265,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(resolution,[],[f289,f175])).
fof(f1282,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5)) ) | $spl7),
  inference(subsumption_resolution,[],[f1281,f207])).
fof(f1281,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5)) ) | $spl7),
  inference(forward_demodulation,[],[f1280,f272])).
fof(f1280,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1279,f207])).
fof(f1279,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(forward_demodulation,[],[f1278,f395])).
fof(f1278,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1277,f840])).
fof(f1277,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1264,f646])).
fof(f1264,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(resolution,[],[f289,f174])).
fof(f1276,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5)) ) | $spl7),
  inference(subsumption_resolution,[],[f1275,f250])).
fof(f1275,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5)) ) | $spl7),
  inference(forward_demodulation,[],[f1274,f272])).
fof(f1274,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1273,f207])).
fof(f1273,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(forward_demodulation,[],[f1272,f395])).
fof(f1272,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1271,f840])).
fof(f1271,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(subsumption_resolution,[],[f1263,f646])).
fof(f1263,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) ) | $spl7),
  inference(resolution,[],[f289,f173])).
fof(f290,plain,(
  sP2(sK5) | $spl6),
  inference(cnf_transformation,[],[f290_D])).
fof(f290_D,plain,(
  sP2(sK5) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f1262,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1261,f250])).
fof(f1261,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1260,f395])).
fof(f1260,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) )),
  inference(subsumption_resolution,[],[f1259,f840])).
fof(f1259,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f1258,f646])).
fof(f1258,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f453,f207])).
fof(f453,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(superposition,[],[f173,f272])).
fof(f1257,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1256,f207])).
fof(f1256,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1255,f395])).
fof(f1255,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) )),
  inference(subsumption_resolution,[],[f1254,f840])).
fof(f1254,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f1253,f646])).
fof(f1253,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f454,f207])).
fof(f454,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(superposition,[],[f174,f272])).
fof(f1252,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1251,f207])).
fof(f1251,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1250,f395])).
fof(f1250,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) )),
  inference(subsumption_resolution,[],[f1249,f840])).
fof(f1249,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f1248,f646])).
fof(f1248,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f455,f207])).
fof(f455,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(superposition,[],[f175,f272])).
fof(f1247,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1246,f207])).
fof(f1246,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1245,f395])).
fof(f1245,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) )),
  inference(subsumption_resolution,[],[f1244,f840])).
fof(f1244,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f1243,f646])).
fof(f1243,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f456,f207])).
fof(f456,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(superposition,[],[f176,f272])).
fof(f1242,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1241,f207])).
fof(f1241,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1240,f395])).
fof(f1240,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) )),
  inference(subsumption_resolution,[],[f1239,f840])).
fof(f1239,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f1238,f646])).
fof(f1238,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f457,f207])).
fof(f457,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(superposition,[],[f177,f272])).
fof(f1237,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1236,f207])).
fof(f1236,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1235,f395])).
fof(f1235,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) )),
  inference(subsumption_resolution,[],[f1234,f840])).
fof(f1234,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f1233,f646])).
fof(f1233,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f458,f207])).
fof(f458,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(superposition,[],[f178,f272])).
fof(f1232,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1231,f207])).
fof(f1231,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1230,f395])).
fof(f1230,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) )),
  inference(subsumption_resolution,[],[f1229,f840])).
fof(f1229,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f1228,f646])).
fof(f1228,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f459,f207])).
fof(f459,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(superposition,[],[f179,f272])).
fof(f1227,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1226,f207])).
fof(f1226,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1225,f395])).
fof(f1225,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))) )),
  inference(subsumption_resolution,[],[f1224,f840])).
fof(f1224,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f1223,f646])).
fof(f1223,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f460,f207])).
fof(f460,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(superposition,[],[f180,f272])).
fof(f1222,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1221,f250])).
fof(f1221,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1220,f272])).
fof(f1220,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1219,f207])).
fof(f1219,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1218,f395])).
fof(f1218,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1217,f840])).
fof(f1217,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1216,f646])).
fof(f1216,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f521,f173])).
fof(f521,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f154,f174])).
fof(f1215,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1214,f207])).
fof(f1214,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1213,f272])).
fof(f1213,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1212,f207])).
fof(f1212,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1211,f395])).
fof(f1211,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1210,f840])).
fof(f1210,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1209,f646])).
fof(f1209,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f522,f175])).
fof(f522,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f154,f176])).
fof(f1208,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1207,f207])).
fof(f1207,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1206,f272])).
fof(f1206,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1205,f207])).
fof(f1205,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1204,f395])).
fof(f1204,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1203,f840])).
fof(f1203,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f543,f646])).
fof(f543,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f523,f177])).
fof(f523,plain,(
  ( ! [X4,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f154,f178])).
fof(f1202,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1201,f207])).
fof(f1201,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1200,f272])).
fof(f1200,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1199,f207])).
fof(f1199,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1198,f395])).
fof(f1198,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1197,f840])).
fof(f1197,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f544,f646])).
fof(f544,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f524,f179])).
fof(f524,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f154,f180])).
fof(f1196,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)),
  inference(subsumption_resolution,[],[f1195,f250])).
fof(f1195,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)),
  inference(forward_demodulation,[],[f1194,f272])).
fof(f1194,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1193,f207])).
fof(f1193,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(forward_demodulation,[],[f1192,f395])).
fof(f1192,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1191,f840])).
fof(f1191,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f596,f646])).
fof(f596,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f555,f210])).
fof(f555,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(superposition,[],[f173,f321])).
fof(f1190,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)),
  inference(subsumption_resolution,[],[f1189,f207])).
fof(f1189,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)),
  inference(forward_demodulation,[],[f1188,f272])).
fof(f1188,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1187,f207])).
fof(f1187,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(forward_demodulation,[],[f1186,f395])).
fof(f1186,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1185,f840])).
fof(f1185,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f597,f646])).
fof(f597,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f556,f210])).
fof(f556,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(superposition,[],[f174,f321])).
fof(f1184,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)),
  inference(subsumption_resolution,[],[f1183,f207])).
fof(f1183,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)),
  inference(forward_demodulation,[],[f1182,f272])).
fof(f1182,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1181,f207])).
fof(f1181,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(forward_demodulation,[],[f1180,f395])).
fof(f1180,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1179,f840])).
fof(f1179,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f598,f646])).
fof(f598,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f557,f210])).
fof(f557,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(superposition,[],[f175,f321])).
fof(f1178,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)),
  inference(subsumption_resolution,[],[f1177,f207])).
fof(f1177,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)),
  inference(forward_demodulation,[],[f1176,f272])).
fof(f1176,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1175,f207])).
fof(f1175,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(forward_demodulation,[],[f1174,f395])).
fof(f1174,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1173,f840])).
fof(f1173,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f599,f646])).
fof(f599,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f558,f210])).
fof(f558,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(superposition,[],[f176,f321])).
fof(f1172,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)),
  inference(subsumption_resolution,[],[f1171,f207])).
fof(f1171,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)),
  inference(forward_demodulation,[],[f1170,f272])).
fof(f1170,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1169,f207])).
fof(f1169,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(forward_demodulation,[],[f1168,f395])).
fof(f1168,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1167,f840])).
fof(f1167,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f600,f646])).
fof(f600,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f559,f210])).
fof(f559,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(superposition,[],[f177,f321])).
fof(f1166,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)),
  inference(subsumption_resolution,[],[f1165,f207])).
fof(f1165,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)),
  inference(forward_demodulation,[],[f1164,f272])).
fof(f1164,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1163,f207])).
fof(f1163,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(forward_demodulation,[],[f1162,f395])).
fof(f1162,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1161,f840])).
fof(f1161,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f601,f646])).
fof(f601,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f560,f210])).
fof(f560,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(superposition,[],[f178,f321])).
fof(f1160,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)),
  inference(subsumption_resolution,[],[f1159,f207])).
fof(f1159,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)),
  inference(forward_demodulation,[],[f1158,f272])).
fof(f1158,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1157,f207])).
fof(f1157,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(forward_demodulation,[],[f1156,f395])).
fof(f1156,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1155,f840])).
fof(f1155,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f602,f646])).
fof(f602,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f561,f210])).
fof(f561,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(superposition,[],[f179,f321])).
fof(f1154,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)),
  inference(subsumption_resolution,[],[f1153,f207])).
fof(f1153,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)),
  inference(forward_demodulation,[],[f1152,f272])).
fof(f1152,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1151,f207])).
fof(f1151,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(forward_demodulation,[],[f1150,f395])).
fof(f1150,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1149,f840])).
fof(f1149,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f1148,f646])).
fof(f1148,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f562,f245])).
fof(f562,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(superposition,[],[f180,f321])).
fof(f1147,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1146,f250])).
fof(f1146,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1145,f272])).
fof(f1145,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1144,f207])).
fof(f1144,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1143,f395])).
fof(f1143,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f653,f840])).
fof(f653,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f646,f173])).
fof(f1142,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1141,f207])).
fof(f1141,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1140,f272])).
fof(f1140,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1139,f207])).
fof(f1139,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1138,f395])).
fof(f1138,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f654,f840])).
fof(f654,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f646,f174])).
fof(f1137,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1136,f207])).
fof(f1136,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1135,f272])).
fof(f1135,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1134,f207])).
fof(f1134,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1133,f395])).
fof(f1133,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f655,f840])).
fof(f655,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f646,f175])).
fof(f1132,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1131,f207])).
fof(f1131,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1130,f272])).
fof(f1130,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1129,f207])).
fof(f1129,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1128,f395])).
fof(f1128,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f656,f840])).
fof(f656,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f646,f176])).
fof(f1127,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1126,f207])).
fof(f1126,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1125,f272])).
fof(f1125,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1124,f207])).
fof(f1124,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1123,f395])).
fof(f1123,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f657,f840])).
fof(f657,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f646,f177])).
fof(f1122,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1121,f207])).
fof(f1121,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1120,f272])).
fof(f1120,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1119,f207])).
fof(f1119,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1118,f395])).
fof(f1118,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f658,f840])).
fof(f658,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f646,f178])).
fof(f1117,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1116,f207])).
fof(f1116,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1115,f272])).
fof(f1115,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1114,f207])).
fof(f1114,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1113,f395])).
fof(f1113,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f659,f840])).
fof(f659,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f646,f179])).
fof(f1112,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1111,f207])).
fof(f1111,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1110,f272])).
fof(f1110,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1109,f207])).
fof(f1109,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1108,f395])).
fof(f1108,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f660,f840])).
fof(f660,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f646,f180])).
fof(f1107,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1106,f250])).
fof(f1106,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1105,f272])).
fof(f1105,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1104,f207])).
fof(f1104,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1103,f395])).
fof(f1103,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1102,f840])).
fof(f1102,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1101,f646])).
fof(f1101,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f661,f173])).
fof(f661,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f153,f175])).
fof(f1100,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1099,f207])).
fof(f1099,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1098,f272])).
fof(f1098,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1097,f207])).
fof(f1097,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1096,f395])).
fof(f1096,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1095,f840])).
fof(f1095,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f683,f646])).
fof(f683,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f662,f174])).
fof(f662,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f153,f176])).
fof(f1094,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1093,f207])).
fof(f1093,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1092,f272])).
fof(f1092,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1091,f207])).
fof(f1091,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1090,f395])).
fof(f1090,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1089,f840])).
fof(f1089,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f684,f646])).
fof(f684,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f663,f177])).
fof(f663,plain,(
  ( ! [X4,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f153,f179])).
fof(f1088,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1087,f207])).
fof(f1087,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1086,f272])).
fof(f1086,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1085,f207])).
fof(f1085,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1084,f395])).
fof(f1084,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1083,f840])).
fof(f1083,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f685,f646])).
fof(f685,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f664,f178])).
fof(f664,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f153,f180])).
fof(f1082,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1081,f250])).
fof(f1081,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1080,f272])).
fof(f1080,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1079,f207])).
fof(f1079,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1078,f395])).
fof(f1078,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1077,f840])).
fof(f1077,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1076,f646])).
fof(f1076,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f772,f173])).
fof(f772,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f156,f177])).
fof(f1075,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1074,f207])).
fof(f1074,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1073,f272])).
fof(f1073,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1072,f207])).
fof(f1072,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1071,f395])).
fof(f1071,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1070,f840])).
fof(f1070,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f795,f646])).
fof(f795,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f773,f174])).
fof(f773,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f156,f178])).
fof(f1069,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1068,f207])).
fof(f1068,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1067,f272])).
fof(f1067,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1066,f207])).
fof(f1066,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1065,f395])).
fof(f1065,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1064,f840])).
fof(f1064,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1063,f646])).
fof(f1063,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f774,f175])).
fof(f774,plain,(
  ( ! [X4,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f156,f179])).
fof(f1062,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1061,f207])).
fof(f1061,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1060,f272])).
fof(f1060,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1059,f207])).
fof(f1059,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1058,f395])).
fof(f1058,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1057,f840])).
fof(f1057,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f796,f646])).
fof(f796,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f775,f176])).
fof(f775,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f156,f180])).
fof(f1056,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1055,f250])).
fof(f1055,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1054,f272])).
fof(f1054,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1053,f207])).
fof(f1053,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1052,f395])).
fof(f1052,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f848,f646])).
fof(f848,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f840,f173])).
fof(f1051,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1050,f207])).
fof(f1050,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1049,f272])).
fof(f1049,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1048,f207])).
fof(f1048,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1047,f395])).
fof(f1047,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f849,f646])).
fof(f849,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f840,f174])).
fof(f1046,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1045,f207])).
fof(f1045,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1044,f272])).
fof(f1044,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1043,f207])).
fof(f1043,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1042,f395])).
fof(f1042,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f850,f646])).
fof(f850,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f840,f175])).
fof(f1041,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1040,f207])).
fof(f1040,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1039,f272])).
fof(f1039,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1038,f207])).
fof(f1038,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1037,f395])).
fof(f1037,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f851,f646])).
fof(f851,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f840,f176])).
fof(f1036,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1035,f207])).
fof(f1035,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1034,f272])).
fof(f1034,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1033,f207])).
fof(f1033,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1032,f395])).
fof(f1032,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f852,f646])).
fof(f852,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f840,f177])).
fof(f1031,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1030,f207])).
fof(f1030,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1029,f272])).
fof(f1029,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1028,f207])).
fof(f1028,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1027,f395])).
fof(f1027,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f853,f646])).
fof(f853,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f840,f178])).
fof(f1026,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1025,f207])).
fof(f1025,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1024,f272])).
fof(f1024,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1023,f207])).
fof(f1023,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1022,f395])).
fof(f1022,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f854,f646])).
fof(f854,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f840,f179])).
fof(f1021,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1020,f207])).
fof(f1020,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1019,f272])).
fof(f1019,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1018,f207])).
fof(f1018,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f1017,f395])).
fof(f1017,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f855,f646])).
fof(f855,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f840,f180])).
fof(f1016,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1015,f250])).
fof(f1015,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1014,f272])).
fof(f1014,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1013,f840])).
fof(f1013,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1012,f646])).
fof(f1012,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f865,f207])).
fof(f865,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f173,f395])).
fof(f1011,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1010,f207])).
fof(f1010,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1009,f272])).
fof(f1009,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1008,f840])).
fof(f1008,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1007,f646])).
fof(f1007,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f866,f207])).
fof(f866,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f174,f395])).
fof(f1006,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1005,f207])).
fof(f1005,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f1004,f272])).
fof(f1004,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1003,f840])).
fof(f1003,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f1002,f646])).
fof(f1002,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f867,f207])).
fof(f867,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f175,f395])).
fof(f1001,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f1000,f207])).
fof(f1000,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f999,f272])).
fof(f999,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f998,f840])).
fof(f998,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f997,f646])).
fof(f997,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f868,f207])).
fof(f868,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f176,f395])).
fof(f996,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f995,f207])).
fof(f995,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f994,f272])).
fof(f994,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f993,f840])).
fof(f993,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f992,f646])).
fof(f992,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f869,f207])).
fof(f869,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f177,f395])).
fof(f991,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f990,f207])).
fof(f990,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f989,f272])).
fof(f989,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f988,f840])).
fof(f988,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f987,f646])).
fof(f987,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f870,f207])).
fof(f870,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f178,f395])).
fof(f986,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f985,f207])).
fof(f985,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f984,f272])).
fof(f984,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f983,f840])).
fof(f983,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f982,f646])).
fof(f982,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f871,f207])).
fof(f871,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f179,f395])).
fof(f981,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(subsumption_resolution,[],[f980,f207])).
fof(f980,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5)) )),
  inference(forward_demodulation,[],[f979,f272])).
fof(f979,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f978,f840])).
fof(f978,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f977,f646])).
fof(f977,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f872,f207])).
fof(f872,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(superposition,[],[f180,f395])).
fof(f968,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f967,f290])).
fof(f967,plain,(
  ~sP2(sK5)),
  inference(subsumption_resolution,[],[f966,f163])).
fof(f163,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK13(X0)))),s('type.list.list'('type.bvl.exp'),sK14(X0))))) | ~sP2(X0)) )),
  inference(cnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0] : (~sP2(X0) | (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK13(X0)))),s('type.list.list'('type.bvl.exp'),sK14(X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK13(X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),sK14(X0)))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK15(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK13(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),sK14(X0)),s('type.bvl.exp',sK15(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14,sK15])],[f97])).
fof(f97,plain,(
  ! [X0] : (~sP2(X0) | ? [X1,X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),X2)))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),X2))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X3),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X1))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X2),s('type.bvl.exp',X3))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))),
  inference(rectify,[],[f96])).
fof(f96,plain,(
  ! [X0] : (~sP2(X0) | ? [X16,X17,X18] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X16))),s('type.list.list'('type.bvl.exp'),X17)))) & p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),X17))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X18),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',X16))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X17),s('type.bvl.exp',X18))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))),
  inference(nnf_transformation,[],[f84])).
fof(f966,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK13(sK5)))),s('type.list.list'('type.bvl.exp'),sK14(sK5))))) | ~sP2(sK5)),
  inference(subsumption_resolution,[],[f937,f165])).
fof(f165,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num',sK13(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),sK14(X0)),s('type.bvl.exp',sK15(X0)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP2(X0)) )),
  inference(cnf_transformation,[],[f98])).
fof(f937,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK13(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),sK14(sK5)),s('type.bvl.exp',sK15(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK13(sK5)))),s('type.list.list'('type.bvl.exp'),sK14(sK5))))) | ~sP2(sK5)),
  inference(resolution,[],[f151,f164])).
fof(f164,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK13(X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),sK14(X0)))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK15(X0)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~sP2(X0)) )),
  inference(cnf_transformation,[],[f98])).
fof(f151,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.bvl.exp'),X18))))))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X19),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X17))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X18),s('type.bvl.exp',X19))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X17))),s('type.list.list'('type.bvl.exp'),X18))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f804,plain,(
  $false | $spl3),
  inference(subsumption_resolution,[],[f286,f149])).
fof(f284,plain,(
  sP1(sK5) | $spl0),
  inference(cnf_transformation,[],[f284_D])).
fof(f284_D,plain,(
  sP1(sK5) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f292,plain,(
  sP4(sK5) | $spl8),
  inference(cnf_transformation,[],[f292_D])).
fof(f292_D,plain,(
  sP4(sK5) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f414,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f387,f147])).
fof(f387,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f149,f180])).
fof(f413,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f386,f147])).
fof(f386,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f149,f179])).
fof(f412,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f385,f147])).
fof(f385,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f149,f178])).
fof(f411,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f384,f147])).
fof(f384,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f149,f177])).
fof(f410,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f383,f147])).
fof(f383,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f149,f176])).
fof(f409,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f382,f147])).
fof(f382,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f149,f175])).
fof(f408,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f381,f147])).
fof(f381,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f149,f174])).
fof(f407,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5)) )),
  inference(subsumption_resolution,[],[f380,f147])).
fof(f380,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f149,f173])).
fof(f286,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | $spl3),
  inference(cnf_transformation,[],[f286_D])).
fof(f286_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f346,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)),
  inference(subsumption_resolution,[],[f320,f147])).
fof(f320,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(resolution,[],[f157,f180])).
fof(f345,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)),
  inference(subsumption_resolution,[],[f319,f147])).
fof(f319,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(resolution,[],[f157,f179])).
fof(f344,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)),
  inference(subsumption_resolution,[],[f318,f147])).
fof(f318,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(resolution,[],[f157,f178])).
fof(f343,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)),
  inference(subsumption_resolution,[],[f317,f147])).
fof(f317,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(resolution,[],[f157,f177])).
fof(f342,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)),
  inference(subsumption_resolution,[],[f316,f147])).
fof(f316,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(resolution,[],[f157,f176])).
fof(f341,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)),
  inference(subsumption_resolution,[],[f315,f147])).
fof(f315,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(resolution,[],[f157,f175])).
fof(f340,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)),
  inference(subsumption_resolution,[],[f314,f147])).
fof(f314,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(resolution,[],[f157,f174])).
fof(f339,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)),
  inference(subsumption_resolution,[],[f313,f147])).
fof(f313,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK24(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))),
  inference(resolution,[],[f157,f173])).
fof(f264,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X14))),s('type.list.list'('type.bvl.exp'),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(resolution,[],[f147,f180])).
fof(f263,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X12))),s('type.list.list'('type.bvl.exp'),X13)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(resolution,[],[f147,f179])).
fof(f262,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X10))),s('type.list.list'('type.bvl.exp'),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(resolution,[],[f147,f178])).
fof(f261,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK33(sK5)),s('type.option.option'('type.num.num'),sK34(sK5)),s('type.list.list'('type.bvl.exp'),sK35(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(resolution,[],[f147,f177])).
fof(f260,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X6))),s('type.list.list'('type.bvl.exp'),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(resolution,[],[f147,f176])).
fof(f259,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X4))),s('type.list.list'('type.bvl.exp'),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK31(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(resolution,[],[f147,f175])).
fof(f258,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X2))),s('type.list.list'('type.bvl.exp'),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK28(sK5)),s('type.list.list'('type.bvl.exp'),sK29(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(resolution,[],[f147,f174])).
fof(f257,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',X0))),s('type.list.list'('type.bvl.exp'),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK32(sK5)))),s('type.list.list'('type.bvl.exp'),sK35(sK5))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK30(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK31(sK5)),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK27(sK5)))),s('type.list.list'('type.bvl.exp'),sK29(sK5))))) | sP3(sK5) | sP4(sK5) | sP2(sK5) | sP0(sK5) | ~p(s(bool,happ(s(fun('type.list.list'('type.bvl.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.bvl.exp'),bool)),sK5),s('type.num.num',sK25(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK26(sK5)))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) | sP1(sK5)) )),
  inference(resolution,[],[f147,f173])).
% SZS output end Proof for thm.bvlProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 203
% Passive clauses: 683
% Generated clauses: 9028
% Final active clauses: 163
% Final passive clauses: 394
% Input formulas: 37
% Initial clauses: 108
% 
% Selected by SInE selection: 31
% SInE iterations: 1
% 
% Duplicate literals: 15
% Trivial inequalities: 265
% Fw subsumption resolutions: 2072
% Fw demodulations: 1200
% Bw demodulations: 23
% 
% Simple tautologies: 418
% Forward subsumptions: 4343
% 
% Binary resolution: 670
% Forward superposition: 1057
% Backward superposition: 3558
% Equality resolution: 1
% 
% Split clauses: 134
% Split components: 797
% SAT solver clauses: 145
% SAT solver unit clauses: 5
% SAT solver binary clauses: 5
% 
% Sat splits: 134
% Sat splitting refutations: 10
% 
% Memory used [KB]: 5756
% Time elapsed: 0.325 s
% ------------------------------
% ------------------------------
% Success in time 12.1 s
