Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.ml_translator
% (103334)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 143
% Passive clauses: 3817
% Generated clauses: 24768
% Final active clauses: 135
% Final passive clauses: 3574
% Input formulas: 14
% Initial clauses: 16
% 
% Duplicate literals: 1506
% Trivial inequalities: 99
% Fw subsumption resolutions: 2478
% Fw demodulations: 4693
% Bw demodulations: 6
% 
% Simple tautologies: 258
% Equational tautologies: 28
% Forward subsumptions: 10857
% 
% Binary resolution: 121
% Forward superposition: 9506
% Backward superposition: 5916
% Self superposition: 156
% Equality factoring: 38
% Equality resolution: 18
% 
% Split clauses: 588
% Split components: 1199
% SAT solver clauses: 1137
% SAT solver unit clauses: 6
% SAT solver binary clauses: 78
% 
% Sat splits: 588
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1124
% TWLsolver calls for satisfiability: 122
% 
% Memory used [KB]: 21364
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.ml_translator
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.ml_translator
% SZS output start Proof for thm.ml_translator
fof(f3905,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3904,f77,f78,f49,f68,f50,f69,f79,f81,f44,f61])).
fof(f61,plain,(
  s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK2))),s('type.option.option'(sK0),sK1))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(sK0),bool),'=_1'(s('type.option.option'(sK0),sK1))),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK2),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(sK0),sK1))) | $spl1),
  inference(cnf_transformation,[],[f61_D])).
fof(f61_D,plain,(
  s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK2))),s('type.option.option'(sK0),sK1))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(sK0),bool),'=_1'(s('type.option.option'(sK0),sK1))),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK2),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(sK0),sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f44,plain,(
  s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK2))),s('type.option.option'(sK0),sK1))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(sK0),bool),'=_1'(s('type.option.option'(sK0),sK1))),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK2),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(sK0),sK1)))),
  inference(cnf_transformation,[],[f40])).
fof(f40,plain,(
  s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK2))),s('type.option.option'(sK0),sK1))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(sK0),bool),'=_1'(s('type.option.option'(sK0),sK1))),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK2),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(sK0),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f38])).
fof(f38,plain,(
  ? [X0,X1,X2] : s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2))),s('type.option.option'(X0),X1))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(X0),bool),'=_1'(s('type.option.option'(X0),X1))),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(X0),X1)))),
  inference(ennf_transformation,[],[f17])).
fof(f17,plain,(
  ~! [X0,X1,X2] : s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2))),s('type.option.option'(X0),X1))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(X0),bool),'=_1'(s('type.option.option'(X0),X1))),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(X0),X1)))),
  inference(flattening,[],[f16])).
fof(f16,plain,(
  ~! [X0] : ! [X1,X2] : s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2))),s('type.option.option'(X0),X1))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(X0),bool),'=_1'(s('type.option.option'(X0),X1))),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X2),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(X0),X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X6,fun('type.semanticPrimitives.v',bool)),X8))),s('type.option.option'(X6),X7))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(X6,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X6,bool),'_dst_x0x1_2'(s(fun('type.option.option'(X6),bool),'=_1'(s('type.option.option'(X6),X7))),s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'))),s(fun(X6,fun('type.semanticPrimitives.v',bool)),X8),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(X6),X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X6,fun('type.semanticPrimitives.v',bool)),X8))),s('type.option.option'(X6),X7))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(X6,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X6,bool),'_dst_x0x1_2'(s(fun('type.option.option'(X6),bool),'=_1'(s('type.option.option'(X6),X7))),s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'))),s(fun(X6,fun('type.semanticPrimitives.v',bool)),X8),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(X6),X7)))),
  file('thm.ml_translator.OPTION_TYPE_SIMP','thm.ml_translator.OPTION_TYPE_SIMP')).
fof(f81,plain,(
  s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.OPTION_TYPE_1'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK2))),s('type.option.option'(sK0),sK1))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(sK0),bool),'=_1'(s('type.option.option'(sK0),sK1))),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK2),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(sK0),sK1))) | $spl31),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.OPTION_TYPE_1'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK2))),s('type.option.option'(sK0),sK1))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(sK0),bool),'=_1'(s('type.option.option'(sK0),sK1))),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK2),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(sK0),sK1))) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f79,plain,(
  s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.OPTION_TYPE_1'(s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK2))),s('type.option.option'(sK0),sK1))) != s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(sK0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(sK0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(sK0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(sK0),bool),'=_1'(s('type.option.option'(sK0),sK1))),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'))),s(fun(sK0,fun('type.semanticPrimitives.v',bool)),sK2),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(sK0),sK1))) | ($spl1 | $spl10)),
  inference(forward_demodulation,[],[f61,f68])).
fof(f69,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1))),s('type.option.option'(X0),X2))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(X0),bool),'=_1'(s('type.option.option'(X0),X2))),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(X0),X2)))) ) | $spl12),
  inference(cnf_transformation,[],[f69_D])).
fof(f69_D,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1))),s('type.option.option'(X0),X2))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(X0),bool),'=_1'(s('type.option.option'(X0),X2))),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(X0),X2)))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f50,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1))),s('type.option.option'(X0),X2))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(X0),bool),'=_1'(s('type.option.option'(X0),X2))),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(X0),X2)))) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0,X1,X2] : s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1))),s('type.option.option'(X0),X2))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(X0),bool),'=_1'(s('type.option.option'(X0),X2))),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(X0),X2)))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ! [X0] : ! [X1,X2] : s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1))),s('type.option.option'(X0),X2))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(X0),bool),'=_1'(s('type.option.option'(X0),X2))),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(X0),X2)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X8,X7] : s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X6,fun('type.semanticPrimitives.v',bool)),X8))),s('type.option.option'(X6),X7))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(X6,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X6,bool),'_dst_x0x1_2'(s(fun('type.option.option'(X6),bool),'=_1'(s('type.option.option'(X6),X7))),s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'))),s(fun(X6,fun('type.semanticPrimitives.v',bool)),X8),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(X6),X7)))),
  file('thm.ml_translator.OPTION_TYPE_SIMP','thm.ml_translator.ml_translator_2|49|6_prove_ltb')).
fof(f68,plain,(
  ( ! [X0,X1] : (s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.OPTION_TYPE_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1))) = s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1)))) ) | $spl10),
  inference(cnf_transformation,[],[f68_D])).
fof(f68_D,plain,(
  ( ! [X0,X1] : (s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.OPTION_TYPE_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1))) = s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1)))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f49,plain,(
  ( ! [X0,X1] : (s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.OPTION_TYPE_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1))) = s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0,X1] : s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.OPTION_TYPE_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1))) = s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1)))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0] : ! [X1] : s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.OPTION_TYPE_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1))) = s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X10] : s(fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.OPTION_TYPE_1'(s(fun(X6,fun('type.semanticPrimitives.v',bool)),X10))) = s(fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X6,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X6),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'),s(fun(X6,fun('type.semanticPrimitives.v',bool)),X10)))),
  file('thm.ml_translator.OPTION_TYPE_SIMP','ARITY_0_1_const.ml_translator.OPTION_TYPE')).
fof(f78,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.OPTION_TYPE_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1))),s('type.option.option'(X0),X2))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(X0),bool),'=_1'(s('type.option.option'(X0),X2))),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(X0),X2)))) ) | $spl28),
  inference(cnf_transformation,[],[f78_D])).
fof(f78_D,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.OPTION_TYPE_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1))),s('type.option.option'(X0),X2))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(X0),bool),'=_1'(s('type.option.option'(X0),X2))),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(X0),X2)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f77,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),'const.ml_translator.OPTION_TYPE_1'(s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1))),s('type.option.option'(X0),X2))) = s(fun('type.semanticPrimitives.v',bool),happ(s(fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool)),happ(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.CONTAINER_1'(s(fun(fun(X0,fun('type.semanticPrimitives.v',bool)),fun('type.option.option'(X0),fun('type.semanticPrimitives.v',bool))),'const.ml_translator.OPTION_TYPE_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),'_dst_x00x10x11x00_4'(s(fun(bool,fun(bool,fun(bool,bool))),'const.bool.COND_0'),s(fun(X0,bool),'_dst_x0x1_2'(s(fun('type.option.option'(X0),bool),'=_1'(s('type.option.option'(X0),X2))),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))),s(fun(X0,fun('type.semanticPrimitives.v',bool)),X1),s(bool,'const.bool.ARB_0'))))),s('type.option.option'(X0),X2)))) ) | ($spl10 | $spl12)),
  inference(backward_demodulation,[],[f68,f69])).
fof(f3904,plain,(
  $false | ($spl28 | $spl31)),
  inference(subsumption_resolution,[],[f81,f78])).
% SZS output end Proof for thm.ml_translator
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 38
% Passive clauses: 606
% Generated clauses: 5213
% Final active clauses: 17
% Final passive clauses: 107
% Input formulas: 14
% Initial clauses: 16
% 
% Duplicate literals: 115
% Trivial inequalities: 28
% Fw subsumption resolutions: 123
% Fw demodulations: 325
% Bw demodulations: 464
% Condensations: 184
% 
% Simple tautologies: 34
% Equational tautologies: 15
% Forward subsumptions: 1571
% Bw demodulations to eq. taut.: 7
% 
% Binary resolution: 11
% Forward superposition: 986
% Backward superposition: 815
% Self superposition: 98
% Equality factoring: 29
% Equality resolution: 4
% 
% Split clauses: 52
% Split components: 104
% SAT solver clauses: 878
% SAT solver unit clauses: 26
% SAT solver binary clauses: 38
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 52
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 876
% TWLsolver calls for satisfiability: 68
% 
% Memory used [KB]: 9594
% Time elapsed: 0.572 s
% ------------------------------
% ------------------------------
% Success in time 1.211 s
