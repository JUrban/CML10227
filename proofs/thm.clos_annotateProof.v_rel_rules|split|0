Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_annotateProof
% (7229)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 170
% Passive clauses: 2548
% Generated clauses: 19980
% Final active clauses: 142
% Final passive clauses: 2184
% Input formulas: 78
% Initial clauses: 230
% 
% Duplicate literals: 758
% Trivial inequalities: 208
% Fw subsumption resolutions: 2756
% Fw demodulations: 4243
% Bw demodulations: 24
% 
% Simple tautologies: 293
% Equational tautologies: 73
% Forward subsumptions: 8287
% 
% Binary resolution: 371
% Factoring: 1
% Forward superposition: 5623
% Backward superposition: 5311
% Self superposition: 167
% Equality factoring: 156
% Equality resolution: 17
% 
% Split clauses: 378
% Split components: 757
% SAT solver clauses: 944
% SAT solver unit clauses: 3
% SAT solver binary clauses: 47
% 
% Sat splits: 378
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 944
% TWLsolver calls for satisfiability: 163
% 
% Memory used [KB]: 8827
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_annotateProof
% (7250)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 107
% Passive clauses: 808
% Generated clauses: 11614
% Final active clauses: 92
% Final passive clauses: 542
% Input formulas: 78
% Initial clauses: 230
% 
% Duplicate literals: 783
% Trivial inequalities: 136
% Fw subsumption resolutions: 1221
% Fw demodulations: 1029
% Bw demodulations: 167
% Condensations: 1559
% Global subsumptions: 4
% 
% Simple tautologies: 222
% Equational tautologies: 40
% Forward subsumptions: 4409
% Bw demodulations to eq. taut.: 6
% 
% Binary resolution: 159
% Factoring: 1
% Forward superposition: 3106
% Backward superposition: 2101
% Self superposition: 147
% Equality factoring: 116
% Equality resolution: 21
% 
% Split clauses: 166
% Split components: 332
% SAT solver clauses: 1605
% SAT solver unit clauses: 268
% SAT solver binary clauses: 92
% SAT solver learnt clauses: 8
% 
% Sat splits: 166
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1589
% TWLsolver calls for satisfiability: 3631
% 
% Memory used [KB]: 10490
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.clos_annotateProof
% (7263)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 690
% Passive clauses: 8559
% Generated clauses: 230111
% Final active clauses: 298
% Final passive clauses: 1466
% Input formulas: 78
% Initial clauses: 230
% Discarded non-redundant clauses: 3448
% 
% Duplicate literals: 7065
% Trivial inequalities: 1637
% Fw subsumption resolutions: 19486
% Fw demodulations: 44874
% Bw demodulations: 4561
% Condensations: 19428
% Global subsumptions: 238
% 
% Simple tautologies: 1884
% Equational tautologies: 1053
% Forward subsumptions: 124615
% Fw demodulations to eq. taut.: 47
% Bw demodulations to eq. taut.: 195
% 
% Unit resulting resolution: 11522
% Factoring: 1
% Forward superposition: 59937
% Backward superposition: 54657
% Self superposition: 684
% Equality factoring: 455
% Equality resolution: 102
% 
% Split clauses: 368
% Split components: 740
% SAT solver clauses: 10044
% SAT solver unit clauses: 820
% SAT solver binary clauses: 1954
% 
% Sat splits: 368
% Sat splitting refutations: 509
% 
% Memory used [KB]: 130616
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.clos_annotateProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_annotateProof
% SZS output start Proof for thm.clos_annotateProof
fof(f1097,plain,(
  $false),
  inference(equality_resolution,[],[f1045])).
fof(f1045,plain,(
  ( ! [X0] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK12))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0)))) )),
  inference(duplicate_literal_removal,[],[f1037])).
fof(f1037,plain,(
  ( ! [X0] : (s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK12))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))) | s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK12))) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0)))) )),
  inference(resolution,[],[f938,f254])).
fof(f254,plain,(
  ( ! [X6,X2,X0,X3,X1] : (sP3(X0,X1,X2,X3) | s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))) | s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6)))) )),
  inference(cnf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2,X3] : ((~sP3(X0,X1,X2,X3) | (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK24(X3,X2,X1,X0)))) & s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK24(X3,X2,X1,X0))))) | (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK25(X3,X2,X1,X0)))) & s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK25(X3,X2,X1,X0))))) | sP2(X0,X2,X3) | (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',sK26(X3,X2,X1,X0)))) & s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',sK26(X3,X2,X1,X0))))) | sP0(X0,X1,X2,X3) | sP1(X0,X1,X2,X3)) & ((! [X6] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))) | s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6)))) & ! [X5] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))) | s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5)))) & ~sP2(X0,X2,X3) & ! [X4] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X4))) | s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X4)))) & ~sP0(X0,X1,X2,X3) & ~sP1(X0,X1,X2,X3)) | sP3(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK24,sK25,sK26])],[f150])).
fof(f150,plain,(
  ! [X0,X1,X2,X3] : ((~sP3(X0,X1,X2,X3) | ? [X9] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X9))) & s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X9)))) | ? [X8] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))) & s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8)))) | sP2(X0,X2,X3) | ? [X7] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X7))) & s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X7)))) | sP0(X0,X1,X2,X3) | sP1(X0,X1,X2,X3)) & ((! [X6] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))) | s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6)))) & ! [X5] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))) | s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5)))) & ~sP2(X0,X2,X3) & ! [X4] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X4))) | s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X4)))) & ~sP0(X0,X1,X2,X3) & ~sP1(X0,X1,X2,X3)) | sP3(X0,X1,X2,X3)))),
  inference(rectify,[],[f149])).
fof(f149,plain,(
  ! [X2,X3,X12,X11] : ((~sP3(X2,X3,X12,X11) | ? [X37] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37)))) | ? [X36] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36)))) | sP2(X2,X12,X11) | ? [X32] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32)))) | sP0(X2,X3,X12,X11) | sP1(X2,X3,X12,X11)) & ((! [X37] : (s('type.closSem.v',X11) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37))) | s('type.closSem.v',X12) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37)))) & ! [X36] : (s('type.closSem.v',X11) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36))) | s('type.closSem.v',X12) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36)))) & ~sP2(X2,X12,X11) & ! [X32] : (s('type.closSem.v',X11) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32))) | s('type.closSem.v',X12) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32)))) & ~sP0(X2,X3,X12,X11) & ~sP1(X2,X3,X12,X11)) | sP3(X2,X3,X12,X11)))),
  inference(flattening,[],[f148])).
fof(f148,plain,(
  ! [X2,X3,X12,X11] : ((~sP3(X2,X3,X12,X11) | (? [X37] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37)))) | ? [X36] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36)))) | sP2(X2,X12,X11) | ? [X32] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32)))) | sP0(X2,X3,X12,X11) | sP1(X2,X3,X12,X11))) & ((! [X37] : (s('type.closSem.v',X11) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37))) | s('type.closSem.v',X12) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37)))) & ! [X36] : (s('type.closSem.v',X11) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36))) | s('type.closSem.v',X12) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36)))) & ~sP2(X2,X12,X11) & ! [X32] : (s('type.closSem.v',X11) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32))) | s('type.closSem.v',X12) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32)))) & ~sP0(X2,X3,X12,X11) & ~sP1(X2,X3,X12,X11)) | sP3(X2,X3,X12,X11)))),
  inference(nnf_transformation,[],[f120])).
fof(f120,plain,(
  ! [X2,X3,X12,X11] : (sP3(X2,X3,X12,X11) <=> (? [X37] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37)))) | ? [X36] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36)))) | sP2(X2,X12,X11) | ? [X32] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32)))) | sP0(X2,X3,X12,X11) | sP1(X2,X3,X12,X11)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f938,plain,(
  ~sP3(sK51('const.closSem.Number_1'(s('type.integer.int',sK12)),'const.closSem.Number_1'(s('type.integer.int',sK12))),sK52('const.closSem.Number_1'(s('type.integer.int',sK12)),'const.closSem.Number_1'(s('type.integer.int',sK12))),'const.closSem.Number_1'(s('type.integer.int',sK12)),'const.closSem.Number_1'(s('type.integer.int',sK12)))),
  inference(subsumption_resolution,[],[f922,f186])).
fof(f186,plain,(
  ~p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK12))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK12))))))),
  inference(cnf_transformation,[],[f131])).
fof(f131,plain,(
  ~p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK12))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK12))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12])],[f97])).
fof(f97,plain,(
  ? [X0] : ~p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))))))),
  inference(ennf_transformation,[],[f80])).
fof(f80,plain,(
  ~! [X0] : p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X0))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))))))),
  file('thm.clos_annotateProof.v_rel_rules|split|0','thm.clos_annotateProof.v_rel_rules|split|0')).
fof(f922,plain,(
  p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK12))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK12)))))) | ~sP3(sK51('const.closSem.Number_1'(s('type.integer.int',sK12)),'const.closSem.Number_1'(s('type.integer.int',sK12))),sK52('const.closSem.Number_1'(s('type.integer.int',sK12)),'const.closSem.Number_1'(s('type.integer.int',sK12))),'const.closSem.Number_1'(s('type.integer.int',sK12)),'const.closSem.Number_1'(s('type.integer.int',sK12)))),
  inference(resolution,[],[f346,f282])).
fof(f282,plain,(
  ( ! [X4,X0,X5,X1] : (p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK51(X1,X0)),s('type.closSem.v',X4))),s('type.closSem.v',X5)))) | ~sP3(sK51(X1,X0),sK52(X1,X0),X5,X4)) )),
  inference(cnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ! [X6,X7] : ((sP3(X6,X7,sK50(X7,X6,X1,X0),sK49(X7,X6,X1,X0)) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v',sK49(X7,X6,X1,X0)))),s('type.closSem.v',sK50(X7,X6,X1,X0)))))) | sP5(X7,X6) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v',X0))),s('type.closSem.v',X1)))))) & ((! [X4,X5] : (~sP3(sK51(X1,X0),sK52(X1,X0),X5,X4) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK51(X1,X0)),s('type.closSem.v',X4))),s('type.closSem.v',X5))))) & ~sP5(sK52(X1,X0),sK51(X1,X0)) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK51(X1,X0)),s('type.closSem.v',X0))),s('type.closSem.v',X1))))) | p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK49,sK50,sK51,sK52])],[f162])).
fof(f162,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ! [X6,X7] : (? [X8,X9] : (sP3(X6,X7,X9,X8) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v',X8))),s('type.closSem.v',X9))))) | sP5(X7,X6) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v',X0))),s('type.closSem.v',X1)))))) & (? [X2,X3] : (! [X4,X5] : (~sP3(X2,X3,X5,X4) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X4))),s('type.closSem.v',X5))))) & ~sP5(X3,X2) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))) | p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1))))))),
  inference(rectify,[],[f161])).
fof(f161,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ! [X2,X3] : (? [X11,X12] : (sP3(X2,X3,X12,X11) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X11))),s('type.closSem.v',X12))))) | sP5(X3,X2) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1)))))) & (? [X2,X3] : (! [X11,X12] : (~sP3(X2,X3,X12,X11) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X11))),s('type.closSem.v',X12))))) & ~sP5(X3,X2) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))) | p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1))))))),
  inference(nnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) <=> ! [X2,X3] : (? [X11,X12] : (sP3(X2,X3,X12,X11) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X11))),s('type.closSem.v',X12))))) | sP5(X3,X2) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))))),
  inference(definition_folding,[],[f114,f122,f121,f120,f119,f118,f117])).
fof(f117,plain,(
  ! [X2,X3,X12,X11] : (sP0(X2,X3,X12,X11) <=> ? [X21,X22,X23,X24,X25,X26,X27,X28,X29,X30] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X23),s('type.num.num',X27),s('type.closLang.exp',X21))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X30),s('type.list.list'('type.closSem.v'),X24),s('type.num.num',X27),s('type.closLang.exp',X22))) & s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X22))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) = s('type.list.list'('type.closLang.exp'),happ(s(fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')))),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.num.num',X26))),s('type.num.num',X27))),s('type.sptree.spt'('type.num.num'),X25))) & ! [X31] : (~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s('type.num.num',X31))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X27))),s('type.num.num',X31)))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s('type.num.num',X26))),s('type.num.num','const.num.|48|_0'))),s('type.sptree.spt'('type.num.num'),X25))),s('type.list.list'('type.closSem.v'),X23))),s('type.list.list'('type.closSem.v'),X24))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X31))),s('type.num.num',X27))))))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.num.num',X26) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X23))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X30))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f118,plain,(
  ! [X2,X3,X12,X11] : (sP1(X2,X3,X12,X11) <=> ? [X13,X14,X15,X16,X17,X18,X19,X20] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13),s('type.num.num',X17))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X14),s('type.num.num',X17))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))))),'_dst_x00000x11111_2'(s(fun(fun('type.sptree.spt'('type.num.num'),bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))))),'_dst_x000000x101000x110111_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11111x11011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11011x00100_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'=_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x011x100_2'(s(fun('type.closLang.exp',fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s(fun('type.closLang.exp','type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111x0110_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'!_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool))))),'_dst_x00000x11001x10111_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))),'_dst_x000x011x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0x1_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))),s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool)))),'_dst_x0000x0100x0000x0010x0000x0000x1001_7'(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num','const.num.|48|_0'),s(fun('type.sptree.spt'('type.num.num'),'type.sptree.spt'('type.num.num')),'_i_0_0'),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))))))),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',bool),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X15))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X14)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f119,plain,(
  ! [X2,X12,X11] : (sP2(X2,X12,X11) <=> ? [X33,X34,X35] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X33),s('type.list.list'('type.closSem.v'),X34))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X33),s('type.list.list'('type.closSem.v'),X35))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X34),s('type.list.list'('type.closSem.v'),X35))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f121,plain,(
  ! [X2,X9,X7,X5,X8,X6,X4] : (sP4(X2,X9,X7,X5,X8,X6,X4) <=> ? [X10] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X5))),s('type.num.num',X9)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4)))))) & s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X10))) = s('type.option.option'('type.num.num'),'const.sptree.lookup_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X9))),s('type.num.num',X5))),s('type.sptree.spt'('type.num.num'),X6))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X10))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X8)))))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X7))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X10))),s('type.list.list'('type.closSem.v'),X8))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f122,plain,(
  ! [X3,X2] : (sP5(X3,X2) <=> ? [X4,X5,X6,X7,X8,X9] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4))))),s('type.num.num',X9)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X5)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X7))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X8)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X8))))))) | sP4(X2,X9,X7,X5,X8,X6,X4)) & ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s('type.num.num',X4))),s('type.num.num',X5))),s('type.sptree.spt'('type.num.num'),X6))),s('type.list.list'('type.closSem.v'),X7))),s('type.list.list'('type.closSem.v'),X8))),s('type.num.num',X9))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f114,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) <=> ! [X2,X3] : (? [X11,X12] : ((? [X37] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37)))) | ? [X36] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36)))) | ? [X33,X34,X35] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X33),s('type.list.list'('type.closSem.v'),X34))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X33),s('type.list.list'('type.closSem.v'),X35))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X34),s('type.list.list'('type.closSem.v'),X35))))) | ? [X32] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32)))) | ? [X21,X22,X23,X24,X25,X26,X27,X28,X29,X30] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X23),s('type.num.num',X27),s('type.closLang.exp',X21))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X30),s('type.list.list'('type.closSem.v'),X24),s('type.num.num',X27),s('type.closLang.exp',X22))) & s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X22))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) = s('type.list.list'('type.closLang.exp'),happ(s(fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')))),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.num.num',X26))),s('type.num.num',X27))),s('type.sptree.spt'('type.num.num'),X25))) & ! [X31] : (~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s('type.num.num',X31))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X27))),s('type.num.num',X31)))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s('type.num.num',X26))),s('type.num.num','const.num.|48|_0'))),s('type.sptree.spt'('type.num.num'),X25))),s('type.list.list'('type.closSem.v'),X23))),s('type.list.list'('type.closSem.v'),X24))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X31))),s('type.num.num',X27))))))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.num.num',X26) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X23))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X30))))) | ? [X13,X14,X15,X16,X17,X18,X19,X20] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13),s('type.num.num',X17))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X14),s('type.num.num',X17))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))))),'_dst_x00000x11111_2'(s(fun(fun('type.sptree.spt'('type.num.num'),bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))))),'_dst_x000000x101000x110111_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11111x11011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11011x00100_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'=_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x011x100_2'(s(fun('type.closLang.exp',fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s(fun('type.closLang.exp','type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111x0110_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'!_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool))))),'_dst_x00000x11001x10111_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))),'_dst_x000x011x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0x1_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))),s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool)))),'_dst_x0000x0100x0000x0010x0000x0000x1001_7'(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num','const.num.|48|_0'),s(fun('type.sptree.spt'('type.num.num'),'type.sptree.spt'('type.num.num')),'_i_0_0'),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))))))),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',bool),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X15))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X14)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13)))))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X11))),s('type.closSem.v',X12))))) | ? [X4,X5,X6,X7,X8,X9] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4))))),s('type.num.num',X9)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X5)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X7))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X8)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X8))))))) | ? [X10] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X5))),s('type.num.num',X9)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4)))))) & s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X10))) = s('type.option.option'('type.num.num'),'const.sptree.lookup_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X9))),s('type.num.num',X5))),s('type.sptree.spt'('type.num.num'),X6))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X10))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X8)))))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X7))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X10))),s('type.list.list'('type.closSem.v'),X8)))))))) & ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s('type.num.num',X4))),s('type.num.num',X5))),s('type.sptree.spt'('type.num.num'),X6))),s('type.list.list'('type.closSem.v'),X7))),s('type.list.list'('type.closSem.v'),X8))),s('type.num.num',X9))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))))),
  inference(flattening,[],[f113])).
fof(f113,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) <=> ! [X2,X3] : ((? [X11,X12] : ((? [X37] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37)))) | ? [X36] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36)))) | ? [X33,X34,X35] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X33),s('type.list.list'('type.closSem.v'),X34))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X33),s('type.list.list'('type.closSem.v'),X35))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X34),s('type.list.list'('type.closSem.v'),X35))))) | ? [X32] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32)))) | ? [X21,X22,X23,X24,X25,X26,X27,X28,X29,X30] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X23),s('type.num.num',X27),s('type.closLang.exp',X21))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X30),s('type.list.list'('type.closSem.v'),X24),s('type.num.num',X27),s('type.closLang.exp',X22))) & s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X22))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) = s('type.list.list'('type.closLang.exp'),happ(s(fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')))),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.num.num',X26))),s('type.num.num',X27))),s('type.sptree.spt'('type.num.num'),X25))) & ! [X31] : ((~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s('type.num.num',X31))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X27))),s('type.num.num',X31))))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s('type.num.num',X26))),s('type.num.num','const.num.|48|_0'))),s('type.sptree.spt'('type.num.num'),X25))),s('type.list.list'('type.closSem.v'),X23))),s('type.list.list'('type.closSem.v'),X24))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X31))),s('type.num.num',X27))))))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.num.num',X26) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X23))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X30))))) | ? [X13,X14,X15,X16,X17,X18,X19,X20] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13),s('type.num.num',X17))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X14),s('type.num.num',X17))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))))),'_dst_x00000x11111_2'(s(fun(fun('type.sptree.spt'('type.num.num'),bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))))),'_dst_x000000x101000x110111_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11111x11011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11011x00100_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'=_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x011x100_2'(s(fun('type.closLang.exp',fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s(fun('type.closLang.exp','type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111x0110_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'!_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool))))),'_dst_x00000x11001x10111_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))),'_dst_x000x011x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0x1_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))),s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool)))),'_dst_x0000x0100x0000x0010x0000x0000x1001_7'(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num','const.num.|48|_0'),s(fun('type.sptree.spt'('type.num.num'),'type.sptree.spt'('type.num.num')),'_i_0_0'),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))))))),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',bool),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X15))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X14)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13)))))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X11))),s('type.closSem.v',X12))))) | ? [X4,X5,X6,X7,X8,X9] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4))))),s('type.num.num',X9)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X5)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X7))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X8)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X8))))))) | ? [X10] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X5))),s('type.num.num',X9)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4)))))) & s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X10))) = s('type.option.option'('type.num.num'),'const.sptree.lookup_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X9))),s('type.num.num',X5))),s('type.sptree.spt'('type.num.num'),X6))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X10))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X8)))))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X7))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X10))),s('type.list.list'('type.closSem.v'),X8)))))))) & ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s('type.num.num',X4))),s('type.num.num',X5))),s('type.sptree.spt'('type.num.num'),X6))),s('type.list.list'('type.closSem.v'),X7))),s('type.list.list'('type.closSem.v'),X8))),s('type.num.num',X9)))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))))),
  inference(ennf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) <=> ! [X2,X3] : ((! [X11,X12] : ((? [X37] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37)))) | ? [X36] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36)))) | ? [X33,X34,X35] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X33),s('type.list.list'('type.closSem.v'),X34))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X33),s('type.list.list'('type.closSem.v'),X35))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X34),s('type.list.list'('type.closSem.v'),X35))))) | ? [X32] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32)))) | ? [X21,X22,X23,X24,X25,X26,X27,X28,X29,X30] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X23),s('type.num.num',X27),s('type.closLang.exp',X21))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X30),s('type.list.list'('type.closSem.v'),X24),s('type.num.num',X27),s('type.closLang.exp',X22))) & s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X22))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) = s('type.list.list'('type.closLang.exp'),happ(s(fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')))),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.num.num',X26))),s('type.num.num',X27))),s('type.sptree.spt'('type.num.num'),X25))) & ! [X31] : ((p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s('type.num.num',X31))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X27))),s('type.num.num',X31))))) => p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s('type.num.num',X26))),s('type.num.num','const.num.|48|_0'))),s('type.sptree.spt'('type.num.num'),X25))),s('type.list.list'('type.closSem.v'),X23))),s('type.list.list'('type.closSem.v'),X24))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X31))),s('type.num.num',X27))))))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.num.num',X26) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X23))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X30))))) | ? [X13,X14,X15,X16,X17,X18,X19,X20] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13),s('type.num.num',X17))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X14),s('type.num.num',X17))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))))),'_dst_x00000x11111_2'(s(fun(fun('type.sptree.spt'('type.num.num'),bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))))),'_dst_x000000x101000x110111_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11111x11011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11011x00100_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'=_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x011x100_2'(s(fun('type.closLang.exp',fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s(fun('type.closLang.exp','type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111x0110_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'!_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool))))),'_dst_x00000x11001x10111_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))),'_dst_x000x011x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0x1_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))),s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool)))),'_dst_x0000x0100x0000x0010x0000x0000x1001_7'(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num','const.num.|48|_0'),s(fun('type.sptree.spt'('type.num.num'),'type.sptree.spt'('type.num.num')),'_i_0_0'),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))))))),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',bool),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X15))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X14)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13)))))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X11))),s('type.closSem.v',X12))))) & ! [X4,X5,X6,X7,X8,X9] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4))))),s('type.num.num',X9)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X5)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X7))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X8)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X8))))))) | ? [X10] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X5))),s('type.num.num',X9)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4)))))) & s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X10))) = s('type.option.option'('type.num.num'),'const.sptree.lookup_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X9))),s('type.num.num',X5))),s('type.sptree.spt'('type.num.num'),X6))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X10))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X8)))))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X7))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X10))),s('type.list.list'('type.closSem.v'),X8)))))))) => p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s('type.num.num',X4))),s('type.num.num',X5))),s('type.sptree.spt'('type.num.num'),X6))),s('type.list.list'('type.closSem.v'),X7))),s('type.list.list'('type.closSem.v'),X8))),s('type.num.num',X9)))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X5,X18] : (p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X5),s('type.closSem.v',X18)))) <=> ! [X23,X24] : ((! [X51,X52] : ((? [X6] : (s('type.closSem.v',X51) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))) & s('type.closSem.v',X52) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6)))) | ? [X15] : (s('type.closSem.v',X51) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X15))) & s('type.closSem.v',X52) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X15)))) | ? [X9,X27,X28] : (s('type.closSem.v',X51) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X27))) & s('type.closSem.v',X52) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X28))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X23),s('type.list.list'('type.closSem.v'),X27),s('type.list.list'('type.closSem.v'),X28))))) | ? [X29] : (s('type.closSem.v',X51) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X29))) & s('type.closSem.v',X52) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X29)))) | ? [X30,X31,X32,X33,X34,X35,X36,X37,X38,X39] : (s('type.closSem.v',X51) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X37),s('type.list.list'('type.closSem.v'),X38),s('type.list.list'('type.closSem.v'),X32),s('type.num.num',X36),s('type.closLang.exp',X30))) & s('type.closSem.v',X52) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X37),s('type.list.list'('type.closSem.v'),X39),s('type.list.list'('type.closSem.v'),X33),s('type.num.num',X36),s('type.closLang.exp',X31))) & s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X31))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) = s('type.list.list'('type.closLang.exp'),happ(s(fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')))),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X30))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.num.num',X35))),s('type.num.num',X36))),s('type.sptree.spt'('type.num.num'),X34))) & ! [X40] : ((p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s('type.num.num',X40))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X30))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X36))),s('type.num.num',X40))))) => p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X24),s('type.num.num',X35))),s('type.num.num','const.num.|48|_0'))),s('type.sptree.spt'('type.num.num'),X34))),s('type.list.list'('type.closSem.v'),X32))),s('type.list.list'('type.closSem.v'),X33))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X40))),s('type.num.num',X36))))))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X30))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.num.num',X35) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X32))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X23),s('type.list.list'('type.closSem.v'),X38),s('type.list.list'('type.closSem.v'),X39))))) | ? [X41,X42,X32,X33,X43,X37,X38,X39] : (s('type.closSem.v',X51) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X37),s('type.list.list'('type.closSem.v'),X38),s('type.list.list'('type.closSem.v'),X32),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X41),s('type.num.num',X43))) & s('type.closSem.v',X52) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X37),s('type.list.list'('type.closSem.v'),X39),s('type.list.list'('type.closSem.v'),X33),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X42),s('type.num.num',X43))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))))),'_dst_x00000x11111_2'(s(fun(fun('type.sptree.spt'('type.num.num'),bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))))),'_dst_x000000x101000x110111_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11111x11011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11011x00100_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'=_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x011x100_2'(s(fun('type.closLang.exp',fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s(fun('type.closLang.exp','type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X41))))))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111x0110_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'!_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool))))),'_dst_x00000x11001x10111_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))),'_dst_x000x011x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0x1_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X41))))))))),s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool)))),'_dst_x0000x0100x0000x0010x0000x0000x1001_7'(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X24),s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num','const.num.|48|_0'),s(fun('type.sptree.spt'('type.num.num'),'type.sptree.spt'('type.num.num')),'_i_0_0'),s('type.list.list'('type.closSem.v'),X32),s('type.list.list'('type.closSem.v'),X33),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X41))))))))))))),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',bool),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X32))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X41),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X42)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X23),s('type.list.list'('type.closSem.v'),X38),s('type.list.list'('type.closSem.v'),X39)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X41)))))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X23),s('type.closSem.v',X51))),s('type.closSem.v',X52))))) & ! [X53,X54,X55,X56,X57,X58] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X54))),s('type.num.num',X53))))),s('type.num.num',X58)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X58),s('type.num.num',X54)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X23),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X58),s('type.list.list'('type.closSem.v'),X56))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X58),s('type.list.list'('type.closSem.v'),X57)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X58),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X56)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X58),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X57))))))) | ? [X50] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X54))),s('type.num.num',X58)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X58),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X54))),s('type.num.num',X53)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X58),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X54))),s('type.num.num',X53)))))) & s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X50))) = s('type.option.option'('type.num.num'),'const.sptree.lookup_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X58))),s('type.num.num',X54))),s('type.sptree.spt'('type.num.num'),X55))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X58),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X56)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X54))),s('type.num.num',X50))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X57)))))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X23),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X58),s('type.list.list'('type.closSem.v'),X56))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X54))),s('type.num.num',X50))),s('type.list.list'('type.closSem.v'),X57)))))))) => p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X24),s('type.num.num',X53))),s('type.num.num',X54))),s('type.sptree.spt'('type.num.num'),X55))),s('type.list.list'('type.closSem.v'),X56))),s('type.list.list'('type.closSem.v'),X57))),s('type.num.num',X58)))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X23),s('type.closSem.v',X5))),s('type.closSem.v',X18))))))),
  file('thm.clos_annotateProof.v_rel_rules|split|0','thm.clos_annotateProof.v_rel|49|_def')).
fof(f346,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK51('const.closSem.Number_1'(s('type.integer.int',sK12)),'const.closSem.Number_1'(s('type.integer.int',sK12)))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK12))))),s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK12))))))),
  inference(resolution,[],[f186,f284])).
fof(f284,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK51(X1,X0)),s('type.closSem.v',X0))),s('type.closSem.v',X1))))) )),
  inference(cnf_transformation,[],[f163])).
% SZS output end Proof for thm.clos_annotateProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 137
% Passive clauses: 422
% Generated clauses: 730
% Final active clauses: 137
% Final passive clauses: 398
% Input formulas: 78
% Initial clauses: 156
% 
% Selected by SInE selection: 16
% SInE iterations: 1
% 
% Duplicate literals: 21
% Fw subsumption resolutions: 98
% Fw demodulations: 5
% 
% Simple tautologies: 48
% Equational tautologies: 9
% Forward subsumptions: 154
% 
% Binary resolution: 336
% Forward superposition: 93
% Backward superposition: 183
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 2
% 
% Split clauses: 16
% Split components: 32
% SAT solver clauses: 17
% SAT solver binary clauses: 16
% 
% Sat splits: 16
% 
% Memory used [KB]: 5500
% Time elapsed: 0.147 s
% ------------------------------
% ------------------------------
% Success in time 11.895 s
