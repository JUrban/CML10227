Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.untypedSafety
% (104356)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 186
% Passive clauses: 4218
% Generated clauses: 29265
% Final active clauses: 177
% Final passive clauses: 3787
% Input formulas: 22
% Initial clauses: 37
% 
% Duplicate literals: 673
% Trivial inequalities: 981
% Fw subsumption resolutions: 2991
% Fw demodulations: 7357
% Bw demodulations: 7
% 
% Simple tautologies: 525
% Equational tautologies: 43
% Forward subsumptions: 12328
% Fw demodulations to eq. taut.: 2
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 252
% Factoring: 1
% Forward superposition: 9130
% Backward superposition: 7535
% Self superposition: 131
% Equality factoring: 80
% Equality resolution: 48
% 
% Split clauses: 94
% Split components: 188
% SAT solver clauses: 309
% SAT solver unit clauses: 66
% SAT solver binary clauses: 171
% 
% Sat splits: 94
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 309
% TWLsolver calls for satisfiability: 59
% 
% Memory used [KB]: 13048
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.untypedSafety
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.untypedSafety
% SZS output start Proof for thm.untypedSafety
fof(f3208,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3207,f3197,f3201,f108,f136,f149,f150,f82,f119])).
fof(f119,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),sK1) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),'const.pair.,_2'(s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))),s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.,_2'(s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))),s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.,_2'(s('type.ffi.ffi_state'(sK0),'const.pair.FST_1'(s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))))),s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.,_2'(s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.pair.SND_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2)))))))))))))))))) ) | $spl0),
  inference(cnf_transformation,[],[f119_D])).
fof(f119_D,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),sK1) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),'const.pair.,_2'(s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))),s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.,_2'(s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))),s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.,_2'(s('type.ffi.ffi_state'(sK0),'const.pair.FST_1'(s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))))),s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.,_2'(s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.pair.SND_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2)))))))))))))))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f82,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),sK1) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),'const.pair.,_2'(s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))),s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.,_2'(s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))),s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.,_2'(s('type.ffi.ffi_state'(sK0),'const.pair.FST_1'(s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))))),s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.,_2'(s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.pair.SND_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2)))))))))))))))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X2] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),sK1) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),'const.pair.,_2'(s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))),s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.,_2'(s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))),s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.,_2'(s('type.ffi.ffi_state'(sK0),'const.pair.FST_1'(s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))))),s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.,_2'(s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.pair.SND_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2)))))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f57])).
fof(f57,plain,(
  ? [X0,X1] : ! [X2] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X1) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),'const.pair.,_2'(s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))),s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.,_2'(s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))),s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.,_2'(s('type.ffi.ffi_state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))))),s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.,_2'(s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.pair.SND_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2)))))))))))))))))),
  inference(ennf_transformation,[],[f25])).
fof(f25,plain,(
  ~! [X0,X1] : ? [X2] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),'const.pair.,_2'(s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))),s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.,_2'(s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))),s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.,_2'(s('type.ffi.ffi_state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))))),s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.,_2'(s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.pair.SND_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2)))))))))))))))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ~! [X0] : ! [X1] : ? [X2] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),'const.pair.,_2'(s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))),s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.,_2'(s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))),s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.,_2'(s('type.ffi.ffi_state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))))),s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.,_2'(s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.pair.SND_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2)))))))))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ? [X8] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X7) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),'const.pair.,_2'(s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X8))),s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.,_2'(s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X8))))),s('type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.,_2'(s('type.ffi.ffi_state'(X6),'const.pair.FST_1'(s('type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X8))))))),s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.,_2'(s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X8))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.pair.SND_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X8)))))))))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ? [X8] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X7) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),'const.pair.,_2'(s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X8))),s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.,_2'(s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X8))))),s('type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.,_2'(s('type.ffi.ffi_state'(X6),'const.pair.FST_1'(s('type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X8))))))),s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.,_2'(s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.pair.FST_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X8))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.pair.SND_1'(s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(X6),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X8)))))))))))))))))),
  file('thm.untypedSafety.untypedSafety_4_prove_ltb','thm.untypedSafety.untypedSafety_4_prove_ltb')).
fof(f150,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),sK1) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),'const.pair.,_2'(s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))),s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2)))))) ) | $spl52),
  inference(cnf_transformation,[],[f150_D])).
fof(f150_D,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),sK1) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),'const.pair.,_2'(s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))),s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2)))))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f149,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),sK1) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),'const.pair.,_2'(s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))),s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2)))))) ) | ($spl0 | $spl30)),
  inference(forward_demodulation,[],[f148,f136])).
fof(f148,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),sK1) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),'const.pair.,_2'(s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))),s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.,_2'(s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))),s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2)))))))))) ) | ($spl0 | $spl30)),
  inference(forward_demodulation,[],[f147,f136])).
fof(f147,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),sK1) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),'const.pair.,_2'(s('type.num.num','const.pair.FST_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))),s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.,_2'(s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))),s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.,_2'(s('type.ffi.ffi_state'(sK0),'const.pair.FST_1'(s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2))))))),s('type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)),'const.pair.SND_1'(s('type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))),'const.pair.SND_1'(s('type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool)))),'const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X2)))))))))))))) ) | ($spl0 | $spl30)),
  inference(forward_demodulation,[],[f119,f136])).
fof(f136,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))) ) | $spl30),
  inference(cnf_transformation,[],[f136_D])).
fof(f136_D,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f108,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ! [X0,X1] : ! [X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6,X15] : ! [X8] : s('type.pair.prod'(X6,X15),X8) = s('type.pair.prod'(X6,X15),'const.pair.,_2'(s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X15),X8))),s(X15,'const.pair.SND_1'(s('type.pair.prod'(X6,X15),X8)))))),
  file('thm.untypedSafety.untypedSafety_4_prove_ltb','thm.pair.PAIR')).
fof(f3201,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),sK1) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X0)) ) | $spl570),
  inference(cnf_transformation,[],[f3201_D])).
fof(f3201_D,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),sK1) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X0)) ) <=> ~$spl570),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl570])])).
fof(f3197,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),sK1) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.pair.prod'('type.ffi.ffi_state'(sK0),'type.pair.prod'(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.list.list'('type.string.char'),bool))))),X0)) ) | ($spl30 | $spl52)),
  inference(superposition,[],[f150,f136])).
fof(f3207,plain,(
  $false | $spl570),
  inference(equality_resolution,[],[f3201])).
% SZS output end Proof for thm.untypedSafety
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 42
% Passive clauses: 278
% Generated clauses: 3051
% Final active clauses: 42
% Final passive clauses: 236
% Input formulas: 22
% Initial clauses: 37
% 
% Duplicate literals: 212
% Trivial inequalities: 53
% Fw subsumption resolutions: 190
% Fw demodulations: 151
% Condensations: 391
% 
% Simple tautologies: 99
% Equational tautologies: 33
% Forward subsumptions: 1106
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 66
% Factoring: 1
% Forward superposition: 737
% Backward superposition: 788
% Self superposition: 68
% Equality factoring: 66
% Equality resolution: 11
% 
% Split clauses: 11
% Split components: 22
% SAT solver clauses: 568
% SAT solver unit clauses: 41
% SAT solver binary clauses: 39
% SAT solver learnt clauses: 1
% 
% Sat splits: 11
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 567
% TWLsolver calls for satisfiability: 185
% 
% Memory used [KB]: 3454
% Time elapsed: 0.218 s
% ------------------------------
% ------------------------------
% Success in time 0.834 s
