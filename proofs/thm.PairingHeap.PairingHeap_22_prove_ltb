Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.PairingHeap
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.PairingHeap
% SZS output start Proof for thm.PairingHeap
fof(f1968,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1967,f133,f230,f228,f1966])).
fof(f1966,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f230,f135])).
fof(f135,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),sK8) != s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK7,sK6),X3),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7)),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),X4),s('type.PairingHeap.heap'(sK7),'const.PairingHeap.Tree_2'(s(sK7,X5),s('type.list.list'('type.PairingHeap.heap'(sK7)),X6)))))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  (s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK7,sK6),sK9),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7)),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK10),s('type.PairingHeap.heap'(sK7),'const.PairingHeap.Empty_0'))))) | s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK7,sK6),sK11),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7)),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK12),s('type.PairingHeap.heap'(sK7),'const.PairingHeap.Tree_2'(s(sK7,sK13),s('type.list.list'('type.PairingHeap.heap'(sK7)),sK14)))))))) & ! [X7,X8] : s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),sK8) != s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK7,sK6),X7),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7)),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),X8),s('type.PairingHeap.heap'(sK7),'const.PairingHeap.Empty_0'))))) & ! [X3,X4,X5,X6] : s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),sK8) != s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK7,sK6),X3),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7)),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),X4),s('type.PairingHeap.heap'(sK7),'const.PairingHeap.Tree_2'(s(sK7,X5),s('type.list.list'('type.PairingHeap.heap'(sK7)),X6)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13,sK14])],[f90])).
fof(f90,plain,(
  ? [X0,X1,X2] : ((? [X13,X14] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X13),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X14),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Empty_0'))))) | ? [X9,X10,X11,X12] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X9),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X10),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Tree_2'(s(X1,X11),s('type.list.list'('type.PairingHeap.heap'(X1)),X12)))))))) & ! [X7,X8] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X7),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X8),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Empty_0'))))) & ! [X3,X4,X5,X6] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Tree_2'(s(X1,X5),s('type.list.list'('type.PairingHeap.heap'(X1)),X6))))))))),
  inference(rectify,[],[f65])).
fof(f65,plain,(
  ? [X0,X1,X2] : ((? [X7,X8] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X7),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X8),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Empty_0'))))) | ? [X3,X4,X5,X6] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Tree_2'(s(X1,X5),s('type.list.list'('type.PairingHeap.heap'(X1)),X6)))))))) & ! [X13,X14] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X13),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X14),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Empty_0'))))) & ! [X9,X10,X11,X12] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X9),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X10),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Tree_2'(s(X1,X11),s('type.list.list'('type.PairingHeap.heap'(X1)),X12))))))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ? [X0,X1,X2] : ((? [X7,X8] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X7),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X8),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Empty_0'))))) | ? [X3,X4,X5,X6] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Tree_2'(s(X1,X5),s('type.list.list'('type.PairingHeap.heap'(X1)),X6)))))))) & (! [X13,X14] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X13),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X14),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Empty_0'))))) & ! [X9,X10,X11,X12] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) != s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X9),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X10),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Tree_2'(s(X1,X11),s('type.list.list'('type.PairingHeap.heap'(X1)),X12)))))))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1,X2] : ((? [X7,X8] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X7),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X8),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Empty_0'))))) | ? [X3,X4,X5,X6] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Tree_2'(s(X1,X5),s('type.list.list'('type.PairingHeap.heap'(X1)),X6)))))))) => (? [X13,X14] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X13),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X14),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Empty_0'))))) | ? [X9,X10,X11,X12] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X9),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X10),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Tree_2'(s(X1,X11),s('type.list.list'('type.PairingHeap.heap'(X1)),X12)))))))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ~! [X0,X1] : ! [X2] : ((? [X7,X8] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X7),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X8),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Empty_0'))))) | ? [X3,X4,X5,X6] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X3),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X4),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Tree_2'(s(X1,X5),s('type.list.list'('type.PairingHeap.heap'(X1)),X6)))))))) => (? [X13,X14] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X13),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X14),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Empty_0'))))) | ? [X9,X10,X11,X12] : s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),X2) = s('type.pair.prod'(fun(X1,X0),'type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1))),'const.pair.,_2'(s(fun(X1,X0),X9),s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.PairingHeap.heap'(X1)),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X10),s('type.PairingHeap.heap'(X1),'const.PairingHeap.Tree_2'(s(X1,X11),s('type.list.list'('type.PairingHeap.heap'(X1)),X12)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : ((? [X9,X10] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7)),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.PairingHeap.heap'(X7),'const.PairingHeap.Empty_0'))))) | ? [X9,X10,X11,X12] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7)),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.PairingHeap.heap'(X7),'const.PairingHeap.Tree_2'(s(X7,X11),s('type.list.list'('type.PairingHeap.heap'(X7)),X12)))))))) => (? [X9,X10] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7)),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.PairingHeap.heap'(X7),'const.PairingHeap.Empty_0'))))) | ? [X9,X10,X11,X12] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7)),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.PairingHeap.heap'(X7),'const.PairingHeap.Tree_2'(s(X7,X11),s('type.list.list'('type.PairingHeap.heap'(X7)),X12)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : ((? [X9,X10] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7)),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.PairingHeap.heap'(X7),'const.PairingHeap.Empty_0'))))) | ? [X9,X10,X11,X12] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7)),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.PairingHeap.heap'(X7),'const.PairingHeap.Tree_2'(s(X7,X11),s('type.list.list'('type.PairingHeap.heap'(X7)),X12)))))))) => (? [X9,X10] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7)),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.PairingHeap.heap'(X7),'const.PairingHeap.Empty_0'))))) | ? [X9,X10,X11,X12] : s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7))),X8) = s('type.pair.prod'(fun(X7,X6),'type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7))),'const.pair.,_2'(s(fun(X7,X6),X9),s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.PairingHeap.heap'(X7)),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X10),s('type.PairingHeap.heap'(X7),'const.PairingHeap.Tree_2'(s(X7,X11),s('type.list.list'('type.PairingHeap.heap'(X7)),X12)))))))))),
  file('thm.PairingHeap.PairingHeap_22_prove_ltb','thm.PairingHeap.PairingHeap_22_prove_ltb')).
fof(f228,plain,(
  s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK7,sK6),sK9),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7)),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK10),s('type.PairingHeap.heap'(sK7),'const.PairingHeap.Empty_0'))))) | $spl0),
  inference(cnf_transformation,[],[f228_D])).
fof(f228_D,plain,(
  s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK7,sK6),sK9),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7)),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK10),s('type.PairingHeap.heap'(sK7),'const.PairingHeap.Empty_0'))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f230,plain,(
  s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK7,sK6),sK11),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7)),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK12),s('type.PairingHeap.heap'(sK7),'const.PairingHeap.Tree_2'(s(sK7,sK13),s('type.list.list'('type.PairingHeap.heap'(sK7)),sK14))))))) | $spl2),
  inference(cnf_transformation,[],[f230_D])).
fof(f230_D,plain,(
  s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK7,sK6),sK11),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7)),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK12),s('type.PairingHeap.heap'(sK7),'const.PairingHeap.Tree_2'(s(sK7,sK13),s('type.list.list'('type.PairingHeap.heap'(sK7)),sK14))))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f133,plain,(
  s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK7,sK6),sK11),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7)),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK12),s('type.PairingHeap.heap'(sK7),'const.PairingHeap.Tree_2'(s(sK7,sK13),s('type.list.list'('type.PairingHeap.heap'(sK7)),sK14))))))) | s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),sK8) = s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK7,sK6),sK9),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7)),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),sK10),s('type.PairingHeap.heap'(sK7),'const.PairingHeap.Empty_0')))))),
  inference(cnf_transformation,[],[f91])).
fof(f1967,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f228,f134])).
fof(f134,plain,(
  ( ! [X8,X7] : (s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),sK8) != s('type.pair.prod'(fun(sK7,sK6),'type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7))),'const.pair.,_2'(s(fun(sK7,sK6),X7),s('type.pair.prod'(fun(sK6,fun(sK6,bool)),'type.PairingHeap.heap'(sK7)),'const.pair.,_2'(s(fun(sK6,fun(sK6,bool)),X8),s('type.PairingHeap.heap'(sK7),'const.PairingHeap.Empty_0')))))) )),
  inference(cnf_transformation,[],[f91])).
% SZS output end Proof for thm.PairingHeap
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 174
% Passive clauses: 688
% Generated clauses: 1828
% Final active clauses: 174
% Final passive clauses: 454
% Input formulas: 26
% Initial clauses: 93
% 
% Duplicate literals: 39
% Trivial inequalities: 13
% Fw subsumption resolutions: 134
% 
% Simple tautologies: 60
% Equational tautologies: 11
% Forward subsumptions: 864
% 
% Binary resolution: 1181
% Factoring: 200
% Forward superposition: 86
% Backward superposition: 51
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 43
% Split components: 87
% SAT solver clauses: 80
% SAT solver unit clauses: 8
% SAT solver binary clauses: 30
% SAT solver learnt clauses: 1
% 
% Sat splits: 43
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 79
% TWLsolver calls for satisfiability: 59
% 
% Memory used [KB]: 1279
% Time elapsed: 0.068 s
% ------------------------------
% ------------------------------
% Success in time 0.09 s
