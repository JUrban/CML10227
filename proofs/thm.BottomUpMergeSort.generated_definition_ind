Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.BottomUpMergeSort
% (129484)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 988
% Passive clauses: 6678
% Generated clauses: 27910
% Final active clauses: 860
% Final passive clauses: 5288
% Input formulas: 260
% Initial clauses: 487
% 
% Duplicate literals: 214
% Trivial inequalities: 44
% Fw subsumption resolutions: 1705
% Fw demodulations: 3498
% Bw demodulations: 125
% 
% Simple tautologies: 305
% Equational tautologies: 16
% Forward subsumptions: 15476
% 
% Binary resolution: 5815
% Factoring: 687
% Forward superposition: 7035
% Backward superposition: 8134
% Self superposition: 46
% Equality factoring: 2
% Equality resolution: 6
% 
% Split clauses: 239
% Split components: 480
% SAT solver clauses: 370
% SAT solver unit clauses: 15
% SAT solver binary clauses: 84
% 
% Sat splits: 239
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 370
% TWLsolver calls for satisfiability: 317
% 
% Memory used [KB]: 16247
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.BottomUpMergeSort
% (129498)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 575
% Passive clauses: 2830
% Generated clauses: 23224
% Final active clauses: 452
% Final passive clauses: 1881
% Input formulas: 260
% Initial clauses: 487
% 
% Duplicate literals: 80
% Trivial inequalities: 32
% Fw subsumption resolutions: 837
% Fw demodulations: 2928
% Bw demodulations: 426
% Condensations: 24
% Global subsumptions: 24
% 
% Simple tautologies: 257
% Equational tautologies: 9
% Forward subsumptions: 12550
% Fw demodulations to eq. taut.: 11
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 1726
% Factoring: 44
% Forward superposition: 6902
% Backward superposition: 6317
% Self superposition: 71
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 47
% Split components: 94
% SAT solver clauses: 3687
% SAT solver unit clauses: 655
% SAT solver binary clauses: 141
% SAT solver learnt clauses: 48
% SAT solver learnt literals: 12
% 
% Sat splits: 47
% Sat splitting refutations: 53
% 
% TWLsolver clauses: 3591
% TWLsolver calls for satisfiability: 3334
% 
% Memory used [KB]: 28144
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.BottomUpMergeSort
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BottomUpMergeSort
% SZS output start Proof for thm.BottomUpMergeSort
fof(f26830,plain,(
  $false),
  inference(subsumption_resolution,[],[f26288,f1475])).
fof(f1475,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,happ(s(fun('type.one.one',bool),'_dst_x1x0_2'(s(fun('type.one.one',fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool)),'_dst_x1x0_2'(s(fun('type.one.one',fun(fun(sK13,fun(sK13,bool)),fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool))),sK14),s(fun(sK13,fun(sK13,bool)),X7))),s('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s(sK12,X8),s('type.list.list'('type.list.list'(sK13)),X9))))),s('type.one.one','const.one.one_0'))))) )),
  inference(forward_demodulation,[],[f1471,f1356])).
fof(f1356,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))) )),
  inference(cnf_transformation,[],[f558])).
fof(f558,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(flattening,[],[f557])).
fof(f557,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X53,X56,X54] : ! [X57,X58,X60] : s(X53,happ(s(fun(X54,X53),happ(s(fun(X56,fun(X54,X53)),X57),s(X56,X60))),s(X54,X58))) = s(X53,happ(s(fun(X56,X53),'_dst_x1x0_2'(s(fun(X56,fun(X54,X53)),X57),s(X54,X58))),s(X56,X60)))),
  file('thm.BottomUpMergeSort.generated_definition_ind','_dst_x1x0_ax')).
fof(f1471,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,happ(s(fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool),happ(s(fun('type.one.one',fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool)),'_dst_x1x0_2'(s(fun('type.one.one',fun(fun(sK13,fun(sK13,bool)),fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool))),sK14),s(fun(sK13,fun(sK13,bool)),X7))),s('type.one.one','const.one.one_0'))),s('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s(sK12,X8),s('type.list.list'('type.list.list'(sK13)),X9))))))) )),
  inference(backward_demodulation,[],[f1356,f932])).
fof(f932,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,happ(s(fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool),happ(s(fun(fun(sK13,fun(sK13,bool)),fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool)),happ(s(fun('type.one.one',fun(fun(sK13,fun(sK13,bool)),fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool))),sK14),s('type.one.one','const.one.one_0'))),s(fun(sK13,fun(sK13,bool)),X7))),s('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s(sK12,X8),s('type.list.list'('type.list.list'(sK13)),X9))))))) )),
  inference(cnf_transformation,[],[f744])).
fof(f744,plain,(
  ! [X7,X8,X9] : p(s(bool,happ(s(fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool),happ(s(fun(fun(sK13,fun(sK13,bool)),fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool)),happ(s(fun('type.one.one',fun(fun(sK13,fun(sK13,bool)),fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool))),sK14),s('type.one.one','const.one.one_0'))),s(fun(sK13,fun(sK13,bool)),X7))),s('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s(sK12,X8),s('type.list.list'('type.list.list'(sK13)),X9)))))) & ~p(s(bool,happ(s(fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool),happ(s(fun(fun(sK13,fun(sK13,bool)),fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool)),happ(s(fun('type.one.one',fun(fun(sK13,fun(sK13,bool)),fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool))),sK14),s('type.one.one',sK15))),s(fun(sK13,fun(sK13,bool)),sK16))),s('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s(sK12,sK17),s('type.list.list'('type.list.list'(sK13)),sK18))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18])],[f743])).
fof(f743,plain,(
  ? [X0,X1,X2] : (! [X7,X8,X9] : p(s(bool,happ(s(fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool),happ(s(fun(fun(X1,fun(X1,bool)),fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool)),happ(s(fun('type.one.one',fun(fun(X1,fun(X1,bool)),fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool))),X2),s('type.one.one','const.one.one_0'))),s(fun(X1,fun(X1,bool)),X7))),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X8),s('type.list.list'('type.list.list'(X1)),X9)))))) & ? [X3,X4,X5,X6] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool),happ(s(fun(fun(X1,fun(X1,bool)),fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool)),happ(s(fun('type.one.one',fun(fun(X1,fun(X1,bool)),fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool))),X2),s('type.one.one',X3))),s(fun(X1,fun(X1,bool)),X4))),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X5),s('type.list.list'('type.list.list'(X1)),X6)))))))),
  inference(rectify,[],[f664])).
fof(f664,plain,(
  ? [X0,X1,X2] : (! [X3,X4,X5] : p(s(bool,happ(s(fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool),happ(s(fun(fun(X1,fun(X1,bool)),fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool)),happ(s(fun('type.one.one',fun(fun(X1,fun(X1,bool)),fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool))),X2),s('type.one.one','const.one.one_0'))),s(fun(X1,fun(X1,bool)),X3))),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X4),s('type.list.list'('type.list.list'(X1)),X5)))))) & ? [X6,X7,X8,X9] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool),happ(s(fun(fun(X1,fun(X1,bool)),fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool)),happ(s(fun('type.one.one',fun(fun(X1,fun(X1,bool)),fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool))),X2),s('type.one.one',X6))),s(fun(X1,fun(X1,bool)),X7))),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X8),s('type.list.list'('type.list.list'(X1)),X9)))))))),
  inference(ennf_transformation,[],[f263])).
fof(f263,plain,(
  ~! [X0,X1,X2] : (! [X3,X4,X5] : p(s(bool,happ(s(fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool),happ(s(fun(fun(X1,fun(X1,bool)),fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool)),happ(s(fun('type.one.one',fun(fun(X1,fun(X1,bool)),fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool))),X2),s('type.one.one','const.one.one_0'))),s(fun(X1,fun(X1,bool)),X3))),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X4),s('type.list.list'('type.list.list'(X1)),X5)))))) => ! [X6,X7,X8,X9] : p(s(bool,happ(s(fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool),happ(s(fun(fun(X1,fun(X1,bool)),fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool)),happ(s(fun('type.one.one',fun(fun(X1,fun(X1,bool)),fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool))),X2),s('type.one.one',X6))),s(fun(X1,fun(X1,bool)),X7))),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X8),s('type.list.list'('type.list.list'(X1)),X9)))))))),
  inference(flattening,[],[f262])).
fof(f262,plain,(
  ~! [X0,X1] : ! [X2] : (! [X3,X4,X5] : p(s(bool,happ(s(fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool),happ(s(fun(fun(X1,fun(X1,bool)),fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool)),happ(s(fun('type.one.one',fun(fun(X1,fun(X1,bool)),fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool))),X2),s('type.one.one','const.one.one_0'))),s(fun(X1,fun(X1,bool)),X3))),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X4),s('type.list.list'('type.list.list'(X1)),X5)))))) => ! [X6,X7,X8,X9] : p(s(bool,happ(s(fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool),happ(s(fun(fun(X1,fun(X1,bool)),fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool)),happ(s(fun('type.one.one',fun(fun(X1,fun(X1,bool)),fun('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),bool))),X2),s('type.one.one',X6))),s(fun(X1,fun(X1,bool)),X7))),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X8),s('type.list.list'('type.list.list'(X1)),X9)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : (! [X9,X10,X11] : p(s(bool,happ(s(fun('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),bool),happ(s(fun(fun(X7,fun(X7,bool)),fun('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),bool)),happ(s(fun('type.one.one',fun(fun(X7,fun(X7,bool)),fun('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),bool))),X8),s('type.one.one','const.one.one_0'))),s(fun(X7,fun(X7,bool)),X9))),s('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),'const.pair.,_2'(s(X6,X10),s('type.list.list'('type.list.list'(X7)),X11)))))) => ! [X12,X13,X14,X15] : p(s(bool,happ(s(fun('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),bool),happ(s(fun(fun(X7,fun(X7,bool)),fun('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),bool)),happ(s(fun('type.one.one',fun(fun(X7,fun(X7,bool)),fun('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),bool))),X8),s('type.one.one',X12))),s(fun(X7,fun(X7,bool)),X13))),s('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),'const.pair.,_2'(s(X6,X14),s('type.list.list'('type.list.list'(X7)),X15)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : (! [X9,X10,X11] : p(s(bool,happ(s(fun('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),bool),happ(s(fun(fun(X7,fun(X7,bool)),fun('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),bool)),happ(s(fun('type.one.one',fun(fun(X7,fun(X7,bool)),fun('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),bool))),X8),s('type.one.one','const.one.one_0'))),s(fun(X7,fun(X7,bool)),X9))),s('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),'const.pair.,_2'(s(X6,X10),s('type.list.list'('type.list.list'(X7)),X11)))))) => ! [X12,X13,X14,X15] : p(s(bool,happ(s(fun('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),bool),happ(s(fun(fun(X7,fun(X7,bool)),fun('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),bool)),happ(s(fun('type.one.one',fun(fun(X7,fun(X7,bool)),fun('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),bool))),X8),s('type.one.one',X12))),s(fun(X7,fun(X7,bool)),X13))),s('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),'const.pair.,_2'(s(X6,X14),s('type.list.list'('type.list.list'(X7)),X15)))))))),
  file('thm.BottomUpMergeSort.generated_definition_ind','thm.BottomUpMergeSort.generated_definition_ind')).
fof(f26288,plain,(
  ~p(s(bool,happ(s(fun('type.one.one',bool),'_dst_x1x0_2'(s(fun('type.one.one',fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool)),'_dst_x1x0_2'(s(fun('type.one.one',fun(fun(sK13,fun(sK13,bool)),fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool))),sK14),s(fun(sK13,fun(sK13,bool)),sK16))),s('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s(sK12,sK17),s('type.list.list'('type.list.list'(sK13)),sK18))))),s('type.one.one','const.one.one_0'))))),
  inference(unit_resulting_resolution,[],[f1474,f987])).
fof(f987,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one','const.one.one_0')))) | p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one',X1))))) )),
  inference(cnf_transformation,[],[f668])).
fof(f668,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one','const.one.one_0')))) | ! [X1] : p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one',X1)))))),
  inference(ennf_transformation,[],[f309])).
fof(f309,plain,(
  ! [X0] : (p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one','const.one.one_0')))) => ! [X1] : p(s(bool,happ(s(fun('type.one.one',bool),X0),s('type.one.one',X1)))))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X8] : (p(s(bool,happ(s(fun('type.one.one',bool),X8),s('type.one.one','const.one.one_0')))) => ! [X18] : p(s(bool,happ(s(fun('type.one.one',bool),X8),s('type.one.one',X18)))))),
  file('thm.BottomUpMergeSort.generated_definition_ind','thm.one.one_induction')).
fof(f1474,plain,(
  ~p(s(bool,happ(s(fun('type.one.one',bool),'_dst_x1x0_2'(s(fun('type.one.one',fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool)),'_dst_x1x0_2'(s(fun('type.one.one',fun(fun(sK13,fun(sK13,bool)),fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool))),sK14),s(fun(sK13,fun(sK13,bool)),sK16))),s('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s(sK12,sK17),s('type.list.list'('type.list.list'(sK13)),sK18))))),s('type.one.one',sK15))))),
  inference(forward_demodulation,[],[f1470,f1356])).
fof(f1470,plain,(
  ~p(s(bool,happ(s(fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool),happ(s(fun('type.one.one',fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool)),'_dst_x1x0_2'(s(fun('type.one.one',fun(fun(sK13,fun(sK13,bool)),fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool))),sK14),s(fun(sK13,fun(sK13,bool)),sK16))),s('type.one.one',sK15))),s('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s(sK12,sK17),s('type.list.list'('type.list.list'(sK13)),sK18))))))),
  inference(backward_demodulation,[],[f1356,f933])).
fof(f933,plain,(
  ~p(s(bool,happ(s(fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool),happ(s(fun(fun(sK13,fun(sK13,bool)),fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool)),happ(s(fun('type.one.one',fun(fun(sK13,fun(sK13,bool)),fun('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),bool))),sK14),s('type.one.one',sK15))),s(fun(sK13,fun(sK13,bool)),sK16))),s('type.pair.prod'(sK12,'type.list.list'('type.list.list'(sK13))),'const.pair.,_2'(s(sK12,sK17),s('type.list.list'('type.list.list'(sK13)),sK18))))))),
  inference(cnf_transformation,[],[f744])).
% SZS output end Proof for thm.BottomUpMergeSort
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 659
% Passive clauses: 4306
% Generated clauses: 25877
% Final active clauses: 527
% Final passive clauses: 3001
% Input formulas: 260
% Initial clauses: 487
% 
% Duplicate literals: 8
% Trivial inequalities: 22
% Fw subsumption resolutions: 453
% Fw demodulations: 4458
% Bw demodulations: 476
% Condensations: 21
% 
% Simple tautologies: 91
% Equational tautologies: 40
% Forward subsumptions: 15765
% Fw demodulations to eq. taut.: 183
% Bw demodulations to eq. taut.: 2
% 
% Unit resulting resolution: 7831
% Factoring: 1
% Forward superposition: 7131
% Backward superposition: 4887
% Self superposition: 64
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 19
% Split components: 38
% SAT solver clauses: 4855
% SAT solver unit clauses: 1760
% SAT solver binary clauses: 2271
% 
% Sat splits: 19
% Sat splitting refutations: 509
% 
% Memory used [KB]: 24306
% Time elapsed: 0.779 s
% ------------------------------
% ------------------------------
% Success in time 2.14 s
