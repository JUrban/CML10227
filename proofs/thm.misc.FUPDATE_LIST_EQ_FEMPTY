Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.misc
% (14655)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 116
% Passive clauses: 2249
% Generated clauses: 10311
% Final active clauses: 102
% Final passive clauses: 1936
% Input formulas: 36
% Initial clauses: 92
% 
% Duplicate literals: 564
% Trivial inequalities: 157
% Fw subsumption resolutions: 1743
% Fw demodulations: 420
% Bw demodulations: 8
% 
% Simple tautologies: 298
% Equational tautologies: 79
% Forward subsumptions: 3892
% 
% Binary resolution: 316
% Factoring: 2
% Forward superposition: 3543
% Backward superposition: 3034
% Self superposition: 210
% Equality factoring: 172
% Equality resolution: 27
% 
% Split clauses: 396
% Split components: 825
% SAT solver clauses: 1105
% SAT solver unit clauses: 8
% SAT solver binary clauses: 172
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 2
% 
% Sat splits: 396
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1099
% TWLsolver calls for satisfiability: 183
% 
% Memory used [KB]: 5245
% Time elapsed: 0.609 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.misc
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.misc
% SZS output start Proof for thm.misc
fof(f5626,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f5623,f151,f264,f262,f260,f304,f149,f261,f150,f263,f259,f215,f292,f4991,f4960,f4962,f204,f288,f2672,f2701,f198,f284,f216,f293,f2558,f2559,f154,f268,f222,f300,f352,f358,f195,f281,f337,f344,f205,f290,f218,f296,f5593,f5599,f189,f280,f5571,f5573,f2673,f2702,f199,f283,f4999,f5002])).
fof(f5002,plain,(
  s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))) | $spl714),
  inference(cnf_transformation,[],[f5002_D])).
fof(f5002_D,plain,(
  s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))) <=> ~$spl714),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl714])])).
fof(f4999,plain,(
  s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f261,f259])).
fof(f283,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))) | s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),X2)) ) | $spl20),
  inference(cnf_transformation,[],[f283_D])).
fof(f283_D,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))) | s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),X2)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f199,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),X2) | s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2)))) )),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1,X2] : ((s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))) | (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),X1) & s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),X2))) & (s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),X1) | s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),X2) | s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2)))))),
  inference(flattening,[],[f132])).
fof(f132,plain,(
  ! [X0,X1,X2] : ((s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))) | (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),X1) & s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),X2))) & ((s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),X1) | s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),X2)) | s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2)))))),
  inference(nnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1,X2] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))) <=> (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),X1) & s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),X2)))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ! [X0] : ! [X1,X2] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))) <=> (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),X1) & s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),X2)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X6] : ! [X23,X12] : (s(fun(X6,bool),'const.pred_set.EMPTY_0') = s(fun(X6,bool),'const.pred_set.UNION_2'(s(fun(X6,bool),X23),s(fun(X6,bool),X12))) <=> (s(fun(X6,bool),'const.pred_set.EMPTY_0') = s(fun(X6,bool),X23) & s(fun(X6,bool),'const.pred_set.EMPTY_0') = s(fun(X6,bool),X12)))),
  file('thm.misc.FUPDATE_LIST_EQ_FEMPTY','thm.pred_set.EMPTY_UNION')).
fof(f2702,plain,(
  ( ! [X21,X19,X22,X20] : (s(fun(X19,bool),'const.pred_set.EMPTY_0') != s(fun(X19,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X19,X20),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X19,X20),X21),s('type.list.list'('type.pair.prod'(X19,X20)),X22))))) | s(fun(X19,bool),'const.pred_set.EMPTY_0') = s(fun(X19,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X19),'const.list.MAP_2'(s(fun('type.pair.prod'(X19,X20),X19),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X19,X20)),X22)))))) ) | $spl390),
  inference(cnf_transformation,[],[f2702_D])).
fof(f2702_D,plain,(
  ( ! [X21,X19,X22,X20] : (s(fun(X19,bool),'const.pred_set.EMPTY_0') != s(fun(X19,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X19,X20),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X19,X20),X21),s('type.list.list'('type.pair.prod'(X19,X20)),X22))))) | s(fun(X19,bool),'const.pred_set.EMPTY_0') = s(fun(X19,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X19),'const.list.MAP_2'(s(fun('type.pair.prod'(X19,X20),X19),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X19,X20)),X22)))))) ) <=> ~$spl390),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl390])])).
fof(f2673,plain,(
  ( ! [X21,X19,X22,X20] : (s(fun(X19,bool),'const.pred_set.EMPTY_0') != s(fun(X19,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X19,X20),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X19,X20),X21),s('type.list.list'('type.pair.prod'(X19,X20)),X22))))) | s(fun(X19,bool),'const.pred_set.EMPTY_0') = s(fun(X19,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X19),'const.list.MAP_2'(s(fun('type.pair.prod'(X19,X20),X19),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X19,X20)),X22)))))) ) | ($spl20 | $spl40)),
  inference(superposition,[],[f283,f293])).
fof(f5573,plain,(
  s(fun(sK0,bool),'const.pred_set.EMPTY_0') = s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),'const.list.MAP_2'(s(fun('type.pair.prod'(sK0,sK1),sK0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))))) | $spl786),
  inference(cnf_transformation,[],[f5573_D])).
fof(f5573_D,plain,(
  s(fun(sK0,bool),'const.pred_set.EMPTY_0') = s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),'const.list.MAP_2'(s(fun('type.pair.prod'(sK0,sK1),sK0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))))) <=> ~$spl786),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl786])])).
fof(f5571,plain,(
  s(fun(sK0,bool),'const.pred_set.EMPTY_0') = s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),'const.list.MAP_2'(s(fun('type.pair.prod'(sK0,sK1),sK0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))))) | ($spl30 | $spl390 | $spl714)),
  inference(subsumption_resolution,[],[f5564,f288])).
fof(f5564,plain,(
  s(fun(sK0,bool),'const.pred_set.EMPTY_0') != s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0'))) | s(fun(sK0,bool),'const.pred_set.EMPTY_0') = s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),'const.list.MAP_2'(s(fun('type.pair.prod'(sK0,sK1),sK0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))))) | ($spl390 | $spl714)),
  inference(superposition,[],[f2702,f5002])).
fof(f280,plain,(
  ( ! [X0,X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl14),
  inference(cnf_transformation,[],[f280_D])).
fof(f280_D,plain,(
  ( ! [X0,X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f189,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1] : ((s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f55])).
fof(f55,plain,(
  ! [X0] : ! [X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6] : ! [X22] : (s(fun(X6,bool),'const.pred_set.EMPTY_0') = s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X22))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X22))),
  file('thm.misc.FUPDATE_LIST_EQ_FEMPTY','thm.list.LIST_TO_SET_EQ_EMPTY|split|0')).
fof(f5599,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.MAP_2'(s(fun('type.pair.prod'(sK0,sK1),sK0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))) | $spl790),
  inference(cnf_transformation,[],[f5599_D])).
fof(f5599_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.MAP_2'(s(fun('type.pair.prod'(sK0,sK1),sK0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))) <=> ~$spl790),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl790])])).
fof(f5593,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.MAP_2'(s(fun('type.pair.prod'(sK0,sK1),sK0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))) | ($spl14 | $spl786)),
  inference(trivial_inequality_removal,[],[f5576])).
fof(f5576,plain,(
  s(fun(sK0,bool),'const.pred_set.EMPTY_0') != s(fun(sK0,bool),'const.pred_set.EMPTY_0') | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.MAP_2'(s(fun('type.pair.prod'(sK0,sK1),sK0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))) | ($spl14 | $spl786)),
  inference(superposition,[],[f280,f5573])).
fof(f296,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) | s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2)) ) | $spl46),
  inference(cnf_transformation,[],[f296_D])).
fof(f296_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) | s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2)) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f218,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2,X3] : ((s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) | s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2)) & (s('type.list.list'(X1),'const.list.NIL_0') != s('type.list.list'(X1),X2) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2)))))),
  inference(nnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1,X2,X3] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) <=> s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2))),
  inference(flattening,[],[f77])).
fof(f77,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X2))) <=> s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X7,X6] : ! [X22,X18] : (s('type.list.list'(X7),'const.list.NIL_0') = s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X18),s('type.list.list'(X6),X22))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X22))),
  file('thm.misc.FUPDATE_LIST_EQ_FEMPTY','thm.list.MAP_EQ_NIL|split|1')).
fof(f290,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1)) ) | $spl34),
  inference(cnf_transformation,[],[f290_D])).
fof(f290_D,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1)) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f205,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f94])).
fof(f94,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X10,X11] : ((p(s(bool,X10)) => p(s(bool,X11))) => ((p(s(bool,X11)) => p(s(bool,X10))) => s(bool,X10) = s(bool,X11)))),
  file('thm.misc.FUPDATE_LIST_EQ_FEMPTY','thm.bool.IMP_ANTISYM_AX')).
fof(f344,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl68),
  inference(cnf_transformation,[],[f344_D])).
fof(f344_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f337,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | ($spl9 | $spl34)),
  inference(resolution,[],[f290,f268])).
fof(f281,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))) ) | $spl16),
  inference(cnf_transformation,[],[f281_D])).
fof(f281_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f195,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1] : ~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ! [X0] : ! [X1] : ~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6] : ! [X13] : ~p(s(bool,'const.bool.IN_2'(s(X6,X13),s(fun(X6,bool),'const.pred_set.EMPTY_0'))))),
  file('thm.misc.FUPDATE_LIST_EQ_FEMPTY','thm.pred_set.NOT_IN_EMPTY')).
fof(f358,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0')))) ) | $spl78),
  inference(cnf_transformation,[],[f358_D])).
fof(f358_D,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0')))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f352,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0')))) ) | ($spl16 | $spl68)),
  inference(resolution,[],[f344,f281])).
fof(f300,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2))) != s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))) | p(s(bool,'const.bool.IN_2'(s(X0,sK5(X3,X2,X1,X0)),s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2)))))) | s('type.finite_map.fmap'(X0,X1),X2) = s('type.finite_map.fmap'(X0,X1),X3)) ) | $spl54),
  inference(cnf_transformation,[],[f300_D])).
fof(f300_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2))) != s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))) | p(s(bool,'const.bool.IN_2'(s(X0,sK5(X3,X2,X1,X0)),s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2)))))) | s('type.finite_map.fmap'(X0,X1),X2) = s('type.finite_map.fmap'(X0,X1),X3)) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f222,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.finite_map.fmap'(X0,X1),X2) = s('type.finite_map.fmap'(X0,X1),X3) | p(s(bool,'const.bool.IN_2'(s(X0,sK5(X3,X2,X1,X0)),s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2)))))) | s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2))) != s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0,X1,X2,X3] : ((s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2))) != s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))) | (p(s(bool,'const.bool.IN_2'(s(X0,sK5(X3,X2,X1,X0)),s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2)))))) & s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X2),s(X0,sK5(X3,X2,X1,X0)))) != s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X3),s(X0,sK5(X3,X2,X1,X0))))) | s('type.finite_map.fmap'(X0,X1),X2) = s('type.finite_map.fmap'(X0,X1),X3)) & (s('type.finite_map.fmap'(X0,X1),X2) != s('type.finite_map.fmap'(X0,X1),X3) | (s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2))) = s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))) & ! [X4] : (~p(s(bool,'const.bool.IN_2'(s(X0,X4),s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2)))))) | s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X2),s(X0,X4))) = s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X3),s(X0,X4)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5])],[f143])).
fof(f143,plain,(
  ! [X0,X1,X2,X3] : ((s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2))) != s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))) | ? [X5] : (p(s(bool,'const.bool.IN_2'(s(X0,X5),s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2)))))) & s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X2),s(X0,X5))) != s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X3),s(X0,X5)))) | s('type.finite_map.fmap'(X0,X1),X2) = s('type.finite_map.fmap'(X0,X1),X3)) & (s('type.finite_map.fmap'(X0,X1),X2) != s('type.finite_map.fmap'(X0,X1),X3) | (s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2))) = s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))) & ! [X4] : (~p(s(bool,'const.bool.IN_2'(s(X0,X4),s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2)))))) | s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X2),s(X0,X4))) = s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X3),s(X0,X4)))))))),
  inference(rectify,[],[f142])).
fof(f142,plain,(
  ! [X0,X1,X2,X3] : ((s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2))) != s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))) | ? [X4] : (p(s(bool,'const.bool.IN_2'(s(X0,X4),s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2)))))) & s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X2),s(X0,X4))) != s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X3),s(X0,X4)))) | s('type.finite_map.fmap'(X0,X1),X2) = s('type.finite_map.fmap'(X0,X1),X3)) & (s('type.finite_map.fmap'(X0,X1),X2) != s('type.finite_map.fmap'(X0,X1),X3) | (s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2))) = s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))) & ! [X4] : (~p(s(bool,'const.bool.IN_2'(s(X0,X4),s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2)))))) | s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X2),s(X0,X4))) = s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X3),s(X0,X4)))))))),
  inference(flattening,[],[f141])).
fof(f141,plain,(
  ! [X0,X1,X2,X3] : (((s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2))) != s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))) | ? [X4] : (p(s(bool,'const.bool.IN_2'(s(X0,X4),s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2)))))) & s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X2),s(X0,X4))) != s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X3),s(X0,X4))))) | s('type.finite_map.fmap'(X0,X1),X2) = s('type.finite_map.fmap'(X0,X1),X3)) & (s('type.finite_map.fmap'(X0,X1),X2) != s('type.finite_map.fmap'(X0,X1),X3) | (s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2))) = s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))) & ! [X4] : (~p(s(bool,'const.bool.IN_2'(s(X0,X4),s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2)))))) | s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X2),s(X0,X4))) = s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X3),s(X0,X4)))))))),
  inference(nnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0,X1,X2,X3] : ((s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2))) = s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))) & ! [X4] : (~p(s(bool,'const.bool.IN_2'(s(X0,X4),s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2)))))) | s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X2),s(X0,X4))) = s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X3),s(X0,X4))))) <=> s('type.finite_map.fmap'(X0,X1),X2) = s('type.finite_map.fmap'(X0,X1),X3))),
  inference(ennf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0,X1,X2,X3] : ((s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2))) = s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))) & ! [X4] : (p(s(bool,'const.bool.IN_2'(s(X0,X4),s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2)))))) => s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X2),s(X0,X4))) = s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X3),s(X0,X4))))) <=> s('type.finite_map.fmap'(X0,X1),X2) = s('type.finite_map.fmap'(X0,X1),X3))),
  inference(flattening,[],[f81])).
fof(f81,plain,(
  ! [X0,X1] : ! [X2,X3] : ((s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2))) = s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))) & ! [X4] : (p(s(bool,'const.bool.IN_2'(s(X0,X4),s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X2)))))) => s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X2),s(X0,X4))) = s(X1,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X0,X1),X3),s(X0,X4))))) <=> s('type.finite_map.fmap'(X0,X1),X2) = s('type.finite_map.fmap'(X0,X1),X3))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6,X7] : ! [X18,X19] : ((s(fun(X6,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X6,X7),X18))) = s(fun(X6,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X6,X7),X19))) & ! [X13] : (p(s(bool,'const.bool.IN_2'(s(X6,X13),s(fun(X6,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X6,X7),X18)))))) => s(X7,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X6,X7),X18),s(X6,X13))) = s(X7,'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'(X6,X7),X19),s(X6,X13))))) <=> s('type.finite_map.fmap'(X6,X7),X18) = s('type.finite_map.fmap'(X6,X7),X19))),
  file('thm.misc.FUPDATE_LIST_EQ_FEMPTY','thm.finite_map.fmap_EQ_THM')).
fof(f268,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f268_D])).
fof(f268_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f154,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f40])).
fof(f40,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.misc.FUPDATE_LIST_EQ_FEMPTY',aHL_FALSITY)).
fof(f2559,plain,(
  ( ! [X4] : (s(fun(sK0,bool),'const.pred_set.EMPTY_0') != s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),X4))) | s('type.finite_map.fmap'(sK0,sK1),X4) = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)))) ) | $spl362),
  inference(cnf_transformation,[],[f2559_D])).
fof(f2559_D,plain,(
  ( ! [X4] : (s(fun(sK0,bool),'const.pred_set.EMPTY_0') != s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),X4))) | s('type.finite_map.fmap'(sK0,sK1),X4) = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)))) ) <=> ~$spl362),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl362])])).
fof(f2558,plain,(
  ( ! [X4] : (s(fun(sK0,bool),'const.pred_set.EMPTY_0') != s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),X4))) | s('type.finite_map.fmap'(sK0,sK1),X4) = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)))) ) | ($spl0 | $spl9 | $spl30 | $spl54 | $spl78)),
  inference(subsumption_resolution,[],[f2557,f268])).
fof(f2557,plain,(
  ( ! [X4] : (p(s(bool,'F_0')) | s(fun(sK0,bool),'const.pred_set.EMPTY_0') != s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),X4))) | s('type.finite_map.fmap'(sK0,sK1),X4) = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)))) ) | ($spl0 | $spl30 | $spl54 | $spl78)),
  inference(forward_demodulation,[],[f2556,f358])).
fof(f2556,plain,(
  ( ! [X4] : (p(s(bool,'const.bool.IN_2'(s(sK0,sK5(X4,'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)),sK1,sK0)),s(fun(sK0,bool),'const.pred_set.EMPTY_0')))) | s(fun(sK0,bool),'const.pred_set.EMPTY_0') != s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),X4))) | s('type.finite_map.fmap'(sK0,sK1),X4) = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)))) ) | ($spl0 | $spl30 | $spl54)),
  inference(forward_demodulation,[],[f2555,f288])).
fof(f2555,plain,(
  ( ! [X4] : (p(s(bool,'const.bool.IN_2'(s(sK0,sK5(X4,'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)),sK1,sK0)),s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0')))))) | s(fun(sK0,bool),'const.pred_set.EMPTY_0') != s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),X4))) | s('type.finite_map.fmap'(sK0,sK1),X4) = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)))) ) | ($spl0 | $spl30 | $spl54)),
  inference(forward_demodulation,[],[f2554,f259])).
fof(f2554,plain,(
  ( ! [X4] : (s(fun(sK0,bool),'const.pred_set.EMPTY_0') != s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),X4))) | p(s(bool,'const.bool.IN_2'(s(sK0,sK5(X4,'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)),sK1,sK0)),s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)))))))) | s('type.finite_map.fmap'(sK0,sK1),X4) = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)))) ) | ($spl0 | $spl30 | $spl54)),
  inference(forward_demodulation,[],[f2545,f288])).
fof(f2545,plain,(
  ( ! [X4] : (s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0'))) != s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),X4))) | p(s(bool,'const.bool.IN_2'(s(sK0,sK5(X4,'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)),sK1,sK0)),s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)))))))) | s('type.finite_map.fmap'(sK0,sK1),X4) = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)))) ) | ($spl0 | $spl54)),
  inference(superposition,[],[f300,f259])).
fof(f293,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X3),s('type.list.list'('type.pair.prod'(X0,X1)),X2))))) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X2)))))))) ) | $spl40),
  inference(cnf_transformation,[],[f293_D])).
fof(f293_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X3),s('type.list.list'('type.pair.prod'(X0,X1)),X2))))) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X2)))))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f216,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X3),s('type.list.list'('type.pair.prod'(X0,X1)),X2))))) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X2)))))))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1,X2,X3] : s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X3),s('type.list.list'('type.pair.prod'(X0,X1)),X2))))) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X2)))))))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0,X1] : ! [X2,X3] : s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X3),s('type.list.list'('type.pair.prod'(X0,X1)),X2))))) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X0,X1),X3))),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X0,X1),X0),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X0,X1)),X2)))))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6,X7] : ! [X21,X8] : s(fun(X6,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X6,X7),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X6,X7),X8),s('type.list.list'('type.pair.prod'(X6,X7)),X21))))) = s(fun(X6,bool),'const.pred_set.UNION_2'(s(fun(X6,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X6,X7),X8))),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),'const.list.MAP_2'(s(fun('type.pair.prod'(X6,X7),X6),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X6,X7)),X21)))))))),
  file('thm.misc.FUPDATE_LIST_EQ_FEMPTY','thm.finite_map.FDOM_FUPDATE_LIST')).
fof(f284,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))) | s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),X1)) ) | $spl22),
  inference(cnf_transformation,[],[f284_D])).
fof(f284_D,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2))) | s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),X1)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f198,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),X1) | s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X2)))) )),
  inference(cnf_transformation,[],[f133])).
fof(f2701,plain,(
  ( ! [X17,X15,X18,X16] : (s(fun(X15,bool),'const.pred_set.EMPTY_0') != s(fun(X15,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X15,X16),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X15,X16),X17),s('type.list.list'('type.pair.prod'(X15,X16)),X18))))) | s(fun(X15,bool),'const.pred_set.EMPTY_0') = s(fun(X15,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X15,X16),X17)))) ) | $spl388),
  inference(cnf_transformation,[],[f2701_D])).
fof(f2701_D,plain,(
  ( ! [X17,X15,X18,X16] : (s(fun(X15,bool),'const.pred_set.EMPTY_0') != s(fun(X15,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X15,X16),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X15,X16),X17),s('type.list.list'('type.pair.prod'(X15,X16)),X18))))) | s(fun(X15,bool),'const.pred_set.EMPTY_0') = s(fun(X15,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X15,X16),X17)))) ) <=> ~$spl388),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl388])])).
fof(f2672,plain,(
  ( ! [X17,X15,X18,X16] : (s(fun(X15,bool),'const.pred_set.EMPTY_0') != s(fun(X15,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X15,X16),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X15,X16),X17),s('type.list.list'('type.pair.prod'(X15,X16)),X18))))) | s(fun(X15,bool),'const.pred_set.EMPTY_0') = s(fun(X15,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X15,X16),X17)))) ) | ($spl22 | $spl40)),
  inference(superposition,[],[f284,f293])).
fof(f288,plain,(
  ( ! [X0,X1] : (s(fun(X1,bool),'const.pred_set.EMPTY_0') = s(fun(X1,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X1,X0),'const.finite_map.FEMPTY_0')))) ) | $spl30),
  inference(cnf_transformation,[],[f288_D])).
fof(f288_D,plain,(
  ( ! [X0,X1] : (s(fun(X1,bool),'const.pred_set.EMPTY_0') = s(fun(X1,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X1,X0),'const.finite_map.FEMPTY_0')))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f204,plain,(
  ( ! [X0,X1] : (s(fun(X1,bool),'const.pred_set.EMPTY_0') = s(fun(X1,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X1,X0),'const.finite_map.FEMPTY_0')))) )),
  inference(cnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0,X1] : s(fun(X1,bool),'const.pred_set.EMPTY_0') = s(fun(X1,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X1,X0),'const.finite_map.FEMPTY_0')))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X7,X6] : s(fun(X6,bool),'const.pred_set.EMPTY_0') = s(fun(X6,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(X6,X7),'const.finite_map.FEMPTY_0')))),
  file('thm.misc.FUPDATE_LIST_EQ_FEMPTY','thm.finite_map.FDOM_FEMPTY')).
fof(f4962,plain,(
  s(fun(sK0,bool),'const.pred_set.EMPTY_0') = s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),sK2))) | $spl710),
  inference(cnf_transformation,[],[f4962_D])).
fof(f4962_D,plain,(
  s(fun(sK0,bool),'const.pred_set.EMPTY_0') = s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),sK2))) <=> ~$spl710),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl710])])).
fof(f4960,plain,(
  s(fun(sK0,bool),'const.pred_set.EMPTY_0') = s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),sK2))) | ($spl0 | $spl30 | $spl388)),
  inference(subsumption_resolution,[],[f4955,f288])).
fof(f4955,plain,(
  s(fun(sK0,bool),'const.pred_set.EMPTY_0') != s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0'))) | s(fun(sK0,bool),'const.pred_set.EMPTY_0') = s(fun(sK0,bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'(sK0,sK1),sK2))) | ($spl0 | $spl388)),
  inference(superposition,[],[f2701,f259])).
fof(f4991,plain,(
  $false | ($spl0 | $spl3 | $spl362 | $spl710)),
  inference(subsumption_resolution,[],[f4990,f262])).
fof(f4990,plain,(
  s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(sK0,sK1),sK2) | ($spl0 | $spl362 | $spl710)),
  inference(forward_demodulation,[],[f4988,f259])).
fof(f4988,plain,(
  s('type.finite_map.fmap'(sK0,sK1),sK2) = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))) | ($spl362 | $spl710)),
  inference(trivial_inequality_removal,[],[f4964])).
fof(f4964,plain,(
  s(fun(sK0,bool),'const.pred_set.EMPTY_0') != s(fun(sK0,bool),'const.pred_set.EMPTY_0') | s('type.finite_map.fmap'(sK0,sK1),sK2) = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))) | ($spl362 | $spl710)),
  inference(superposition,[],[f2559,f4962])).
fof(f292,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'(X0,X1),X2) = s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X2),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0')))) ) | $spl38),
  inference(cnf_transformation,[],[f292_D])).
fof(f292_D,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'(X0,X1),X2) = s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X2),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0')))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f215,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'(X0,X1),X2) = s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X2),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'(X0,X1),X2) = s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X2),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0')))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ! [X0,X1] : ! [X2] : s('type.finite_map.fmap'(X0,X1),X2) = s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X2),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0')))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6,X7] : ! [X18] : s('type.finite_map.fmap'(X6,X7),X18) = s('type.finite_map.fmap'(X6,X7),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X6,X7),X18),s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.NIL_0')))),
  file('thm.misc.FUPDATE_LIST_EQ_FEMPTY','thm.finite_map.FUPDATE_LIST_THM|split|0')).
fof(f259,plain,(
  s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))) | $spl0),
  inference(cnf_transformation,[],[f259_D])).
fof(f259_D,plain,(
  s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f263,plain,(
  s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3) | $spl4),
  inference(cnf_transformation,[],[f263_D])).
fof(f263_D,plain,(
  s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f150,plain,(
  s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3) | s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)))),
  inference(cnf_transformation,[],[f105])).
fof(f105,plain,(
  (s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))) | (s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(sK0,sK1),sK2) & s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))) & (s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))) | s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'(sK0,sK1),sK2) | s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f104])).
fof(f104,plain,(
  ? [X0,X1,X2,X3] : ((s('type.finite_map.fmap'(X0,X1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X2),s('type.list.list'('type.pair.prod'(X0,X1)),X3))) | (s('type.finite_map.fmap'(X0,X1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(X0,X1),X2) & s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X0,X1)),X3))) & (s('type.finite_map.fmap'(X0,X1),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X2),s('type.list.list'('type.pair.prod'(X0,X1)),X3))) | s('type.finite_map.fmap'(X0,X1),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'(X0,X1),X2) | s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(X0,X1)),X3)))),
  inference(flattening,[],[f103])).
fof(f103,plain,(
  ? [X0,X1,X2,X3] : ((s('type.finite_map.fmap'(X0,X1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X2),s('type.list.list'('type.pair.prod'(X0,X1)),X3))) | (s('type.finite_map.fmap'(X0,X1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(X0,X1),X2) & s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X0,X1)),X3))) & (s('type.finite_map.fmap'(X0,X1),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X2),s('type.list.list'('type.pair.prod'(X0,X1)),X3))) | (s('type.finite_map.fmap'(X0,X1),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'(X0,X1),X2) | s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(X0,X1)),X3))))),
  inference(nnf_transformation,[],[f87])).
fof(f87,plain,(
  ? [X0,X1,X2,X3] : (s('type.finite_map.fmap'(X0,X1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X2),s('type.list.list'('type.pair.prod'(X0,X1)),X3))) <~> (s('type.finite_map.fmap'(X0,X1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(X0,X1),X2) & s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X0,X1)),X3)))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2,X3] : (s('type.finite_map.fmap'(X0,X1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X2),s('type.list.list'('type.pair.prod'(X0,X1)),X3))) <=> (s('type.finite_map.fmap'(X0,X1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(X0,X1),X2) & s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X0,X1)),X3)))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ~! [X0,X1] : ! [X2,X3] : (s('type.finite_map.fmap'(X0,X1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(X0,X1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X0,X1),X2),s('type.list.list'('type.pair.prod'(X0,X1)),X3))) <=> (s('type.finite_map.fmap'(X0,X1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(X0,X1),X2) & s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X0,X1)),X3)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (s('type.finite_map.fmap'(X6,X7),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(X6,X7),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X6,X7),X8),s('type.list.list'('type.pair.prod'(X6,X7)),X9))) <=> (s('type.finite_map.fmap'(X6,X7),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(X6,X7),X8) & s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X6,X7)),X9)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (s('type.finite_map.fmap'(X6,X7),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(X6,X7),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(X6,X7),X8),s('type.list.list'('type.pair.prod'(X6,X7)),X9))) <=> (s('type.finite_map.fmap'(X6,X7),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(X6,X7),X8) & s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X6,X7)),X9)))),
  file('thm.misc.FUPDATE_LIST_EQ_FEMPTY','thm.misc.FUPDATE_LIST_EQ_FEMPTY')).
fof(f261,plain,(
  s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(sK0,sK1),sK2) | $spl2),
  inference(cnf_transformation,[],[f261_D])).
fof(f261_D,plain,(
  s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(sK0,sK1),sK2) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f149,plain,(
  s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(sK0,sK1),sK2) | s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') = s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)))),
  inference(cnf_transformation,[],[f105])).
fof(f304,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl38)),
  inference(subsumption_resolution,[],[f303,f292])).
fof(f303,plain,(
  s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.NIL_0'))) | ($spl1 | $spl2 | $spl4)),
  inference(forward_demodulation,[],[f302,f261])).
fof(f302,plain,(
  s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.NIL_0'))) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f260,f263])).
fof(f260,plain,(
  s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))) | $spl1),
  inference(cnf_transformation,[],[f260_D])).
fof(f260_D,plain,(
  s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f262,plain,(
  s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'(sK0,sK1),sK2) | $spl3),
  inference(cnf_transformation,[],[f262_D])).
fof(f262_D,plain,(
  s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'(sK0,sK1),sK2) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f264,plain,(
  s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3) | $spl5),
  inference(cnf_transformation,[],[f264_D])).
fof(f264_D,plain,(
  s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f151,plain,(
  s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3) | s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'(sK0,sK1),sK2) | s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FEMPTY_0') != s('type.finite_map.fmap'(sK0,sK1),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'(sK0,sK1),sK2),s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3)))),
  inference(cnf_transformation,[],[f105])).
fof(f5623,plain,(
  $false | ($spl5 | $spl46 | $spl790)),
  inference(subsumption_resolution,[],[f5617,f264])).
fof(f5617,plain,(
  s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3) | ($spl46 | $spl790)),
  inference(trivial_inequality_removal,[],[f5605])).
fof(f5605,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.NIL_0') | s('type.list.list'('type.pair.prod'(sK0,sK1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK0,sK1)),sK3) | ($spl46 | $spl790)),
  inference(superposition,[],[f296,f5599])).
% SZS output end Proof for thm.misc
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 106
% Passive clauses: 418
% Generated clauses: 5419
% Final active clauses: 87
% Final passive clauses: 174
% Input formulas: 36
% Initial clauses: 92
% 
% Duplicate literals: 294
% Trivial inequalities: 125
% Fw subsumption resolutions: 523
% Fw demodulations: 382
% Bw demodulations: 150
% Condensations: 563
% Global subsumptions: 9
% 
% Simple tautologies: 183
% Equational tautologies: 36
% Forward subsumptions: 2249
% Fw demodulations to eq. taut.: 1
% 
% Binary resolution: 214
% Factoring: 1
% Forward superposition: 1417
% Backward superposition: 1062
% Self superposition: 58
% Equality factoring: 54
% Equality resolution: 24
% 
% Split clauses: 56
% Split components: 122
% SAT solver clauses: 735
% SAT solver unit clauses: 95
% SAT solver binary clauses: 42
% SAT solver learnt clauses: 20
% SAT solver learnt literals: 1
% 
% Sat splits: 56
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 697
% TWLsolver calls for satisfiability: 461
% 
% Memory used [KB]: 4605
% Time elapsed: 0.297 s
% ------------------------------
% ------------------------------
% Success in time 0.91 s
