Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.evalProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.evalProps
% SZS output start Proof for thm.evalProps
fof(f4074,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4073,f223,f409,f407,f405,f403,f401,f4071,f1317,f944,f4072])).
fof(f4072,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f407,f228])).
fof(f228,plain,(
  ( ! [X2,X3,X1] : (s('type.ast.dec',sK12) != s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.string.char'),X2),s('type.ast.t',X3)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  (s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',sK13),s('type.ast.exp',sK14))) | s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK15))) | s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),sK16))) | s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),sK17),s('type.list.list'('type.string.char'),sK18),s('type.ast.t',sK19))) | s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),sK20),s('type.list.list'('type.ast.t'),sK21)))) & ! [X9] : s('type.ast.dec',sK12) != s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X9))) & ! [X7,X8] : s('type.ast.dec',sK12) != s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X7),s('type.list.list'('type.ast.t'),X8))) & ! [X5,X6] : s('type.ast.dec',sK12) != s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X5),s('type.ast.exp',X6))) & ! [X4] : s('type.ast.dec',sK12) != s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X4))) & ! [X1,X2,X3] : s('type.ast.dec',sK12) != s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.string.char'),X2),s('type.ast.t',X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21])],[f137])).
fof(f137,plain,(
  ? [X0] : ((? [X17,X18] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X17),s('type.ast.exp',X18))) | ? [X16] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X16))) | ? [X15] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X15))) | ? [X12,X13,X14] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X12),s('type.list.list'('type.string.char'),X13),s('type.ast.t',X14))) | ? [X10,X11] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X10),s('type.list.list'('type.ast.t'),X11)))) & ! [X9] : s('type.ast.dec',X0) != s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X9))) & ! [X7,X8] : s('type.ast.dec',X0) != s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X7),s('type.list.list'('type.ast.t'),X8))) & ! [X5,X6] : s('type.ast.dec',X0) != s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X5),s('type.ast.exp',X6))) & ! [X4] : s('type.ast.dec',X0) != s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X4))) & ! [X1,X2,X3] : s('type.ast.dec',X0) != s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.string.char'),X2),s('type.ast.t',X3))))),
  inference(rectify,[],[f97])).
fof(f97,plain,(
  ? [X0] : ((? [X8,X9] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X8),s('type.ast.exp',X9))) | ? [X7] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X7))) | ? [X6] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X6))) | ? [X3,X4,X5] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.string.char'),X4),s('type.ast.t',X5))) | ? [X1,X2] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X1),s('type.list.list'('type.ast.t'),X2)))) & ! [X18] : s('type.ast.dec',X0) != s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X18))) & ! [X16,X17] : s('type.ast.dec',X0) != s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X16),s('type.list.list'('type.ast.t'),X17))) & ! [X14,X15] : s('type.ast.dec',X0) != s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X14),s('type.ast.exp',X15))) & ! [X13] : s('type.ast.dec',X0) != s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X13))) & ! [X10,X11,X12] : s('type.ast.dec',X0) != s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X10),s('type.list.list'('type.string.char'),X11),s('type.ast.t',X12))))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ? [X0] : ((? [X8,X9] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X8),s('type.ast.exp',X9))) | ? [X7] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X7))) | ? [X6] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X6))) | ? [X3,X4,X5] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.string.char'),X4),s('type.ast.t',X5))) | ? [X1,X2] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X1),s('type.list.list'('type.ast.t'),X2)))) & (! [X18] : s('type.ast.dec',X0) != s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X18))) & ! [X16,X17] : s('type.ast.dec',X0) != s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X16),s('type.list.list'('type.ast.t'),X17))) & ! [X14,X15] : s('type.ast.dec',X0) != s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X14),s('type.ast.exp',X15))) & ! [X13] : s('type.ast.dec',X0) != s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X13))) & ! [X10,X11,X12] : s('type.ast.dec',X0) != s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X10),s('type.list.list'('type.string.char'),X11),s('type.ast.t',X12)))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ((? [X8,X9] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X8),s('type.ast.exp',X9))) | ? [X7] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X7))) | ? [X6] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X6))) | ? [X3,X4,X5] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X3),s('type.list.list'('type.string.char'),X4),s('type.ast.t',X5))) | ? [X1,X2] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X1),s('type.list.list'('type.ast.t'),X2)))) => (? [X18] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X18))) | ? [X16,X17] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X16),s('type.list.list'('type.ast.t'),X17))) | ? [X14,X15] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X14),s('type.ast.exp',X15))) | ? [X13] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X13))) | ? [X10,X11,X12] : s('type.ast.dec',X0) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X10),s('type.list.list'('type.string.char'),X11),s('type.ast.t',X12)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7,X8] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X7),s('type.ast.exp',X8))) | ? [X9] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) | ? [X10] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X10))) | ? [X11,X12,X13] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X11),s('type.list.list'('type.string.char'),X12),s('type.ast.t',X13))) | ? [X14,X15] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X14),s('type.list.list'('type.ast.t'),X15)))) => (? [X10] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X10))) | ? [X14,X15] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X14),s('type.list.list'('type.ast.t'),X15))) | ? [X7,X8] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X7),s('type.ast.exp',X8))) | ? [X9] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) | ? [X11,X12,X13] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X11),s('type.list.list'('type.string.char'),X12),s('type.ast.t',X13)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7,X8] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X7),s('type.ast.exp',X8))) | ? [X9] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) | ? [X10] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X10))) | ? [X11,X12,X13] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X11),s('type.list.list'('type.string.char'),X12),s('type.ast.t',X13))) | ? [X14,X15] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X14),s('type.list.list'('type.ast.t'),X15)))) => (? [X10] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X10))) | ? [X14,X15] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X14),s('type.list.list'('type.ast.t'),X15))) | ? [X7,X8] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X7),s('type.ast.exp',X8))) | ? [X9] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) | ? [X11,X12,X13] : s('type.ast.dec',X6) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),X11),s('type.list.list'('type.string.char'),X12),s('type.ast.t',X13)))))),
  file('thm.evalProps.evalProps_|49|26_prove_ltb','thm.evalProps.evalProps_|49|26_prove_ltb')).
fof(f944,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f401,f226])).
fof(f226,plain,(
  ( ! [X6,X5] : (s('type.ast.dec',sK12) != s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',X5),s('type.ast.exp',X6)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f1317,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f409,f225])).
fof(f225,plain,(
  ( ! [X8,X7] : (s('type.ast.dec',sK12) != s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),X7),s('type.list.list'('type.ast.t'),X8)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4071,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f405,f224])).
fof(f224,plain,(
  ( ! [X9] : (s('type.ast.dec',sK12) != s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X9)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f401,plain,(
  s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',sK13),s('type.ast.exp',sK14))) | $spl0),
  inference(cnf_transformation,[],[f401_D])).
fof(f401_D,plain,(
  s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',sK13),s('type.ast.exp',sK14))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f403,plain,(
  s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK15))) | $spl2),
  inference(cnf_transformation,[],[f403_D])).
fof(f403_D,plain,(
  s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK15))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f405,plain,(
  s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),sK16))) | $spl4),
  inference(cnf_transformation,[],[f405_D])).
fof(f405_D,plain,(
  s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),sK16))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f407,plain,(
  s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),sK17),s('type.list.list'('type.string.char'),sK18),s('type.ast.t',sK19))) | $spl6),
  inference(cnf_transformation,[],[f407_D])).
fof(f407_D,plain,(
  s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),sK17),s('type.list.list'('type.string.char'),sK18),s('type.ast.t',sK19))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f409,plain,(
  s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),sK20),s('type.list.list'('type.ast.t'),sK21))) | $spl8),
  inference(cnf_transformation,[],[f409_D])).
fof(f409_D,plain,(
  s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),sK20),s('type.list.list'('type.ast.t'),sK21))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f223,plain,(
  s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dexn_2'(s('type.list.list'('type.string.char'),sK20),s('type.list.list'('type.ast.t'),sK21))) | s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dtabbrev_3'(s('type.list.list'('type.list.list'('type.string.char')),sK17),s('type.list.list'('type.string.char'),sK18),s('type.ast.t',sK19))) | s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dtype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),sK16))) | s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK15))) | s('type.ast.dec',sK12) = s('type.ast.dec','const.ast.Dlet_2'(s('type.ast.pat',sK13),s('type.ast.exp',sK14)))),
  inference(cnf_transformation,[],[f138])).
fof(f4073,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f403,f227])).
fof(f227,plain,(
  ( ! [X4] : (s('type.ast.dec',sK12) != s('type.ast.dec','const.ast.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X4)))) )),
  inference(cnf_transformation,[],[f138])).
% SZS output end Proof for thm.evalProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 316
% Passive clauses: 1197
% Generated clauses: 3844
% Final active clauses: 316
% Final passive clauses: 731
% Input formulas: 37
% Initial clauses: 173
% 
% Duplicate literals: 149
% Trivial inequalities: 13
% Fw subsumption resolutions: 263
% 
% Simple tautologies: 145
% Equational tautologies: 22
% Forward subsumptions: 2058
% 
% Binary resolution: 2327
% Factoring: 710
% Forward superposition: 104
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 78
% Split components: 160
% SAT solver clauses: 157
% SAT solver unit clauses: 11
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 78
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 156
% TWLsolver calls for satisfiability: 136
% 
% Memory used [KB]: 1918
% Time elapsed: 0.062 s
% ------------------------------
% ------------------------------
% Success in time 0.07 s
