Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (27424)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 116
% Passive clauses: 2148
% Generated clauses: 10209
% Final active clauses: 98
% Final passive clauses: 1851
% Input formulas: 37
% Initial clauses: 290
% 
% Duplicate literals: 666
% Trivial inequalities: 101
% Fw subsumption resolutions: 1635
% Fw demodulations: 61
% Bw demodulations: 14
% 
% Simple tautologies: 229
% Equational tautologies: 113
% Forward subsumptions: 3478
% 
% Binary resolution: 294
% Factoring: 6
% Forward superposition: 2820
% Backward superposition: 3532
% Self superposition: 375
% Equality factoring: 326
% Equality resolution: 7
% 
% Split clauses: 420
% Split components: 841
% SAT solver clauses: 1358
% SAT solver unit clauses: 7
% SAT solver binary clauses: 186
% 
% Sat splits: 420
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1358
% TWLsolver calls for satisfiability: 166
% 
% Memory used [KB]: 6012
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% (27434)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 52
% Passive clauses: 497
% Generated clauses: 5935
% Final active clauses: 48
% Final passive clauses: 293
% Input formulas: 37
% Initial clauses: 290
% 
% Duplicate literals: 1101
% Trivial inequalities: 40
% Fw subsumption resolutions: 247
% Fw demodulations: 33
% Bw demodulations: 155
% Condensations: 1533
% Global subsumptions: 6
% 
% Simple tautologies: 132
% Equational tautologies: 68
% Forward subsumptions: 1278
% 
% Binary resolution: 78
% Factoring: 1
% Forward superposition: 640
% Backward superposition: 1098
% Self superposition: 221
% Equality factoring: 198
% Equality resolution: 6
% 
% Split clauses: 19
% Split components: 38
% SAT solver clauses: 747
% SAT solver unit clauses: 282
% SAT solver binary clauses: 105
% SAT solver learnt clauses: 12
% 
% Sat splits: 19
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 723
% TWLsolver calls for satisfiability: 5141
% 
% Memory used [KB]: 5884
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.mod_to_conProof
% (27463)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 141
% Passive clauses: 1036
% Generated clauses: 35269
% Final active clauses: 90
% Final passive clauses: 264
% Input formulas: 37
% Initial clauses: 290
% 
% Duplicate literals: 5880
% Trivial inequalities: 209
% Fw subsumption resolutions: 4521
% Fw demodulations: 826
% Bw demodulations: 459
% Condensations: 11019
% Global subsumptions: 7
% 
% Simple tautologies: 345
% Equational tautologies: 315
% Forward subsumptions: 11477
% Bw demodulations to eq. taut.: 12
% 
% Unit resulting resolution: 749
% Factoring: 1
% Forward superposition: 4616
% Backward superposition: 6248
% Self superposition: 587
% Equality factoring: 514
% Equality resolution: 27
% 
% Split clauses: 70
% Split components: 140
% SAT solver clauses: 1193
% SAT solver unit clauses: 17
% SAT solver binary clauses: 309
% 
% Sat splits: 70
% Sat splitting refutations: 8
% 
% Memory used [KB]: 18805
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f5931,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f519,f520,f606,f522,f605,f768,f769,f770,f771,f773,f889,f891,f896,f932,f902,f907,f938,f909,f931,f914,f939,f933,f1191,f1194,f950,f1195,f953,f954,f1198,f1199,f1188,f1206,f1207,f1192,f1186,f1330,f1517,f1518,f1557,f1535,f1625,f1852,f2726,f2729,f2742,f2727,f1193,f2744,f3128,f3130,f3129,f3156,f3154,f3153,f3179,f3180,f3181,f3182,f3748,f3751,f3753,f3755,f3757,f3759,f3761,f3774,f2730,f3777,f3752,f3778,f3754,f3779,f3756,f3780,f3758,f3781,f3760,f3782,f3762,f4217,f4219,f4218,f4222,f4224,f4223,f4227,f4229,f4228,f4380,f4382,f4381,f4479,f4481,f4480,f4574,f4576,f4575,f4673,f4675,f4674,f4717,f4719,f4824,f4826,f4825,f4918,f4920,f4919,f5016,f5018,f5017,f5075,f5076,f4718,f5173,f5175,f5174,f5272,f5274,f5273,f5285,f5286,f5315,f5288,f5319,f5321,f5320,f5322,f5324,f5323,f5325,f5314,f5427,f5429,f5428,f5541,f5543,f5641,f5643,f5642,f5705,f5706,f607,f5542,f5809,f5811,f5810,f5906,f5908,f603,f5907,f5922,f5923,f5930])).
fof(f5930,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f5929,f284])).
fof(f284,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.mod_to_conProof.v_rel_rules|split|5',aHL_FALSITY)).
fof(f5929,plain,(
  p(s(bool,'F_0')) | $spl10),
  inference(forward_demodulation,[],[f5924,f518])).
fof(f518,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25)))))),
  inference(resolution,[],[f487,f284])).
fof(f487,plain,(
  ( ! [X6] : (p(s(bool,X6)) | s(bool,X6) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25)))))) )),
  inference(resolution,[],[f231,f252])).
fof(f252,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X49,X50] : ((p(s(bool,X49)) => p(s(bool,X50))) => ((p(s(bool,X50)) => p(s(bool,X49))) => s(bool,X49) = s(bool,X50)))),
  file('thm.mod_to_conProof.v_rel_rules|split|5','thm.bool.IMP_ANTISYM_AX')).
fof(f231,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))))))),
  inference(cnf_transformation,[],[f122])).
fof(f122,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK24,sK25])],[f68])).
fof(f68,plain,(
  ? [X0,X1] : ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X1))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X1))))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1] : p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X1))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X1))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X7))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X7))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X7))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X7))))))),
  file('thm.mod_to_conProof.v_rel_rules|split|5','thm.mod_to_conProof.v_rel_rules|split|5')).
fof(f5924,plain,(
  p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25)))))) | $spl10),
  inference(resolution,[],[f932,f349])).
fof(f349,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ~sP7(sK71(X2,X1,X0),sK72(X2,X1,X0),sK73(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f172])).
fof(f172,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ! [X12,X13,X14] : (sP7(X12,X13,X14) | (sP5(X13,sK65(X14,X13,X12,X2,X1,X0),X12,sK67(X14,X13,X12,X2,X1,X0),sK66(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK65(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK66(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK67(X14,X13,X12,X2,X1,X0)))))) | (sP6(X12,sK68(X14,X13,X12,X2,X1,X0),X14,sK70(X14,X13,X12,X2,X1,X0),sK69(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK68(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK69(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK70(X14,X13,X12,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))))) & ((~sP7(sK71(X2,X1,X0),sK72(X2,X1,X0),sK73(X2,X1,X0)) & ! [X9,X10,X11] : (~sP5(sK72(X2,X1,X0),X9,sK71(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK72(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP6(sK71(X2,X1,X0),X6,sK73(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK73(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK71(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK65,sK66,sK67,sK68,sK69,sK70,sK71,sK72,sK73])],[f171])).
fof(f171,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ! [X12,X13,X14] : (sP7(X12,X13,X14) | ? [X18,X19,X20] : (sP5(X13,X18,X12,X20,X19) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18))),s('type.list.list'('type.modSem.v'),X19))),s('type.list.list'('type.conSem.v'),X20))))) | ? [X15,X16,X17] : (sP6(X12,X15,X14,X17,X16) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X17))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))))) & (? [X3,X4,X5] : (~sP7(X3,X4,X5) & ! [X9,X10,X11] : (~sP5(X4,X9,X3,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP6(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))))),
  inference(rectify,[],[f170])).
fof(f170,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ! [X3,X4,X5] : (sP7(X3,X4,X5) | ? [X14,X15,X16] : (sP5(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP6(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))))) & (? [X3,X4,X5] : (~sP7(X3,X4,X5) & ! [X14,X15,X16] : (~sP5(X4,X14,X3,X16,X15) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (~sP6(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))))),
  inference(nnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> ! [X3,X4,X5] : (sP7(X3,X4,X5) | ? [X14,X15,X16] : (sP5(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP6(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))))),
  inference(definition_folding,[],[f89,f102,f101,f100,f99,f98,f97,f96,f95])).
fof(f95,plain,(
  ! [X4,X21,X23,X22] : (sP0(X4,X21,X23,X22) <=> ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f96,plain,(
  ! [X21,X5,X23,X22] : (sP1(X21,X5,X23,X22) <=> ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f97,plain,(
  ! [X21,X5,X23,X22] : (sP2(X21,X5,X23,X22) <=> ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f98,plain,(
  ! [X4,X21,X23,X22] : (sP3(X4,X21,X23,X22) <=> ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f99,plain,(
  ! [X4,X21,X23,X22] : (sP4(X4,X21,X23,X22) <=> ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f100,plain,(
  ! [X4,X14,X3,X16,X15] : (sP5(X4,X14,X3,X16,X15) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f101,plain,(
  ! [X3,X6,X5,X8,X7] : (sP6(X3,X6,X5,X8,X7) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f102,plain,(
  ! [X3,X4,X5] : (sP7(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP3(X4,X21,X23,X22) | sP0(X4,X21,X23,X22) | sP1(X21,X5,X23,X22) | sP2(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP4(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f89,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> ! [X3,X4,X5] : (? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))))),
  inference(flattening,[],[f88])).
fof(f88,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> ! [X3,X4,X5] : ((? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))))),
  inference(ennf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> ! [X3,X4,X5] : ((! [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) & ! [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X5,X8,X9] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.modSem.v',X8),s('type.conSem.v',X9)))) <=> ! [X10,X11,X12] : ((! [X13,X14,X15] : ((? [X16] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X16))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X16)))) | ? [X17,X18] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) | ? [X19,X20,X21,X17,X18] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X21),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.conSem.v'),X18))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X17))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) | ? [X22,X23,X24,X25,X26,X27,X28] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.string.char'),X23),s('type.modLang.exp',X24))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.modLang.exp',X24))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))))) | ? [X22,X29,X23,X26,X25,X27,X28] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))))) | ? [X7] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X7))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X7)))) | ? [X17,X18] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.modSem.v',X14))),s('type.conSem.v',X15))))) & ! [X30,X31,X32] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X31) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X32)) | ? [X33,X17,X34,X18] : (s('type.list.list'('type.modSem.v'),X31) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X33),s('type.list.list'('type.modSem.v'),X17))) & s('type.list.list'('type.conSem.v'),X32) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X34),s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30))),s('type.modSem.v',X33))),s('type.conSem.v',X34)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30))),s('type.list.list'('type.modSem.v'),X31))),s('type.list.list'('type.conSem.v'),X32))))) & ! [X35,X36,X37] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)) | ? [X23,X33,X22,X38,X34] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.modSem.v',X33))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X38))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X38)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.modSem.v',X33))),s('type.conSem.v',X34)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.modSem.v',X8))),s('type.conSem.v',X9))))))),
  file('thm.mod_to_conProof.v_rel_rules|split|5','thm.mod_to_conProof.v_rel2_def')).
fof(f5923,plain,(
  $false | $spl10),
  inference(resolution,[],[f932,f483])).
fof(f483,plain,(
  ~sP7(sK71('const.conSem.Loc_1'(s('type.num.num',sK25)),'const.modSem.Loc_1'(s('type.num.num',sK25)),sK24),sK72('const.conSem.Loc_1'(s('type.num.num',sK25)),'const.modSem.Loc_1'(s('type.num.num',sK25)),sK24),sK73('const.conSem.Loc_1'(s('type.num.num',sK25)),'const.modSem.Loc_1'(s('type.num.num',sK25)),sK24))),
  inference(resolution,[],[f231,f349])).
fof(f5922,plain,(
  $false | $spl12),
  inference(trivial_inequality_removal,[],[f5921])).
fof(f5921,plain,(
  s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))) | $spl12),
  inference(equality_resolution,[],[f933])).
fof(f5907,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP23(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP17(X70,X75,X72,X71)) ) | $spl84),
  inference(cnf_transformation,[],[f5907_D])).
fof(f5907_D,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP23(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP17(X70,X75,X72,X71)) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f603,plain,(
  ( ! [X8] : (p(s(bool,X8))) ) | $spl0),
  inference(cnf_transformation,[],[f603_D])).
fof(f603_D,plain,(
  ( ! [X8] : (p(s(bool,X8))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f5908,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP23(X76,X81,X82) | ~sP17(X77,X82,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79)))) ) | $spl23),
  inference(subsumption_resolution,[],[f5899,f1991])).
fof(f1991,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | p(s(bool,X1))) ) | $spl23),
  inference(subsumption_resolution,[],[f1987,f278])).
fof(f278,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'F_0'))) )),
  inference(cnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0] : (((~p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,X0))) & (~p(s(bool,X0)) | p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f140])).
fof(f140,plain,(
  ! [X0] : (((~p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,X0))) & (~p(s(bool,X0)) | (p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0] : ((p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,X0)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X48] : ((p(s(bool,'F_0')) | p(s(bool,X48))) <=> p(s(bool,X48)))),
  file('thm.mod_to_conProof.v_rel_rules|split|5','thm.bool.OR_CLAUSES|split|2')).
fof(f1987,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | p(s(bool,'F_0')) | p(s(bool,X1))) ) | $spl23),
  inference(superposition,[],[f1330,f252])).
fof(f5899,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP23(X76,X81,X82) | ~sP17(X77,X82,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f426,f940])).
fof(f940,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f774,f774])).
fof(f774,plain,(
  ( ! [X31] : (s(bool,'F_0') = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) )),
  inference(resolution,[],[f670,f285])).
fof(f285,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f21])).
fof(f21,axiom,(
  p(s(bool,'T_0'))),
  file('thm.mod_to_conProof.v_rel_rules|split|5','thm.bool.TRUTH')).
fof(f670,plain,(
  ( ! [X4,X3] : (~p(s(bool,X4)) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X3)) )),
  inference(resolution,[],[f608,f255])).
fof(f255,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f74])).
fof(f608,plain,(
  ( ! [X6] : (p(s(bool,X6)) | s(bool,'F_0') = s(bool,X6)) )),
  inference(backward_demodulation,[],[f518,f487])).
fof(f426,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP23(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | ~sP17(X3,X2,X5,X4)) )),
  inference(cnf_transformation,[],[f204])).
fof(f204,plain,(
  ! [X0,X1,X2] : ((~sP23(X0,X1,X2) | (((s('type.modSem.v',sK121(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK123(X2,X1,X0)))) & s('type.conSem.v',sK122(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK123(X2,X1,X0))))) | sP19(X1,sK120(X2,X1,X0),sK122(X2,X1,X0),sK121(X2,X1,X0)) | sP16(X1,sK120(X2,X1,X0),sK122(X2,X1,X0),sK121(X2,X1,X0)) | sP17(sK120(X2,X1,X0),X2,sK122(X2,X1,X0),sK121(X2,X1,X0)) | sP18(sK120(X2,X1,X0),X2,sK122(X2,X1,X0),sK121(X2,X1,X0)) | (s('type.modSem.v',sK121(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK124(X2,X1,X0)))) & s('type.conSem.v',sK122(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK124(X2,X1,X0))))) | sP20(X1,sK120(X2,X1,X0),sK122(X2,X1,X0),sK121(X2,X1,X0))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK120(X2,X1,X0)))),s('type.modSem.v',sK121(X2,X1,X0)))),s('type.conSem.v',sK122(X2,X1,X0))))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP19(X1,X3,X5,X4) & ~sP16(X1,X3,X5,X4) & ~sP17(X3,X2,X5,X4) & ~sP18(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP20(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP23(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK120,sK121,sK122,sK123,sK124])],[f203])).
fof(f203,plain,(
  ! [X0,X1,X2] : ((~sP23(X0,X1,X2) | ? [X8,X9,X10] : ((? [X12] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X12))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X12)))) | sP19(X1,X8,X10,X9) | sP16(X1,X8,X10,X9) | sP17(X8,X2,X10,X9) | sP18(X8,X2,X10,X9) | ? [X11] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X11))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X11)))) | sP20(X1,X8,X10,X9)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.modSem.v',X9))),s('type.conSem.v',X10)))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP19(X1,X3,X5,X4) & ~sP16(X1,X3,X5,X4) & ~sP17(X3,X2,X5,X4) & ~sP18(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP20(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP23(X0,X1,X2)))),
  inference(rectify,[],[f202])).
fof(f202,plain,(
  ! [X3,X4,X5] : ((~sP23(X3,X4,X5) | ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP19(X4,X21,X23,X22) | sP16(X4,X21,X23,X22) | sP17(X21,X5,X23,X22) | sP18(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP20(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23)))))) & (! [X21,X22,X23] : ((! [X48] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) & ~sP19(X4,X21,X23,X22) & ~sP16(X4,X21,X23,X22) & ~sP17(X21,X5,X23,X22) & ~sP18(X21,X5,X23,X22) & ! [X26] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) & ~sP20(X4,X21,X23,X22)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | sP23(X3,X4,X5)))),
  inference(nnf_transformation,[],[f120])).
fof(f120,plain,(
  ! [X3,X4,X5] : (sP23(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP19(X4,X21,X23,X22) | sP16(X4,X21,X23,X22) | sP17(X21,X5,X23,X22) | sP18(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP20(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP23])])).
fof(f5906,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP23(X69,X74,X75) | ~sP17(X70,X75,X72,X71) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) ) | $spl23),
  inference(subsumption_resolution,[],[f5898,f1991])).
fof(f5898,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP23(X69,X74,X75) | ~sP17(X70,X75,X72,X71) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) )),
  inference(superposition,[],[f426,f940])).
fof(f5810,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP23(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP16(X74,X70,X72,X71)) ) | $spl82),
  inference(cnf_transformation,[],[f5810_D])).
fof(f5810_D,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP23(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP16(X74,X70,X72,X71)) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f5811,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP23(X76,X81,X82) | ~sP16(X81,X77,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79)))) ) | $spl23),
  inference(subsumption_resolution,[],[f5798,f1991])).
fof(f5798,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP23(X76,X81,X82) | ~sP16(X81,X77,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f425,f940])).
fof(f425,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP23(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | ~sP16(X1,X3,X5,X4)) )),
  inference(cnf_transformation,[],[f204])).
fof(f5809,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP23(X69,X74,X75) | ~sP16(X74,X70,X72,X71) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) ) | $spl23),
  inference(subsumption_resolution,[],[f5797,f1991])).
fof(f5797,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP23(X69,X74,X75) | ~sP16(X74,X70,X72,X71) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) )),
  inference(superposition,[],[f425,f940])).
fof(f5542,plain,(
  ( ! [X26,X24,X27] : (s(bool,X26) = s(bool,X27) | s(bool,'F_0') = s(bool,X24) | s(bool,X24) != s(bool,X26) | s(bool,'F_0') = s(bool,X27)) ) | $spl78),
  inference(cnf_transformation,[],[f5542_D])).
fof(f5542_D,plain,(
  ( ! [X26,X24,X27] : (s(bool,X26) = s(bool,X27) | s(bool,'F_0') = s(bool,X24) | s(bool,X24) != s(bool,X26) | s(bool,'F_0') = s(bool,X27)) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f607,plain,(
  ( ! [X11] : (~p(s(bool,X11))) ) | $spl4),
  inference(cnf_transformation,[],[f607_D])).
fof(f607_D,plain,(
  ( ! [X11] : (~p(s(bool,X11))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f5706,plain,(
  ( ! [X30,X28,X31,X29] : (~p(s(bool,X29)) | s(bool,'F_0') = s(bool,X30) | s(bool,X28) = s(bool,X31) | s(bool,X30) != s(bool,X31) | s(bool,'F_0') = s(bool,X28)) ) | ($spl23 | $spl24)),
  inference(subsumption_resolution,[],[f5691,f1518])).
fof(f5691,plain,(
  ( ! [X30,X28,X31,X29] : (~p(s(bool,X29)) | s(bool,'F_0') = s(bool,X30) | s(bool,X28) = s(bool,X31) | s(bool,X30) != s(bool,X31) | s(bool,'F_0') = s(bool,X29) | s(bool,'F_0') = s(bool,X28)) ) | $spl23),
  inference(superposition,[],[f2810,f767])).
fof(f767,plain,(
  ( ! [X19,X18] : (s(bool,X18) = s(bool,X19) | s(bool,'F_0') = s(bool,X18) | s(bool,'F_0') = s(bool,X19)) )),
  inference(resolution,[],[f670,f608])).
fof(f2810,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | s(bool,'F_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X0) != s(bool,X1)) ) | $spl23),
  inference(resolution,[],[f2731,f255])).
fof(f2731,plain,(
  ( ! [X87,X86] : (p(s(bool,X87)) | s(bool,X86) != s(bool,X87) | s(bool,'F_0') = s(bool,X86)) ) | $spl23),
  inference(subsumption_resolution,[],[f2403,f1330])).
fof(f2403,plain,(
  ( ! [X87,X86] : (s(bool,X86) != s(bool,X87) | p(s(bool,X87)) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,X86)) ) | $spl23),
  inference(superposition,[],[f1991,f767])).
fof(f5705,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,X25)) | s(bool,'F_0') = s(bool,X26) | s(bool,X24) = s(bool,X27) | s(bool,X26) != s(bool,X27) | s(bool,'F_0') = s(bool,X24)) ) | ($spl23 | $spl24)),
  inference(subsumption_resolution,[],[f5690,f1518])).
fof(f5690,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,X25)) | s(bool,'F_0') = s(bool,X26) | s(bool,X24) = s(bool,X27) | s(bool,X26) != s(bool,X27) | s(bool,'F_0') = s(bool,X24) | s(bool,'F_0') = s(bool,X25)) ) | $spl23),
  inference(superposition,[],[f2810,f767])).
fof(f5642,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP23(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP19(X74,X70,X72,X71)) ) | $spl80),
  inference(cnf_transformation,[],[f5642_D])).
fof(f5642_D,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP23(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP19(X74,X70,X72,X71)) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f5643,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP23(X76,X81,X82) | ~sP19(X81,X77,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79)))) ) | $spl23),
  inference(subsumption_resolution,[],[f5634,f1991])).
fof(f5634,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP23(X76,X81,X82) | ~sP19(X81,X77,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f424,f940])).
fof(f424,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP23(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | ~sP19(X1,X3,X5,X4)) )),
  inference(cnf_transformation,[],[f204])).
fof(f5641,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP23(X69,X74,X75) | ~sP19(X74,X70,X72,X71) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) ) | $spl23),
  inference(subsumption_resolution,[],[f5633,f1991])).
fof(f5633,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP23(X69,X74,X75) | ~sP19(X74,X70,X72,X71) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) )),
  inference(superposition,[],[f424,f940])).
fof(f5543,plain,(
  ( ! [X30,X28,X31,X29] : (~p(s(bool,X29)) | s(bool,X30) = s(bool,X31) | s(bool,'F_0') = s(bool,X31) | s(bool,X28) != s(bool,X30) | s(bool,'F_0') = s(bool,X28)) ) | ($spl23 | $spl24)),
  inference(subsumption_resolution,[],[f5527,f1518])).
fof(f5527,plain,(
  ( ! [X30,X28,X31,X29] : (~p(s(bool,X29)) | s(bool,X30) = s(bool,X31) | s(bool,'F_0') = s(bool,X31) | s(bool,X28) != s(bool,X30) | s(bool,'F_0') = s(bool,X29) | s(bool,'F_0') = s(bool,X28)) ) | $spl23),
  inference(superposition,[],[f3892,f767])).
fof(f3892,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,X14)) | s(bool,X15) = s(bool,X16) | s(bool,'F_0') = s(bool,X16) | s(bool,X14) != s(bool,X15)) ) | $spl23),
  inference(subsumption_resolution,[],[f3855,f264])).
fof(f264,plain,(
  ( ! [X0] : (p(s(bool,'T_0')) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X0))))),
  inference(flattening,[],[f130])).
fof(f130,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,X0)) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0] : ((~p(s(bool,X0)) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X48] : ((p(s(bool,X48)) => p(s(bool,X48))) <=> p(s(bool,'T_0')))),
  file('thm.mod_to_conProof.v_rel_rules|split|5','thm.bool.IMP_CLAUSES|split|3')).
fof(f3855,plain,(
  ( ! [X14,X15,X16] : (s(bool,X14) != s(bool,X15) | s(bool,X15) = s(bool,X16) | s(bool,'F_0') = s(bool,X16) | ~p(s(bool,'T_0')) | ~p(s(bool,X14))) ) | $spl23),
  inference(superposition,[],[f2477,f255])).
fof(f2477,plain,(
  ( ! [X19,X20] : (s(bool,'T_0') != s(bool,X19) | s(bool,X19) = s(bool,X20) | s(bool,'F_0') = s(bool,X20)) ) | $spl23),
  inference(superposition,[],[f1330,f767])).
fof(f5541,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,X25)) | s(bool,X26) = s(bool,X27) | s(bool,'F_0') = s(bool,X27) | s(bool,X24) != s(bool,X26) | s(bool,'F_0') = s(bool,X24)) ) | ($spl23 | $spl24)),
  inference(subsumption_resolution,[],[f5526,f1518])).
fof(f5526,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,X25)) | s(bool,X26) = s(bool,X27) | s(bool,'F_0') = s(bool,X27) | s(bool,X24) != s(bool,X26) | s(bool,'F_0') = s(bool,X24) | s(bool,'F_0') = s(bool,X25)) ) | $spl23),
  inference(superposition,[],[f3892,f767])).
fof(f5428,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP15(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP12(X74,X70,X72,X71)) ) | $spl76),
  inference(cnf_transformation,[],[f5428_D])).
fof(f5428_D,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP15(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP12(X74,X70,X72,X71)) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f5429,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP15(X76,X81,X82) | ~sP12(X81,X77,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79)))) ) | $spl23),
  inference(subsumption_resolution,[],[f5412,f1991])).
fof(f5412,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP15(X76,X81,X82) | ~sP12(X81,X77,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f366,f940])).
fof(f366,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP15(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | ~sP12(X1,X3,X5,X4)) )),
  inference(cnf_transformation,[],[f175])).
fof(f175,plain,(
  ! [X0,X1,X2] : ((~sP15(X0,X1,X2) | (((s('type.modSem.v',sK75(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK77(X2,X1,X0)))) & s('type.conSem.v',sK76(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK77(X2,X1,X0))))) | sP11(X1,sK74(X2,X1,X0),sK76(X2,X1,X0),sK75(X2,X1,X0)) | sP8(X1,sK74(X2,X1,X0),sK76(X2,X1,X0),sK75(X2,X1,X0)) | sP9(sK74(X2,X1,X0),X2,sK76(X2,X1,X0),sK75(X2,X1,X0)) | sP10(sK74(X2,X1,X0),X2,sK76(X2,X1,X0),sK75(X2,X1,X0)) | (s('type.modSem.v',sK75(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK78(X2,X1,X0)))) & s('type.conSem.v',sK76(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK78(X2,X1,X0))))) | sP12(X1,sK74(X2,X1,X0),sK76(X2,X1,X0),sK75(X2,X1,X0))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK74(X2,X1,X0)))),s('type.modSem.v',sK75(X2,X1,X0)))),s('type.conSem.v',sK76(X2,X1,X0))))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP11(X1,X3,X5,X4) & ~sP8(X1,X3,X5,X4) & ~sP9(X3,X2,X5,X4) & ~sP10(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP12(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP15(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK74,sK75,sK76,sK77,sK78])],[f174])).
fof(f174,plain,(
  ! [X0,X1,X2] : ((~sP15(X0,X1,X2) | ? [X8,X9,X10] : ((? [X12] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X12))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X12)))) | sP11(X1,X8,X10,X9) | sP8(X1,X8,X10,X9) | sP9(X8,X2,X10,X9) | sP10(X8,X2,X10,X9) | ? [X11] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X11))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X11)))) | sP12(X1,X8,X10,X9)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.modSem.v',X9))),s('type.conSem.v',X10)))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP11(X1,X3,X5,X4) & ~sP8(X1,X3,X5,X4) & ~sP9(X3,X2,X5,X4) & ~sP10(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP12(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP15(X0,X1,X2)))),
  inference(rectify,[],[f173])).
fof(f173,plain,(
  ! [X3,X4,X5] : ((~sP15(X3,X4,X5) | ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP11(X4,X21,X23,X22) | sP8(X4,X21,X23,X22) | sP9(X21,X5,X23,X22) | sP10(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP12(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23)))))) & (! [X21,X22,X23] : ((! [X48] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) & ~sP11(X4,X21,X23,X22) & ~sP8(X4,X21,X23,X22) & ~sP9(X21,X5,X23,X22) & ~sP10(X21,X5,X23,X22) & ! [X26] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) & ~sP12(X4,X21,X23,X22)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | sP15(X3,X4,X5)))),
  inference(nnf_transformation,[],[f111])).
fof(f111,plain,(
  ! [X3,X4,X5] : (sP15(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP11(X4,X21,X23,X22) | sP8(X4,X21,X23,X22) | sP9(X21,X5,X23,X22) | sP10(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP12(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP15])])).
fof(f5427,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP15(X69,X74,X75) | ~sP12(X74,X70,X72,X71) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) ) | $spl23),
  inference(subsumption_resolution,[],[f5411,f1991])).
fof(f5411,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP15(X69,X74,X75) | ~sP12(X74,X70,X72,X71) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) )),
  inference(superposition,[],[f366,f940])).
fof(f5314,plain,(
  ( ! [X35,X34] : (s(bool,'F_0') != s(bool,X34) | s(bool,'T_0') = s(bool,X35) | s(bool,X34) = s(bool,X35)) ) | $spl70),
  inference(cnf_transformation,[],[f5314_D])).
fof(f5314_D,plain,(
  ( ! [X35,X34] : (s(bool,'F_0') != s(bool,X34) | s(bool,'T_0') = s(bool,X35) | s(bool,X34) = s(bool,X35)) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f5325,plain,(
  ( ! [X68,X69,X67] : (p(s(bool,X67)) | s(bool,'F_0') != s(bool,X68) | s(bool,X68) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) ) | $spl23),
  inference(subsumption_resolution,[],[f5309,f1991])).
fof(f5309,plain,(
  ( ! [X68,X69,X67] : (p(s(bool,X67)) | s(bool,'F_0') != s(bool,X68) | s(bool,X68) = s(bool,X69) | s(bool,'T_0') = s(bool,X69) | s(bool,'T_0') = s(bool,X67)) ) | $spl23),
  inference(superposition,[],[f3414,f774])).
fof(f3414,plain,(
  ( ! [X26,X27,X25] : (p(s(bool,X26)) | s(bool,X25) != s(bool,X26) | s(bool,X25) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) ) | $spl23),
  inference(superposition,[],[f1991,f940])).
fof(f5323,plain,(
  ( ! [X59,X62] : (s(bool,X59) = s(bool,X62) | s(bool,'F_0') = s(bool,X62)) ) | $spl74),
  inference(cnf_transformation,[],[f5323_D])).
fof(f5323_D,plain,(
  ( ! [X59,X62] : (s(bool,X59) = s(bool,X62) | s(bool,'F_0') = s(bool,X62)) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f5324,plain,(
  ( ! [X66,X64,X65,X63] : (s(bool,'F_0') != s(bool,X64) | s(bool,X64) = s(bool,X65) | s(bool,'T_0') = s(bool,X65) | s(bool,X63) = s(bool,X66) | s(bool,'F_0') = s(bool,X66)) ) | $spl23),
  inference(subsumption_resolution,[],[f5308,f670])).
fof(f5308,plain,(
  ( ! [X66,X64,X65,X63] : (p(s(bool,X63)) | s(bool,'F_0') != s(bool,X64) | s(bool,X64) = s(bool,X65) | s(bool,'T_0') = s(bool,X65) | s(bool,X63) = s(bool,X66) | s(bool,'F_0') = s(bool,X66)) ) | $spl23),
  inference(superposition,[],[f3414,f767])).
fof(f5322,plain,(
  ( ! [X61,X59,X62,X60] : (s(bool,'F_0') != s(bool,X60) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61) | s(bool,X59) = s(bool,X62) | s(bool,'F_0') = s(bool,X62)) ) | $spl23),
  inference(subsumption_resolution,[],[f5307,f670])).
fof(f5307,plain,(
  ( ! [X61,X59,X62,X60] : (p(s(bool,X59)) | s(bool,'F_0') != s(bool,X60) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61) | s(bool,X59) = s(bool,X62) | s(bool,'F_0') = s(bool,X62)) ) | $spl23),
  inference(superposition,[],[f3414,f767])).
fof(f5320,plain,(
  ( ! [X39,X41,X42] : (s(bool,X39) != s(bool,X41) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,X42) | s(bool,X41) = s(bool,X42)) ) | $spl72),
  inference(cnf_transformation,[],[f5320_D])).
fof(f5320_D,plain,(
  ( ! [X39,X41,X42] : (s(bool,X39) != s(bool,X41) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,X42) | s(bool,X41) = s(bool,X42)) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f5321,plain,(
  ( ! [X45,X43,X46,X44] : (p(s(bool,X44)) | s(bool,X43) != s(bool,X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,X43)) ) | $spl23),
  inference(subsumption_resolution,[],[f5303,f1991])).
fof(f5303,plain,(
  ( ! [X45,X43,X46,X44] : (p(s(bool,X44)) | s(bool,X43) != s(bool,X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,X44)) ) | $spl23),
  inference(superposition,[],[f3414,f940])).
fof(f5319,plain,(
  ( ! [X39,X41,X42,X40] : (p(s(bool,X40)) | s(bool,X39) != s(bool,X41) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,X39)) ) | $spl23),
  inference(subsumption_resolution,[],[f5302,f1991])).
fof(f5302,plain,(
  ( ! [X39,X41,X42,X40] : (p(s(bool,X40)) | s(bool,X39) != s(bool,X41) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,X40) | s(bool,'T_0') = s(bool,X39)) ) | $spl23),
  inference(superposition,[],[f3414,f940])).
fof(f5288,plain,(
  ( ! [X45,X43,X44] : (s(bool,'F_0') != s(bool,X43) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44) | ~p(s(bool,X45))) ) | $spl23),
  inference(resolution,[],[f3414,f261])).
fof(f261,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | ~p(s(bool,'F_0'))) )),
  inference(cnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | ~p(s(bool,X0))) & (p(s(bool,X0)) | ~p(s(bool,X0)) | p(s(bool,'F_0'))))),
  inference(flattening,[],[f128])).
fof(f128,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | ~p(s(bool,X0))) & (p(s(bool,X0)) | (~p(s(bool,X0)) | p(s(bool,'F_0')))))),
  inference(nnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0] : ((~p(s(bool,X0)) | p(s(bool,'F_0'))) <=> ~p(s(bool,X0)))),
  inference(ennf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f48])).
fof(f48,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X48] : ((p(s(bool,X48)) => p(s(bool,'F_0'))) <=> ~p(s(bool,X48)))),
  file('thm.mod_to_conProof.v_rel_rules|split|5','thm.bool.IMP_CLAUSES|split|4')).
fof(f5315,plain,(
  ( ! [X41,X42,X40] : (s(bool,'F_0') != s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | p(s(bool,X42))) ) | $spl23),
  inference(subsumption_resolution,[],[f5287,f285])).
fof(f5287,plain,(
  ( ! [X41,X42,X40] : (s(bool,'F_0') != s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | p(s(bool,X42)) | ~p(s(bool,'T_0'))) ) | $spl23),
  inference(resolution,[],[f3414,f274])).
fof(f274,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f136])).
fof(f136,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0] : ((~p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0] : ((p(s(bool,'F_0')) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X48] : ((p(s(bool,'F_0')) => p(s(bool,X48))) <=> p(s(bool,'T_0')))),
  file('thm.mod_to_conProof.v_rel_rules|split|5','thm.bool.IMP_CLAUSES|split|2')).
fof(f5286,plain,(
  ( ! [X39,X37,X38] : (s(bool,'F_0') != s(bool,X37) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38) | p(s(bool,X39))) ) | $spl23),
  inference(resolution,[],[f3414,f278])).
fof(f5285,plain,(
  ( ! [X35,X36,X34] : (s(bool,'F_0') != s(bool,X34) | s(bool,X34) = s(bool,X35) | s(bool,'T_0') = s(bool,X35) | p(s(bool,X36))) ) | $spl23),
  inference(resolution,[],[f3414,f282])).
fof(f282,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'F_0'))) )),
  inference(cnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0] : (((~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | p(s(bool,X0))) & (~p(s(bool,X0)) | p(s(bool,X0)) | p(s(bool,'F_0'))))),
  inference(flattening,[],[f142])).
fof(f142,plain,(
  ! [X0] : (((~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | p(s(bool,X0))) & (~p(s(bool,X0)) | (p(s(bool,X0)) | p(s(bool,'F_0')))))),
  inference(nnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0] : ((p(s(bool,X0)) | p(s(bool,'F_0'))) <=> p(s(bool,X0)))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X48] : ((p(s(bool,X48)) | p(s(bool,'F_0'))) <=> p(s(bool,X48)))),
  file('thm.mod_to_conProof.v_rel_rules|split|5','thm.bool.OR_CLAUSES|split|3')).
fof(f5273,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP15(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP10(X70,X75,X72,X71)) ) | $spl68),
  inference(cnf_transformation,[],[f5273_D])).
fof(f5273_D,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP15(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP10(X70,X75,X72,X71)) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f5274,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP15(X76,X81,X82) | ~sP10(X77,X82,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79)))) ) | $spl23),
  inference(subsumption_resolution,[],[f5261,f1991])).
fof(f5261,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP15(X76,X81,X82) | ~sP10(X77,X82,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f364,f940])).
fof(f364,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP15(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | ~sP10(X3,X2,X5,X4)) )),
  inference(cnf_transformation,[],[f175])).
fof(f5272,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP15(X69,X74,X75) | ~sP10(X70,X75,X72,X71) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) ) | $spl23),
  inference(subsumption_resolution,[],[f5260,f1991])).
fof(f5260,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP15(X69,X74,X75) | ~sP10(X70,X75,X72,X71) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) )),
  inference(superposition,[],[f364,f940])).
fof(f5174,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP15(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP9(X70,X75,X72,X71)) ) | $spl66),
  inference(cnf_transformation,[],[f5174_D])).
fof(f5174_D,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP15(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP9(X70,X75,X72,X71)) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f5175,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP15(X76,X81,X82) | ~sP9(X77,X82,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79)))) ) | $spl23),
  inference(subsumption_resolution,[],[f5166,f1991])).
fof(f5166,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP15(X76,X81,X82) | ~sP9(X77,X82,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f363,f940])).
fof(f363,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP15(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | ~sP9(X3,X2,X5,X4)) )),
  inference(cnf_transformation,[],[f175])).
fof(f5173,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP15(X69,X74,X75) | ~sP9(X70,X75,X72,X71) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) ) | $spl23),
  inference(subsumption_resolution,[],[f5165,f1991])).
fof(f5165,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP15(X69,X74,X75) | ~sP9(X70,X75,X72,X71) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) )),
  inference(superposition,[],[f363,f940])).
fof(f4718,plain,(
  ( ! [X39,X41,X42] : (s(bool,'F_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X39) | s(bool,X41) = s(bool,X42) | s(bool,X39) = s(bool,X42)) ) | $spl58),
  inference(cnf_transformation,[],[f4718_D])).
fof(f4718_D,plain,(
  ( ! [X39,X41,X42] : (s(bool,'F_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X39) | s(bool,X41) = s(bool,X42) | s(bool,X39) = s(bool,X42)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f5076,plain,(
  ( ! [X30,X28,X31,X29] : (~p(s(bool,X29)) | s(bool,X30) = s(bool,X31) | s(bool,X28) = s(bool,X31) | s(bool,'T_0') = s(bool,X30) | s(bool,'F_0') = s(bool,X28)) ) | $spl24),
  inference(subsumption_resolution,[],[f5061,f1518])).
fof(f5061,plain,(
  ( ! [X30,X28,X31,X29] : (~p(s(bool,X29)) | s(bool,X30) = s(bool,X31) | s(bool,X28) = s(bool,X31) | s(bool,'T_0') = s(bool,X30) | s(bool,'F_0') = s(bool,X29) | s(bool,'F_0') = s(bool,X28)) )),
  inference(superposition,[],[f2153,f767])).
fof(f2153,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(resolution,[],[f1189,f255])).
fof(f1189,plain,(
  ( ! [X4,X3] : (p(s(bool,X3)) | s(bool,'T_0') = s(bool,X4) | s(bool,X3) = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f942,f278])).
fof(f942,plain,(
  ( ! [X4,X3] : (s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | p(s(bool,'F_0')) | p(s(bool,X3))) )),
  inference(superposition,[],[f774,f252])).
fof(f5075,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,X25)) | s(bool,X26) = s(bool,X27) | s(bool,X24) = s(bool,X27) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,X24)) ) | $spl24),
  inference(subsumption_resolution,[],[f5060,f1518])).
fof(f5060,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,X25)) | s(bool,X26) = s(bool,X27) | s(bool,X24) = s(bool,X27) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,X24) | s(bool,'F_0') = s(bool,X25)) )),
  inference(superposition,[],[f2153,f767])).
fof(f5017,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP15(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP8(X74,X70,X72,X71)) ) | $spl64),
  inference(cnf_transformation,[],[f5017_D])).
fof(f5017_D,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP15(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP8(X74,X70,X72,X71)) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f5018,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP15(X76,X81,X82) | ~sP8(X81,X77,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79)))) ) | $spl23),
  inference(subsumption_resolution,[],[f5005,f1991])).
fof(f5005,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP15(X76,X81,X82) | ~sP8(X81,X77,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f362,f940])).
fof(f362,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP15(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | ~sP8(X1,X3,X5,X4)) )),
  inference(cnf_transformation,[],[f175])).
fof(f5016,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP15(X69,X74,X75) | ~sP8(X74,X70,X72,X71) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) ) | $spl23),
  inference(subsumption_resolution,[],[f5004,f1991])).
fof(f5004,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP15(X69,X74,X75) | ~sP8(X74,X70,X72,X71) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) )),
  inference(superposition,[],[f362,f940])).
fof(f4919,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP15(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP11(X74,X70,X72,X71)) ) | $spl62),
  inference(cnf_transformation,[],[f4919_D])).
fof(f4919_D,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP15(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP11(X74,X70,X72,X71)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f4920,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP15(X76,X81,X82) | ~sP11(X81,X77,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79)))) ) | $spl23),
  inference(subsumption_resolution,[],[f4911,f1991])).
fof(f4911,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP15(X76,X81,X82) | ~sP11(X81,X77,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f361,f940])).
fof(f361,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP15(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | ~sP11(X1,X3,X5,X4)) )),
  inference(cnf_transformation,[],[f175])).
fof(f4918,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP15(X69,X74,X75) | ~sP11(X74,X70,X72,X71) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) ) | $spl23),
  inference(subsumption_resolution,[],[f4910,f1991])).
fof(f4910,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP15(X69,X74,X75) | ~sP11(X74,X70,X72,X71) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) )),
  inference(superposition,[],[f361,f940])).
fof(f4825,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP7(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP4(X74,X70,X72,X71)) ) | $spl60),
  inference(cnf_transformation,[],[f4825_D])).
fof(f4825_D,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP7(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP4(X74,X70,X72,X71)) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f4826,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP7(X76,X81,X82) | ~sP4(X81,X77,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79)))) ) | $spl23),
  inference(subsumption_resolution,[],[f4809,f1991])).
fof(f4809,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP7(X76,X81,X82) | ~sP4(X81,X77,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f301,f940])).
fof(f301,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP7(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | ~sP4(X1,X3,X5,X4)) )),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0,X1,X2] : ((~sP7(X0,X1,X2) | (((s('type.modSem.v',sK29(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK31(X2,X1,X0)))) & s('type.conSem.v',sK30(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK31(X2,X1,X0))))) | sP3(X1,sK28(X2,X1,X0),sK30(X2,X1,X0),sK29(X2,X1,X0)) | sP0(X1,sK28(X2,X1,X0),sK30(X2,X1,X0),sK29(X2,X1,X0)) | sP1(sK28(X2,X1,X0),X2,sK30(X2,X1,X0),sK29(X2,X1,X0)) | sP2(sK28(X2,X1,X0),X2,sK30(X2,X1,X0),sK29(X2,X1,X0)) | (s('type.modSem.v',sK29(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK32(X2,X1,X0)))) & s('type.conSem.v',sK30(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK32(X2,X1,X0))))) | sP4(X1,sK28(X2,X1,X0),sK30(X2,X1,X0),sK29(X2,X1,X0))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK28(X2,X1,X0)))),s('type.modSem.v',sK29(X2,X1,X0)))),s('type.conSem.v',sK30(X2,X1,X0))))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP3(X1,X3,X5,X4) & ~sP0(X1,X3,X5,X4) & ~sP1(X3,X2,X5,X4) & ~sP2(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP4(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP7(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK28,sK29,sK30,sK31,sK32])],[f145])).
fof(f145,plain,(
  ! [X0,X1,X2] : ((~sP7(X0,X1,X2) | ? [X8,X9,X10] : ((? [X12] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X12))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X12)))) | sP3(X1,X8,X10,X9) | sP0(X1,X8,X10,X9) | sP1(X8,X2,X10,X9) | sP2(X8,X2,X10,X9) | ? [X11] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X11))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X11)))) | sP4(X1,X8,X10,X9)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.modSem.v',X9))),s('type.conSem.v',X10)))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP3(X1,X3,X5,X4) & ~sP0(X1,X3,X5,X4) & ~sP1(X3,X2,X5,X4) & ~sP2(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP4(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP7(X0,X1,X2)))),
  inference(rectify,[],[f144])).
fof(f144,plain,(
  ! [X3,X4,X5] : ((~sP7(X3,X4,X5) | ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP3(X4,X21,X23,X22) | sP0(X4,X21,X23,X22) | sP1(X21,X5,X23,X22) | sP2(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP4(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23)))))) & (! [X21,X22,X23] : ((! [X48] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) & ~sP3(X4,X21,X23,X22) & ~sP0(X4,X21,X23,X22) & ~sP1(X21,X5,X23,X22) & ~sP2(X21,X5,X23,X22) & ! [X26] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) & ~sP4(X4,X21,X23,X22)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | sP7(X3,X4,X5)))),
  inference(nnf_transformation,[],[f102])).
fof(f4824,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP7(X69,X74,X75) | ~sP4(X74,X70,X72,X71) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) ) | $spl23),
  inference(subsumption_resolution,[],[f4808,f1991])).
fof(f4808,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP7(X69,X74,X75) | ~sP4(X74,X70,X72,X71) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) )),
  inference(superposition,[],[f301,f940])).
fof(f4719,plain,(
  ( ! [X45,X43,X46,X44] : (p(s(bool,X44)) | s(bool,'F_0') = s(bool,X45) | s(bool,X43) = s(bool,X46) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X43)) ) | $spl23),
  inference(subsumption_resolution,[],[f4703,f1991])).
fof(f4703,plain,(
  ( ! [X45,X43,X46,X44] : (p(s(bool,X44)) | s(bool,'F_0') = s(bool,X45) | s(bool,X43) = s(bool,X46) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f759,f940])).
fof(f759,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X2)) | s(bool,'F_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X1)) )),
  inference(resolution,[],[f670,f252])).
fof(f4717,plain,(
  ( ! [X39,X41,X42,X40] : (p(s(bool,X40)) | s(bool,'F_0') = s(bool,X41) | s(bool,X39) = s(bool,X42) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X39)) ) | $spl23),
  inference(subsumption_resolution,[],[f4702,f1991])).
fof(f4702,plain,(
  ( ! [X39,X41,X42,X40] : (p(s(bool,X40)) | s(bool,'F_0') = s(bool,X41) | s(bool,X39) = s(bool,X42) | s(bool,X41) = s(bool,X42) | s(bool,'T_0') = s(bool,X40) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f759,f940])).
fof(f4674,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP7(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP2(X70,X75,X72,X71)) ) | $spl56),
  inference(cnf_transformation,[],[f4674_D])).
fof(f4674_D,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP7(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP2(X70,X75,X72,X71)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f4675,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP7(X76,X81,X82) | ~sP2(X77,X82,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79)))) ) | $spl23),
  inference(subsumption_resolution,[],[f4662,f1991])).
fof(f4662,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP7(X76,X81,X82) | ~sP2(X77,X82,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f299,f940])).
fof(f299,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP7(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | ~sP2(X3,X2,X5,X4)) )),
  inference(cnf_transformation,[],[f146])).
fof(f4673,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP7(X69,X74,X75) | ~sP2(X70,X75,X72,X71) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) ) | $spl23),
  inference(subsumption_resolution,[],[f4661,f1991])).
fof(f4661,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP7(X69,X74,X75) | ~sP2(X70,X75,X72,X71) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) )),
  inference(superposition,[],[f299,f940])).
fof(f4575,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP7(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP1(X70,X75,X72,X71)) ) | $spl54),
  inference(cnf_transformation,[],[f4575_D])).
fof(f4575_D,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP7(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP1(X70,X75,X72,X71)) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f4576,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP7(X76,X81,X82) | ~sP1(X77,X82,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79)))) ) | $spl23),
  inference(subsumption_resolution,[],[f4567,f1991])).
fof(f4567,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP7(X76,X81,X82) | ~sP1(X77,X82,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f298,f940])).
fof(f298,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP7(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | ~sP1(X3,X2,X5,X4)) )),
  inference(cnf_transformation,[],[f146])).
fof(f4574,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP7(X69,X74,X75) | ~sP1(X70,X75,X72,X71) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) ) | $spl23),
  inference(subsumption_resolution,[],[f4566,f1991])).
fof(f4566,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP7(X69,X74,X75) | ~sP1(X70,X75,X72,X71) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) )),
  inference(superposition,[],[f298,f940])).
fof(f4480,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP7(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP0(X74,X70,X72,X71)) ) | $spl52),
  inference(cnf_transformation,[],[f4480_D])).
fof(f4480_D,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP7(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP0(X74,X70,X72,X71)) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f4481,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP7(X76,X81,X82) | ~sP0(X81,X77,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79)))) ) | $spl23),
  inference(subsumption_resolution,[],[f4468,f1991])).
fof(f4468,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP7(X76,X81,X82) | ~sP0(X81,X77,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f297,f940])).
fof(f297,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP7(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | ~sP0(X1,X3,X5,X4)) )),
  inference(cnf_transformation,[],[f146])).
fof(f4479,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP7(X69,X74,X75) | ~sP0(X74,X70,X72,X71) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) ) | $spl23),
  inference(subsumption_resolution,[],[f4467,f1991])).
fof(f4467,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP7(X69,X74,X75) | ~sP0(X74,X70,X72,X71) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) )),
  inference(superposition,[],[f297,f940])).
fof(f4381,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP7(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP3(X74,X70,X72,X71)) ) | $spl50),
  inference(cnf_transformation,[],[f4381_D])).
fof(f4381_D,plain,(
  ( ! [X70,X74,X72,X71,X69,X75] : (sP7(X69,X74,X75) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72))) | ~sP3(X74,X70,X72,X71)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f4382,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP7(X76,X81,X82) | ~sP3(X81,X77,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79)))) ) | $spl23),
  inference(subsumption_resolution,[],[f4373,f1991])).
fof(f4373,plain,(
  ( ! [X80,X78,X76,X81,X79,X77,X82] : (p(s(bool,X80)) | sP7(X76,X81,X82) | ~sP3(X81,X77,X79,X78) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X76),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X77))),s('type.modSem.v',X78))),s('type.conSem.v',X79))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f296,f940])).
fof(f296,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP7(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | ~sP3(X1,X3,X5,X4)) )),
  inference(cnf_transformation,[],[f146])).
fof(f4380,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP7(X69,X74,X75) | ~sP3(X74,X70,X72,X71) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) ) | $spl23),
  inference(subsumption_resolution,[],[f4372,f1991])).
fof(f4372,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (p(s(bool,X73)) | sP7(X69,X74,X75) | ~sP3(X74,X70,X72,X71) | s(bool,'T_0') = s(bool,X73) | s(bool,'T_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X70))),s('type.modSem.v',X71))),s('type.conSem.v',X72)))) )),
  inference(superposition,[],[f296,f940])).
fof(f4228,plain,(
  ( ! [X30,X31,X34,X32] : (p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK27(X32,X31,X30))))) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,sK26(X32,X31,X30)))) | ~p(s(bool,happ(s(fun(X30,bool),X32),s(X30,X34))))) ) | $spl48),
  inference(cnf_transformation,[],[f4228_D])).
fof(f4228_D,plain,(
  ( ! [X30,X31,X34,X32] : (p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK27(X32,X31,X30))))) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,sK26(X32,X31,X30)))) | ~p(s(bool,happ(s(fun(X30,bool),X32),s(X30,X34))))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f4229,plain,(
  ( ! [X39,X37,X35,X38,X36] : (~p(s(bool,X38)) | p(s(bool,happ(s(fun(X35,bool),X36),s(X35,sK27(X37,X36,X35))))) | ~p(s(bool,happ(s(fun(X35,bool),X37),s(X35,X39)))) | s(bool,'F_0') = s(bool,happ(s(fun(X35,bool),X36),s(X35,sK26(X37,X36,X35))))) ) | $spl24),
  inference(subsumption_resolution,[],[f4189,f1518])).
fof(f4189,plain,(
  ( ! [X39,X37,X35,X38,X36] : (~p(s(bool,X38)) | p(s(bool,happ(s(fun(X35,bool),X36),s(X35,sK27(X37,X36,X35))))) | ~p(s(bool,happ(s(fun(X35,bool),X37),s(X35,X39)))) | s(bool,'F_0') = s(bool,X38) | s(bool,'F_0') = s(bool,happ(s(fun(X35,bool),X36),s(X35,sK26(X37,X36,X35))))) )),
  inference(superposition,[],[f257,f767])).
fof(f257,plain,(
  ( ! [X4,X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK27(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK26(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0,X1,X2] : ((p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK26(X2,X1,X0))))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK26(X2,X1,X0)))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK27(X2,X1,X0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK26,sK27])],[f125])).
fof(f125,plain,(
  ! [X0,X1,X2] : (? [X5] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))),
  inference(rectify,[],[f76])).
fof(f76,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(ennf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => (? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) => ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => (? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) => ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X55] : ! [X56,X57] : (! [X23] : (p(s(bool,happ(s(fun(X55,bool),X57),s(X55,X23)))) => p(s(bool,happ(s(fun(X55,bool),X56),s(X55,X23))))) => (? [X23] : p(s(bool,happ(s(fun(X55,bool),X57),s(X55,X23)))) => ? [X23] : p(s(bool,happ(s(fun(X55,bool),X56),s(X55,X23))))))),
  file('thm.mod_to_conProof.v_rel_rules|split|5','thm.bool.MONO_EXISTS')).
fof(f4227,plain,(
  ( ! [X30,X33,X31,X34,X32] : (~p(s(bool,X33)) | p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK27(X32,X31,X30))))) | ~p(s(bool,happ(s(fun(X30,bool),X32),s(X30,X34)))) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,sK26(X32,X31,X30))))) ) | $spl24),
  inference(subsumption_resolution,[],[f4188,f1518])).
fof(f4188,plain,(
  ( ! [X30,X33,X31,X34,X32] : (~p(s(bool,X33)) | p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK27(X32,X31,X30))))) | ~p(s(bool,happ(s(fun(X30,bool),X32),s(X30,X34)))) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,sK26(X32,X31,X30)))) | s(bool,'F_0') = s(bool,X33)) )),
  inference(superposition,[],[f257,f767])).
fof(f4223,plain,(
  ( ! [X30,X31,X34,X32] : (p(s(bool,happ(s(fun(X30,bool),X34),s(X30,sK27(X31,X34,X30))))) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32))) | ~p(s(bool,happ(s(fun(X30,bool),X34),s(X30,sK26(X31,X34,X30)))))) ) | $spl46),
  inference(cnf_transformation,[],[f4223_D])).
fof(f4223_D,plain,(
  ( ! [X30,X31,X34,X32] : (p(s(bool,happ(s(fun(X30,bool),X34),s(X30,sK27(X31,X34,X30))))) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32))) | ~p(s(bool,happ(s(fun(X30,bool),X34),s(X30,sK26(X31,X34,X30)))))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f4224,plain,(
  ( ! [X39,X37,X35,X38,X36] : (~p(s(bool,X38)) | p(s(bool,happ(s(fun(X35,bool),X39),s(X35,sK27(X36,X39,X35))))) | ~p(s(bool,happ(s(fun(X35,bool),X39),s(X35,sK26(X36,X39,X35))))) | s(bool,'F_0') = s(bool,happ(s(fun(X35,bool),X36),s(X35,X37)))) ) | $spl24),
  inference(subsumption_resolution,[],[f4139,f1518])).
fof(f4139,plain,(
  ( ! [X39,X37,X35,X38,X36] : (~p(s(bool,X38)) | p(s(bool,happ(s(fun(X35,bool),X39),s(X35,sK27(X36,X39,X35))))) | ~p(s(bool,happ(s(fun(X35,bool),X39),s(X35,sK26(X36,X39,X35))))) | s(bool,'F_0') = s(bool,X38) | s(bool,'F_0') = s(bool,happ(s(fun(X35,bool),X36),s(X35,X37)))) )),
  inference(superposition,[],[f257,f767])).
fof(f4222,plain,(
  ( ! [X30,X33,X31,X34,X32] : (~p(s(bool,X33)) | p(s(bool,happ(s(fun(X30,bool),X34),s(X30,sK27(X31,X34,X30))))) | ~p(s(bool,happ(s(fun(X30,bool),X34),s(X30,sK26(X31,X34,X30))))) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) ) | $spl24),
  inference(subsumption_resolution,[],[f4138,f1518])).
fof(f4138,plain,(
  ( ! [X30,X33,X31,X34,X32] : (~p(s(bool,X33)) | p(s(bool,happ(s(fun(X30,bool),X34),s(X30,sK27(X31,X34,X30))))) | ~p(s(bool,happ(s(fun(X30,bool),X34),s(X30,sK26(X31,X34,X30))))) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32))) | s(bool,'F_0') = s(bool,X33)) )),
  inference(superposition,[],[f257,f767])).
fof(f4218,plain,(
  ( ! [X50,X53,X51,X49] : (~p(s(bool,happ(s(fun(X49,bool),X51),s(X49,X53)))) | s(bool,'T_0') = s(bool,happ(s(fun(X49,bool),X50),s(X49,sK27(X51,X50,X49)))) | ~p(s(bool,happ(s(fun(X49,bool),X50),s(X49,sK26(X51,X50,X49)))))) ) | $spl44),
  inference(cnf_transformation,[],[f4218_D])).
fof(f4218_D,plain,(
  ( ! [X50,X53,X51,X49] : (~p(s(bool,happ(s(fun(X49,bool),X51),s(X49,X53)))) | s(bool,'T_0') = s(bool,happ(s(fun(X49,bool),X50),s(X49,sK27(X51,X50,X49)))) | ~p(s(bool,happ(s(fun(X49,bool),X50),s(X49,sK26(X51,X50,X49)))))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f4219,plain,(
  ( ! [X57,X54,X58,X56,X55] : (p(s(bool,X57)) | ~p(s(bool,happ(s(fun(X54,bool),X56),s(X54,X58)))) | ~p(s(bool,happ(s(fun(X54,bool),X55),s(X54,sK26(X56,X55,X54))))) | s(bool,'T_0') = s(bool,happ(s(fun(X54,bool),X55),s(X54,sK27(X56,X55,X54))))) ) | $spl23),
  inference(subsumption_resolution,[],[f3982,f1991])).
fof(f3982,plain,(
  ( ! [X57,X54,X58,X56,X55] : (p(s(bool,X57)) | ~p(s(bool,happ(s(fun(X54,bool),X56),s(X54,X58)))) | ~p(s(bool,happ(s(fun(X54,bool),X55),s(X54,sK26(X56,X55,X54))))) | s(bool,'T_0') = s(bool,happ(s(fun(X54,bool),X55),s(X54,sK27(X56,X55,X54)))) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f257,f940])).
fof(f4217,plain,(
  ( ! [X52,X50,X53,X51,X49] : (p(s(bool,X52)) | ~p(s(bool,happ(s(fun(X49,bool),X51),s(X49,X53)))) | ~p(s(bool,happ(s(fun(X49,bool),X50),s(X49,sK26(X51,X50,X49))))) | s(bool,'T_0') = s(bool,happ(s(fun(X49,bool),X50),s(X49,sK27(X51,X50,X49))))) ) | $spl23),
  inference(subsumption_resolution,[],[f3981,f1991])).
fof(f3981,plain,(
  ( ! [X52,X50,X53,X51,X49] : (p(s(bool,X52)) | ~p(s(bool,happ(s(fun(X49,bool),X51),s(X49,X53)))) | ~p(s(bool,happ(s(fun(X49,bool),X50),s(X49,sK26(X51,X50,X49))))) | s(bool,'T_0') = s(bool,X52) | s(bool,'T_0') = s(bool,happ(s(fun(X49,bool),X50),s(X49,sK27(X51,X50,X49))))) )),
  inference(superposition,[],[f257,f940])).
fof(f3762,plain,(
  ( ! [X152,X151,X153] : (~sP15(sK117(X153,X152,X151),sK118(X153,X152,X151),sK119(X153,X152,X151)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X151),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X152),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X153)))) ) | $spl42),
  inference(cnf_transformation,[],[f3762_D])).
fof(f3762_D,plain,(
  ( ! [X152,X151,X153] : (~sP15(sK117(X153,X152,X151),sK118(X153,X152,X151),sK119(X153,X152,X151)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X151),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X152),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X153)))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f3782,plain,(
  ( ! [X154,X152,X151,X153] : (p(s(bool,X154)) | ~sP15(sK117(X153,X152,X151),sK118(X153,X152,X151),sK119(X153,X152,X151)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X151),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X152),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X153)))) ) | $spl23),
  inference(subsumption_resolution,[],[f3401,f1991])).
fof(f3401,plain,(
  ( ! [X154,X152,X151,X153] : (p(s(bool,X154)) | ~sP15(sK117(X153,X152,X151),sK118(X153,X152,X151),sK119(X153,X152,X151)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X151),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X152),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X153))) | s(bool,'T_0') = s(bool,X154)) )),
  inference(superposition,[],[f414,f940])).
fof(f414,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ~sP15(sK117(X2,X1,X0),sK118(X2,X1,X0),sK119(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f201])).
fof(f201,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ! [X12,X13,X14] : (sP15(X12,X13,X14) | (sP13(X13,sK111(X14,X13,X12,X2,X1,X0),X12,sK113(X14,X13,X12,X2,X1,X0),sK112(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK111(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK112(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK113(X14,X13,X12,X2,X1,X0)))))) | (sP14(X12,sK114(X14,X13,X12,X2,X1,X0),X14,sK116(X14,X13,X12,X2,X1,X0),sK115(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK114(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK115(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK116(X14,X13,X12,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))))) & ((~sP15(sK117(X2,X1,X0),sK118(X2,X1,X0),sK119(X2,X1,X0)) & ! [X9,X10,X11] : (~sP13(sK118(X2,X1,X0),X9,sK117(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK118(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP14(sK117(X2,X1,X0),X6,sK119(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK119(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK119(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK111,sK112,sK113,sK114,sK115,sK116,sK117,sK118,sK119])],[f200])).
fof(f200,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ! [X12,X13,X14] : (sP15(X12,X13,X14) | ? [X18,X19,X20] : (sP13(X13,X18,X12,X20,X19) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18))),s('type.list.list'('type.modSem.v'),X19))),s('type.list.list'('type.conSem.v'),X20))))) | ? [X15,X16,X17] : (sP14(X12,X15,X14,X17,X16) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X17))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))))) & (? [X3,X4,X5] : (~sP15(X3,X4,X5) & ! [X9,X10,X11] : (~sP13(X4,X9,X3,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP14(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(rectify,[],[f199])).
fof(f199,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ! [X3,X4,X5] : (sP15(X3,X4,X5) | ? [X14,X15,X16] : (sP13(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP14(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))))) & (? [X3,X4,X5] : (~sP15(X3,X4,X5) & ! [X14,X15,X16] : (~sP13(X4,X14,X3,X16,X15) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (~sP14(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(nnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ! [X3,X4,X5] : (sP15(X3,X4,X5) | ? [X14,X15,X16] : (sP13(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP14(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(definition_folding,[],[f92,f111,f110,f109,f108,f107,f106,f105,f104])).
fof(f104,plain,(
  ! [X4,X21,X23,X22] : (sP8(X4,X21,X23,X22) <=> ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f105,plain,(
  ! [X21,X5,X23,X22] : (sP9(X21,X5,X23,X22) <=> ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f106,plain,(
  ! [X21,X5,X23,X22] : (sP10(X21,X5,X23,X22) <=> ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP10])])).
fof(f107,plain,(
  ! [X4,X21,X23,X22] : (sP11(X4,X21,X23,X22) <=> ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP11])])).
fof(f108,plain,(
  ! [X4,X21,X23,X22] : (sP12(X4,X21,X23,X22) <=> ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP12])])).
fof(f109,plain,(
  ! [X4,X14,X3,X16,X15] : (sP13(X4,X14,X3,X16,X15) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP13])])).
fof(f110,plain,(
  ! [X3,X6,X5,X8,X7] : (sP14(X3,X6,X5,X8,X7) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP14])])).
fof(f92,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ! [X3,X4,X5] : (? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(flattening,[],[f91])).
fof(f91,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ! [X3,X4,X5] : ((? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(ennf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ! [X3,X4,X5] : ((! [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) & ! [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X5,X8,X9] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9)))) <=> ! [X10,X11,X12] : ((! [X39,X40,X41] : ((? [X16] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X16))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X16)))) | ? [X17,X18] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) | ? [X19,X20,X21,X17,X18] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X21),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.conSem.v'),X18))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X17))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) | ? [X22,X23,X24,X25,X26,X27,X28] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.string.char'),X23),s('type.modLang.exp',X24))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.modLang.exp',X24))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))))) | ? [X22,X29,X23,X26,X25,X27,X28] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))))) | ? [X7] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X7))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X7)))) | ? [X17,X18] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.modSem.v',X40))),s('type.conSem.v',X41))))) & ! [X30,X31,X32] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X31) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X32)) | ? [X33,X17,X34,X18] : (s('type.list.list'('type.modSem.v'),X31) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X33),s('type.list.list'('type.modSem.v'),X17))) & s('type.list.list'('type.conSem.v'),X32) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X34),s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30))),s('type.modSem.v',X33))),s('type.conSem.v',X34)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30))),s('type.list.list'('type.modSem.v'),X31))),s('type.list.list'('type.conSem.v'),X32))))) & ! [X45,X46,X47] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X46) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X47)) | ? [X23,X33,X22,X38,X34] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X46) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.modSem.v',X33))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X47) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X38))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X45))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X38)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X45))),s('type.modSem.v',X33))),s('type.conSem.v',X34)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X45))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X46))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X47)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9))))))),
  file('thm.mod_to_conProof.v_rel_rules|split|5','thm.mod_to_conProof.v_rel|48|_def')).
fof(f3760,plain,(
  ( ! [X149,X147,X148] : (~sP23(sK163(X149,X148,X147),sK164(X149,X148,X147),sK165(X149,X148,X147)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X147),s('type.list.list'('type.modSem.v'),X148),s('type.list.list'('type.conSem.v'),X149)))) ) | $spl40),
  inference(cnf_transformation,[],[f3760_D])).
fof(f3760_D,plain,(
  ( ! [X149,X147,X148] : (~sP23(sK163(X149,X148,X147),sK164(X149,X148,X147),sK165(X149,X148,X147)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X147),s('type.list.list'('type.modSem.v'),X148),s('type.list.list'('type.conSem.v'),X149)))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f3781,plain,(
  ( ! [X149,X147,X150,X148] : (p(s(bool,X150)) | ~sP23(sK163(X149,X148,X147),sK164(X149,X148,X147),sK165(X149,X148,X147)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X147),s('type.list.list'('type.modSem.v'),X148),s('type.list.list'('type.conSem.v'),X149)))) ) | $spl23),
  inference(subsumption_resolution,[],[f3400,f1991])).
fof(f3400,plain,(
  ( ! [X149,X147,X150,X148] : (p(s(bool,X150)) | ~sP23(sK163(X149,X148,X147),sK164(X149,X148,X147),sK165(X149,X148,X147)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X147),s('type.list.list'('type.modSem.v'),X148),s('type.list.list'('type.conSem.v'),X149))) | s(bool,'T_0') = s(bool,X150)) )),
  inference(superposition,[],[f477,f940])).
fof(f477,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | ~sP23(sK163(X2,X1,X0),sK164(X2,X1,X0),sK165(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f230])).
fof(f230,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | ! [X12,X13,X14] : (sP23(X12,X13,X14) | (sP21(X13,sK157(X14,X13,X12,X2,X1,X0),X12,sK159(X14,X13,X12,X2,X1,X0),sK158(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK157(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK158(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK159(X14,X13,X12,X2,X1,X0)))))) | (sP22(X12,sK160(X14,X13,X12,X2,X1,X0),X14,sK162(X14,X13,X12,X2,X1,X0),sK161(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK160(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK161(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK162(X14,X13,X12,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))))) & ((~sP23(sK163(X2,X1,X0),sK164(X2,X1,X0),sK165(X2,X1,X0)) & ! [X9,X10,X11] : (~sP21(sK164(X2,X1,X0),X9,sK163(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK164(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP22(sK163(X2,X1,X0),X6,sK165(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK165(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK164(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK157,sK158,sK159,sK160,sK161,sK162,sK163,sK164,sK165])],[f229])).
fof(f229,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | ! [X12,X13,X14] : (sP23(X12,X13,X14) | ? [X18,X19,X20] : (sP21(X13,X18,X12,X20,X19) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18))),s('type.list.list'('type.modSem.v'),X19))),s('type.list.list'('type.conSem.v'),X20))))) | ? [X15,X16,X17] : (sP22(X12,X15,X14,X17,X16) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X17))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))))) & (? [X3,X4,X5] : (~sP23(X3,X4,X5) & ! [X9,X10,X11] : (~sP21(X4,X9,X3,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP22(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(rectify,[],[f228])).
fof(f228,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | ! [X3,X4,X5] : (sP23(X3,X4,X5) | ? [X14,X15,X16] : (sP21(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP22(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))))) & (? [X3,X4,X5] : (~sP23(X3,X4,X5) & ! [X14,X15,X16] : (~sP21(X4,X14,X3,X16,X15) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (~sP22(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(nnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) <=> ! [X3,X4,X5] : (sP23(X3,X4,X5) | ? [X14,X15,X16] : (sP21(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP22(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(definition_folding,[],[f94,f120,f119,f118,f117,f116,f115,f114,f113])).
fof(f113,plain,(
  ! [X4,X21,X23,X22] : (sP16(X4,X21,X23,X22) <=> ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP16])])).
fof(f114,plain,(
  ! [X21,X5,X23,X22] : (sP17(X21,X5,X23,X22) <=> ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP17])])).
fof(f115,plain,(
  ! [X21,X5,X23,X22] : (sP18(X21,X5,X23,X22) <=> ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP18])])).
fof(f116,plain,(
  ! [X4,X21,X23,X22] : (sP19(X4,X21,X23,X22) <=> ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP19])])).
fof(f117,plain,(
  ! [X4,X21,X23,X22] : (sP20(X4,X21,X23,X22) <=> ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP20])])).
fof(f118,plain,(
  ! [X4,X14,X3,X16,X15] : (sP21(X4,X14,X3,X16,X15) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP21])])).
fof(f119,plain,(
  ! [X3,X6,X5,X8,X7] : (sP22(X3,X6,X5,X8,X7) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP22])])).
fof(f94,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) <=> ! [X3,X4,X5] : (? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(flattening,[],[f93])).
fof(f93,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) <=> ! [X3,X4,X5] : ((? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(ennf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) <=> ! [X3,X4,X5] : ((! [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) & ! [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X5,X8,X9] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.list.list'('type.modSem.v'),X8),s('type.list.list'('type.conSem.v'),X9)))) <=> ! [X10,X11,X12] : ((! [X39,X40,X41] : ((? [X16] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X16))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X16)))) | ? [X17,X18] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) | ? [X19,X20,X21,X17,X18] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X21),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.conSem.v'),X18))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X17))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) | ? [X22,X23,X24,X25,X26,X27,X28] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.string.char'),X23),s('type.modLang.exp',X24))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.modLang.exp',X24))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))))) | ? [X22,X29,X23,X26,X25,X27,X28] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))))) | ? [X7] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X7))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X7)))) | ? [X17,X18] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.modSem.v',X40))),s('type.conSem.v',X41))))) & ! [X42,X43,X44] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X43) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X44)) | ? [X33,X17,X34,X18] : (s('type.list.list'('type.modSem.v'),X43) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X33),s('type.list.list'('type.modSem.v'),X17))) & s('type.list.list'('type.conSem.v'),X44) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X34),s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X42))),s('type.modSem.v',X33))),s('type.conSem.v',X34)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X42))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X42))),s('type.list.list'('type.modSem.v'),X43))),s('type.list.list'('type.conSem.v'),X44))))) & ! [X35,X36,X37] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)) | ? [X23,X33,X22,X38,X34] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.modSem.v',X33))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X38))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X38)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.modSem.v',X33))),s('type.conSem.v',X34)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9))))))),
  file('thm.mod_to_conProof.v_rel_rules|split|5','thm.mod_to_conProof.v_rel|49|_def')).
fof(f3758,plain,(
  ( ! [X146,X144,X142,X143] : (p(s(bool,happ(s(fun(X142,bool),X144),s(X142,sK27(X143,X144,X142))))) | s(bool,'T_0') = s(bool,happ(s(fun(X142,bool),X143),s(X142,sK26(X143,X144,X142)))) | ~p(s(bool,happ(s(fun(X142,bool),X143),s(X142,X146))))) ) | $spl38),
  inference(cnf_transformation,[],[f3758_D])).
fof(f3758_D,plain,(
  ( ! [X146,X144,X142,X143] : (p(s(bool,happ(s(fun(X142,bool),X144),s(X142,sK27(X143,X144,X142))))) | s(bool,'T_0') = s(bool,happ(s(fun(X142,bool),X143),s(X142,sK26(X143,X144,X142)))) | ~p(s(bool,happ(s(fun(X142,bool),X143),s(X142,X146))))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f3780,plain,(
  ( ! [X146,X144,X142,X145,X143] : (p(s(bool,X145)) | p(s(bool,happ(s(fun(X142,bool),X144),s(X142,sK27(X143,X144,X142))))) | ~p(s(bool,happ(s(fun(X142,bool),X143),s(X142,X146)))) | s(bool,'T_0') = s(bool,happ(s(fun(X142,bool),X143),s(X142,sK26(X143,X144,X142))))) ) | $spl23),
  inference(subsumption_resolution,[],[f3399,f1991])).
fof(f3399,plain,(
  ( ! [X146,X144,X142,X145,X143] : (p(s(bool,X145)) | p(s(bool,happ(s(fun(X142,bool),X144),s(X142,sK27(X143,X144,X142))))) | ~p(s(bool,happ(s(fun(X142,bool),X143),s(X142,X146)))) | s(bool,'T_0') = s(bool,happ(s(fun(X142,bool),X143),s(X142,sK26(X143,X144,X142)))) | s(bool,'T_0') = s(bool,X145)) )),
  inference(superposition,[],[f256,f940])).
fof(f256,plain,(
  ( ! [X4,X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK27(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK26(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f126])).
fof(f3756,plain,(
  ( ! [X134,X132,X136,X133] : (~p(s(bool,happ(s(fun(X132,bool),X134),s(X132,X136)))) | s(bool,'T_0') = s(bool,happ(s(fun(X132,bool),X133),s(X132,sK27(X134,X133,X132)))) | p(s(bool,happ(s(fun(X132,bool),X134),s(X132,sK26(X134,X133,X132)))))) ) | $spl36),
  inference(cnf_transformation,[],[f3756_D])).
fof(f3756_D,plain,(
  ( ! [X134,X132,X136,X133] : (~p(s(bool,happ(s(fun(X132,bool),X134),s(X132,X136)))) | s(bool,'T_0') = s(bool,happ(s(fun(X132,bool),X133),s(X132,sK27(X134,X133,X132)))) | p(s(bool,happ(s(fun(X132,bool),X134),s(X132,sK26(X134,X133,X132)))))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f3779,plain,(
  ( ! [X134,X132,X136,X135,X133] : (p(s(bool,X135)) | ~p(s(bool,happ(s(fun(X132,bool),X134),s(X132,X136)))) | p(s(bool,happ(s(fun(X132,bool),X134),s(X132,sK26(X134,X133,X132))))) | s(bool,'T_0') = s(bool,happ(s(fun(X132,bool),X133),s(X132,sK27(X134,X133,X132))))) ) | $spl23),
  inference(subsumption_resolution,[],[f3397,f1991])).
fof(f3397,plain,(
  ( ! [X134,X132,X136,X135,X133] : (p(s(bool,X135)) | ~p(s(bool,happ(s(fun(X132,bool),X134),s(X132,X136)))) | p(s(bool,happ(s(fun(X132,bool),X134),s(X132,sK26(X134,X133,X132))))) | s(bool,'T_0') = s(bool,happ(s(fun(X132,bool),X133),s(X132,sK27(X134,X133,X132)))) | s(bool,'T_0') = s(bool,X135)) )),
  inference(superposition,[],[f256,f940])).
fof(f3754,plain,(
  ( ! [X130,X128,X129] : (~sP7(sK71(X130,X129,X128),sK72(X130,X129,X128),sK73(X130,X129,X128)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X128),s('type.modSem.v',X129),s('type.conSem.v',X130)))) ) | $spl34),
  inference(cnf_transformation,[],[f3754_D])).
fof(f3754_D,plain,(
  ( ! [X130,X128,X129] : (~sP7(sK71(X130,X129,X128),sK72(X130,X129,X128),sK73(X130,X129,X128)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X128),s('type.modSem.v',X129),s('type.conSem.v',X130)))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f3778,plain,(
  ( ! [X130,X128,X131,X129] : (p(s(bool,X131)) | ~sP7(sK71(X130,X129,X128),sK72(X130,X129,X128),sK73(X130,X129,X128)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X128),s('type.modSem.v',X129),s('type.conSem.v',X130)))) ) | $spl23),
  inference(subsumption_resolution,[],[f3396,f1991])).
fof(f3396,plain,(
  ( ! [X130,X128,X131,X129] : (p(s(bool,X131)) | ~sP7(sK71(X130,X129,X128),sK72(X130,X129,X128),sK73(X130,X129,X128)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X128),s('type.modSem.v',X129),s('type.conSem.v',X130))) | s(bool,'T_0') = s(bool,X131)) )),
  inference(superposition,[],[f349,f940])).
fof(f3752,plain,(
  ( ! [X125,X126] : (s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X125),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X126))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X126)))))) ) | $spl32),
  inference(cnf_transformation,[],[f3752_D])).
fof(f3752_D,plain,(
  ( ! [X125,X126] : (s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X125),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X126))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X126)))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f3777,plain,(
  ( ! [X127,X125,X126] : (p(s(bool,X127)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X125),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X126))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X126)))))) ) | $spl23),
  inference(subsumption_resolution,[],[f3395,f1991])).
fof(f3395,plain,(
  ( ! [X127,X125,X126] : (p(s(bool,X127)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X125),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X126))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X126))))) | s(bool,'T_0') = s(bool,X127)) )),
  inference(superposition,[],[f354,f940])).
fof(f354,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X1))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X1))))))) )),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1] : p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X1))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X1))))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6,X16] : p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X16))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X16))))))),
  file('thm.mod_to_conProof.v_rel_rules|split|5','thm.mod_to_conProof.v_rel_rules|split|0')).
fof(f2730,plain,(
  ( ! [X68,X69] : (s(bool,X68) != s(bool,X69) | s(bool,'F_0') = s(bool,X68) | s(bool,'T_0') = s(bool,X69)) ) | $spl28),
  inference(cnf_transformation,[],[f2730_D])).
fof(f2730_D,plain,(
  ( ! [X68,X69] : (s(bool,X68) != s(bool,X69) | s(bool,'F_0') = s(bool,X68) | s(bool,'T_0') = s(bool,X69)) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f3774,plain,(
  ( ! [X83,X84,X82] : (p(s(bool,X83)) | s(bool,X82) != s(bool,X84) | s(bool,'F_0') = s(bool,X84) | s(bool,'T_0') = s(bool,X82)) ) | $spl23),
  inference(subsumption_resolution,[],[f3372,f1991])).
fof(f3372,plain,(
  ( ! [X83,X84,X82] : (p(s(bool,X83)) | s(bool,X82) != s(bool,X84) | s(bool,'F_0') = s(bool,X84) | s(bool,'T_0') = s(bool,X82) | s(bool,'T_0') = s(bool,X83)) ) | $spl23),
  inference(superposition,[],[f2731,f940])).
fof(f3761,plain,(
  ( ! [X154,X152,X151,X153] : (p(s(bool,X154)) | ~sP15(sK117(X153,X152,X151),sK118(X153,X152,X151),sK119(X153,X152,X151)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X151),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X152),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X153)))) ) | $spl23),
  inference(subsumption_resolution,[],[f3336,f1991])).
fof(f3336,plain,(
  ( ! [X154,X152,X151,X153] : (p(s(bool,X154)) | ~sP15(sK117(X153,X152,X151),sK118(X153,X152,X151),sK119(X153,X152,X151)) | s(bool,'T_0') = s(bool,X154) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X151),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X152),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X153)))) )),
  inference(superposition,[],[f414,f940])).
fof(f3759,plain,(
  ( ! [X149,X147,X150,X148] : (p(s(bool,X150)) | ~sP23(sK163(X149,X148,X147),sK164(X149,X148,X147),sK165(X149,X148,X147)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X147),s('type.list.list'('type.modSem.v'),X148),s('type.list.list'('type.conSem.v'),X149)))) ) | $spl23),
  inference(subsumption_resolution,[],[f3335,f1991])).
fof(f3335,plain,(
  ( ! [X149,X147,X150,X148] : (p(s(bool,X150)) | ~sP23(sK163(X149,X148,X147),sK164(X149,X148,X147),sK165(X149,X148,X147)) | s(bool,'T_0') = s(bool,X150) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X147),s('type.list.list'('type.modSem.v'),X148),s('type.list.list'('type.conSem.v'),X149)))) )),
  inference(superposition,[],[f477,f940])).
fof(f3757,plain,(
  ( ! [X146,X144,X142,X145,X143] : (p(s(bool,X145)) | p(s(bool,happ(s(fun(X142,bool),X144),s(X142,sK27(X143,X144,X142))))) | ~p(s(bool,happ(s(fun(X142,bool),X143),s(X142,X146)))) | s(bool,'T_0') = s(bool,happ(s(fun(X142,bool),X143),s(X142,sK26(X143,X144,X142))))) ) | $spl23),
  inference(subsumption_resolution,[],[f3334,f1991])).
fof(f3334,plain,(
  ( ! [X146,X144,X142,X145,X143] : (p(s(bool,X145)) | p(s(bool,happ(s(fun(X142,bool),X144),s(X142,sK27(X143,X144,X142))))) | ~p(s(bool,happ(s(fun(X142,bool),X143),s(X142,X146)))) | s(bool,'T_0') = s(bool,X145) | s(bool,'T_0') = s(bool,happ(s(fun(X142,bool),X143),s(X142,sK26(X143,X144,X142))))) )),
  inference(superposition,[],[f256,f940])).
fof(f3755,plain,(
  ( ! [X134,X132,X136,X135,X133] : (p(s(bool,X135)) | ~p(s(bool,happ(s(fun(X132,bool),X134),s(X132,X136)))) | p(s(bool,happ(s(fun(X132,bool),X134),s(X132,sK26(X134,X133,X132))))) | s(bool,'T_0') = s(bool,happ(s(fun(X132,bool),X133),s(X132,sK27(X134,X133,X132))))) ) | $spl23),
  inference(subsumption_resolution,[],[f3332,f1991])).
fof(f3332,plain,(
  ( ! [X134,X132,X136,X135,X133] : (p(s(bool,X135)) | ~p(s(bool,happ(s(fun(X132,bool),X134),s(X132,X136)))) | p(s(bool,happ(s(fun(X132,bool),X134),s(X132,sK26(X134,X133,X132))))) | s(bool,'T_0') = s(bool,X135) | s(bool,'T_0') = s(bool,happ(s(fun(X132,bool),X133),s(X132,sK27(X134,X133,X132))))) )),
  inference(superposition,[],[f256,f940])).
fof(f3753,plain,(
  ( ! [X130,X128,X131,X129] : (p(s(bool,X131)) | ~sP7(sK71(X130,X129,X128),sK72(X130,X129,X128),sK73(X130,X129,X128)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X128),s('type.modSem.v',X129),s('type.conSem.v',X130)))) ) | $spl23),
  inference(subsumption_resolution,[],[f3331,f1991])).
fof(f3331,plain,(
  ( ! [X130,X128,X131,X129] : (p(s(bool,X131)) | ~sP7(sK71(X130,X129,X128),sK72(X130,X129,X128),sK73(X130,X129,X128)) | s(bool,'T_0') = s(bool,X131) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X128),s('type.modSem.v',X129),s('type.conSem.v',X130)))) )),
  inference(superposition,[],[f349,f940])).
fof(f3751,plain,(
  ( ! [X127,X125,X126] : (p(s(bool,X127)) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X125),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X126))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X126)))))) ) | $spl23),
  inference(subsumption_resolution,[],[f3330,f1991])).
fof(f3330,plain,(
  ( ! [X127,X125,X126] : (p(s(bool,X127)) | s(bool,'T_0') = s(bool,X127) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X125),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X126))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X126)))))) )),
  inference(superposition,[],[f354,f940])).
fof(f3748,plain,(
  ( ! [X83,X84,X82] : (p(s(bool,X83)) | s(bool,X82) != s(bool,X84) | s(bool,'F_0') = s(bool,X84) | s(bool,'T_0') = s(bool,X82)) ) | $spl23),
  inference(subsumption_resolution,[],[f3307,f1991])).
fof(f3307,plain,(
  ( ! [X83,X84,X82] : (p(s(bool,X83)) | s(bool,X82) != s(bool,X84) | s(bool,'F_0') = s(bool,X84) | s(bool,'T_0') = s(bool,X83) | s(bool,'T_0') = s(bool,X82)) ) | $spl23),
  inference(superposition,[],[f2731,f940])).
fof(f3182,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f3151,f607])).
fof(f3151,plain,(
  p(s(bool,'F_0')) | $spl4),
  inference(resolution,[],[f607,f272])).
fof(f272,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f137])).
fof(f3181,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f3150,f607])).
fof(f3150,plain,(
  ( ! [X12] : (p(s(bool,X12))) ) | $spl4),
  inference(resolution,[],[f607,f269])).
fof(f269,plain,(
  ( ! [X0] : (p(s(bool,'T_0')) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'T_0'))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,'T_0'))))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'T_0'))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,X0)) | p(s(bool,'T_0')))))),
  inference(nnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0] : ((~p(s(bool,X0)) | p(s(bool,'T_0'))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'T_0'))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X48] : ((p(s(bool,X48)) => p(s(bool,'T_0'))) <=> p(s(bool,'T_0')))),
  file('thm.mod_to_conProof.v_rel_rules|split|5','thm.bool.IMP_CLAUSES|split|1')).
fof(f3180,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f3149,f607])).
fof(f3149,plain,(
  ( ! [X11] : (p(s(bool,X11))) ) | $spl4),
  inference(resolution,[],[f607,f266])).
fof(f266,plain,(
  ( ! [X0] : (p(s(bool,X0)) | p(s(bool,'T_0'))) )),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0] : (((p(s(bool,'T_0')) & ~p(s(bool,X0))) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,'T_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f132])).
fof(f132,plain,(
  ! [X0] : (((p(s(bool,'T_0')) & ~p(s(bool,X0))) | p(s(bool,X0))) & (~p(s(bool,X0)) | (~p(s(bool,'T_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : ((~p(s(bool,'T_0')) | p(s(bool,X0))) <=> p(s(bool,X0)))),
  inference(ennf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0] : ((p(s(bool,'T_0')) => p(s(bool,X0))) <=> p(s(bool,X0)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X48] : ((p(s(bool,'T_0')) => p(s(bool,X48))) <=> p(s(bool,X48)))),
  file('thm.mod_to_conProof.v_rel_rules|split|5','thm.bool.IMP_CLAUSES|split|0')).
fof(f3179,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f3147,f607])).
fof(f3147,plain,(
  ( ! [X9] : (p(s(bool,X9))) ) | $spl4),
  inference(resolution,[],[f607,f263])).
fof(f263,plain,(
  ( ! [X0] : (p(s(bool,'T_0')) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f131])).
fof(f3153,plain,(
  $false | $spl4),
  inference(resolution,[],[f607,f285])).
fof(f3154,plain,(
  $false | $spl4),
  inference(resolution,[],[f607,f286])).
fof(f286,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.mod_to_conProof.v_rel_rules|split|5',aHL_TRUTH)).
fof(f3156,plain,(
  $false | $spl4),
  inference(resolution,[],[f607,f354])).
fof(f3129,plain,(
  ( ! [X30,X31,X34,X32] : (p(s(bool,happ(s(fun(X30,bool),X34),s(X30,sK27(X31,X34,X30))))) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32))) | p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK26(X31,X34,X30)))))) ) | $spl30),
  inference(cnf_transformation,[],[f3129_D])).
fof(f3129_D,plain,(
  ( ! [X30,X31,X34,X32] : (p(s(bool,happ(s(fun(X30,bool),X34),s(X30,sK27(X31,X34,X30))))) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32))) | p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK26(X31,X34,X30)))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f3130,plain,(
  ( ! [X39,X37,X35,X38,X36] : (~p(s(bool,X38)) | p(s(bool,happ(s(fun(X35,bool),X39),s(X35,sK27(X36,X39,X35))))) | p(s(bool,happ(s(fun(X35,bool),X36),s(X35,sK26(X36,X39,X35))))) | s(bool,'F_0') = s(bool,happ(s(fun(X35,bool),X36),s(X35,X37)))) ) | $spl24),
  inference(subsumption_resolution,[],[f3063,f1518])).
fof(f3063,plain,(
  ( ! [X39,X37,X35,X38,X36] : (~p(s(bool,X38)) | p(s(bool,happ(s(fun(X35,bool),X39),s(X35,sK27(X36,X39,X35))))) | p(s(bool,happ(s(fun(X35,bool),X36),s(X35,sK26(X36,X39,X35))))) | s(bool,'F_0') = s(bool,X38) | s(bool,'F_0') = s(bool,happ(s(fun(X35,bool),X36),s(X35,X37)))) )),
  inference(superposition,[],[f256,f767])).
fof(f3128,plain,(
  ( ! [X30,X33,X31,X34,X32] : (~p(s(bool,X33)) | p(s(bool,happ(s(fun(X30,bool),X34),s(X30,sK27(X31,X34,X30))))) | p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK26(X31,X34,X30))))) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) ) | $spl24),
  inference(subsumption_resolution,[],[f3062,f1518])).
fof(f3062,plain,(
  ( ! [X30,X33,X31,X34,X32] : (~p(s(bool,X33)) | p(s(bool,happ(s(fun(X30,bool),X34),s(X30,sK27(X31,X34,X30))))) | p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK26(X31,X34,X30))))) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32))) | s(bool,'F_0') = s(bool,X33)) )),
  inference(superposition,[],[f256,f767])).
fof(f2744,plain,(
  ( ! [X68,X69,X67] : (s(bool,X68) != s(bool,X69) | ~p(s(bool,X67)) | s(bool,'T_0') = s(bool,X69) | s(bool,'F_0') = s(bool,X68)) ) | ($spl23 | $spl24)),
  inference(subsumption_resolution,[],[f2445,f1518])).
fof(f2445,plain,(
  ( ! [X68,X69,X67] : (s(bool,X68) != s(bool,X69) | ~p(s(bool,X67)) | s(bool,'T_0') = s(bool,X69) | s(bool,'F_0') = s(bool,X68) | s(bool,'F_0') = s(bool,X67)) ) | $spl23),
  inference(superposition,[],[f2082,f767])).
fof(f2082,plain,(
  ( ! [X15,X16] : (s(bool,X15) != s(bool,X16) | ~p(s(bool,X16)) | s(bool,'T_0') = s(bool,X15)) ) | $spl23),
  inference(subsumption_resolution,[],[f2071,f261])).
fof(f2071,plain,(
  ( ! [X15,X16] : (s(bool,X15) != s(bool,X16) | p(s(bool,'F_0')) | ~p(s(bool,X16)) | s(bool,'T_0') = s(bool,X15)) ) | $spl23),
  inference(superposition,[],[f2007,f774])).
fof(f2007,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5) | p(s(bool,X5)) | ~p(s(bool,X4))) ) | $spl23),
  inference(subsumption_resolution,[],[f1995,f264])).
fof(f1995,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5) | p(s(bool,X5)) | ~p(s(bool,X4)) | ~p(s(bool,'T_0'))) ) | $spl23),
  inference(superposition,[],[f1991,f255])).
fof(f1193,plain,(
  ( ! [X6] : (s(bool,'F_0') = s(bool,X6)) ) | $spl20),
  inference(cnf_transformation,[],[f1193_D])).
fof(f1193_D,plain,(
  ( ! [X6] : (s(bool,'F_0') = s(bool,X6)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f2727,plain,(
  ( ! [X59,X60] : (s(bool,X59) != s(bool,X60) | s(bool,'F_0') = s(bool,X59) | p(s(bool,X60))) ) | $spl26),
  inference(cnf_transformation,[],[f2727_D])).
fof(f2727_D,plain,(
  ( ! [X59,X60] : (s(bool,X59) != s(bool,X60) | s(bool,'F_0') = s(bool,X59) | p(s(bool,X60))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f2742,plain,(
  ( ! [X59,X60,X58] : (s(bool,X59) != s(bool,X60) | p(s(bool,X60)) | s(bool,'F_0') = s(bool,X59) | s(bool,'F_0') = s(bool,X58)) ) | $spl23),
  inference(subsumption_resolution,[],[f2442,f608])).
fof(f2442,plain,(
  ( ! [X59,X60,X58] : (s(bool,X59) != s(bool,X60) | p(s(bool,X60)) | ~p(s(bool,X58)) | s(bool,'F_0') = s(bool,X59) | s(bool,'F_0') = s(bool,X58)) ) | $spl23),
  inference(superposition,[],[f2007,f767])).
fof(f2729,plain,(
  ( ! [X68,X69,X67] : (s(bool,X68) != s(bool,X69) | ~p(s(bool,X67)) | s(bool,'T_0') = s(bool,X69) | s(bool,'F_0') = s(bool,X68)) ) | ($spl23 | $spl24)),
  inference(subsumption_resolution,[],[f2393,f1518])).
fof(f2393,plain,(
  ( ! [X68,X69,X67] : (s(bool,X68) != s(bool,X69) | ~p(s(bool,X67)) | s(bool,'T_0') = s(bool,X69) | s(bool,'F_0') = s(bool,X67) | s(bool,'F_0') = s(bool,X68)) ) | $spl23),
  inference(superposition,[],[f2082,f767])).
fof(f2726,plain,(
  ( ! [X59,X60,X58] : (s(bool,X59) != s(bool,X60) | p(s(bool,X60)) | s(bool,'F_0') = s(bool,X58) | s(bool,'F_0') = s(bool,X59)) ) | $spl23),
  inference(subsumption_resolution,[],[f2390,f608])).
fof(f2390,plain,(
  ( ! [X59,X60,X58] : (s(bool,X59) != s(bool,X60) | p(s(bool,X60)) | ~p(s(bool,X58)) | s(bool,'F_0') = s(bool,X58) | s(bool,'F_0') = s(bool,X59)) ) | $spl23),
  inference(superposition,[],[f2007,f767])).
fof(f1852,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f1658,f284])).
fof(f1658,plain,(
  p(s(bool,'F_0')) | $spl20),
  inference(backward_demodulation,[],[f1193,f354])).
fof(f1625,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f1539,f603])).
fof(f1539,plain,(
  ( ! [X11] : (~p(s(bool,X11))) ) | $spl0),
  inference(resolution,[],[f603,f261])).
fof(f1535,plain,(
  $false | $spl0),
  inference(resolution,[],[f603,f284])).
fof(f1557,plain,(
  $false | $spl0),
  inference(resolution,[],[f603,f486])).
fof(f486,plain,(
  ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK71('const.conSem.Loc_1'(s('type.num.num',sK25)),'const.modSem.Loc_1'(s('type.num.num',sK25)),sK24)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))))))),
  inference(resolution,[],[f231,f352])).
fof(f352,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK71(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f172])).
fof(f1518,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | ~p(s(bool,X1))) ) | $spl24),
  inference(cnf_transformation,[],[f1518_D])).
fof(f1518_D,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | ~p(s(bool,X1))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f1517,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,X1) | p(s(bool,X0)) | ~p(s(bool,X1))) ) | $spl23),
  inference(subsumption_resolution,[],[f1500,f1337])).
fof(f1337,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | p(s(bool,X1))) ) | $spl23),
  inference(subsumption_resolution,[],[f1333,f278])).
fof(f1333,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | p(s(bool,'F_0')) | p(s(bool,X1))) ) | $spl23),
  inference(superposition,[],[f1330,f252])).
fof(f1500,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,X1) | p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,'T_0') = s(bool,X0)) ) | $spl23),
  inference(superposition,[],[f1485,f774])).
fof(f1485,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5) | p(s(bool,X5)) | ~p(s(bool,X4))) ) | $spl23),
  inference(subsumption_resolution,[],[f1473,f264])).
fof(f1473,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5) | p(s(bool,X5)) | ~p(s(bool,X4)) | ~p(s(bool,'T_0'))) ) | $spl23),
  inference(superposition,[],[f1337,f255])).
fof(f1330,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl23),
  inference(cnf_transformation,[],[f1330_D])).
fof(f1330_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f1186,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f774])).
fof(f1192,plain,(
  ( ! [X5] : (s(bool,'T_0') = s(bool,X5) | ~p(s(bool,X5))) ) | $spl18),
  inference(cnf_transformation,[],[f1192_D])).
fof(f1192_D,plain,(
  ( ! [X5] : (s(bool,'T_0') = s(bool,X5) | ~p(s(bool,X5))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f1207,plain,(
  ( ! [X10,X11] : (s(bool,'F_0') = s(bool,X11) | ~p(s(bool,X10)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(subsumption_resolution,[],[f982,f608])).
fof(f982,plain,(
  ( ! [X10,X11] : (s(bool,'F_0') = s(bool,X11) | ~p(s(bool,X11)) | ~p(s(bool,X10)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f255,f774])).
fof(f1206,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') = s(bool,X9) | ~p(s(bool,X8)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f981,f608])).
fof(f981,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') = s(bool,X9) | ~p(s(bool,X8)) | ~p(s(bool,X9)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f255,f774])).
fof(f1188,plain,(
  ( ! [X37,X36] : (~p(s(bool,X36)) | s(bool,'F_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X36)) )),
  inference(duplicate_literal_removal,[],[f974])).
fof(f974,plain,(
  ( ! [X37,X36] : (~p(s(bool,X36)) | s(bool,'F_0') = s(bool,X37) | s(bool,'F_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f670,f774])).
fof(f1199,plain,(
  ( ! [X24,X25] : (~p(s(bool,X24)) | s(bool,'F_0') = s(bool,X25) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f963,f608])).
fof(f963,plain,(
  ( ! [X24,X25] : (~p(s(bool,X24)) | s(bool,'F_0') = s(bool,X25) | ~p(s(bool,X25)) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f255,f774])).
fof(f1198,plain,(
  ( ! [X23,X22] : (~p(s(bool,X22)) | s(bool,'F_0') = s(bool,X23) | s(bool,'T_0') = s(bool,X22)) )),
  inference(subsumption_resolution,[],[f962,f608])).
fof(f962,plain,(
  ( ! [X23,X22] : (~p(s(bool,X22)) | s(bool,'F_0') = s(bool,X23) | ~p(s(bool,X23)) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f255,f774])).
fof(f954,plain,(
  ( ! [X8,X7] : (~p(s(bool,X7)) | p(s(bool,X8)) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f282,f774])).
fof(f953,plain,(
  ( ! [X6,X5] : (~p(s(bool,X5)) | p(s(bool,X6)) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f278,f774])).
fof(f1195,plain,(
  ( ! [X4,X3] : (~p(s(bool,X3)) | p(s(bool,X4)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f952,f264])).
fof(f952,plain,(
  ( ! [X4,X3] : (~p(s(bool,X3)) | p(s(bool,X4)) | ~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f274,f774])).
fof(f950,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f261,f774])).
fof(f1194,plain,(
  ( ! [X8,X7] : (s(bool,'F_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X7) | ~p(s(bool,X7))) )),
  inference(subsumption_resolution,[],[f949,f608])).
fof(f949,plain,(
  ( ! [X8,X7] : (s(bool,'F_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X7) | ~p(s(bool,X7)) | ~p(s(bool,X8))) )),
  inference(superposition,[],[f774,f255])).
fof(f1191,plain,(
  ( ! [X6,X5] : (s(bool,'F_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5) | ~p(s(bool,X5))) )),
  inference(subsumption_resolution,[],[f948,f608])).
fof(f948,plain,(
  ( ! [X6,X5] : (s(bool,'F_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5) | ~p(s(bool,X6)) | ~p(s(bool,X5))) )),
  inference(superposition,[],[f774,f255])).
fof(f933,plain,(
  ( ! [X13] : (s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X13))) | s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X13)))) ) | $spl12),
  inference(cnf_transformation,[],[f933_D])).
fof(f933_D,plain,(
  ( ! [X13] : (s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X13))) | s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X13)))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f939,plain,(
  ( ! [X41,X40] : (sP23(sK71('const.conSem.Loc_1'(s('type.num.num',sK25)),'const.modSem.Loc_1'(s('type.num.num',sK25)),sK24),X40,X41)) ) | $spl16),
  inference(cnf_transformation,[],[f939_D])).
fof(f939_D,plain,(
  ( ! [X41,X40] : (sP23(sK71('const.conSem.Loc_1'(s('type.num.num',sK25)),'const.modSem.Loc_1'(s('type.num.num',sK25)),sK24),X40,X41)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f914,plain,(
  ( ! [X52,X53,X51] : (sP23(sK71('const.conSem.Loc_1'(s('type.num.num',sK25)),'const.modSem.Loc_1'(s('type.num.num',sK25)),sK24),X51,X52) | s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X53))) | s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X53)))) )),
  inference(resolution,[],[f486,f428])).
fof(f428,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP23(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f204])).
fof(f931,plain,(
  ( ! [X2] : (s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X2))) | s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X2)))) ) | $spl8),
  inference(cnf_transformation,[],[f931_D])).
fof(f931_D,plain,(
  ( ! [X2] : (s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X2))) | s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X2)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f909,plain,(
  ( ! [X41,X42,X40] : (sP23(sK71('const.conSem.Loc_1'(s('type.num.num',sK25)),'const.modSem.Loc_1'(s('type.num.num',sK25)),sK24),X40,X41) | s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X42))) | s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X42)))) )),
  inference(resolution,[],[f486,f423])).
fof(f423,plain,(
  ( ! [X4,X2,X0,X7,X5,X3,X1] : (sP23(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) )),
  inference(cnf_transformation,[],[f204])).
fof(f938,plain,(
  ( ! [X24,X25] : (sP15(sK71('const.conSem.Loc_1'(s('type.num.num',sK25)),'const.modSem.Loc_1'(s('type.num.num',sK25)),sK24),X24,X25)) ) | $spl14),
  inference(cnf_transformation,[],[f938_D])).
fof(f938_D,plain,(
  ( ! [X24,X25] : (sP15(sK71('const.conSem.Loc_1'(s('type.num.num',sK25)),'const.modSem.Loc_1'(s('type.num.num',sK25)),sK24),X24,X25)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f907,plain,(
  ( ! [X37,X35,X36] : (sP15(sK71('const.conSem.Loc_1'(s('type.num.num',sK25)),'const.modSem.Loc_1'(s('type.num.num',sK25)),sK24),X35,X36) | s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X37))) | s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X37)))) )),
  inference(resolution,[],[f486,f365])).
fof(f365,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP15(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f175])).
fof(f902,plain,(
  ( ! [X26,X24,X25] : (sP15(sK71('const.conSem.Loc_1'(s('type.num.num',sK25)),'const.modSem.Loc_1'(s('type.num.num',sK25)),sK24),X24,X25) | s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X26))) | s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X26)))) )),
  inference(resolution,[],[f486,f360])).
fof(f360,plain,(
  ( ! [X4,X2,X0,X7,X5,X3,X1] : (sP15(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) )),
  inference(cnf_transformation,[],[f175])).
fof(f932,plain,(
  ( ! [X0,X1] : (sP7(sK71('const.conSem.Loc_1'(s('type.num.num',sK25)),'const.modSem.Loc_1'(s('type.num.num',sK25)),sK24),X0,X1)) ) | $spl10),
  inference(cnf_transformation,[],[f932_D])).
fof(f932_D,plain,(
  ( ! [X0,X1] : (sP7(sK71('const.conSem.Loc_1'(s('type.num.num',sK25)),'const.modSem.Loc_1'(s('type.num.num',sK25)),sK24),X0,X1)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f896,plain,(
  ( ! [X12,X13,X11] : (sP7(sK71('const.conSem.Loc_1'(s('type.num.num',sK25)),'const.modSem.Loc_1'(s('type.num.num',sK25)),sK24),X11,X12) | s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X13))) | s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X13)))) )),
  inference(resolution,[],[f486,f300])).
fof(f300,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP7(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f146])).
fof(f891,plain,(
  ( ! [X2,X0,X1] : (sP7(sK71('const.conSem.Loc_1'(s('type.num.num',sK25)),'const.modSem.Loc_1'(s('type.num.num',sK25)),sK24),X0,X1) | s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X2))) | s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X2)))) )),
  inference(resolution,[],[f486,f295])).
fof(f295,plain,(
  ( ! [X4,X2,X0,X7,X5,X3,X1] : (sP7(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) )),
  inference(cnf_transformation,[],[f146])).
fof(f889,plain,(
  ( ! [X20] : (s(bool,'T_0') = s(bool,X20) | s(bool,'F_0') = s(bool,X20)) ) | $spl6),
  inference(cnf_transformation,[],[f889_D])).
fof(f889_D,plain,(
  ( ! [X20] : (s(bool,'T_0') = s(bool,X20) | s(bool,'F_0') = s(bool,X20)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f773,plain,(
  ( ! [X30,X29] : (s(bool,'T_0') = s(bool,X29) | s(bool,'F_0') = s(bool,X29) | ~p(s(bool,X30))) )),
  inference(resolution,[],[f670,f273])).
fof(f273,plain,(
  ( ! [X0] : (p(s(bool,'T_0')) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f137])).
fof(f771,plain,(
  ( ! [X26,X27] : (s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,X26) | p(s(bool,X27))) )),
  inference(resolution,[],[f670,f269])).
fof(f770,plain,(
  ( ! [X24,X25] : (s(bool,'T_0') = s(bool,X24) | s(bool,'F_0') = s(bool,X24) | p(s(bool,X25))) )),
  inference(resolution,[],[f670,f266])).
fof(f769,plain,(
  ( ! [X23,X22] : (s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,X22) | ~p(s(bool,X23))) )),
  inference(resolution,[],[f670,f264])).
fof(f768,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') = s(bool,X20) | s(bool,'F_0') = s(bool,X20) | p(s(bool,X21))) )),
  inference(resolution,[],[f670,f263])).
fof(f605,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))))) | $spl2),
  inference(cnf_transformation,[],[f605_D])).
fof(f605_D,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f522,plain,(
  ( ! [X11] : (s(bool,'F_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))))) | ~p(s(bool,X11))) )),
  inference(resolution,[],[f487,f261])).
fof(f606,plain,(
  ( ! [X10] : (s(bool,'F_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))))) | p(s(bool,X10))) )),
  inference(subsumption_resolution,[],[f521,f285])).
fof(f521,plain,(
  ( ! [X10] : (s(bool,'F_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))))) | p(s(bool,X10)) | ~p(s(bool,'T_0'))) )),
  inference(resolution,[],[f487,f274])).
fof(f520,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))))) | p(s(bool,X9))) )),
  inference(resolution,[],[f487,f278])).
fof(f519,plain,(
  ( ! [X8] : (s(bool,'F_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK25))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK25))))) | p(s(bool,X8))) )),
  inference(resolution,[],[f487,f282])).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 282
% Passive clauses: 2270
% Generated clauses: 5499
% Final active clauses: 149
% Final passive clauses: 2121
% Input formulas: 37
% Initial clauses: 251
% 
% Selected by SInE selection: 27
% SInE iterations: 1
% 
% Duplicate literals: 235
% Trivial inequalities: 25
% Fw subsumption resolutions: 808
% Fw demodulations: 42
% Bw demodulations: 126
% 
% Simple tautologies: 210
% Equational tautologies: 40
% Forward subsumptions: 1724
% 
% Binary resolution: 1122
% Factoring: 1
% Forward superposition: 2002
% Backward superposition: 866
% Self superposition: 44
% Equality factoring: 50
% Equality resolution: 10
% 
% Split clauses: 97
% Split components: 194
% SAT solver clauses: 112
% SAT solver unit clauses: 14
% SAT solver binary clauses: 27
% 
% Sat splits: 97
% Sat splitting refutations: 14
% 
% Memory used [KB]: 7164
% Time elapsed: 0.244 s
% ------------------------------
% ------------------------------
% Success in time 11.954 s
